{
  "subjects": {
    "java": {
      "name": "Java",
      "icon": "‚òï",
      "description": "Expert en programmation orient√©e objet Java",
      "expertise": {
        "key_concepts": [
          "Classes et objets",
          "H√©ritage et polymorphisme",
          "Encapsulation",
          "Interfaces et classes abstraites",
          "Collections (List, Set, Map)",
          "Gestion des exceptions",
          "Threads et concurrence",
          "Streams et API fonctionnelle",
          "Design patterns",
          "JVM et garbage collection"
        ],
        "evaluation_criteria": {
          "code_quality": "√âvaluation de la qualit√© du code, conventions de nommage, structure des classes",
          "oop_principles": "Application correcte des principes de la POO",
          "best_practices": "Respect des bonnes pratiques Java (SOLID, clean code)",
          "practical_examples": "Pertinence et clart√© des exemples de code",
          "error_handling": "Gestion appropri√©e des exceptions",
          "performance": "Consid√©rations de performance et optimisation"
        },
        "pedagogical_focus": [
          "Progression logique des concepts OOP",
          "Exemples concrets et pratiques",
          "Exercices de programmation adapt√©s",
          "Projets int√©grateurs",
          "Debugging et r√©solution de probl√®mes"
        ]
      },
      "analysis_prompt": "En tant qu'expert p√©dagogique Java, analysez ce document en vous concentrant sur la progression des concepts de programmation orient√©e objet, la qualit√© des exemples de code, l'application des design patterns, et la pertinence des exercices pratiques. √âvaluez particuli√®rement la clart√© des explications sur les classes, l'h√©ritage, le polymorphisme, et les collections Java."
    },
    "database": {
      "name": "Base de donn√©es",
      "icon": "üóÑÔ∏è",
      "description": "Expert en syst√®mes de gestion de bases de donn√©es",
      "expertise": {
        "key_concepts": [
          "Mod√®le relationnel",
          "Normalisation (1NF, 2NF, 3NF, BCNF)",
          "SQL (DDL, DML, DCL)",
          "Jointures et requ√™tes complexes",
          "Index et optimisation",
          "Transactions et ACID",
          "Contraintes d'int√©grit√©",
          "Proc√©dures stock√©es et triggers",
          "NoSQL et bases alternatives",
          "S√©curit√© des donn√©es"
        ],
        "evaluation_criteria": {
          "schema_design": "Qualit√© de la conception des sch√©mas de base de donn√©es",
          "normalization": "Application correcte des formes normales",
          "sql_queries": "Pertinence et efficacit√© des requ√™tes SQL",
          "data_integrity": "Gestion des contraintes et de l'int√©grit√© des donn√©es",
          "performance": "Optimisation des requ√™tes et utilisation des index",
          "security": "Aspects de s√©curit√© et gestion des acc√®s"
        },
        "pedagogical_focus": [
          "Progression du mod√®le conceptuel au mod√®le physique",
          "Exemples de sch√©mas r√©alistes",
          "Exercices de requ√™tage progressifs",
          "Cas d'usage concrets",
          "Bonnes pratiques de conception"
        ]
      },
      "analysis_prompt": "En tant qu'expert p√©dagogique en bases de donn√©es, analysez ce document en vous concentrant sur la progression des concepts de mod√©lisation, la qualit√© des sch√©mas pr√©sent√©s, la pertinence des requ√™tes SQL, l'application des r√®gles de normalisation, et l'efficacit√© des exercices pratiques. √âvaluez particuli√®rement la clart√© des explications sur les jointures, les contraintes d'int√©grit√©, et l'optimisation des performances."
    },
    "python": {
      "name": "Python",
      "icon": "üêç",
      "description": "Expert en programmation Python et ses applications",
      "expertise": {
        "key_concepts": [
          "Syntaxe et structures de donn√©es Python",
          "Programmation orient√©e objet en Python",
          "Modules et packages",
          "Gestion des fichiers et exceptions",
          "Programmation fonctionnelle",
          "D√©corateurs et m√©taclasses",
          "Biblioth√®ques standard",
          "Data Science (NumPy, Pandas, Matplotlib)",
          "Web development (Flask, Django)",
          "Testing et debugging"
        ],
        "evaluation_criteria": {
          "pythonic_code": "Respect des conventions Python (PEP 8, idiomes Python)",
          "data_structures": "Utilisation appropri√©e des structures de donn√©es Python",
          "libraries": "Int√©gration et utilisation des biblioth√®ques",
          "code_organization": "Organisation du code en modules et packages",
          "error_handling": "Gestion des exceptions et debugging",
          "practical_applications": "Applications concr√®tes et projets r√©alistes"
        },
        "pedagogical_focus": [
          "Progression de la syntaxe de base aux concepts avanc√©s",
          "Exemples interactifs et pratiques",
          "Projets d'application r√©els",
          "Bonnes pratiques de d√©veloppement",
          "√âcosyst√®me Python et biblioth√®ques"
        ]
      },
      "analysis_prompt": "En tant qu'expert p√©dagogique Python, analysez ce document en vous concentrant sur la progression des concepts Python, la qualit√© du code pr√©sent√©, l'utilisation des biblioth√®ques appropri√©es, le respect des conventions Python (PEP 8), et la pertinence des exercices pratiques. √âvaluez particuli√®rement la clart√© des explications sur les structures de donn√©es, la programmation orient√©e objet, et les applications pratiques."
    },
    "algorithms": {
      "name": "Algorithmique",
      "icon": "üßÆ",
      "description": "Expert en algorithmique et structures de donn√©es",
      "expertise": {
        "key_concepts": [
          "Complexit√© algorithmique (Big O)",
          "Structures de donn√©es (listes, piles, files, arbres, graphes)",
          "Algorithmes de tri et de recherche",
          "R√©cursivit√© et programmation dynamique",
          "Algorithmes gloutons",
          "Algorithmes de graphes (parcours, plus court chemin)",
          "Hachage et tables de hachage",
          "Algorithmes de cha√Ænes de caract√®res",
          "Optimisation et heuristiques",
          "Preuves de correction et d'efficacit√©"
        ],
        "evaluation_criteria": {
          "complexity_analysis": "Analyse correcte de la complexit√© temporelle et spatiale",
          "algorithm_design": "Conception d'algorithmes efficaces et corrects",
          "data_structure_choice": "Choix appropri√© des structures de donn√©es",
          "mathematical_rigor": "Rigueur math√©matique dans les preuves et analyses",
          "implementation": "Qualit√© de l'impl√©mentation des algorithmes",
          "optimization": "Techniques d'optimisation et am√©lioration des performances"
        },
        "pedagogical_focus": [
          "Progression logique des concepts algorithmiques",
          "Analyse de complexit√© syst√©matique",
          "Exemples d'impl√©mentation clairs",
          "Exercices de conception d'algorithmes",
          "Comparaison d'approches alternatives"
        ]
      },
      "analysis_prompt": "En tant qu'expert p√©dagogique en algorithmique, analysez ce document en vous concentrant sur la rigueur de l'analyse de complexit√©, la progression des structures de donn√©es, la qualit√© des algorithmes pr√©sent√©s, la clart√© des preuves de correction, et la pertinence des exercices de conception. √âvaluez particuli√®rement la progression p√©dagogique des concepts, de la complexit√© simple aux algorithmes avanc√©s."
    }
  }
}