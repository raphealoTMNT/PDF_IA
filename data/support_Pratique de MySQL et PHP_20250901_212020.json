{
  "filename": "support_Pratique de MySQL et PHP.pdf",
  "extraction_date": "2025-09-01T21:20:20.700013",
  "statistics": {
    "word_count": 175560,
    "character_count": 1064309,
    "line_count": 19193
  },
  "top_keywords": [
    [
      "dans",
      1579
    ],
    [
      "pour",
      1362
    ],
    [
      "avec",
      821
    ],
    [
      "mysql",
      680
    ],
    [
      "peut",
      633
    ],
    [
      "this",
      595
    ],
    [
      "table",
      575
    ],
    [
      "exemple",
      523
    ],
    [
      "tableau",
      515
    ],
    [
      "base",
      503
    ]
  ],
  "extracted_data": {
    "emails": [
      "rigaux@lri.fr",
      "fogg@foo.fr",
      "fogg@verne.fr",
      "doe@void.com",
      "fogg@cartier.cnam.fr",
      "rigaux@dauphine.fr"
    ],
    "urls": [
      "http://www.php.net",
      "http://localhost/Films.php?titre=Le+Saint&annee=1978&genre=C",
      "http://localhost/zscope",
      "http://localhost/zscope/application",
      "http://webscope.cvs.sourceforge.net",
      "http://zscope.local/",
      "http://www.eclipse.org/pdt/",
      "http://localhost/phpMyAdmin/",
      "http://www.lamsade.dauphine.fr/rigaux/mysqlphp/index.html",
      "http://serveur/webscope/index.php",
      "http://zscope.local/model/simpletbl",
      "http://svnbook.red-bean.com/.",
      "http://www.eclipse.org",
      "http://serveur/Connect.inc",
      "http://framework.zend.com/",
      "http://www.jclark.com",
      "http://zscope.local",
      "http://www.phpdoc.org/",
      "http://www.apachefriends.org/en/xampp.html",
      "http://serveur/webscope/index.php?ctrl=test&action=index",
      "http://localhost/zscope/www",
      "http://zscope.local/essai.php.",
      "http://us.imdb.com/Title?Vertigo,",
      "http://www.lamsade.dauphine.fr/rigaux/webscope",
      "http://serveur/webscope/index.php?ctrl=",
      "http://zmax.local",
      "http://webscope.sourceforge.net",
      "http://www.mamp.info/en/index.php",
      "http://localhost/phpdoc",
      "http://serveur/webscope/?ctrl=test",
      "http://download.eclipse.org/tools/pdt/updates",
      "http://www.lamsade.dauphine.fr/rigaux/mysqlphp",
      "http://www.phpunit.de",
      "http://localhost/phpinfo.php",
      "http://www.w3c.org/dom."
    ],
    "dates": [
      "31/10/2008",
      "01/01/1970",
      "1/01/1970",
      "01/01/01"
    ]
  },
  "content_preview": "études  développement\nPratiQue de\nMySQL\net PHP\nConception et réalisation\nde sites web dynamiques\nPhilippe Rigaux\n4e édition\n\nPRATIQUE DE\nMySQL\nET PHP\nPHP 6 et MySQL 5\nCréez des sites web dynamiquesLarry Ullman688 pagesDunod, 2008\nAjax et PHP\nComment construire\ndes applications web réactives\nChristian Darie, Bogdan Brinzarea,\nFilip Chereches-Tosa,\nMihai Bucica\n312 pages\nDunod, 2007\nEJB 3Des concepts à l’écriture du code.Guide du développeurSUPINFO Laboratoire des technologies SUN368 pagesDunod, 2...",
  "full_content": "études  développement\nPratiQue de\nMySQL\net PHP\nConception et réalisation\nde sites web dynamiques\nPhilippe Rigaux\n4e édition\n\nPRATIQUE DE\nMySQL\nET PHP\nPHP 6 et MySQL 5\nCréez des sites web dynamiquesLarry Ullman688 pagesDunod, 2008\nAjax et PHP\nComment construire\ndes applications web réactives\nChristian Darie, Bogdan Brinzarea,\nFilip Chereches-Tosa,\nMihai Bucica\n312 pages\nDunod, 2007\nEJB 3Des concepts à l’écriture du code.Guide du développeurSUPINFO Laboratoire des technologies SUN368 pagesDunod, 2008\n\nPRATIQUE DE\nMySQL\nET PHP\nConception et réalisation\nde sites web dynamiques\nPhilippe Rigaux\nProfesseur des universités à Paris-Dauphine\net consultant en entreprises\n4e édition\nToutes les marques citées dans cet ouvrage sont des\nmarques déposées par leurs propriétaires respectifs.\nLes trois premières éditions de cet ouvrage \nont été publiées par O’Reilly France\nIllustration de couverture : Abejarucos © Juan Pablo Fuentes\nSerrano Fotolia.com\n© Dunod, Paris, 2009\nISBN 978-2-10-053752-5 \nTable des matières\nAvant-propos ............................................................... x v\nPremière partie – Programmation web avec MySQL/PHP\nChapitre 1 – Introduction à MySQL et PHP ................... ............... 3\n1 . 1 I n t r o d u c t i o na uW e be tàl ap r o g r a m m a t i o nw e b........................... 3\n1.1.1 Serveurs web ........................................................ 4\n1.1.2 Documents web : le langage XHTML ................... ................ 4\n1.1.3 Programmation web ......................... ......................... 7\n1.1.4 Sessions ........................................... ................. 1 6\n1.2 Programmation web avec MySQL et PH P.................. ............... 1 8\n1.2.1 MySQL .................... ........................................ 1 8\n1.2.2 PHP ................................. ................. ............. 2 0\n1 . 3 U n ep r e m i è r eb a s eM y S Q L .............................. ................ 2 4\n1.3.1 Création d’une table ........................... ....................... 2 5\n1.3.2 L’utilitaire mysql ..................................................... 2 5\n1.3.3 L’interface PhpMyAdmin ............................................. 3 4\n1.4 Accès à MySQL avec PHP ........................... .................... 3 6\n1.4.1 L’interface MySQL/PHP ......................... ..................... 3 7\n1.4.2 Formulaires d’interrogation ............................................ 4 2\n1.4.3 Formulaires de mises à jour ............................................ 4 6\nvi\n Pratique de MySQL et PHP\nChapitre 2 – Techniques de base ........................... ................... 5 5\n2.1 Programmation avec fonctions . . . . . . ..................................... 5 6\n2.1.1 Création de fonctions ................................................. 5 6\n2.1.2 Utilisation des fonctions ............................................... 5 9\n2.1.3 À propos de require etinclude ..................... ................ 6 0\n2.1.4 Passage par valeur et passage par référence ............................... 6 1\n2.2 Traitement des données transmises par H T T P.............. ................ 6 4\n2.2.1 Échappement et codage des données HTTP .............................. 6 7\n2.2.2 Contrôle des données HTTP ....................... ................... 7 0\n2.2.3 Comment insérer dans la base de données : insertion dans MySQL ........... 7 2\n2.2.4 Traitement de la réponse .......................... .................... 7 4\n2.2.5 Comment obtenir du texte « pur » : envoi de l’e-mail ...................... 7 6\n2.2.6 En résumé : traitement des requêtes et des réponses ........................ 7 7\n2.3 Mise à jour d’une base par formulaire . . .................... ................ 7 8\n2.3.1 Script d’insertion et de mise à jour .................... .................. 7 8\n2.3.2 Validation des données et expressions régulières ........................... 8 6\n2.4 Transfert et gestion de ﬁchiers . . . . . . . ..................................... 9 0\n2.4.1 Transfert du client au serveur ....................... ................... 9 1\n2.4.2 Transfert du serveur au client ....................... ................... 9 5\n2 . 5 S e s s i o n s............................ ..................... ............... 9 8\n2.5.1 Comment gérer une session web ? ...................... ................. 9 9\n2.5.2 Gestion de session avec cookies ......................................... 1 0 1\n2.5.3 Prise en charge des sessions dans PHP ................... ................ 1 0 6\n2.6 SQL dynamique et afﬁchage multi-pages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n2.6.1 Afﬁchage d’une requête dynamique .................... ................. 1 1 0\n2.6.2 Afﬁchage multi-pages ......................... ........................ 1 1 1\nChapitre 3 – Programmation objet ........................ .................... 1 1 5\n3.1 Tour d’horizon de la programmation obj e t.................. ............... 1 1 6\n3.1.1 Principes de la programmation objet ..................................... 1 1 7\n3.1.2 Objets et classes ............................ ......................... 1 2 0\n3.1.3 Les exceptions ....................................................... 1 2 4\n3.1.4 Spécialisation : classes et sous-classes .................................... 1 2 6\n3.1.5 Spécialisation et classes abstraites : la classe BD............................ 1 2 9\nTable des matières\n vii\n3.1.6 Résumé ............................................................. 1 3 8\n3.2 La classe Tableau .............................. ......................... 1 4 0\n3.2.1 Conception ........................................ ................. 1 4 0\n3.2.2 Utilisation .................... ...................................... 1 4 4\n3.2.3 Implantation ........................................................ 1 4 8\n3.3 La classe Formulaire ................................................... 1 5 2\n3.3.1 Conception ........................................ ................. 1 5 2\n3.3.2 Utilisation .................... ...................................... 1 5 4\n3.3.3 Implantation ........................................................ 1 5 7\n3.4 La classe IhmBD ..................... ..................... ............... 1 6 7\n3.4.1 Utilisation .................... ...................................... 1 6 8\n3.4.2 Implantation ........................................................ 1 7 1\nDeuxième partie – Conception et création d’un site\nChapitre 4 – Création d’une base MySQL ..................... ................ 1 8 1\n4 . 1 C o n c e p t i o nd el ab a s e................ ................................... 1 8 1\n4.1.1 Bons et mauvais schémas .......................... .................... 1 8 1\n4.1.2 Principes généraux ............................. ...................... 1 8 5\n4.1.3 Création d’un schéma E/A ............................................ 1 8 7\n4.2 Schéma de la base de données . . . . . . . . . ................................... 1 9 3\n4.2.1 Transcription des entités ............................................... 1 9 3\n4.2.2 Associations de un à plusieurs ..................... ..................... 1 9 4\n4.2.3 Associations de plusieurs à plusieurs ..................... ................ 1 9 5\n4.3 Création de la base Films a v e cM y S Q L.............. ...................... 1 9 7\n4.3.1 Tables .............................................................. 1 9 8\n4.3.2 Contraintes .......................................... ............... 1 9 9\n4.3.3 Modiﬁcation du schéma ......................... ...................... 2 0 4\nChapitre 5 – Organisation du développement .................................. 2 0 7\n5 . 1 C h o i xd e so u t i l s................... ...................................... 2 0 8\n5.1.1 Environnement de développement intégré Eclipse .......................... 2 0 8\n5.1.2 Développement en équipe : Subversion ................. ................. 2 1 0\n5.1.3 Production d’une documentation avec PhpDoc ............................ 2 1 3\nviii\n Pratique de MySQL et PHP\n5.1.4 Tests unitaires avec PhpUnit ...................... ..................... 2 1 6\n5.1.5 En résumé .......................................................... 2 2 0\n5 . 2 G e s t i o nd e se r r e u r s...................................................... 2 2 1\n5.2.1 Erreurs syntaxiques ............................ ...................... 2 2 2\n5.2.2 Gestion des erreurs en PHP ....................... .................... 2 2 5\n5.2.3 Les exceptions PHP ............................ ...................... 2 2 7\n5.2.4 Gestionnaires d’erreurs et d’exceptions .................................. 2 3 0\n5.3 Portabilité multi-SGBD. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233\n5.3.1 Précautions syntaxiques ............................................... 2 3 3\n5.3.2 Le problème des séquences ............................................. 2 3 5\n5.3.3 PDO, l’interface générique d’accès aux bases relationnelles ................. 2 3 8\nChapitre 6 – Architecture du site : le pattern MVC ............................ 2 4 1\n6.1 Le motif de conception MVC . . . . . . . . . ................................... 2 4 2\n6.1.1 Vue d’ensemble ............................. ......................... 2 4 2\n6.1.2 Le modèle ........................................................... 2 4 3\n6.1.3 La vue ............................................................. 2 4 3\n6.1.4 Contrôleurs et actions .......................... ...................... 2 4 3\n6.1.5 Organisation du code et conventions ..................... ............... 2 4 3\n6 . 2 S t r u c t u r ed ’ u n ea p p l i c a t i o nM V C:c o n t r ô l e u r se ta c t i o n s................... 2 4 5\n6.2.1 Le ﬁchier index.php ........................... ....................... 2 4 5\n6.2.2 Le contrôleur frontal ........................... ....................... 2 4 8\n6.2.3 Créer des contrôleurs et des actions .................... ................. 2 4 9\n6.3 Structure d’une application MVC : la v u e.................................. 2 5 1\n6.3.1 Les templates ............................. ........................... 2 5 2\n6.3.2 Combiner des templates ........................ ....................... 2 5 6\n6.3.3 Utilisation d’un moteur de templates comme vue MVC .................... 2 6 0\n6.3.4 Exemple complet ............................ ......................... 2 6 1\n6.3.5 Discussion ............................... ........................... 2 6 5\n6 . 4 S t r u c t u r ed ’ u n ea p p l i c a t i o nM V C:l em o d è l e.............................. 2 6 7\n6.4.1 Modèle et base de données : la classe TableBD ........................... 2 6 7\n6.4.2 Un exemple complet de saisie et validation de données ...................... 2 7 3\n6.4.3 Pour conclure ....................................................... 2 7 7\nTable des matières\n ix\nChapitre 7 – Production du site .............................................. 2 7 9\n7 . 1 A u t h e n t i ﬁ c a t i o n........................................................ 2 8 0\n7.1.1 Problème et solutions .......................... ....................... 2 8 0\n7.1.2 Contrôleur d’authentiﬁcation et de gestion des sessions ..................... 2 8 1\n7.1.3 Les actions de login et de logout ........................................ 2 8 6\n7 . 2 R e c h e r c h e ,p r é s e n t a t i o n ,n o t a t i o nd e sﬁ l m s................................ 2 8 9\n7.2.1 Outil de recherche et jointures SQL .................... ................. 2 8 9\n7.2.2 Notation des ﬁlms ............................ ........................ 2 9 5\n7.3 Afﬁchage des ﬁlms et forum de discussi o n.................. ................ 2 9 9\n7 . 4 R e c o m m a n d a t i o n s..................................... ................. 3 0 4\n7.4.1 Algorithmes de prédiction .............................................. 3 0 5\n7.4.2 Agrégation de données avec SQL .................... ................... 3 0 7\n7.4.3 Recommandations de ﬁlms ........................ ..................... 3 0 9\nChapitre 8 – XML .................... ...................... ................. 3 1 7\n8 . 1 I n t r o d u c t i o nàX M L................. ..................... ............... 3 1 8\n8.1.1 Pourquoi XML ? ........................... .......................... 3 1 9\n8.1.2 XML et HTML ............................ ......................... 3 2 0\n8.1.3 Syntaxe de XML ............................ ......................... 3 2 0\n8.2 Export de données XML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323\n8.2.1 Comment passer d’une base MySQL à XML ............................. 3 2 3\n8.2.2 Application avec PHP ......................... ....................... 3 2 8\n8.3 Import de données XML dans MySQL . . .................. ................ 3 3 2\n8.3.1 SimpleXML .................... ..................................... 3 3 3\n8.3.2 L’API SAX ......................................................... 3 3 5\n8.3.3 Une classe de traitement de documents XML ............................. 3 3 9\n8.4 Mise en forme de documents avec XSLT ................................... 3 4 8\n8.4.1 Quelques mots sur XSLT ........................... ................... 3 4 9\n8.4.2 Application d’un programme XSLT avec PHP ............................ 3 5 3\nx\n Pratique de MySQL et PHP\nTroisième partie – Compléments\nChapitre 9 – Introduction au Zend Framework ................... ............. 3 5 7\n9 . 1 M i s ee nr o u t e........................ ................................... 3 5 8\n9.1.1 Installation d’une application ZF .................... ................... 3 5 8\n9.1.2 Redirection des requêtes avec le ZF ...................................... 3 5 9\n9.1.3 Organisation et conventions ...................... ..................... 3 6 0\n9.1.4 Routage des requêtes dans une application Zend ........................... 3 6 2\n9.1.5 Conﬁguration ..................... ................... ............... 3 6 5\n9.1.6 Connexion à la base de données ....................... ................. 3 6 6\n9.1.7 Le registre .......................................................... 3 6 7\n9.1.8 Contrôleurs, actions et vues ...................... ..................... 3 6 7\n9.2 Accès à la base de données . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369\n9.2.1 Interrogation .................... ..................... ............... 3 7 0\n9.2.2 Insertion et mise à jour ................................................ 3 7 2\n9.3 Le MVC du Zend Framework. . . . . . . . . . . ................... ............... 3 7 3\n9.3.1 L’objet request ............................. ........................ 3 7 3\n9.3.2 L’objet response ........................... ........................ 3 7 4\n9.3.3 Gérer les exceptions .................................................. 3 7 4\n9.4 La vue dans le Zend Framework . . . . . . . ................................... 3 7 6\n9.4.1 Les vues sont des scripts PHP .......................................... 3 7 6\n9.4.2 Le layout .......................................... ................. 3 7 7\n9.4.3 Créer des Helpers .......................... .......................... 3 7 8\n9.5 Le composant Modèle d uZ e n dF r a m e w o r k.......... ....................... 3 7 9\n9.5.1 L’ORM du Zend Framework .......................................... 3 7 9\n9.5.2 Le modèle ORM de l’application ...................... ................. 3 8 0\n9.5.3 Manipulation des données avec les classes ORM .......................... 3 8 3\n9 . 6 P o u rc o n c l u r e... ........................................ ............... 3 8 5\nChapitre 10 – Récapitulatif SQL ........................ ..................... 3 8 7\n1 0 . 1 S é l e c t i o n s............................................. ................. 3 8 8\n10.1.1 Renommage, fonctions et constantes ..................... ............... 3 8 9\n10.1.2 La clause DISTINCT ................................................. 3 9 2\n10.1.3 La clause ORDER BY .......................... ....................... 3 9 3\nTable des matières\n xi\n10.1.4 La clause WHERE ............................. ........................ 3 9 3\n10.1.5 Dates ...................... ........................................ 3 9 6\n10.1.6 Valeurs nulles ........................................ ............... 3 9 6\n10.1.7 Clauses spéciﬁques à MySQL ....................... ................... 3 9 8\n1 0 . 2 J o i n t u r e s............................................................... 3 9 9\n10.2.1 Interprétation d’une jointure ...................... ..................... 3 9 9\n10.2.2 Gestion des ambiguïtés ................................................ 4 0 1\n10.2.3 Jointures externes .................. ................... ............... 4 0 4\n1 0 . 3 O p é r a t i o n se n s e m b l i s t e s............. ..................... ............... 4 0 5\n1 0 . 4 R e q u ê t e si m b r i q u é e s................ ..................................... 4 0 6\n10.4.1 Exemples de requêtes imbriquées ........................................ 4 0 7\n10.4.2 Requêtes corrélées .............................. ...................... 4 0 9\n10.4.3 Requêtes avec négation ................................................ 4 1 1\n10.5 Agrégation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413\n10.5.1 La clause GROUP BY .................................................. 4 1 3\n10.5.2 La clause HAVING .......................... .......................... 4 1 5\n1 0 . 6 M i s e sàj o u r......................... ..................... ............... 4 1 6\n10.6.1 Insertion ................................ ............................ 4 1 6\n10.6.2 Destruction ............................. ............................ 4 1 7\n10.6.3 Modiﬁcation ........................................................ 4 1 7\nChapitre 11 – Récapitulatif PHP ........................ ..................... 4 1 9\n1 1 . 1 G é n é r a l i t é s......................... ..................... ............... 4 1 9\n11.1.1 Commentaires ....................................................... 4 2 0\n11.1.2 Variables et littéraux ........................... ....................... 4 2 0\n11.1.3 Constantes ........................................... ............... 4 2 1\n1 1 . 2 T y p e s............................................ ...................... 4 2 2\n11.2.1 Types numériques et booléens .......................................... 4 2 2\n11.2.2 Chaînes de caractères .......................... ....................... 4 2 2\n11.2.3 Tableaux .................... ..................... .................. 4 2 3\n11.2.4 Conversion et typage ......................... ........................ 4 2 5\n1 1 . 3 E x p r e s s i o n s.............................................. ............... 4 2 6\nxii\n Pratique de MySQL et PHP\n1 1 . 4 O p é r a t e u r s.............................................. ............... 4 2 7\n11.4.1 Concaténation de chaînes ............................................. 4 2 8\n11.4.2 Incrémentations ............................ ......................... 4 2 8\n11.4.3 Opérateurs de bits ............................ ........................ 4 2 9\n11.4.4 Opérateurs logiques ............................ ...................... 4 2 9\n1 1 . 5 S t r u c t u r e sd ec o n t r ô l e.............. ..................................... 4 3 0\n11.5.1 Tests ............................................. .................. 4 3 1\n11.5.2 Boucles ............................................ ................. 4 3 2\n11.5.3 Les instructions break etcontinue ................................... 4 3 4\n1 1 . 6 F o n c t i o n s............................................. ................. 4 3 5\n11.6.1 Passage des arguments .......................... ...................... 4 3 5\n11.6.2 Valeurs par défaut .................................................... 4 3 7\n11.6.3 Fonctions et variables .......................... ....................... 4 3 7\n11.7 Programmation orientée-objet . . . . . . ..................... ................. 4 4 0\n11.7.1 Classes et objets ............................. ........................ 4 4 0\n11.7.2 Constructeurs et destructeurs .......................................... 4 4 1\n11.7.3 Sous-classes ......................................................... 4 4 2\n11.7.4 Manipulation des objets ............................................... 4 4 2\n11.7.5 Compléments ........................................................ 4 4 3\nQuatrième partie – Annexes\nAnnexe A – Installation Apache/PHP/MySQL ................................ 4 4 7\nA.1 Mot de passe root ...................................................... 4 4 7\nA.2 Création de bases et d’utilisateurs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 448\nA.2.1 La commande GRANT ........................... ...................... 4 4 9\nA.2.2 Modiﬁcation des droits d’accès ...................... ................... 4 5 1\nA . 3 F i c h i e r sd ec o n ﬁ g u r a t i o n................................................. 4 5 2\nA.3.1 Format d’un ﬁchier de conﬁguration .................... ................ 4 5 2\nA.3.2 Les différents ﬁchiers ................................................. 4 5 2\nA.3.3 Conﬁguration du serveur ......................... ..................... 4 5 3\nA.3.4 Conﬁguration d’un compte administrateur ................. .............. 4 5 4\nA.4 Sauvegardes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 455\nA . 5 p h p M y A d m i n........................................... ............... 4 5 7\nTable des matières\n xiii\nAnnexe B – Référence MySQL ........................ ....................... 4 6 1\nB . 1 T y p e sd ed o n n é e sM y S Q L............. .................. ................. 4 6 1\nB . 2 C o m m a n d e sd eM y S Q L............... ................... ............... 4 6 5\nB . 3 F o n c t i o n sM y S Q L.................. ...................... ............... 4 7 5\nAnnexe C – Fonctions PHP .................................................. 4 8 5\nC . 1 F o n c t i o n sg é n é r a l e s..................................................... 4 8 6\nC . 2 C h a î n e sd ec a r a c t è r e s................. .................. ................. 4 9 3\nC . 3 D a t e s.................................................................. 4 9 6C . 4 T a b l e a u x.......................... ...................... ............... 4 9 7\nC . 5 F o n c t i o n sX M L..................... ..................... ............... 5 0 0\nC.6 Accès aux ﬁchiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 504C . 7 I n t e r f a c eP H P / M y S Q L.............. ...................... ............... 5 0 7\nIndex général ............................................................... 5 1 7\nIndex des fonctions PHP .................................................... 5 2 3\nIndex des commandes SQL ........................... ....................... 5 2 7\nTable des ﬁgures .......................................... .................. 5 3 1\n\nAvant-propos\nQuand la première édition de ce livre est parue, en janvier 2001, la réputation de\nMySQL et de PHP était déjà bien établie. Ces deux outils étaient connus pourêtre ﬁables, performants, pratiques et bien adaptés à une utilisation très spécialisée :la production dynamique de pages HTML. En revanche, pris isolément et dansun contexte plus général de développement d’applications bases de données, niMySQL ni PHP ne semblaient en mesure de rivaliser avec des logiciels commerciauxnettement plus puissants et complets.\nHuit ans après cette première édition tout ou presque a changé. MySQL est un\nSGBD reconnu, doté de toutes les fonctionnalités requises pour un système relation-nel. La version 5 (et bientôt la version 6) de PHP est maintenant bien installée etconstitue un langage de programmation abouti que ses concepteurs et développeurs\nse sont acharnés à améliorer pour le placer au même niveau que Java ou le C++.\nDe plus la maturité de ces deux outils a favorisé la parution d’environnementsde développement avancés, incluant tous les outils d’ingénierie logicielle (éditeursintégrés, production de documentation, bibliothèques de fonctionnalités prêtes àl’emploi, débogueurs, etc.) qui les rendent aptes à la production de logiciels répon-dant à des normes de qualités professionnelles. Même pour des projets d’entrepriseimportants (plusieurs années-homme), l’association MySQL/PHP est devenue tout àfait compétitive par rapport à d’autres solutions parfois bien plus lourdes à concevoir,mettre en place et entretenir.\nObjectifs et contenu de ce livre\nCe livre présente l’utilisation de MySQL et de PHP pour la production et l’ex-ploitation de sites web s’appuyant sur une base de données. Son principal objectifest d’exposer de la manière la plus claire et la plus précise possible les techniquesutilisées pour la création de sites web interactifs avec MySQL/PHP . Il peut s’énoncersimplement ainsi :\nDonner au lecteur la capacité à résoudre lui-même tous les problèmes rencontrés\ndans ce type de développement, quelle que soit leur nature ou leur difﬁculté.\nCe livre n’énumère pas toutes les fonctions PHP : il en existe des milliers et onles trouve très facilement dans la documentation en ligne sur http://www.php.net ,\ntoujours plus complète et à jour que n’importe quel ouvrage. Je ne donne pas non\nxvi\n Pratique de MySQL et PHP\nplus, sauf pour quelques exceptions, une liste de ressources sur le Web. Elles évoluent\nrapidement, et celles qui existent se trouvent de toute manière sans problème. Enrevanche, le livre vise à expliquer le plus clairement possible comment etpourquoi\non en arrive à utiliser telle ou telle technique, et tente de donner au lecteur lesmoyens d’intégrer ces connaissances pour pouvoir les réutiliser le moment venu dansses propres développements.\nLa lecture de chaque chapitre doit permettre de progresser un peu plus dans la\ncompréhension de la nature des problèmes (comment puis-je le résoudre ?) et de laméthode menant aux solutions (pourquoi PHP et MySQL sont-ils intéressants poury arriver concisément et élégamment ?). Les concepts et outils sont donc présentés\nd’une manière pratique ,progressive etcomplète .\n•Pratique. Ce livre ne contient pas d’exposé théorique qui ne soit justiﬁé\npar une application pratique immédiate. Les connaissances nécessaires sur laprogrammation PHP , le langage SQL ou les bases de données relationnellessont introduites au fur et à mesure des besoins de l’exposé.\n•Progressive . L’ordre de la présentation est conçu de manière à donner le plus\nrapidement possible des éléments concrets pour expérimenter toutes les tech-niques décrites. Le livre adopte ensuite une démarche très simple consistant àdétailler depuis le début les étapes de construction d’un site basé sur MySQLet PHP , en fournissant un code clair, concis et aisément adaptable.\n•Complète . Idéalement, un seul livre contiendrait toutes les informations\nnécessaires à la compréhension d’un domaine donné. C’est utopique en cequi concerne les techniques de gestion de sites web. J’ai cherché en revancheà être aussi complet que possible pour tout ce qui touche de près à la program-mation en PHP d’applications web s’appuyant sur une base de données.\nCe livre vise par ailleurs à promouvoir la qualité technique de la conception\net du développement, qui permettra d’obtenir des sites maintenables et évolutifs.MySQL et PHP sont des outils relativement faciles à utiliser, avec lesquels on obtientrapidement des résultats ﬂatteurs, voire spectaculaires. Cela étant, il est bien connuqu’il est plus facile de développer un logiciel que de le faire évoluer. Une réalisationbâclée, si elle peut faire illusion dans un premier temps, débouche rapidement sur desproblèmes récurrents dès qu’on entre en phase de maintenance et d’exploitation.\nUne seconde ambition, complémentaire de celle mentionnée précédemment,\nest donc d’introduire progressivement tout au long du livre des réﬂexions et desexemples qui montrent comment on peut arriver à produire des logiciels de plus en\nplus complexes en maîtrisant la conception, le développement et l’enrichissement\npermanent de leurs fonctionnalités. Cette maîtrise peut être obtenue par des tech-niques de programmation, par la mise en œuvre de concepts d’ingénierie logicielleéprouvés depuis de longues années et enﬁn par le recours à des environnementsde programmation avancés (les « frameworks »). Cette seconde ambition peut se\nrésumer ainsi :\nMontrer progressivement au lecteur comment on passe de la réalisation de sites\ndynamiques légers à des applications professionnelles soumises à des exigences\nfortes de qualité.\nAvant-propos\n xvii\nCette quatrième édition reprend pour l’essentiel Le contenu de la précédente,\navec des modiﬁcations visant, quand cela m’a semblé possible, à améliorer la clarté et\nla simplicité des exemples et des explications. J’ai ajouté un chapitre dédié aux envi-ronnements de programmation PHP/MySQL, en introduisant notamment le Zend\nFramework pour illustrer l’aboutissement actuel d’une démarche de normalisation de\nla production d’applications web basée sur des concepts qui ont fait leurs preuves. Cechapitre vient bien sûr en ﬁn d’ouvrage car il intéressera surtout ceux qui visent àréaliser des applications d’envergure. Les autres pourront se satisfaire des techniquesprésentées dans les chapitres précédents, qui demandent un apprentissage initialmoins ardu. Un souci constant quand on écrit ce genre d’ouvrage est de satisfairele plus grand nombre de lecteurs, quels que soient leurs connaissances de départ ouleurs centres d’intérêt. J’espère que les évolutions apportées et la réorganisation dulivre atteindront cet objectif.\nAudience et pré-requis\nCe livre est en principe auto-sufﬁsant pour ce qui concerne son sujet : la program-\nmation d’applications web dynamiques avec MySQL et PHP . Il est clair qu’au départ\nune compréhension des notions informatiques de base (qu’est-ce qu’un réseau, unﬁchier, un éditeur de texte, un langage de programmation, une compilation, etc.)est préférable. Je suppose également connues quelques notions préalables comme lanature de l’Internet et du Web, les notions de client web (navigateur) et de serveurweb, et les bases du langage HTML. On trouve très facilement des tutoriaux en lignesur ces sujets.\nLes techniques de programmation PHP , des plus simples (mise en forme HTML\nde données) aux plus complexes (divers exemples de programmation orientée-objet)sont introduites et soigneusement expliquées au fur et à mesure de la progression deschapitres. Le livre comprend également des exposés complets sur la conception de\nbases de données relationnelles et le langage SQL. Aucune connaissance préalable\nsur les bases de données n’est ici requise.\nUn site web complète ce livre, avec des exemples, le code de l’application\nW\nEBSCOPE dont je décris pas à pas la réalisation, des liens utiles et des compléments\nde documentation. Voici son adresse :\nhttp://www.lamsade.dauphine.fr/rigaux/mysqlphp\nLe « W EBSCOPE » dont le développement est traité de manière complète dans\nla seconde partie est une application de « ﬁltrage coopératif » consacrée au cinéma.Elle propose des outils pour rechercher des ﬁlms, récents ou classiques, consulterleur ﬁche, leur résumé, leur afﬁche. L’internaute peut également noter ces ﬁlms en\nleur attribuant une note de 1 à 5. À terme, le site dispose d’un ensemble sufﬁsant\nd’informations sur les goûts de cet internaute pour lui proposer des ﬁlms susceptiblesde lui plaire. Vous pouvez vous faire une idée plus précise de ce site en le visitant eten l’utilisant, à l’adresse suivante :\nhttp://www.lamsade.dauphine.fr/rigaux/webscope\nxviii\n Pratique de MySQL et PHP\nUne fois le code récupéré, vous pouvez bien sûr l’utiliser, le consulter ou le modi-\nﬁer pour vos propres besoins. Par ailleurs, si vous souhaitez vous initier aux techniques\nde développement en groupe, j’ai ouvert sur SourceForge.net un projet W EBSCOPE\nconsacré à ce site. Vous pourrez participer, avec d’autres lecteurs, à l’amélioration ducode ainsi qu’à son extension, et apprendre à utiliser des outils logiciels avancés pourle développement de logiciels Open Source .L es i t ed ec ep r o j e te s t\nhttp://webscope.sourceforge.net\nComment apprendre à partir du livre\nÀ l’issue de la lecture de ce livre, vous devriez maîtriser sufﬁsamment l’ensembledes concepts et outils nécessaires aux applications MySQL/PHP pour être autonome(ce qui n’exclut pas, au contraire, le recours aux diverses ressources et références\ndisponibles sur le Web). L’acquisition de cette maîtrise suppose bien entendu une\nimplication personnnelle qui peut s’appuyer sur les éléments suivants :\n1. la lecture attentive des explications données dans le texte ;\n2. l’utilisation des exemples fournis, leur étude et leur modiﬁcation partielle ;3. des exercices à réaliser vous-mêmes.\nPour tirer le meilleur parti des exemples donnés, il est souhaitable que vous dis-\nposiez dès le début d’un environnement de travail. Voici quelques recommandations\npour mettre en place cet environnement en moins d’une heure.\nLe serveur de données et le serveur web\nVous devez disposer d’un ordinateur équipé de MySQL et PHP . Il s’agit d’un envi-ronnement tellement standard qu’on trouve des packages d’installation partout. Les\nenvironnements Windows disposent de Xampp\n1et Mac OS de MAMP2. Ces logiciels\nse téléchargent et s’installent en quelques clics. Sous Linux ce n’est pas nécessaire-ment plus compliqué, mais l’installation peut dépendre de votre conﬁguration. Une\nrecherche « LAMP » sur le Web vous donnera des procédures d’installation rapide.\nLa configuration\nNormalement, les systèmes AMP (Apache-MySQL-PHP) sont conﬁgurés correcte-\nment et vous pouvez vous contenter de cette conﬁguration par défaut au début. Unaspect parfois sensible est le ﬁchier\nphp.ini qui contient l’ensemble des paramètres\nﬁxant la conﬁguration de PHP . La première chose à faire est de savoir où se trouvece ﬁchier. C’est assez simple : placez dans le répertoire htdocs de votre installation un\nﬁchier\nphpinfo.php avec le code suivant :\n<?php phpinfo(); ?>\n1.http://www.apachefriends.org/en/xampp.html\n2.http://www.mamp.info/en/index.php\nAvant-propos\n xix\nAccédez ensuite à l’URL http://localhost/phpinfo.php . Entre autres informations\nvous verrez l’emplacement de php.ini et tous les paramètres de conﬁguration. Proﬁtez\nde l’occasion pour vériﬁer les paramètres suivants (même si vous ne les comprenez\npas pour l’instant) :\n1.short_open_tags doit être à Off pour interdire d’utiliser des balises PHP\nabrégées ;\n2.display_errors devrait valoir On;\n3.file_upload devrait valoir On.\nCela devrait sufﬁre pour pouvoir débuter sans avoir de souci.\nLe navigateur\nVous devez utiliser un navigateur web pour tester les exemples et le site. Je vousrecommande fortement Firefox, qui présente l’avantage de pouvoir intégrer desmodules très utiles (les plugins) qui le personnalisent et l’adaptent à des tâches\nparticulières. L’extension Web Developer est particulièrement intéressante pour les\ndéveloppements web car elle permet de contrôler tous les composants transmis par le\nserveur d’une application web dynamique au navigateur.\nFigure 1 — Barre d’outils Web Developer\nLa ﬁgure 1 montre l’intégration de Web Developer à Firefox sous la forme d’une\nbarre d’outils offrant des possibilités d’inspection et de manipulation des composants\nCSS, JavaScript, cookies , etc. Ces possibilités s’avèrent extrêmement utiles pour la\nvériﬁcation des composants clients. Dans la mesure où il ne s’agit pas de notrepréoccupation principale pour ce livre, je ne détaille pas plus les possibilités offertes.\nUne fonction très simple et très utile est la validation du code HTML fourni\nau navigateur. La ﬁgure montre, sur la droite de la barre d’outils, des indicateurs\nxx\n Pratique de MySQL et PHP\nqui signalent un éventuel problème de conformité aux normes, etc. Ces indicateurs\ndevraient toujours être au vert. Tout le code HTML décrit dans ce livre est conformeaux normes, et je vous conseille d’adopter dès le début cette bonne habitude.\nL’extension s’installe comme toutes les autres dans Firefox, en passant par le menu\nOutils ,Modules complémentaires .\nL’environnement de développement\nUn simple éditeur de texte sufﬁt pour modiﬁer les exemples et créer vos propresscripts. Essayez de trouver quand même mieux que le bloc-note de Windows. Deslogiciels comme EditPlus ou UltraEdit font parfaitement l’affaire. Si vous souhaitezun outil plus avancé (mais plus difﬁcile à manier pour les débutants) je vous recom-mande bien entendu Eclipse ( http://www.eclipse.org ) avec l’utilisation d’une perspec-\ntive PHP . Le chapitre 5 présente brièvement cet environnement de développementintégré (IDE).\nExercices et exemples\nTous les exemples fournis, y compris le site complet dont la réalisation est intégrale-ment décrite, sont conçus pour répondre aux trois contraintes suivantes :\n1. ils sont testés et fonctionnent ;\n2. ils sont corrects, autrement dit chaque fragment de code donné en exemple a\nun objectif bien identiﬁé, et remplit cet objectif ;\n3. ils visent, autant que possible, à rester clairs et concis.\nCes contraintes, parfois difﬁciles à satisfaire, contribuent à montrer que l’on peut\ndévelopper des fonctionnalités parfois complexes en conservant un code accessible\net maîtrisable. Un avantage annexe, quoique appréciable, est de vous permettre\nfacilement d’obtenir, à partir d’un exemple qui tourne, une base de travail pour fairevos propres modiﬁcations et expérimentations.\nAllez sur le site du livre et récupérez le ﬁchier\nexemples.zip . Placez-le dans le\nrépertoire htdocs de votre environnement MySQL/PHP et extrayez les ﬁchiers. Si les\nserveurs sont démarrés, vous devriez pouvoir accéder à l’URL\nhtpp://localhost/exemples\net vous avez tous les exemples du livre (à l’exception de ceux intégrés au site\nWEBSCOPE ) sous la main pour travailler parallèlement à votre lecture.\nOrganisation\nCe livre comprend trois parties et des annexes.\n•La première partie est une présentation détaillée de toutes les techniques debase intervenant dans la construction de pages web basées sur MySQL et PHP :bases de la programmation web, création de tables MySQL, création de scriptsPHP , accès à MySQL avec PHP , etc.\nAvant-propos\n xxi\nCette partie comprend un chapitre qui explique comment réaliser les fonc-\ntions les plus courantes d’un site web dynamique : découpage d’un scripten fonctions, gestion de formulaires HTML, transfert et gestion de ﬁchiers,sessions et traitement des erreurs. Ces fonctions sont expliquées indépendam-ment d’une application particulière.Le dernier chapitre de cette partie est entièrement consacré à la programma-tion orientée-objet, et montre comment concevoir des modules (ou classes)\nqui facilitent ensuite considérablement les tâches répétitives et routinièrespendant le développement d’un site.\n•La deuxième partie est consacrée à la conception et à la réalisation complèted’un site web, comprenant la conception de la base, l’organisation du code etla méthode de développement, l’authentiﬁcation des utilisateurs et la produc-tion du site. Outre la génération, classique, des pages HTML, des chapitressont consacrés à l’utilisation de XML pour l’échange et la publication de\ndonnées, et à la production dynamique de graphiques.\n•La troisième partie propose une introduction à un environnement de déve-\nloppement avancé (le Zend Framework ) un récapitulatif du langage SQL,\ndéjà présenté de manière progressive dans les deux premières parties, et unrécapitulatif du langage PHP .\nUn ensemble d’annexes donnant en ordre alphabétique les principales com-\nmandes, options et utilitaires de MySQL et de PHP , ainsi que quelques conseilsd’administration, conclut le livre.\nConventions\nJ’utilise les conventions typographiques suivantes :\n•La police `a chasse constante s’applique à tous les exemples de code, de\ncommandes et de programmes, que ce soit un shellUNIX, SQL, PHP , etc.\n•La police `a chasse constante en italiques est utilisée pour distinguer\nles paramètres des mots-clés dans la syntaxe des commandes.\n•Le texte en italiques est utilisé pour les URL, les noms de ﬁchiers, de pro-\ngrammes et de répertoires cités dans le texte (autrement dit, non inclus dans\ndu code). L’italique est également utilisé pour les termes étrangers et pour la\nmise en valeur de mots ou d’expressions importants.\nDe plus, le code s’appuie sur des conventions précises pour nommer les ﬁchiers,\nles variables, les fonctions, les noms de tables, etc. Ces conventions font partie d’unestratégie générale de qualité du développement et seront présentées le moment venu.\nRemerciements\nJe souhaite remercier chaleureusement tous ceux qui sont à l’origine de ce livre,ont permis sa réalisation ou contribué à l’amélioration du manuscrit. Merci donc àBernd Amann, Joël Berthelin, Olivier Boissin, Bertrand Cocagne, Cécile, Hugues etManuel Davy, Jean-François Diart, Cédric du Mouza, David Gross, Cyrille Guyot,\nxxii\n Pratique de MySQL et PHP\nAlain Maës, Joël Patrick, Michel Scholl, François-Yves Villemin, Dan Vodislav,\nEmmanuel Waller et aux nombreux lecteurs qui m’ont suggéré des améliorations.\nJ’ai également bénéﬁcié des remarques et des conseils de personnes auxquelles je\ntiens à exprimer plus particulièrement ma reconnaissance : Robin Maltête avec quij’ai réalisé de nombreux sites et qui m’a apporté de nombreux problèmes stimulantsà résoudre ; Michel Zam pour des discussions très instructives sur la conception et laréalisation de logiciel robustes et élégants ; Xavier Cazin qui a été à l’origine de celivre et à qui je dois de très nombreuses et utiles remarques sur son contenu. Enﬁn,merci à Jean-Luc Blanc qui m’a accordé sa conﬁance et son temps pour la réalisation\nde cette quatrième édition.\nPREMIÈRE PARTIE\nProgrammation web\navec MySQL/PHP\n\nIntroduction à MySQL et PHP1\nCe chapitre est une introduction à l’association de MySQL et de PHP pour la\nproduction de documents « dynamiques », autrement dit créés à la demande parun programme. Nous commençons par une courte introduction au web et à laprogrammation web, limitée aux pré-requis indespensables pour comprendre la suitedu livre. Les lecteurs déjà familiers avec ces bases peuvent sauter sans dommage lasection 1.1.\n1.1 INTRODUCTION AU WEB ET À LA PROGRAMMATION\nWEB\nLeWorld-Wide Web (ou WWW, ou Web) est un grand – très grand – système\nd’information réparti sur un ensemble de sites connectés par le réseau Internet. Ce\nsystème est essentiellement constitué de documents hypertextes, ce terme pouvant être\npris au sens large : textes, images, sons, vidéos, etc. Chaque site propose un ensembleplus ou moins important de documents, transmis sur le réseau par l’intermédiaire d’unprogramme serveur. Ce programme serveur dialogue avec un programme client qui peut\nêtre situé n’importe où sur le réseau. Le programme client prend le plus souvent laforme d’un navigateur , grâce auquel un utilisateur du Web peut demander et consulter\ntrès simplement des documents. Le Web propose aussi des services ou des modes decommunication entre machines permettant d’effectuer des calculs répartis ou deséchanges d’information sans faire intervenir d’utilisateur : le présent livre n’aborde\npas ces aspects.\nLe dialogue entre un programme serveur et un programme client s’effectue selon\ndes règles précises qui constituent un protocole . Le protocole du Web est HTTP, mais\nil est souvent possible de communiquer avec un site viad’autres protocoles, comme\n4\n Chapitre 1. Introduction à MySQL et PHP\npar exemple FTP qui permet d’échanger des ﬁchiers. Ce livre n’entre pas dans le\ndétail des protocoles, même si nous aurons occasionnellement à évoquer certainsaspects de HTTP.\n1.1.1 Serveurs web\nUn site est constitué, matériellement, d’un ordinateur connecté à l’Internet, et d’unprogramme tournant en permanence sur cet ordinateur, le serveur. Le programme\nserveur est en attente de requêtes transmises à son attention sur le réseau par unprogramme client. Quand une requête est reçue, le programme serveur l’analyseaﬁn de déterminer quel est le document demandé, recherche ce document et le\ntransmet au programme client. Un autre type important d’interaction consiste pour\nle programme client à demander au programme serveur d’exécuter un programme, enfonction de paramètres, et de lui transmettre le résultat.\nLa ﬁgure 1.1 illustre les aspects essentiels d’une communication web pour l’accès\nà un document. Elle s’effectue entre deux programmes. La requête envoyée par le\nprogramme client est reçue par le programme serveur. Ce programme se charge de\nrechercher le document demandé parmi l’ensemble des ﬁchiers auxquels il a accès, ettransmet ce document.\nProgramme\nclient\nDocumentsrequêtes\ndocument(s)\ndocument(s)InternetProgramme\nserveur\nMachine du client\nMachine du serveur\nFigure 1.1 — Architecture web\nDans tout ce qui suit, le programme serveur sera simplement désigné par le terme\n« serveur » ou par le nom du programme particulier que nous utilisons, Apache.\nLes termes « navigateur » et « client » désigneront tous deux le programme client\n(Firefox, Safari, Internet Explorer, etc.). Enﬁn, le terme « utilisateur » (ou, parfois,\n« internaute »), sera réservé à la personne physique qui utilise un programme client.\n1.1.2 Documents web : le langage XHTML\nLes documents échangés sur le Web peuvent être de types très divers. Le principal estledocument hypertexte, un texte dans lequel certains mots, ou groupes de mots, sont\ndesliens,o u ancres , donnant accès à d’autres documents. Le langage qui permet de\n1.1 Introduction au Web et à la programmation web\n 5\nspéciﬁer des documents hypertextes, et donc de fait le principal langage du Web, est\nHTML.\nLa présentation de HTML dépasse le cadre de ce livre. Il existe de très nombreux\ntutoriaux sur le Web qui décrivent le langage (y compris XHTML, la variante utiliséeici). Il faut noter que HTML est dédié à la présentation des documents d’un site, et\nne constitue pas un langage de programmation. Son apprentissage (au moins pourun usage simple) est relativement facile. Par ailleurs, il existe de nombreux éditeursde documents HTML – on peut citer DreamWeaver ouFrontPage sous Windows,\nQuanta+ sous Linux – qui facilitent le travail de saisie des balises et fournissent une\naide au positionnement (ou plus exactement au pré-positionnement puisque c’estle navigateur qui sera en charge de la mise en forme ﬁnale) des différentes partiesdu document (images, menus, textes, etc.). Notre objectif dans ce livre n’étant pasd’aborder les problèmes de mise en page et de conception graphique de sites web,nous nous limiterons à des documents HTML relativement simples, en mettantl’accent sur leur intégration avec PHP et MySQL.\nVoici un exemple simple du type de document HTML que nous allons créer.\nNotez les indications en début de ﬁchier (DOCTYPE) qui déclarent un contenuseconformant à la norme XHTML.\nExemple 1.1 exemples/ExHTML2.html :Un exemple de document XHTML\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Pratique de M y S Q L et P H P </ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<h1>\nPratique de < ah r e f =\"http ://w w w. mysql .com\"> M y S Q L </ a>\net < ah r e f = \" h t t p : / / www . php . n e t \" >PHP< / a>\n</h1>\n<hr/>\nC e livre , publié aux\n<ah r e f =\" http : / / www. dunod . f r \">Éditions < i>Dunod</ i>< /a>,\nest consacré aux techniques\nde création de sites à l ’ aide du langage\n<ah r e f =\"http ://w w w.php. net\"> < b>PHP< / b>< /a>e t\ndu serveur < ah r e f =\"http ://w w w. mysql .com\"> < b>MySQL< / b>< /a>.\n</body>\n</html >\n\n6\n Chapitre 1. Introduction à MySQL et PHP\nXHTML, une variante de HTML.\nLa variante utilisée dans nos exemples est XHTML, une déclinaison de HTML\nconforme aux règles de constitution des documents XML, un autre langage dedescription que nous étudierons dans le chapitre 8. XHTML impose des contraintesrigoureuses, ce qui représente un atout pour créer des sites portables et multi-navigateurs. Je vous conseille d’équiper votre navigateur d’un validateur HTML(comme Web Developer pour Firefox) qui vous indiquera si vos pages sont bien\nformées.\nCodage des documents.\nNos documents sont encodés en ISO 8859 1 ou Latin1, un codage adapté aux langues\neuropéennes et facile à manipuler avec tous les éditeurs de texte disponibles sur les\nordinateurs vendus en France. Si vous développez un site en multi-langues, il estrecommandé d’adopter le codage UTF-8, qui permet par exemple de représenterdes langues asiatiques. Il faut alors utiliser un éditeur qui permet de sauvegarder lesdocuments dans ce codage.\nRéférencement des documents\nUn des principaux mécanismes du Web est le principe de localisation, dit Universal\nResource Location (URL), qui permet de faire référence de manière unique à un\ndocument. Une URL est constituée de plusieurs parties :\n•le nom du protocole utilisé pour accéder à la ressource ;\n•le nom du serveur hébergeant la ressource ;\n•le numéro du port réseau sur lequel le serveur est à l’écoute ;\n•le chemin d’accès, sur la machine serveur, à la ressource.\nÀ titre d’exemple, voici l’URL du site web de ce livre :\nhttp://www.lamsade.dauphine.fr/rigaux/mysqlphp/index.html\nCette URL s’interprête de la manière suivante : il s’agit d’un document accessible\nviale protocole HTTP, sur le serveur www.lamsade.dauphine.fr qui est à l’écoute sur\nle port 80 – numéro par défaut, donc non précisé dans l’URL – et dont le chemind’accès et le nom sont respectivement rigaux/mysqlphp etindex.html .\nLa balise qui permet d’insérer des liens dans un document HTML est le conteneur\n<a>pour anchor – « ancre » en français. L’URL qui désigne le lien est un attribut de\nla balise. Voici par exemple comment on associe l’expression « pratique de MySQL\net PHP » à son URL.\n<ah r e f =\"http ://w w w. lamsade . dauphine . fr / rigaux /mysqlphp\">\nPratique de M y S Q L et P H P\n</a>\nÀ chaque lien dans un document HTML est associée une URL qui donne la\nlocalisation de la ressource. Les navigateurs permettent à l’utilisateur de suivre un\n1.1 Introduction au Web et à la programmation web\n 7\nlien par simple clic de souris, et se chargent de récupérer le document correspondant\ngrâce à l’URL. Ce mécanisme rend transparentes dans la plupart des cas, les adressesdes documents web pour les utilisateurs.\nLe Web peut être vu comme un immense, et très complexe, graphe de documents\nreliés par des liens hypertextes. Les liens présents dans un document peuvent donneraccès non seulement à d’autres documents du même site, mais également à desdocuments gérés par d’autres sites, n’importe où sur le réseau.\nClients web\nLe Web est donc un ensemble de serveurs connectés à l’Internet et proposant desressources. L’utilisateur qui accède à ces ressources utilise en général un type particu-lier de programme client, le navigateur . Les deux principales tâches d’un navigateur\nconsistent à :\n1. dialoguer avec un serveur ;\n2. afﬁcher à l’écran les documents transmis par un serveur.\nLes navigateurs offrent des fonctionnalités bien plus étendues que les deux tâches\ncitées ci-dessus. Firefox dispose par exemple d’un mécanisme d’extension par plugin\nqui permet d’intégrer très facilement de nouveaux modules.\n1.1.3 Programmation web\nLa programation web permet de dépasser les limites étroites des pages HTML sta-\ntiques, dont le contenu est ﬁxé à l’avance. Le principe consiste à produire lesdocuments HTML par un programme associé au serveur web. Ce programme reçoiten outre des paramètres saisis par l’utilisateur qui conditionnent la page renvoyéepar le serveur au client. Le contenu des pages est donc construit à la demande,« dynamiquement ».\nLa ﬁgure 1.2 illustre les composants de base d’une application web. Le navigateur\n(client) envoie une requête (souvent à partir d’un formulaire HTML). Cette requête\nconsiste à déclencher une action (que nous désignons par « programme web » dans ce\nqui suit) sur un serveur référencé par son URL. L’exécution du programme web parle serveur web se déroule en trois phases :\n1.Constitution de la requête par le client : le navigateur construit une URL conte-\nnant le nom du programme à exécuter, accompagné, le plus souvent, deparamètres ;\n2.Réception de la requête par le serveur : le programme serveur récupère les infor-\nmations transmises par le navigateur et déclenche l’exécution du programmeen lui fournissant les paramètres reçus ;\n3.Transmission de la réponse : le programme renvoie le résultat de son exécution\nau serveur sous la forme d’un document HTML, le serveur se contentant alorsde faire suivre au client.\nNous décrivons brièvement ces trois étapes dans ce qui suit.\n8\n Chapitre 1. Introduction à MySQL et PHP\nMachine du clientProgramme\nwebrequêtes requêtes\nProgramme\nclientInternet\nFichiersHTMLHTMLdocument(s)\nMachine du serveurProgramme\nserveur\ndocument(s)\nFigure 1.2 — Architecture basique d’une application web\nConstitution d’une requête : les formulaires\nUne requête transmise à un programme web est simplement une URL référençant\nle programme sur la machine serveur. On peut en théorie créer cette URL manuel-lement. On peut aussi la trouver intégrée à une ancre HTML. Mais le plus souvent,le programme déclenché sur le serveur doit recevoir des paramètres, et leur saisie estune tâche fastidieuse si elle ne se fait pas à l’aide d’un formulaire HTML.\nUn formulaire est un conteneur HTML constitué d’un ensemble de balises déﬁ-\nnissant des champs de saisie. Les formulaires offrent la possibilité appréciable de créertrès facilement une interface. En raison de leur importance, nous allons rappeler ici\nleurs principales caractéristiques en prenant l’exemple de la ﬁgure 1.3, qui montre un\nformulaire permettant la saisie de la description d’un ﬁlm.\nDifférents types de champs sont utilisés :\n•le titre et l’année sont des simples champs de saisie. L’utilisateur est libred’entrer toute valeur alphanumérique de son choix ;\n•le pays producteur est proposé sous la forme d’une liste de valeurs pré-déﬁnies.Le choix est de type exclusif : on ne peut cocher qu’une valeur à la fois ;\n•le genre est lui aussi présenté sous la forme d’une liste de choix imposés, maisici il est possible de sélectionner plusieurs choix simultanément ;\n•l’internaute peut transmettre au serveur un ﬁchier contenant l’afﬁche du ﬁlm,grâce à un champ spécial qui offre la possibilité de choisir (bouton Parcourir)\nle ﬁchier sur le disque local ;\n•une liste présentée sous la forme d’un menu déroulant propose une liste desmetteurs en scène ;\n•on peut entrer le résumé du ﬁlm dans une zone de saisie de texte ;\n•enﬁn, les boutons « Valider » ou « Annuler » sont utilisés pour, au choix, trans-mettre les valeurs saisies au programme web, ou ré-initialiser le formulaire.\nCet exemple couvre pratiquement l’ensemble des types de champs disponibles.\nNous décrivons dans ce qui suit les balises de création de formulaires.\n1.1 Introduction au Web et à la programmation web\n 9\nFigure 1.3 — Présentation d’un formulaire avec Firefox\nLa balise <form>\nC’est un conteneur délimité par <form>et</form> qui, outre les champs de saisie,\npeut contenir n’importe quel texte ou balise HTML. Les trois attributs suivants sont\nessentiels :\n•action est la référence au programme exécuté par le serveur ;\n•method indique le mode de transmission des paramètres au programme, avec\nessentiellement deux valeurs possibles, getoupost ;\n•enctype indique le type d’encodage des données du formulaire, utilisé pour la\ntransmission au serveur. Il y a deux valeurs possibles.\n1.application/x-www-form-urlencoded .\nIl s’agit de l’option par défaut, utilisée même quand on ne donne pas\nd’attribut enctype. Les champs du formulaire sont transmis sous la forme\nd’une liste de paires nom=valeur, séparées par des « & ».\n2.multipart/form-data .\nCette option doit être utilisée pour les transmissions comprenant desﬁchiers. Le mode de transmission par défaut est en effet inefﬁcace pourles ﬁchiers à cause du codage assez volumineux utilisé pour les caractèresnon-alphanumériques. Quand on utilise multipart/form-data , les ﬁchiers\nsont transmis séparément des champs classiques, dans une représentationplus compacte.\nVoici le code HTML donnant le début du formulaire de la ﬁgure 1.3. Le service\nassocié à ce formulaire est le programme Film.php qui se trouve au même endroit\n10\n Chapitre 1. Introduction à MySQL et PHP\nque le formulaire. La méthode post indique un mode particulier de passage des\nparamètres.\n<form action =’Film .php ’ method =’post ’ enctype=’ multipart / form −\ndata ’>\nÀ l’intérieur d’un formulaire, on peut placer plusieurs types de champs de saisie,\nincluant des valeurs numériques ou alphanumériques simples saisies par l’utilisateur,\ndes choix multiples ou exclusifs parmi un ensemble de valeurs pré-déﬁnies, du textelibre ou la transmission de ﬁchiers.\nLa balise <input>\nLa balise <input> est la plus générale. Elle permet de déﬁnir tous les champs de\nformulaires, à l’exception des listes de sélection et des fenêtres de saisie de texte.\nChaque champ <input> a un attribut name qui permet, au moment du passage\ndes paramètres au programme, de référencer les valeurs saisies sous la forme de couplesnom=valeur. La plupart des champs ont également un attribut value qui permet de\ndéﬁnir une valeur par défaut (voir exemple ci-dessous). Les valeurs de name ne sont\npas visibles dans la fenêtre du navigateur : elles ne servent qu’à référencer les valeursrespectives de ces champs au moment du passage des paramètres au programme.\nLe type d’un champ est déﬁni par un attribut type qui peut prendre les valeurs\nsuivantes :\ntype=’text’ Correspond à un champ de saisie permettant à l’utilisateur d’entrer\nune chaîne de caractères. La taille de l’espace de saisie est ﬁxée par l’attribut size,\net la longueur maximale par l’attribut maxlength. Voici le champ pour la saisie\ndu titre du ﬁlm.\nTitre : <input type=’text’ size=’20’ name=’titre’/>\nUn paramètre titre=Le+Saint sera passé par le serveur au programme si l’utili-\nsateur saisit le titre « Le Saint ».\ntype=’password’ Identique au précédent, mais le texte saisi au clavier n’apparaît\npas en clair (une étoile ’*’ sera afﬁchée par le navigateur en lieu et place de chaque\ncaractère). Ce type de champ est principalement utile pour la saisie de mots depasse.\ntype=’hidden’ Un champ de ce type n’est pas visible à l’écran. Il est destiné\nà déﬁnir un paramètre dont la valeur est ﬁxée, et à passer ce paramètre auprogramme en même temps que ceux saisis par l’utilisateur.\nPar exemple le champ ci-dessous permet de passer systématiquement un para-\nmètre monNom ayant la valeur ExForm1, pour indiquer au programme le nom du\nformulaire qui lui transmet les données saisies.\n<input type=’hidden’ name=’monNom’ value=’ExForm1’/>\n1.1 Introduction au Web et à la programmation web\n 11\nIl est important de noter que « caché » ne veut pas dire « secret » ! Rien n’em-\npêche un utilisateur de consulter la valeur d’un champ caché en regardant le codesource du document HTML.\ntype=’checkbox’ Ce type crée les boutons associés à des valeurs, ce qui permet\nà l’utilisateur de cocher un ou plusieurs choix, sans avoir à saisir explicitementchaque valeur. En associant le même nom à un ensemble de champs checkbox,\non indique au navigateur que ces champs doivent être groupés dans la fenêtred’afﬁchage.\nL’exemple ci-dessous montre comment donner le choix (non exclusif) entre les\ngenres des ﬁlms.\nComédie : < input type =’checkbox ’ name =’genre ’ value =’ C’/>\nDrame : < input type =’checkbox ’ name =’genre ’ value =’ D’/>\nHistoire : < input type =’checkbox ’ name =’genre ’ value =’ H’/>\nSuspense : < input type =’checkbox ’ name =’genre ’ value =’S’/>\nContrairement aux champs de type text ou apparenté, les valeurs (champ\nvalue) ne sont pas visibles. On peut donc utiliser une codiﬁcation (’C’, ’D’, ...)\nplus concise que les libellés descriptifs (Comédie, Drame, ...). Au moment où leformulaire sera validé, une information genre=valeur sera passée au programme\npour chaque bouton sélectionné par l’utilisateur. Le programme est bien entendusupposé connaître la signiﬁcation des codes qu’il reçoit.\ntype=’radio’ Comme précédemment, on donne le choix entre plusieurs valeurs,\nmais ce choix est maintenant exclusif. Par exemple on n’autorise qu’un seul paysproducteur.\nFrance : < input type =’radio ’ name =’pays ’ value =’F R’\nchecked =’ 1’ / >\nEtats −Unis : < input type =’radio ’ name =’pays ’ value =’ U S’/>\nAllemagne : < input type =’radio ’ name =’pays ’ value =’D E’/>\nJapon : < input type =’radio ’ name =’pays ’ value =’JP ’/>\nL’attribut checked permet de présélectionner un des choix. Il est particulière-\nment utile pour les champs radio mais peut aussi être utilisé avec les champs\ncheckbox.\ntype=’submit’ Ce champ correspond en fait à un bouton qui valide la saisie et\ndéclenche le programme sur le serveur. En principe, il n’y a qu’un seul boutonsubmit, mais on peut en utiliser plusieurs, chacun étant alors caractérisé par unattribut name auquel on associe une valeur spéciﬁque.\n<input type =’submit ’ value =’Valider ’/>\nLa valeur de l’attribut value est ici le texte à afﬁcher. Au lieu de présenter un\nbouton simple, on peut utiliser une image quelconque, avec le type image.P a r\nexemple :\n<input type =’image ’ src=’bouton . gif ’ / >\n12\n Chapitre 1. Introduction à MySQL et PHP\ntype=’reset’ Ce type est complémentaire de submit. Il indique au navigateur de\nré-initialiser le formulaire.\ntype=’file’ On peut transmettre des ﬁchiers par l’intermédiaire d’un formulaire.\nLe champ doit alors contenir le chemin d’accès au ﬁchier sur l’ordinateur du\nclient. Le navigateur associe au champ de type file un bouton permettant de\nsélectionner le ﬁchier à transmettre au serveur pour qu’il le passe au programme.Les attributs sont identiques à ceux du type text.\nVoici la déﬁnition du bouton permettant de transmettre un ﬁchier contenantl’afﬁche du ﬁlm.\n<input type =’file ’ size =’20’ name =’affiche ’/>\nIl est possible d’indiquer la taille maximale du ﬁchier à transférer en insérant unchamp caché, de nom max_file_size, avant le champ file. L’attribut value\nindique alors sa taille.\n<input type =’hidden ’ name =’max_file_size ’ value = ’100000 ’/>\nmax_file_size\nLa balise <select>\nLe principe de ce type de champ est similaire à celui des champs radio oucheckbox.\nOn afﬁche une liste d’options parmi lesquelles l’utilisateur peut faire un ou plusieurschoix. Le champ select est surtout utile quand le nombre de valeurs est élevé.\n<select>est un conteneur dans lequel on doit énumérer, avec les balises\n<option >, tous les choix possibles. La balise <option >a elle-même un attribut\nvalue qui indique la valeur à envoyer au programme quand le choix correspondant\nest sélectionné par l’utilisateur. Voici par exemple un champ <select>proposant\nune liste de réalisateurs :\nMetteur en scène :\n<select n a m e =’realisateur ’ size =’3’>\n<option value = ’1 ’>Alfred Hitchcock</ option >\n<option value = ’2 ’>Maurice Pialat</ option >\n<option value =’3’ selected =’ 1’ > Q u e n t i n Tarantino </ option >\n<option value = ’4 ’>Akira Kurosawa</ option >\n<option value = ’ 5 ’ > J o h n Woo< / option >\n<option value = ’6 ’>Tim Burton</ option >\n</select>\nL’attribut sizeindique le nombre de choix à visualiser simultanément. Par défaut,\n<select>propose un choix exclusif. L’attribut multiple donne la possibilité de\nsélectionner plusieurs choix.\nAu niveau de la balise option , l’attribut selected permet de présélectionner un\ndes choix (ou plusieurs si le champ <select>est de type multiple). Noter que si on\nsélectionne ’John Woo’, la valeur 5 sera envoyée au programme pour le paramètrenommé realisateur. Le programme est supposé averti de la signiﬁcation de ces\ncodes.\n1.1 Introduction au Web et à la programmation web\n 13\nLa balise <textarea >\nEnﬁn, la dernière balise des formulaires HTML, <textarea> , permet à l’utilisateur\nde saisir un texte libre sur plusieurs lignes. Ses principaux attributs, outre name qui\npermet de référencer le texte saisi, sont colsetrows qui indiquent respectivement le\nnombre de colonnes et de lignes de la fenêtre de saisie.\n<textarea> est un conteneur : tout ce qui est placé entre les balises de début et de\nﬁn est proposé comme texte par défaut à l’utilisateur. Voici le code HTML du champ\ndestiné à saisir le résumé du ﬁlm :\n<textarea name =’resume ’ cols =’30’ rows =’3’>Résumé du film</\ntextarea >\nL’exemple 1.2 donne le code HTML complet pour la création du formulaire\nde la ﬁgure 1.3. Une première remarque est que le code est long, relativementfastidieux à lire, et assez répétitif. En fait, lil est principalement constitué de balisesHTML (ouvertures, fermetures, attributs), spéciﬁque à l’application étant minori-\ntaire. HTML est un langage « bavard », et une page HTML devient rapidement très\nvolumineuse, confuse, et donc difﬁcile à faire évoluer. Un des buts que nous nousﬁxerons avec PHP est de nous doter des moyens d’obtenir un code beaucoup plusconcis.\nExemple 1.2 exemples/ExForm1.html :Le formulaire complet\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Formulaire complet</ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<form action =’Film .php ’\nmethod =’post ’ enctype=’ multipart / form −data ’>\n<input type =’hidden ’ name =’ m o n N o m’ value = ’ExForm1 ’ / >\nTitre : < input type =’text ’size =’20’ name =’titre ’/>\nAnnées : < input type =’text ’size =’ 4’ maxlength =’4’\nname =’annee ’ value = ’2008 ’/>\n<p>\nComédie : < input type =’checkbox ’ name =’genre ’ value =’ C’/>\nDrame : < input type =’checkbox ’ name =’genre ’ value =’ D’/>\nHistoire : < input type =’checkbox ’ name =’genre ’ value =’ H’/>\nSuspense : < input type =’checkbox ’ name =’genre ’ value =’S’/>\n</p>\n<p>\nFrance : < input type =’radio ’ name =’pays ’ value =’F R’\nchecked =’ 1’ / >\n14\n Chapitre 1. Introduction à MySQL et PHP\nEtats −Unis : < input type =’radio ’ name =’pays ’ value =’ U S’/>\nAllemagne : < input type =’radio ’ name =’pays ’ value =’D E’/>\nJapon : < input type =’radio ’ name =’pays ’ value =’JP ’/>\n</p><p>\nAffiche du film : < input type =’file ’ size =’ 2 0’ name =’affiche ’/>\n</p>\n<p>\nMetteur en scène :\n<select n a m e =’realisateur ’ size =’3’>\n<option value = ’1 ’>Alfred Hitchcock</ option >\n<option value = ’2 ’>Maurice Pialat</ option >\n<option value =’3’ selected =’ 1’ > Q u e n t i n Tarantino </ option >\n<option value = ’4 ’>Akira Kurosawa</ option >\n<option value = ’ 5 ’ > J o h n Woo< / option >\n<option value = ’6 ’>Tim Burton</ option >\n</select>\n<br/>\n<p>\nRésumé :\n<textarea name =’resume ’ cols =’30’ rows =’3’>Résumé du film\n</textarea >\n</p>\n<h1>Votre choix</ h1>\n<input type =’submit ’ value =’Valider ’/>\n<input type =’reset ’ value =’Annuler ’ / >\n</form >\n</body >\n</html >\nDeuxième remarque, qui vient à l’appui de la précédente : malgré tout le code\nemployé, le résultat en terme de présentation graphique reste peu attrayant. Pour\nbien faire, il faudrait (au minimum) aligner les libellés et les champs de saisie,\nce qui peut se faire avec un tableau à deux colonnes. Il est facile d’imaginer lesurcroît de confusion introduit par l’ajout des balises <table>,<tr>,e t c .L àe n c o r e\nl’utilisation de PHP permettra de produire du HTML de manière plus raisonnée etmieux organisée.\nEnﬁn il n’est pas inutile de signaler que l’interface créée par un formulaire HTML\nest assez incomplète en termes d’ergonomie et de sécurité. Il faudrait pouvoir aiderl’utilisateur dans sa saisie, et surtout contrôler que les valeurs entrées respectent cer-\ntaines règles. Rien n’interdit, dans l’exemple donné ci-dessus, de ne pas entrer de titre\npour le ﬁlm, ou d’indiquer -768 pour l’année. Ce genre de contrôle peut être fait parle serveur après que l’utilisateur a validé sa saisie, mais ce mode de fonctionnement a\nl’inconvénient de multiplier les échanges sur le réseau. Le langage Javascript permetd’effectuer des contrôles au moment de la saisie; et un mécanisme nommé Ajax peutmême être utilisé pour communiquer avec le serveur sans réafﬁcher la page. Nousvous renvoyons à un livre consacré à ces techniques pour plus d’information.\n1.1 Introduction au Web et à la programmation web\n 15\nTransmission de la requête du client au serveur\nTous les paramètres saisis dans un formulaire doivent maintenant être transmis au\nserveur web ou, plus précisément, au programme web sur ce serveur. Inversement, ce\nprogramme doit produire un document (généralement un document HTML) et letransmettre au navigateur viale serveur web.\nAu moment où l’utilisateur déclenche la recherche, le navigateur concatène dans\nune chaîne de caractères une suite de descriptions de la forme nomChamp=val où\nnomChamp est le nom du champ dans le formulaire et val la valeur saisie. Les\ndifférents champs sont séparés par « & » et les caractères blancs sont remplacés pardes « + ».\nPar exemple, si on a saisi « Le Saint » dans titre, 1978 dans annee et coché le\nchoix « Comédie », la chaîne est constituée par :\ntitre=Le+Saint&annee=1978&genre=C\nIl existe alors deux manières de transmettre cette chaîne au serveur, selon que la\nméthode utilisée est getoupost.\n1.Méthode get: la chaîne est placée à la ﬁn de l’URL appelée, après un\ncaractère ’?’. On obtiendrait dans ce cas :\nhttp://localhost/Films.php?titre=Le+Saint&annee=1978&genre=C\n2.Méthode post : la chaîne est transmise séparément de l’URL.\nLa méthode post est généralement préférée quand les paramètres à transmettre\nsont volumineux, car elle évite d’avoir à gérer des URL très longues. Elle présentecependant un inconvénient : quand on veut revenir, avec le bouton « Retour » dunavigateur, sur une page à laquelle on a accédé avec post, le navigateur resoumet\nle formulaire. Bien sûr, il demande auparavant l’autorisation de l’utilisateur, maisce dernier n’a pas en général de raison d’être conscient des inconvénients possibles\nd’une double (ou triple, ou quadruple) soumission.\nQuand le serveur reçoit une requête, il lance le programme et lui transmet un\nensemble de paramètres correspondant non seulement aux champs du formulaire,\nmais également à diverses informations relatives au client qui a effectué la requête.On peut par exemple savoir si l’on a affaire à Firefox ou à Safari. Ces transmissionsde paramètres se font essentiellement par des variables d’environnement qui peuventêtre récupérées par ce programme. Quand la méthode utilisée est get, une de ces\nvariables ( QUERY_STRING) contient la liste des paramètres issus du formulaire. Les\nvariables les plus importantes sont décrites dans la table 1.1.\nLe programme est en général écrit dans un langage spécialisé (comme PHP) qui\ns’intègre étroitement au programme serveur et facilite le mode de programmationparticulier aux applications web. En particulier le langage offre une méthode simplepour récupérer les paramètres de la requête et les variables d’environnement. Il estlibre de faire toutes les opérations nécessaires pour satisfaire la demande (dans lalimite de ses droits d’accès bien sûr). Il peut notamment rechercher et transmettre desﬁchiers ou des images, effectuer des contrôles, des calculs, créer des rapports, etc. Il\n16\n Chapitre 1. Introduction à MySQL et PHP\npeut aussi accéder à une base de données pour insérer ou rechercher des informations.\nC’est ce dernier type d’utilisation, dans sa variante PHP/MySQL, que nous étudionsdans ce livre.\nTableau 1.1 — Variables d’environnement\nVariable d’environnement\n Description\nREQUEST_METHOD\n M é t h o d ed et r a n s m i s s i o nd e sp a r a m è t r e s( get,post ,e t c . ) .\nQUERY_STRING\n Une chaîne de caractères contenant tous les paramètres de l’appel en\ncas de méthode get. Cette chaîne doit être décodée (voir ci-dessus),\nce qui constitue l’aspect le plus fastidieux du traitement.\nCONTENT_LENGTH\n Longueur de la chaîne transmise sur l’entrée standard, en cas deméthode\npost .\nSERVER_NAME\n Nom de la machine hébergeant le serveur web.\nPATH_INFO\n Informations sur les chemins d’accès menant par exemple vers desfichiers que l’on souhaite utiliser.\nHTTP_USER_AGENT\n Type et version du navigateur utilisé par le client.\nREMOTE_ADDR\n Adresse IP du client.\nREMOTE_HOST\n Nom de la machine du client.\nREMOTE_USER\n Nom de l’utilisateur, pour les sites protégés par une procédured’identification (voir annexe A).\nREMOTE_PASSWORD\n Mot de passe de l’utilisateur, pour les sites sécurisés.\nTransmission de la réponse du serveur au client\nLe programme doit écrire le résultat sur sa sortie standard stdout qui, par un mécanisme\nde redirection, communique directement avec l’entrée standard stdindu serveur. Le\nserveur transmet alors ce résultat au client.\nCe résultat peut être n’importe quel document multimédia, ce qui représente\nbeaucoup de formats, depuis le simple texte ASCII jusqu’à la vidéo. Dans le cas où la\nrequête d’un client se limite à demander au serveur de lui fournir un ﬁchier, le serveur\nse base sur l’extension de ce ﬁchier pour déterminer son type.\nConformément au protocole HTTP, il faut alors transmettre ce type dans l’en-\ntête, avec la clause Content-type: typeDocument , pour que le navigateur sache\ncomment décoder les informations qui lui proviennent par la suite. Pour un ﬁchier\nHTML par exemple, l’extension est le plus souvent .html, et la valeur de typeDocu-\nment esttext/html.\n1.1.4 Sessions\nUne caractéristique essentielle de la programmation web est son mode déconnecté.L e\nserveur ne mémorise pas les demandes successives effectuées par un client particulier,et ne peut donc pas tenir compte de l’historique des échanges pour améliorer lacommunication avec le client.\n1.1 Introduction au Web et à la programmation web\n 17\nUn exemple familier qui illustre bien cette limitation est l’identiﬁcation d’un\nvisiteur sur un site. Cette identiﬁcation se base sur un formulaire pour fournir un\nnom et un mot de passe, et le serveur, s’il valide ce code d’accès, peut alors donnerle droit au visiteur de consulter des parties sensibles du site. Le problème est quelors de la prochaine connexion (qui peut avoir lieu dans les secondes qui suivent lapremière !) le serveur ne sera pas en mesure de reconnaître que le client s’est déjàconnecté, et devra lui demander à nouveau nom et mot de passe.\nL’absence de connexion permanente entre client et serveur web est un gros obs-\ntacle pour la gestion de sessions se déroulant dans un contexte riche, constitué d’un\nensemble d’informations persistant tout au long des communications client/serveur.Par exemple, on voudrait stocker non seulement le nom et le mot de passe, mais aussil’historique des accès au site aﬁn de guider plus facilement un visiteur habitué. Plu-sieurs solutions, plus ou moins satisfaisantes, ont été essayées pour tenter de résoudrece problème. La plus utilisée est de recourir aux cookies . Essentiellement, un cookie est\nune donnée, représentable sous la forme habituelle nom=valeur, que le navigateur\nconserve pour une période déterminée à la demande du serveur. Cette demande doitêtre effectuée dans un en-tête HTTP avec une instruction Set-Cookie. En voici un\nexemple :\nSet-Cookie:\nMonCookie=200;\nexpires=Mon,24-Dec-2010 12:00:00 GMT;\npath=/;\ndomain=dauphine.fr\nCette instruction demande au navigateur de conserver jusqu’au 24 décembre 2010\nuncookie nommé MonCookie ayant pour valeur 200. Les attributs optionnels path\netdomain restreignent la visibilité du cookie pour les programmes serveurs qui\ncommuniquent avec le navigateur. Par défaut, le cookie est transmis uniquement\nau serveur qui l’a déﬁni, pour toutes les pages web gérées par lui. Ici on a élargil’autorisation à tous les serveurs du domaine dauphine.fr.\nPar la suite, les cookies stockés par un navigateur sont envoyés au serveur dans une\nvariable d’environnement HTTP_COOKIE. Nous ne détaillons pas le format d’échange\nqui est relativement complexe à décrypter. PHP permet d’obtenir très facilement lescookies .\nIl faut noter qu’un cookie ne disparaît pas quand le navigateur est stoppé puisqu’il\nest stocké dans un ﬁchier. Il est toujours intéressant de consulter la liste des cookies(par exemple avec Web Developer pour voir qui a laissé traîner des informations\nchez vous. On peut considérer comme suspecte cette technique qui consiste à écriredes informations sur le disque dur d’un client à son insu, mais les cookies offrent\nle moyen le plus simple et puissant de créer un contexte persistant aux différentséchanges client/serveur. Nous les utiliserons le moment venu pour gérer les sessions,par l’intermédiaire de fonctions PHP qui fournissent une interface simple et facile àutiliser.\n18\n Chapitre 1. Introduction à MySQL et PHP\n1.2 PROGRAMMATION WEB AVEC MySQL ET PHP\nAprès cette introduction générale, nous en arrivons maintenant aux deux outils\nque nous allons associer pour développer des applications web avec simplicité etpuissance.\n1.2.1 MySQL\nMySQL est un Système de Gestion de Bases de Données (SGBD) qui gère pour vous les\nﬁchiers constituant une base, prend en charge les fonctionnalités de protection et desécurité et fournit un ensemble d’interfaces de programmation (dont une avec PHP)facilitant l’accès aux données.\nLa complexité de logiciels comme MySQL est due à la diversité des techniques\nmises en œuvre, à la multiplicité des composants intervenant dans leur architecture,et également aux différents types d’utilisateurs (administrateurs, programmeurs, non\ninformaticiens, ...) confrontés, à différents niveaux, au système. Au cours de ce livre\nnous aborderons ces différents aspects, tous ne vous étant d’ailleurs pas utiles, en par-ticulier si votre objectif n’est pas d’administrer une base MySQL. Pour l’instant, nousnous contenterons de décrire l’essentiel, à savoir son architecture et ses composants.\nMySQL consiste en un ensemble de programmes chargés de gérer une ou plusieurs\nbases de données, et qui fonctionnent selon une architecture client/serveur (voirﬁgure 1.4).\nde donnéesBaseClient\nmysql\nClient\nClientClientmysqldump\nmysqlimport\nApache/PHPServeur \nmysqld\nConnexionConnexionConnexionConnexion\nFigure 1.4 — Serveur et clients de MySQL.\nLe serveur mysqld .Le processus mysqld est le serveur de MySQL. Lui seul peut\naccéder aux ﬁchiers stockant les données pour lire et écrire des informations.\nUtilitaires. MySQL fournit tout un ensemble de programmes, que nous appellerons\nutilitaires par la suite, chargés de dialoguer avec mysqld , par l’intermédiaire d’une\nconnexion , pour accomplir un type de tâche particulier. Par exemple, mysqldump\npermet d’effectuer des sauvegardes, mysqlimport peut importer des ﬁchiers ASCII\ndans une base, etc. Le client le plus simple est simplement nommé mysql ,e t\npermet d’envoyer directement des commandes au serveur.\n1.2 Programmation web avec MySQL et PHP\n 19\nLa base de données est un ensemble de ﬁchiers stockant les informations selon un\nformat propre à MySQL et qui peut – doit – rester inconnu à l’utilisateur. Le serveur\nest le seul habilité à lire/écrire dans ces ﬁchiers, en fonction de demandes effectuées\npar des clients MySQL. Plusieurs clients peuvent accéder simultanément à une même\nbase. Le serveur se charge de coordonner ces accès.\nLes clients de MySQL communiquent avec le serveur pour effectuer des\nrecherches ou des mises à jour dans la base. Cette communication n’est pas limitée àdes processus situés sur la même machine : il est possible de s’adresser au serveurMySQL par un réseau comme l’Internet. Dans une application PHP , le client est leserveur web (souvent Apache) qui n’est pas forcément situé sur la même machineque le processus mysqld .\nIl est possible de créer soi-même son propre client MySQL en utilisant des outils\nde programmation qui se présentent sous la forme d’un ensemble de fonctions,\nhabituellement désigné par l’acronyme API pour Application Programming Interface .\nMySQL fournit une API en langage C, à partir de laquelle plusieurs autres ont été\ncréées, dont une API en PHP . Comme tous les autres clients de MySQL, un scriptPHP en association avec Apache doit établir une connexion avec le serveur pourpouvoir dialoguer avec lui et rechercher ou mettre à jour des données (ﬁgure 1.4).\nBases de données relationnelles\nMySQL est un SGBD relationnel, comme beaucoup d’autres dont ORACLE, Post-\ngreSQL, SQL Server, etc. Le point commun de tous ces systèmes est de proposer unereprésentation extrêmement simple de l’information sous forme de table. Voici une\ntable relationnelle Film, donnant la description de quelques ﬁlms.\ntitre\n année\n nom_realisateur\n prénom_realisateur\n annéeNaiss\nAlien\n 1979\n Scott\n Ridley\n 1943\nVertigo\n 1958\n Hitchcock\n Alfred\n 1899\nPsychose\n 1960\n Hitchcock\n Alfred\n 1899\nKagemusha\n 1980\n Kurosawa\n Akira\n 1910\nVolte-face\n 1997\n Woo\n John\n 1946\nPulp Fiction\n 1995\n Tarantino\n Quentin\nTitanic\n 1997\n Cameron\n James\n 1954\nSacrifice\n 1986\n Tarkovski\n Andrei\n 1932\nIl y a quelques différences essentielles entre cette représentation et le stockage\ndans un ﬁchier. D’une part, les informations sont conformes à une description précise.Ici la table s’appelle Film, et elle comprend un ensemble d’attributs comme titre,\nannée , etc. Une base de données est constituée d’une ou plusieurs tables, dont les\ndescriptions sont connues et gérées par le serveur. Nous verrons qu’il est possible, via\nun langage simple, de spéciﬁer le format d’une table, ainsi que le type des attributs etles contraintes qui s’appliquent aux données. Par exemple : il ne doit pas exister deux\nﬁ l m sa v e cl em ê m et i t r e . Tout ce qui concerne la description des données, et pas les\ndonnées elles-mêmes, constitue le schéma de la base de données.\n20\n Chapitre 1. Introduction à MySQL et PHP\nLes SGBD relationnels offrent non seulement une représentation simple et puis-\nsante, mais également un langage, SQL, pour interroger ou mettre à jour les données.\nSQL est incomparablement plus facile à utiliser qu’un langage de programmationclassique comme le C. Voici par exemple comment on demande la liste des titres deﬁlm parus après 1980.\nSELECT titre\nFROM Film\nWHERE annee > 1980\nCette approche très simple se contente d’indiquer ce que l’on veut obtenir, à\ncharge pour le SGBD de déterminer comment on peut l’obtenir. SQL est un lan-\ngage déclaratif qui permet d’interroger une base sans se soucier de la représentation\ninterne des données, de leur localisation, des chemins d’accès ou des algorithmesnécessaires. À ce titre il s’adresse à une large communauté d’utilisateurs potentiels(pas seulement des informaticiens) et constitue un des atouts les plus spectaculaires(et le plus connu) des SGBD relationnels. On peut l’utiliser de manière interactive,mais également en association avec des interfaces graphiques, des outils de reporting\nou, généralement, des langages de programmation.\nCe dernier aspect est important en pratique car SQL ne permet pas de faire de la\nprogrammation au sens courant du terme et doit donc être associé avec un langagecomme PHP quand on souhaite effectuer des manipulations complexes.\n1.2.2 PHP\nLe langage PHP a été créé par Rasmus Lerdorf en 1994, pour ses besoins personnels.\nComme dans beaucoup d’autres cas, la mise à disposition du langage sur l’Internet\nest à l’origine de son développement par d’autres utilisateurs qui y ont vu un outilpropre à satisfaire leurs besoins. Après plusieurs évolutions importantes, PHP en està sa version 5.2, celle que nous utilisons. La version 6 est annoncée à l’heure où ceslignes sont écrites. PHP – le plus souvent associé à MySQL – est à l’heure actuelle leplus répandu des langages de programmations pour sites web.\nQu’est-ce que PHP\nPHP est un langage de programmation, très proche syntaxiquement du langage C,\ndestiné à être intégré dans des pages HTML. Contrairement à d’autres langages, PHP\nest principalement dédié à la production de pages HTML générées dynamiquement.Voici un premier exemple.\nExemple 1.3 exemples/ExPHP1.php :Premier exemple PHP\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head>\n<title > H T M L avec P H P</title >\n1.2 Programmation web avec MySQL et PHP\n 21\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<h1> H T M L + PHP</h1>\nNous sommes le <?php echo Date ( \" j /m/Y\" ) ; ?>\n<p>\n<?php\necho \" J e s u i s \" . $_SERVER [ ’ HTTP_USER_AGENT ’ ] . \" < b r / > \" ;\necho \"Je dialogue avec \" . $ _ S E R V E R[ ’S E R V E R _ N A M E’ ];\n?>\n</p>\n</body>\n</html>\nIl s’agit d’un document contenant du code HTML classique, au sein duquel on\na introduit des commandes encadrées par les balises <?php et?>(on appellera\n« scripts » les documents HTML/PHP à partir de maintenant). Tout ce qui se trouve\nentre ces commandes est envoyé à un interpréteur du langage PHP intégré à Apache.Cet interpréteur lit les instructions et les exécute.\nREMARQUE – Certaines configurations de PHP acceptent des balises PHP dites « courtes »\n(<?et?>) qui sont incompatibles avec XML et donc avec le langage XHTML que nous utilisons.\nLes scripts PHP écrits avec ces balises courtes ne sont pas portables : je vous déconseille\nfortement de les utiliser.\nIci on a deux occurrences de code PHP . La première fait partie de la ligne\nsuivante :\nNous sommes le <?php echo Date (\"j/m/Y\"); ?>\nLe début de la ligne est du texte traité par le serveur Apache comme du HTML.\nEnsuite, on trouve une instruction echo Date (\"j/m/Y\");.L af o n c t i o n echo()\nest l’équivalent du printf() utilisé en langage C. Elle écrit sur la sortie standard,\nlaquelle est directement transmise au navigateur par le serveur web. La fonction PHP\ndate() récupère la date courante et la met en forme selon un format donné (ici, la\nchaîne j/m/Y qui correspond à jour, mois et année sur quatre chiffres).\nLa syntaxe de PHP est relativement simple, et la plus grande partie de la richesse\ndu langage réside dans ses innombrables fonctions. Il existe des fonctions pour créerdes images, pour générer du PDF , pour lire ou écrire dans des ﬁchiers, et – ce qui nousintéresse particulièrement – pour accéder à des bases de données.\nREMARQUE – Le langage PHP est introduit progressivement à l’aide d’exemples. Si vous\nsouhaitez avoir dès maintenant un aperçu complet du langage, reportez-vous au chapitre 11,\npage 419, qui en présente la syntaxe et peut se lire indépendamment.\n22\n Chapitre 1. Introduction à MySQL et PHP\nLe script ExPHP1.php illustre un autre aspect essentiel du langage. Non seulement il\ns’intègre directement avec le langage HTML, mais toutes les variables d’environne-\nment décrivant le contexte des communications entre le navigateur et le serveur websont directement accessibles sous forme de variables PHP . Tous les noms de variablesde PHP débutent par un « $ ». Voici la première ligne du script dans laquelle oninsère une variable transmise par le serveur.\necho \"Je suis \". $_SERVER[’HTTP_USER_AGENT’] . \"<br/>\";\nLe point « . » désigne l’opérateur de concaténation de chaîne en PHP . La com-\nmande echo envoie donc sur la sortie standard une chaîne obtenue en concaténant\nles trois éléments suivants :\n•une sous-chaîne contenant le texte « Je suis »\n•la chaîne correspondant au contenu de la variable HTTP_USER_AGENT ;\n•la chaîne contenant la balise HTML <br/> .\nCette création de contenu par concaténation de texte simple, de variables PHP\net de balises HTML est l’une des principales forces de PHP . Le point le plusimportant ici est l’exploitation de la variable HTTP_USER_AGENT qui représente le\nnavigateur qui a demandé l’exécution du script. Cette variable est l’un des élémentsdu tableau PHP $_SERVER automatiquement créé par le serveur et transmis au\nscript PHP . Ce tableau est de type « tableau associatif », chaque élément étantréférencé par un nom. L’élément correspondant au nom du serveur est référencéparSERVER_NAME et se trouve donc accessible dans le tableau avec l’expression\n$_SERVER[’SERVER_NAME’]. C’est le cas de toutes les variables d’environnement(voir tableau 1.1, page 16).\nUn script PHP a accès à plusieurs tableaux associatifs pour récupérer les variables\nd’environnement ou celles transmises via HTTP . La table 1.2 donne la liste de cestableaux.\nTableau 1.2 — Tableaux prédéfinis de PHP\nTableau associatif\n Contenu\n$_SERVER\n Contient les variables d’environnement énumérées dans la table 1.1,\npage 16 (comme SERVER_NAME ,CONTENT_TYPE , etc), ainsi que\ndes variables propres à l’environnement PHP comme PHP_SELF ,l e\nnom du script courant.\n$_ENV\n Contient les variables d’environnement système, que l’on peut égale-\nment récupérer par la fonction getenv() .\n$_COOKIE\n Contient les cookies transmis au script.\n$_GET\n Contient les paramètres HTTP transmis en mode get.\n$_POST\n Contient les paramètres HTTP transmis en mode post .\n$_FILES\n Contient la liste des fichiers transmis au serveur par le navigateur.\n$_REQUEST\n Contient toutes les variables des quatre tableaux précédents.\n$_SESSION\n Contient les variables de session PHP.\n$GLOBALS\n Contient les variables globales du script.\n\n1.2 Programmation web avec MySQL et PHP\n 23\nEn résumé, on dispose automatiquement, sous forme de variables PHP et sans\navoir besoin d’effectuer un décryptage compliqué, de la totalité des informations\néchangées entre le client le serveur. Il faut noter que ces tableaux sont « globaux »,c’est-à-dire accessibles dans toutes les parties du script, même au sein des fonctionsou des méthodes, sans avoir besoin de les passer en paramètres.\nPHP est du côté serveur\nUn script PHP est exécuté par un interpréteur situé du côté serveur. En cela, PHP est\ncomplètement différent d’un langage comme JavaScript, qui s’exécute sur le naviga-teur. En général l’interpréteur PHP est intégré à Apache sous forme de module, et lemode d’exécution est alors très simple. Quand un ﬁchier avec une extension .php\n1\nest demandé au serveur web, ce dernier le charge en mémoire et y cherche tous lesscripts PHP qu’il transmet à l’interpréteur. L’interpréteur exécute le script, ce quia pour effet de produire du code HTML qui vient remplacer le script PHP dans ledocument ﬁnalement fourni au navigateur. Ce dernier reçoit donc du HTML « pur »et ne voit jamais la moindre instruction PHP .\nÀ titre d’exemple, voici le code HTML produit par le ﬁchier PHP précédent,\ntel que vous pouvez vous-mêmes le vériﬁer sur notre site. Le résultat correspond àune exécution sur la machine serveur www.dauphine.fr d’un script auquel on accède\navec un navigateur Mozilla. Les parties HTML sont inchangées, le code PHP a étéremplacé par le résultat des commandes echo.\n<<?xml version=\"1.0\" encoding=\"iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >HTML a v e c PHP< / title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<h1>HTML + PHP< / h1>\nNous sommes le 31/10/2008\n<p>\nJe suis Mozilla /5.0 (Macintosh ; U; Intel M a c O S X 10.5; fr ;\nrv:1.9.0.3) G\necko/2008092414 Firefox /3.0.3< br/>Je dialogue avec localhost\n</p>\n</body>\n</html >\n1. L’extension des scripts PHP (en général .php) est paramétrable dans le ﬁchier httpd.conf de\nconﬁguration d’Apache.\n24\n Chapitre 1. Introduction à MySQL et PHP\nAccès à MySQL\nUn des grands atouts de PHP est sa très riche collection d’interfaces (API) avec tout\nun ensemble de SGBD. En particulier, il est possible à partir d’un script PHP de seconnecter à un serveur mysqld pour récupérer des données que l’on va ensuite afﬁcher\ndans des documents HTML. D’une certaine manière, PHP permet de faire d’Apacheun client MySQL, ce qui aboutit à l’architecture de la ﬁgure 1.5.\nde donnéesBase Fichiers\nPHPrequêtes\nInternetdocument(s)\nHTMLrequêtes\nprogramme\nserveurServeur \nmysqldSQL\ndonnées(navigateur)\nSite web avec scripts PHP et MySQLClient HTTPProg. client\nFigure 1.5 — Architecture d’un site web avec MySQL/PHP\nIl s’agit d’une architecture à trois composantes, chacune réalisant l’une des trois\ntâches fondamentales d’une application.\n1. le navigateur constitue l’interface graphique dont le rôle est de permettre à\nl’utilisateur de visualiser et d’interagir avec l’information ;\n2. MySQL est le serveur de données ;\n3. enﬁn, l’ensemble des ﬁchiers PHP contenant le code d’extraction, traitement\net mise en forme des données est le serveur d’application , associé à Apache qui\nse charge de transférer les documents produits sur l’Internet.\nRien n’empêche d’aller un tout petit peu plus loin et d’imaginer une architecture\noù les trois composantes sont franchement séparées et dialoguent par l’intermédiaire\ndu réseau Internet. Ici, nous supposerons que le serveur mysqld et Apache sont sur la\nmême machine, mais le passage à une solution réellement à « trois pôles » ne présentepas, ou peu, de différence du point de vue technique.\n1.3 UNE PREMIÈRE BASE MySQL\nNous allons maintenant mettre ces principes en application en créant une premièrebase MySQL contenant notre liste de ﬁlms, et en accédant à cette base avec PHP .Pour l’instant nous présentons les différentes commandes d’une manière simple etintuitive avant d’y revenir plus en détail dans les prochains chapitres.\n1.3 Une première base MySQL\n 25\n1.3.1 Création d’une table\nLa première base, très simple, est constituée d’une seule table FilmSimple ,a v e cl e s\nquelques attributs déjà rencontrés précédemment. Pour créer des tables, on utilise\nune partie de SQL dite « Langage de Déﬁnition de Données » (LDD) dont la com-mande principale est CREATE TABLE.\nCREATE TABLE FilmSimple\n(titre VARCHAR (30) ,\nannee INTEGER ,\nnom_realisateur VARCHAR (30) ,\nprenom_realisateur VARCHAR (30) ,\nannee_naissance INTEGER\n);\nLa syntaxe du CREATE TABLE se comprend aisément. On indique le nom de\nla table, qui sera utilisé par la suite pour accéder à son contenu, puis la liste desattributs avec leur type. Pour l’instant, nous nous en tenons à quelques types de base :INTEGER, que l’on peut abréger en INT, est un entier, et VARCHAR est une chaîne de\ncaractères de longueur variable, pour laquelle on spéciﬁe la longueur maximale.\nREMARQUE – On peut utiliser indifféremment les majuscules et les minuscules pour les\nmots-clés de SQL. De même, les sauts de ligne, les tabulations et les espaces successifs dans\nun ordre SQL équivalent à un seul espace pour l’interpréteur et peuvent donc être utilisés\nlibrement pour clarifier la commande.\nPour exécuter une commande SQL, il existe plusieurs possibilités, la plus générale\nétant d’utiliser le client mysql dont le rôle est principalement celui d’un interpréteur\nde commandes. Dans le cadre d’une application web, on dispose également d’une\ninterface web d’administration de bases MySQL, phpMyAdmin. Cet outil fournit un\nenvironnement de travail graphique , plus convivial que l’interpréteur de commandes\nmysql .\nNous envisageons successivement les deux situations, mysql etphpMyAdmin,d a n s\nce qui suit.\n1.3.2 L’utilitaire mysql\nVoici tout d’abord comment créer une base de données et un nouvel utilisateur avecl’utilitaire mysql .\n% mysql -u root -p\nEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.\nmysql> CREATE DATABASE Films;\nmysql>mysql> GRANT ALL PRIVILEGES ON Films.* TO adminFilms@localhost\nIDENTIFIED BY ’mdpAdmin’;\nmysql> exit\n26\n Chapitre 1. Introduction à MySQL et PHP\nLe prompt mysql> est celui de l’interpréteur de commandes de MySQL : ne pas\nentrer de commandes Unix à ce niveau, et réciproquement !\nLa commande CREATE DATABASE crée une base de données Films, autrement dit\nun espace dans lequel on va placer une ou plusieurs tables contenant les données de\nl’application. La commande GRANT déﬁnit un utilisateur adminFilms qui aura tous\nles droits ( ALL PRIVILEGES) pour accéder à cette base et manipuler ses données.\nOn peut alors se connecter à la base Films sous le compte adminFilms avec :\n% mysql -u adminFilms -p Films\nL’option -pindique que l’on veut entrer un mot de passe. mysql afﬁche alors un\nprompt\npassword:\nIl est possible de donner le mot de passe directement après -pdans la ligne de\ncommande mais ce n’est pas une très bonne habitude à prendre que d’afﬁcher en\nclair des mots de passe.\nLa meilleure méthode consiste à stocker dans un ﬁchier de conﬁguration le\ncompte d’accès à MySQL et le mot de passe. Pour éviter à l’utilisateur adminFilms\nd’entrer systématiquement ces informations, on peut ainsi créer un ﬁchier .my.cnf dans\nle répertoire $HOME (sous Unix ou Mac OS, dans une fenêtre terminal )o u C:(sous\nWindows), et y placer les informations suivantes :\n[client]\nuser= adminFilms\npassword = mdpAdmin\nTous les programmes clients de MySQL lisent ce ﬁchier et utiliseront ce compte\nd’accès pour se connecter au programme serveur mysqld . La connexion à la base Films\ndevient alors simplement :\n% mysql Films\nBien entendu, il faut s’assurer que le ﬁchier .my.cnf n’est pas lisible par les autres\nutilisateurs. Nous renvoyons à l’annexe A pour plus de détails sur l’utilisation des\nﬁchiers de conﬁguration.\nCréation de la table\nOn suppose maintenant que l’utilisateur dispose d’un ﬁchier de conﬁguration. Voicila séquence complète de commandes pour créer la table FilmSimple .\n% mysql\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nmysql> USE Films;\n1.3 Une première base MySQL\n 27\nDatabase changed\nmysql> CREATE TABLE FilmSimple\n-> (titre VARCHAR (30),\n-> annee INTEGER,\n-> nom_realisateur VARCHAR (30),-> prenom_realisateur VARCHAR (30),\n-> annee_naissance INTEGER\n-> );\nQuery OK, 0 rows affected (0.01 sec)mysql> exit\nLa commande USE Films indique que l’on s’apprête à travailler sur la base Films\n(rappelons qu’un serveur peut gérer plusieurs bases de données). On peut, de manière\néquivalente, donner le nom de la base sur la ligne de commande de mysql .L a\ncommande CREATE TABLE, entrée ligne à ligne, provoque l’afﬁchage de ->tant qu’un\npoint-virgule indiquant la ﬁn de la commande n’est pas saisie au clavier.\nREMARQUE – Peut-on utiliser des accents dans les noms de table et d’attributs ? La réponse\nestoui, du moins si MySQL a été installé en précisant que le jeu de caractères à utiliser est\ndu type Latin . Il y a quand même un petit problème à prendre en compte : ces noms sont\nutilisés pour interroger la base de données, et tous les claviers ne disposent pas des caractères\naccentués. J’ai pris le parti de ne pas utiliser d’accent pour tout le code informatique. En\nrevanche, les informations stockées dans la base pourront elles contenir des accents. À vous\nde juger du choix qui convient à votre situation.\nLa table FilmSimple est maintenant créée. Vous pouvez consulter son schéma avec\nla commande DESCRIBE (DESC en abrégé) et obtenir l’afﬁchage ci-dessous. Seules\nles informations Field etType nous intéressent pour l’instant (pour des raisons\nobscures, MySQL afﬁche int(11) au lieu de INTEGER dans la colonne Type...).\nmysql> DESC FilmSimple;\n+--------------------+-------------+------+ -----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+--------------------+-------------+------+ -----+---------+-------+\n| titre | varchar(30) | YES | | NULL | |\n| annee | int(11) | YES | | NULL | |\n| nom_realisateur | varchar(30) | YES | | NULL | |\n| prenom_realisateur | varchar(30) | YES | | NULL | |\n| annee_naissance | int(11) | YES | | NULL | |\n+--------------------+-------------+------+ -----+---------+-------+\nPour détruire une table, on dispose de la commande DROP TABLE.\nmysql> DROP TABLE FilmSimple;Query OK, 0 rows affected (0.01 sec)\nIl est assez fastidieux d’entrer au clavier toutes les commandes de mysql ,d ’ a u t a n t\nque toute erreur de frappe implique de recommencer la saisie au début. Une meilleure\n28\n Chapitre 1. Introduction à MySQL et PHP\nsolution est de créer un ﬁchier contenant les commandes et de l’exécuter. Voici le\nﬁchier FilmSimple.sql (nous parlerons de script SQL à partir de maintenant).\nExemple 1.4 exemples/FilmSimple.sql :Fichier de création de la table FilmSimple\n/∗Création d’une table ’FilmSimple ’ ∗/\nCREATE TABLE FilmSimple\n(titre VARCHAR (30) ,\nannee INTEGER ,\nnom_realisateur VARCHAR (30) ,\nprenom_realisateur VARCHAR (30) ,\nannee_naissance INTEGER\n);\nUn script SQL peut contenir tout un ensemble de commandes, chacune devant\nse terminer par un ’;’. Toutes les lignes commençant par « # », ou tous les textesencadrés par /*,*/, sont des commentaires.\nOn indique à mysql qu’il doit prendre ses commandes dans ce ﬁchier au lieu de\nl’entrée standard de la manière suivante :\n% mysql -u adminFilms -p <FilmSimple.sql\nou simplement, si on utilise un ﬁchier de conﬁguration avec nom et mot de passe :\n% mysql <FilmSimple.sql\nLe caractère « <» permet une redirection de l’entrée standard (par défaut la\nconsole utilisateur) vers\nFilmSimple.sql . Dernière solution, quand on est déjà sous l’inter-\npréteur de MySQL, on peut exécuter les commandes contenues dans un ﬁchier avecla commande source :\nmysql> source FilmSimple.sql\nSi l’on utilise un utilitaire comme PhpMyAdmin, le plus simple est de copier-\ncoller la commande depuis le ﬁchier vers la fenêtre adéquate de PhpMyAdmin (voirpage 34).\nInsertion de données\nNous avons maintenant une table FilmSimple dans laquelle nous pouvons insérer des\ndonnées avec la commande SQL INSERT. Voici sa syntaxe :\nINSERT INTO FilmSimple ( titre , annee , prenom_realisateur ,\nnom_realisateur)\nVALUES ( ’ Pulp Fiction ’ , 1995, ’Quentin ’ , ’ Tarantino ’ ) ;\nOn indique la table dans laquelle on veut insérer une ligne, puis la liste des attri-\nbuts auxquels ont va affecter une valeur. Les attributs qui n’apparaissent pas, comme,\n1.3 Une première base MySQL\n 29\npour cet exemple l’année de naissance du metteur en scène annee_naissance,\nauront une valeur dite NULL sur laquelle nous reviendrons plus tard.\nLa dernière partie de la commande INSERT est la liste des valeurs, précédée du\nmot-clé VALUES. Il doit y avoir autant de valeurs que d’attributs, et les chaînes de\ncaractères doivent être encadrées par des apostrophes simples (’), ce qui permet d’y\nintroduire des blancs.\nREMARQUE – MySQL accepte les apostrophes doubles (\"), mais ce n’est pas conforme\nà la norme SQL ANSI. Il est préférable de prendre l’habitude d’utiliser systématiquement\nles apostrophes simples. Il n’est pas nécessaire d’utiliser des apostrophes pour les noms\nd’attributs, sauf s’ils correspondent à des mots-clés SQL, auquel cas on utilise l’apostrophe\ninversée (‘).\nVoici l’exécution de cette commande INSERT avec l’utilitaire mysql .\n% mysql Films\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nmysql> INSERT INTO FilmSimple\n-> (titre, annee, nom_realisateur, prenom_realisateur)\n-> VALUES (’Pulp Fiction’, 1995, ’Quentin’, ’Tarantino’);\nQuery OK, 1 row affected (0.16 sec)\nLa commande INSERT est en fait rarement utilisée directement, car sa syntaxe\nest assez lourde et surtout il n’y a pas de contrôle sur les valeurs des attributs. Le plus\nsouvent, l’insertion de lignes dans une table se fait avec l’une des deux méthodessuivantes.\nSaisie dans une interface graphique. Ce type d’interface offre une aide à la saisie,\npermet des contrôles, et facilite la tâche de l’utilisateur. Nous verrons comment\ncréer de telles interfaces sous forme de formulaires HTML.\nChargement « en masse » à partir d’un ﬁchier. Dans ce cas un programme lit les\ninformations dans le ﬁchier contenant les données, et effectue répétitivement desordres INSERT pour chaque ligne trouvée.\nMySQL fournit une commande accessible par l’interpréteur de commande, LOAD\nDATA, qui évite dans beaucoup de cas d’avoir à écrire un programme spéciﬁque pourcharger des ﬁchiers dans une base. Cette commande est capable de lire de nombreuxformats différents. Nous prenons comme exemple le ﬁchier\nfilms.txt , fourni avec les\nexemples, dont voici le contenu :\nAlien 1979 Scott Ridley 1943\nVertigo 1958 Hitchcock Alfred 1899\nPsychose 1960 Hitchcock Alfred 1899\nKagemusha 1980 Kurosawa Akira 1910\n30\n Chapitre 1. Introduction à MySQL et PHP\nVolte-face 1997 Woo John 1946\nTitanic 1997 Cameron James 1954Sacrifice 1986 Tarkovski Andrei 1932\nVoici comment on utilise la commande LOAD DATA pour insérer en une seule fois\nle contenu de films.txt dans la table FilmSimple .\nExemple 1.5 exemples/LoadData.sql :Commande de chargement d’un ﬁchier dans la base\n# Chargement du fichier films.txt dans la table FilmSimple\nLOAD DATA LOCAL INFILE ’films.txt’\nINTO TABLE FilmSimple\nFIELDS TERMINATED BY ’ ’;\nVoici quelques explications sur les options utilisées :\n•l’option LOCAL indique au serveur que le ﬁchier se trouve sur la machine du\nclient mysql . Par défaut, le serveur cherche le ﬁchier sur sa propre machine,\ndans le répertoire contenant la base de données ;\n•on donne ici simplement le nom ’ films.txt ’,ce qui suppose que le client mysql a\nété lancé dans le répertoire où se trouve ce ﬁchier . Si ce n’est pas le cas, il faut\nindiquer le chemin d’accès complet.\n•enﬁn, il existe de nombreuses options pour indiquer le format du ﬁchier. Ici\non indique qu’une ligne dans le ﬁchier correspond à une ligne dans la table, etque les valeurs des attributs dans le ﬁchier sont séparées par des blancs.\nIl s’agit d’un format simple mais notablement insufﬁsant. Il n’est pas possible\nd’avoir des blancs dans le titre de ﬁlms, ou d’ignorer la valeur d’un attribut. On nesaurait pas charger la description du ﬁlm Pulp Fiction avec ce format. Heureusement\nLOAD DATA sait traiter des formats de ﬁchier beaucoup plus complexes. Une descrip-\ntion de cette commande est donnée dans l’annexe B, page 470.\nL’exécution sous mysql donne le résultat suivant :\n% mysql\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nmysql> LOAD DATA LOCAL INFILE ’films.txt’\n-> INTO TABLE FilmSimple\n-> FIELDS TERMINATED BY ’ ’;\nQuery OK, 7 rows affected (0.00 sec)Records: 7 Deleted: 0 Skipped: 0 Warnings: 0\nInterrogation et modification\nLe langage SQL propose les quatre opérations essentielles de manipulation de don-\nnées : insertion, destruction ,mise à jour etrecherche. Ces opérations sont communément\ndésignées par le terme de requêtes . L’ensemble des commandes permettant d’effectuer\n1.3 Une première base MySQL\n 31\nces opérations est le Langage de Manipulation de Données, ou LMD, par opposition au\nLangage de Déﬁnition de Données ou LDD.\nNous avons déjà vu la commande INSERT qui effectue des insertions. Nous\nintroduisons maintenant les trois autres opérations en commençant par la recherche\nqui est de loin la plus complexe. Les exemples qui suivent s’appuient sur la tableFilmSimple contenant les quelques lignes insérées précédemment.\nSELECT titre , annee\nFROM FilmSimple\nWHERE annee > 1980\nCe premier exemple nous montre la structure de base d’une recherche avec SQL,\navec les trois clauses SELECT, FROM etWHERE.\n•FROM indique la table dans laquelle on trouve les attributs utiles à la requête.\nUn attribut peut être « utile » de deux manières (non exclusives) : (1) onsouhaite afﬁcher son contenu (clause SELECT), (2) il a une valeur particulière\n(une constante ou la valeur d’un autre attribut) que l’on indique dans la clauseWHERE.\n•SELECT indique la liste des attributs constituant le résultat.\n•WHERE indique les conditions que doivent satisfaire les lignes de la base pour\nfaire partie du résultat.\nREMARQUE – sous Unix, une table comme FilmSimple est stockée par MySQL dans un\nfichier de nom FilmSimple . Comme Unix distingue les majuscules et les minuscules pour les\nnoms de fichiers, il faut absolument respecter la casse dans le nom des tables, sous peine\nd’obtenir le message Table does not exist .\nCette requête peut être directement effectuée sous mysql , ce qui donne le résultat\nsuivant.\nmysql> SELECT titre, annee\n-> FROM FilmSimple\n-> WHERE annee > 1980;\n+------------+-------+\n| titre | annee |\n+------------+-------+| Volte-face | 1997 || Titanic | 1997 |\n| Sacrifice | 1986 |\n+------------+-------+3 rows in set (0.00 sec)\nN’oubliez pas le point-virgule pour ﬁnir une commande. La requête SQL la plus\nsimple est celle qui afﬁche toute la table, sans faire de sélection (donc sans clause\nWHERE) et en gardant tous les attributs. Dans un tel cas on peut simplement utiliserle caractère « * » pour désigner la liste de tous les attributs.\n32\n Chapitre 1. Introduction à MySQL et PHP\nmysql> SELECT * FROM FilmSimple;\n+------------+-------+-----------------+--------------------+-----------------+\n| titre | annee | nom_realisateur | prenom_realisateur | annee_naissance |\n+------------+-------+-----------------+--------------------+-----------------+\n| Alien | 1979 | Scott | Ridley | 1943 |\n| Vertigo | 1958 | Hitchcock | Alfred | 1899 |\n| Psychose | 1960 | Hitchcock | Alfred | 1899 |\n| Kagemusha | 1980 | Kurosawa | Akira | 1910 |\n| Volte-face | 1997 | Woo | John | 1946 |\n| Titanic | 1997 | Cameron | James | 1954 |\n| Sacrifice | 1986 | Tarkovski | Andrei | 1932 |\n+------------+-------+-----------------+--------------------+-----------------+7 rows in set (0.00 sec)\nLes requêtes les plus complexes que l’on puisse faire à ce stade sont celles qui\nsélectionnent des ﬁlms selon des critères comme « Les ﬁlms dont le titre est Vertigo ,\nou dont le prénom du metteur en scène est John, ou qui sont parus dans les années\n90 ». La clause WHERE permet la combinaison de ces critères avec les connecteurs\nAND, ORet l’utilisation éventuelle des parenthèses pour lever les ambiguïtés.\nmysql> SELECT titre, annee\n-> FROM FilmSimple\n-> WHERE titre = ’Vertigo’-> OR prenom_realisateur = ’Alfred’-> OR (annee >= 1990 AND annee < 2000);\n+------------+-------+| titre | annee |+------------+-------+\n| Vertigo | 1958 |\n| Psychose | 1960 || Volte-face | 1997 |\n| Titanic | 1997 |\n+------------+-------+4 rows in set (0.00 sec)\nTant qu’il n’y a qu’une table à interroger, l’utilisation de SQL s’avère extrême-\nment simple. Le serveur fait tout le travail pour nous : accéder au ﬁchier, lire les\nlignes, retenir celles qui satisfont les critères, satisfaire simultanément (ou presque)les demandes de plusieurs utilisateurs, etc. Dès qu’on interroge une base avec plu-sieurs tables, ce qui est la situation normale, les requêtes SQL deviennent un peuplus complexes.\nREMARQUE – Comme pour PHP, nous introduisons SQL au fur et à mesure. Les requêtes\nsur plusieurs tables (jointures) sont présentées dans le chapitre 7, page 289. Les requêtes\nd’agrégation sont présentées dans ce même chapitre, page 307. Enfin, le chapitre 10 propose\nun récapitulatif complet sur le langage.\nLes commandes de mise à jour et de destruction sont des variantes du SELECT.\nOn utilise la même clause WHERE, en remplaçant dans un cas le SELECT parUPDATE,\net dans l’autre par DELETE. Voici deux exemples.\n1.3 Une première base MySQL\n 33\n•Détruire tous les ﬁlms antérieurs à 1960.\nLe critère de sélection des ﬁlms à détruire est exprimé par une clause WHERE.\nDELETE FROM FilmSimple WHERE annee <= 1960\nLes données détruites sont vraiment perdues (sauf si vous utilisez le mode\ntransactionnel de MySQL, optionnel). Ceux qui auraient l’habitude d’unsystème gérant les transactions doivent garder en mémoire qu’il n’y a pas depossibilité de retour en arrière avec rollback dans le fonctionnement par\ndéfaut de MySQL.\n•Changer le nom de ‘John Woo’ en ’Jusen Wu’.La commande est légèrement plus complexe. On indique par une suite de SET\nattribut=valeur l’affectation de nouvelles valeurs à certains attributs des\nlignes modiﬁées.\nUPDATE FilmSimple SET nom_realisateur=’ W u’ ,\nprenom_realisateur=’Yusen ’\nWHERE nom_realisateur = ’W o o’\nMême remarque que précédemment : sauf en mode transactionnel, toutes les\nlignes sont modiﬁées sans possibilité d’annulation. Une manière de s’assurer\nque la partie de la table affectée par un ordre DELETE ouUPDATE est bien celle\nque l’on vise est d’effectuer au préalable la requête avec SELECT et la même\nclause WHERE.\nVoici l’exécution sous mysql .\nmysql> DELETE FROM FilmSimple WHERE annee <= 1960;\nQuery OK, 2 rows affected (0.01 sec)\nmysql>\nmysql> UPDATE FilmSimple SET nom_realisateur=’Wu’,\nprenom_realisateur=’Yusen’\n-> WHERE nom_realisateur = ’Woo’;\nQuery OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0\nQuelques commandes utiles\nEnﬁn, mysql fournit tout un ensemble de commandes pour inspecter les tables, don-\nner la liste des tables d’une base de données, etc. Voici une sélection des commandes\nles plus utiles. L’annexe B donne une liste exhaustive de toutes les fonctionnalités deMySQL.\n•SELECT DATABASE(); C’est une pseudo-requête SQL (sans FROM) qui\na f ﬁ c h el en o md el ab a s ec o u r a n t e .\n•SELECT USER(); Idem, cette pseudo-requête afﬁche le nom de l’utilisateur\ncourant.\n•SHOW DATABASES; Afﬁche la liste des bases de données.\n•SHOW TABLES; Afﬁche la liste des tables de la base courante.\n•SHOW COLUMNS FROM NomTable ;Afﬁche la description de la table Nom-\nTable.\n34\n Chapitre 1. Introduction à MySQL et PHP\n1.3.3 L’interface PhpMyAdmin\nPhpMyAdmin est un outil entièrement écrit en PHP qui fournit une interface simple\net très complète pour administrer une base MySQL. La plupart des commandes del’utilitaire mysql peuvent s’effectuer par l’intermédiaire de phpMyAdmin, les opéra-\ntions possibles dépendant bien sûr des droits de l’utilisateur qui se connecte à la base.Voici une liste des principales possibilités :\n1. Créer et détruire des bases de données (sous le compte root de MySQL).\n2. Créer, détruire, modiﬁer la description des tables.\n3. Consulter le contenu des tables, modiﬁer certaines lignes ou les détruire, etc.\n4. Exécuter des requêtes SQL interactivement.\n5. Charger des ﬁchiers dans des tables et, réciproquement, récupérer le contenu\nde tables dans des ﬁchiers ASCII.\n6. Administrer MySQL.\nBeaucoup de fournisseurs d’accès utilisent ce produit pour permettre la création,\nmodiﬁcation ou mise à jour d’une base de données personnelle à distance, à l’aide\nd’un simple navigateur. L’annexe A décrit l’installation de phpMyAdmin. Même s’ilne dispense pas complètement de l’utilisation de l’utilitaire mysql , il permet de faire\nbeaucoup d’opérations simples de manière conviviale.\nLa ﬁgure 1.6 montre une copie d’écran de la page d’accueil de phpMyAdmin,\naprès connexion d’un utilisateur. L’écran est divisé en deux parties. Sur la gauche\nun menu déroulant propose la liste des bases de données accessibles à l’utilisateur\n(si vous accédez au système d’un fournisseur d’accès, vous ne verrez certainementque votre base personnelle). Cette partie gauche reste afﬁchée en permanence. Lapartie droite présente l’ensemble des opérations disponibles en fonction du contexte.\nFigure 1.6 — Page d’accueil de phpMyAdmin\n1.3 Une première base MySQL\n 35\nInitialement, si le compte de connexion utilisé est root, phpMyAdmin propose de\nconsulter la situation du serveur et des clients MySQL, et des options de conﬁgura-\ntion de phpMyAdmin lui-même (notamment la langue).\nEn sélectionnant une des bases, on obtient sa structure (à savoir la liste des\ntables), et toute une liste d’actions à effectuer sur cette base. La ﬁgure 1.7 montrecette seconde page (noter qu’il s’agit d’un formulaire HTML). Voici quelques indica-tions sur les fonctionnalités proposées :\nStructure. Pour chaque table afﬁchée, on peut effectuer les opérations suivantes.\n1.Afﬁcher donne le contenu de la table.\n2.Sélectionner propose un petit formulaire permettant de sélectionner une partie\nde la table.\n3.Insérer présente un autre formulaire, créé dynamiquement par phpMyAdmin,\ncette fois pour insérer des données dans la table.\n4.Propriétés donne la description de la table et de ses index. Cette option donne\naccès à une autre page, assez complète, qui permet de modiﬁer la table en\najoutant ou en supprimant des attributs.\n5.Supprimer détruit la table (phpMyAdmin demande conﬁrmation).\n6.Vide détruit toutes les lignes.\nSQL. La fenêtre placée en dessous de la liste des tables permet d’entrer des com-\nmandes SQL directement.\nPour créer la table FilmSimple , on peut copier/coller directement la commande\nCREATE TABLE dans cette fenêtre et l’exécuter. De même, on peut effectuer des\nINSERT,d e s SELECT, et toutes les commandes vues dans la section précédente.\nFigure 1.7 — Actions sur une base avec phpMyAdmin\n36\n Chapitre 1. Introduction à MySQL et PHP\nCette fenêtre est, dans phpMyAdmin, la fonctionnalité la plus proche de l’utili-\ntaire mysql .\nExporter. Cette partie permet de créer un ﬁchier contenant toutes les commandes\nde création de la base, ainsi que, optionnellement, les ordres d’insertion desdonnées sous forme de commandes INSERT. En d’autres termes vous pouvez faire\nune sauvegarde complète, sous forme d’un ﬁchier ASCII. En choisissant l’optiontransmettre , le ﬁchier est transmis au navigateur.\nRechercher. Permet d’effectuer une recherche par mot-clé.\nRequête. Donne accès à un formulaire aidant à la construction de requêtes SQL\ncomplexes, sans connaître SQL.\nSupprimer. Supprime la base, avec toutes ses tables (après conﬁrmation).\nEnﬁn, le bas de cette page principale propose un formulaire pour créer une\nnouvelle table. Avant le bouton « Exécuter », il faut entrer le nom de la table etle nombre d’attributs.\nL’utilisation de phpMyAdmin est simple et s’apprend en pratiquant. Bien que cet\noutil, en offrant une interface de saisie, économise beaucoup de frappe au clavier, ils’avère quand même nécessaire à l’usage de connaître les commandes SQL, ne serait-\nce que pour comprendre les actions effectuées et les différentes options possibles.\nDans tout ce qui suit, nous continuerons à présenter les commandes du langage SQLavec l’outil mysql , sachant qu’il sufﬁt d’exécuter ces commandes dans la fenêtre SQL\nde phpMyAdmin pour obtenir le même résultat.\n1.4 ACCÈS À MySQL AVEC PHP\nMaintenant que nous disposons d’une base MySQL, nous pouvons aborder les outils\nd’accès à cette base à partir de scripts PHP . Nous étudions successivement dans cette\nsection les aspects suivants :\nL’interface fonctionnelle MySQL/PHP. Il s’agit d’un ensemble de fonctions qui,\npour l’essentiel, permettent de se connecter à MySQL, d’exécuter des requêtes\nSQL et de récupérer le résultat que l’on peut ensuite afﬁcher dans une pageHTML.\nInterrogation à partir de formulaires HTML. Nous montrons comment associer\nun formulaire et un programme interrogeant la base de données ;\nInsertions et mises à jour. Toujours à partir de formulaires HTML, on peut créer\ndes scripts PHP qui insèrent de nouvelles informations ou modiﬁent celles qui\nexistent déjà.\n1.4 Accès à MySQL avec PHP\n 37\n1.4.1 L’interface MySQL/PHP\nPHP communique avec MySQL par l’intermédiaire d’un ensemble de fonctions qui\npermettent de récupérer, modiﬁer, ou créer à peu près toutes les informations relativesà une base de données. Parmi ces informations, il faut compter bien entendu le\ncontenu des tables, mais également leur description (le schéma de la base). L’utilitaire\nphpMyAdmin utilise par exemple les fonctions permettant d’obtenir le schéma pour\nprésenter une interface d’administration, engendrer à la volée des formulaires desaisie, etc.\nLe tableau 1.3 donne la liste des principales fonctions de l’API. Nous renvoyons\nà l’annexe C pour une liste exhaustive des fonctions MySQL/PHP .\nTableau 1.3 — Principales fonctions de l’API MySQL/PHP\nFonction\n Description\nmysql_connect()\n Pour établir une connexion avec MySQL, pour un compte utilisa-\nteur et un serveur donnés. Renvoie une valeur utilisée ensuite pourdialoguer avec le serveur.\nmysql_pconnect()\n Idem, mais avec une connexion persistante (voir annexe C). Cette\ndeuxième version est plus performante quand l’interpréteur PHPest inclus dans Apache.\nmysql_select_db()\n Permet de se placer dans le contexte d’une base de données. C’estl’équivalent de la commande\nUSEbase sous mysql .\nmysql_query()\n Pour exécuter une requête SQL ou n’importe quelle commandeMySQL. Renvoie une variable représentant le résultat de la requête.\nmysql_fetch_object()\n Récupére une des lignes du résultat et positionne le curseur sur laligne suivante. La ligne est représentée sous forme d’un objet (un\ngroupe de valeurs).\nmysql_fetch_row()\n Récupére une des lignes du résultat, et positionne le curseur surla ligne suivante. La ligne est représentée sous forme d’un tableau\n(une liste de valeurs).\nmysql_error()\n Renvoie le message de la dernière erreur rencontrée.\nVoici maintenant ces fonctions en action. Le script suivant effectue une\nrecherche de toutes les lignes de la table FilmSimple et afﬁche la liste des ﬁlms dans\nune page HTML.\nExemple 1.6 exemples/ExMyPHP1.php :Accès à MySQL avec PHP\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head><title >Connexion à MySQL</ title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n38\n Chapitre 1. Introduction à MySQL et PHP\n<body>\n< h 1>Interrogation de la table FilmSimple </h 1>\n<?php\nrequire ( \"Connect . php\" ) ;\n$connexion = mysql_pconnect (S E R V E U R, N O M , PASSE) ;\nif(! $connexion) {\necho \"Désolé , connexion à \" . S E R V E U R . \" impossible\\n\" ;\nexit ;\n}\nif(!mysql_select_db (BASE, $connexion)) {\necho \"Désolé , accès à la base \" . B A S E . \" impossible\\ n\" ;\nexit ;\n}\n$resultat = mysql_query ( \"SELECT ∗F R O M FilmSimple \" , $connexion) ;\nif($resultat) {\nwhile ($film = mysql_fetch_object ( $resultat )) {\necho \"$film −>titre , paru en $film −>annee , r é a li s é \"\n. \"par $film −>prenom_realisateur $film −>nom_realisateur.<\nbr/>\\n\" ;\n}\n}\nelse {\necho \"<b>Erreur dans l ’ exécution de la requête . </b> <br/>\" ;\necho \"<b>Message de M y S Q L : </b> \" . mysql_error ($connexion) ;\n}\n?>\n</body>\n</html>\nNous allons commenter soigneusement ce code qui est représentatif d’une bonne\npartie des techniques nécessaires pour accéder à une base MySQL et en extraire des\ninformations. Le script proprement dit se réduit à la partie comprise entre les balises<?php et?>.\nInclusion de fichiers – Constantes\nLa première instruction est require (\"Connect.php\");\nLa commande require permet d’inclure le contenu d’un ﬁchier dans le script.\nCertaines informations sont communes à beaucoup de scripts, et les répétersystématiquement est à la fois une perte de temps et une grosse source d’ennuis lejour où il faut effectuer une modiﬁcation dans nversions dupliquées. Ici on a placé\ndans le ﬁchier\nConnect.php les informations de base sur la connexion à MySQL : le\nnom du serveur, le nom de la base et le compte d’accès à la base.\n1.4 Accès à MySQL avec PHP\n 39\nExemple 1.7 exemples/Connect.php :Fichier contenant les paramètres de connexion\n<?php\n//\n// Fichier contenant les definitions de constantes\n// pour la connexion à M y S Q L\ndefine ( ’ N O M’ ,\"adminFilms\") ;\ndefine ( ’ PASSE ’ , \" mdpAdmin \" ) ;\ndefine ( ’ SERVEUR ’ , \" l o c a l h o s t \" ) ;\ndefine ( ’B A S E’ , \"films\");\n?>\nLa commande define permet de déﬁnir des constantes , ou symboles correspon-\ndant à des valeurs qui ne peuvent être modiﬁées. L’utilisation systématique des\nconstantes, déﬁnies en un seul endroit (un ﬁchier que l’on peut insérer à la demande)\ngarantit l’évolutivité du site. Si le serveur devient par exemple magellan et le nom de\nla base Movies , il sufﬁra de faire la modiﬁcation dans cet unique ﬁchier. Accessoire-\nment, l’utilisation de symboles simples permet de ne pas avoir à se souvenir de valeurs\nou de textes qui peuvent être compliqués.\nREMARQUE – Il est tentant de donner une extension autre que .php aux fichiers contenant\nles scripts. Le fichier Connect.php par exemple pourrait être nommé Connect.inc pour bien\nindiquer qu’il est destiné à être inclus dans d’autres scripts. Attention cependant : il devient alors\npossible de consulter le contenu du fichier avec l’URL http://serveur/Connect.inc .L ’ e x t e n s i o n\n.inc étant inconnue du programme serveur, ce dernier choisira de transmettre le contenu en\nclair (en-tête text/plain ) au client. Cela serait très regrettable dans le cas de Connect.php ,\nqui contient un mot de passe. Un fichier d’extension .php s e r a ,l u i ,t o u j o u r ss o u m i sp a rl e\nprogramme serveur au filtre de l’interpréteur PHP et son contenu n’est jamais visible par le\nclient web.\nIl faut protéger le plus possible les fichiers contenant des mots de passe. L’accès à ces fichiers\ndevrait être explicitement réservé aux utilisateurs qui doivent les modifier (le webmestre) et\nau serveur web (dans ce dernier cas, un accès en lecture suffit).\nConnexion au serveur\nDonc nous disposons avec ce require des symboles de constantes NOM, PASSE, BASE\netSERVEUR2, soit tous les paramètres nécessaires à la connexion à MySQL.\n$connexion = mysql_pconnect (S E R V E U R, N O M , PASSE) ;\nLa fonction mysql_pconnect() essaie d’établir une connexion avec le serveur\nmysqld . En cas de succès une valeur positive est renvoyée, qui doit ensuite être\nutilisée pour dialoguer avec le serveur. En cas d’échec mysql_pconnect() afﬁche\nun message d’erreur et renvoie une valeur nulle.\n2. L’utilisation des majuscules pour les constantes n’est pas une obligation, mais facilite la lecture.\n40\n Chapitre 1. Introduction à MySQL et PHP\nREMARQUE – Si vous voulez éviter que MySQL envoie un message en cas d’échec à la\nconnexion, vous pouvez préfixer le nom de la fonction par « @ ». C’est à vous alors de tester\nsi la connexion est établie et d’afficher un message selon vos propres normes de présentation.\nCette pratique est valable pour les autres fonctions de l’interface MySQL/PHP.\nAvant de continuer, il faut vériﬁer que la connexion est bien établie. Pour cela,\non peut tester la valeur de la variable $connexion, et, le cas échéant, afﬁcher un\nmessage et interrompre le script avec exit.\nif(! $connexion) {\necho \"Désolé , connexion à \" . S E R V E U R . \" impossible\\n\" ;\nexit ;\n}\nAvec PHP , toute valeur non nulle est considérée comme vraie, le 0 ou la chaîne\nvide étant interprétés comme faux. Au lieu d’effectuer un test de comparaison, on\npeut tester directement la valeur de la variable $connexion.L et e s ts i m p l e if\n($connexion) donne un résultat inverse de if ($connexion == 0).\nEn revanche, en inversant la valeur booléenne de $connexion avec l’opérateur\nde négation « ! », on obtient un test équivalent, et la notation, très courante, if (!\n$connexion). La condition est vériﬁée si $connexion est faux, ce qui est le but\nrecherché.\nLe même principe est appliqué au résultat de la fonction mysql_select_db()\nqui renvoie, elle aussi, une valeur positive (donc vraie) si l’accès à la base réussit.D’où le test :\nif (!mysql_select_db (BASE, $connexion))\nTous ces tests sont importants. Beaucoup de raisons peuvent rendre un serveur\nindisponible, ou un compte de connexion invalide. Le fait de continuer le script, etdonc d’effectuer des requêtes sans avoir de connexion, mène à des messages d’erreurassez désagréables. Bien entendu l’écriture systématique de tests et de messagesalourdit le code : nous verrons comment écrire ce genre de chose une (seule) fois\npour toutes en utilisant des fonctions.\nE x é c u t i o nd el ar e q u ê t e\nLe moment est enﬁn venu d’effectuer une requête ! On utilise la fonction\nmysql_query().\n$resultat = mysql_query (\"SELECT * FROM FilmSimple\", $connexion);\nComme d’habitude, cette fonction renvoie une valeur positive si la fonction\ns’exécute correctement. En cas de problème (erreur de syntaxe par exemple), le blocassocié au else est exécuté. Il afﬁche le message fourni par MySQL viala fonction\nmysql_error().\necho \"<b>Erreur dans l ’ exécution de la requête . </b> <br/>\" ;\necho \"<b>Message de M y S Q L : </b> \" . mysql_error () ;\nNoter l’utilisation de balises HTML dans les chaînes de caractères, ainsi que\nl’utilisation de l’opérateur de concaténation de chaînes, « . ».\n1.4 Accès à MySQL avec PHP\n 41\nAffichage du résultat\nSi la requête réussit, il ne reste plus qu’à récupérer le résultat. Ici nous avons à\nrésoudre un problème classique d’interaction entre une base de données et un langagede programmation. Le résultat est un ensemble, arbitrairement grand, de lignes dansune table, et le langage ne dispose pas de structure pratique pour représenter cetensemble. On peut penser à tout mettre dans un tableau à deux dimensions (c’estd’ailleurs possible avec PHP), mais se pose alors un problème d’occupation mémoiresi le résultat est vraiment volumineux (plusieurs mégaoctets par exemple).\nLa technique habituellement utilisée est de parcourir les lignes une à une avec\nuncurseur et d’appliquer le traitement à chaque ligne individuellement. Cela évite\nd’avoir à charger tout le résultat en même temps. Ici, on utilise une des fonctionsfetch qui correspondent à l’implantation de cette notion de curseur dans MySQL.\n$film = mysql_fetch_object ($resultat);\nLa fonction mysql_fetch_object() prend une ligne dans le résultat (initia-\nlement on commence avec la première ligne) et positionne le curseur sur la lignesuivante. À chaque appel on progresse d’une étape dans le parcours du résultat.Quand toutes les lignes ont été parcourues, la fonction renvoie 0.\nAvec cette fonction, chaque ligne est renvoyée sous la forme d’un objet, que nous\nréférençons avec la variable $film dans l’exemple. Nous aurons l’occasion de revenir\nsur ce concept, pour l’instant il sufﬁt de considérer qu’un objet est un groupe devaleurs, chacune étant identiﬁée par un nom.\nDans notre cas ces noms sont naturellement les noms des attributs de la table\nFilmSimple . On accède à chaque attribut avec l’opérateur ’\n->’. Donc $film->titre\nest le titre du ﬁlm, $film->annee l’année de réalisation, etc.\nL’opération d’affectation du résultat de mysql_fetch_object() àl av a r i a b l e\n$film envoie elle-même une valeur, qui est 0 quand le résultat a été parcouru en\ntotalité3. D’où la boucle d’afﬁchage des ﬁlms :\nwhile ($film = mysql_fetch_object ( $resultat )) {\necho \"$film −>titre , paru en $film −>annee , r é a l is é \"\n. \"par $film −>prenom_realisateur $film −>nom_realisateur.<br/>\\\nn\" ;\n}\nOn peut remarquer, dans l’instruction echo ci-dessus, l’introduction de variables\ndirectement dans les chaînes de caractères. Autre remarque importante : on utilisedeux commandes de retour à la ligne, <br/> et\\n. Elles n’ont pas du tout la même\nfonction, et il est instructif de réﬂéchir au rôle de chacune.\n•la balise <br/> indique au navigateur qu’un saut de ligne doit être effectué\naprès la présentation de chaque ﬁlm ;\n•le caractère \\nindique qu’un saut de ligne doit être effectué dans le texte\nHTML, pas dans la présentation du document qu’en fait le navigateur. Ce \\n\n3. Voir le chapitre 11 et la partie sur les expressions, page 426, pour plus d’explications.\n42\n Chapitre 1. Introduction à MySQL et PHP\nn’a en fait aucun effet sur cette présentation puisque le format du texte HTML\npeut être quelconque. En revanche, il permet de rendre ce texte, produit\nautomatiquement, plus clair à lire si on doit y rechercher une erreur.\nVoici le texte HTML produit par le script, tel qu’on peut le consulter avec la\ncommande View source du navigateur. Sans ce \\n, tous les ﬁlms seraient disposés sur\nune seule ligne.\nExemple 1.8 exemples/ResMYPHP1.html :Résultat (texte HTML) du script\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Connexion à MySQL </ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<h1>Interrogation de la table FilmSimple</ h1>\nAlien , paru en 1979, réalisé par Ridley Scott .< br/>\nVertigo , paru en 1958, réalisé par Alfred Hitchcock .< br/>\nPsychose , paru en 1960, réalisé par Alfred Hitchcock .<br />\nKagemusha , paru en 1980, réalisé par Akira Kurosawa .< br/>\nVolte −face , paru en 1997, réalisé par John W o o.< br/>\nTitanic , paru en 1997, réalisé par James Cameron.< br/>\nSacrifice , paru en 1986, réalisé par Andrei Tar kovski .< br/>\n</body >\n</html >\n1.4.2 Formulaires d’interrogation\nUne des forces de PHP est son intégration naturelle avec les formulaires HTML.Les valeurs saisies dans les champs du formulaire sont directement fournies dans letableau $_POST ou$_GET selon le mode choisi, ainsi que dans le tableau $_REQUEST\ndans tous les cas. L’utilisation de SQL donne des commandes plus simples et pluspuissantes.\nVoici le formulaire d’interrogation :\nExemple 1.9 exemples/ExForm3.html :Formulaire d’interrogation\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n1.4 Accès à MySQL avec PHP\n 43\n<head >\n<title >Formulaire pour script P H P/M y S Q L </ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<h1>Formulaire pour script P H P/M y S Q L </ h1>\n<form action =\"ExMyPHP2 . php \" method =’get ’>\nCe formulaire vous permet d ’ indiquer des paramétres pour\nla recherche de films :\n<p>\nTitre : < input type =’text ’size =’20’ name = ’ titre ’ value =’%’/\n><br/>\nLe caractère ’%’ remplace n’ importe quelle chaîne .\n</p><p>\nAnnée début : < input type =’text ’size =’4’ name = ’anMin ’ value\n= ’1900 ’/>\nAnnée f i n : < input type =’text ’size =’4’ name = ’anMax ’ value\n= ’2100 ’/> < br/>\n<b>Comment combiner ces critères . </ b>\nET < input type =’radio ’ name =’c o m b’ value =’E T’ checked =’ 1’ / >\nOU < input type =’radio ’ name =’c o m b’ value =’ O U ’/> ?\n<p/>\n<input type =’submit ’ value =’Rechercher ’/>\n</form >\n</body>\n</html >\nL’attribut action fait référence au script PHP à exécuter. On peut entrer dans le\nchamp titre non seulement un titre de ﬁlm complet, mais aussi des titres partiels,\ncomplétés par le caractère « % » qui signiﬁe, pour SQL, une chaîne quelconque.\nDonc on peut, par exemple, rechercher tous les ﬁlms commençant par « Ver»e n\nentrant « Ver% », ou tous les ﬁlms contenant un caractère blanc avec « %%». Le\nﬁchier ci-dessous est le script PHP associé au formulaire précédent. Pour plus deconcision, nous avons omis tous les tests portant sur la connexion et l’exécutionde la requête SQL qui peuvent – devraient – être repris comme dans l’exemple 1.6,\npage 37.\nExemple 1.10 exemples/ExMyPHP2.php :Le script associé au formulaire de l’exemple 1.9\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head>\n<title >Résultat de l ’ interrogation </ title >\n44\n Chapitre 1. Introduction à MySQL et PHP\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n< h 1>Résultat de l ’interrogation par formulaire </h 1>\n<?php\nrequire ( \"Connect . php\" ) ;\n// Prenons les variables dans le tableau. C’est sûrement\n// le bon endroit pour effectuer des contrôles .\n$titre = $ _ G E T[ ’ titre ’ ];\n$anMin = $_GET[ ’anMin ’ ] ;\n$anMax = $_GET[ ’anMax ’ ] ;\n$comb = $_GET[ ’comb ’ ] ;\necho \"<b>Titre = $ t i t r e anMin = $anMin anMax=$anMax\\n\" ;\necho \"Combinaison logique : $comb</b><br/>\\n\" ;\n// Créons la requête en tenant compte de la combinaison logique\nif($comb = = ’E T’)\n$ r e q u e t e = \"SELECT ∗FROM F i l m S i m p l e \"\n. \" W H E R E titre L I K E ’$titre ’ \". \"AND a n n e e BETWEEN $anMin a n d $anMax \" ;\nelse\n$ r e q u e t e = \"SELECT ∗FROM F i l m S i m p l e \"\n. \" W H E R E titre L I K E ’ $titre ’ \"\n. \"OR ( a n n e e BETWEEN $anMin a n d $anMax ) \" ;\n$connexion = mysql_pconnect (S E R V E U R, N O M , PASSE) ;\nmysql_select_db (BASE, $connexion) ;\n// Exécution et affichage de la requête\n$resultat = mysql_query ($requete , $connexion) ;\nwhile ( ($film = mysql_fetch_object ( $resultat )))\necho \"$film −>titre , paru en $film −>annee , r é a l is é \"\n. \"par $film −>prenom_realisateur $film −>nom_realisateur.<br\n/>\\n\" ;\n?>\n</body></html>\nLes variables $titre, $anMin, $anMax et$comb sont placées dans le tableau\n$_GET (noter que le formulaire transmet ses données en mode get). Pour clariﬁer le\ncode, on les place dans des variables simples au début du script :\n$titre = $_GET[’titre’];$anMin = $_GET[’anMin’];$anMax = $_GET[’anMax’];$comb = $_GET[’comb’];\n1.4 Accès à MySQL avec PHP\n 45\nEn testant la valeur de $comb, qui peut être soit « ET», soit « OU», on détermine\nquel est l’ordre SQL à effectuer. Cet ordre utilise deux comparateurs, LIKE et\nBETWEEN. LIKE est un opérateur de pattern matching : il renvoie vrai si la variable\n$titre de PHP peut être rendue égale à l’attribut titre en remplaçant dans $titre\nle caractère ’%’ par n’importe quelle chaîne.\nLa requête SQL est placée dans une chaîne de caractères qui est ensuite exécutée.\n$ r e q u e t e = \"SELECT ∗F R O M FilmSimple \"\n. \" W H E R E titre L I K E ’$titre ’ \"\n. \"AND a n n e e BETWEEN $anMin a n d $anMax \" ;\nDans l’instruction ci-dessus, on utilise la concaténation de chaînes (opérateur\n« . ») pour disposer de manière plus lisible les différentes parties de la requête. On\nexploite ensuite la capacité de PHP à reconnaître l’insertion de variables dans unechaîne (grâce au préﬁxe $) et à remplacer ces variables par leur valeur. En supposantque l’on a saisi Vertigo, 1980 et 2000 dans ces trois champs, la variable $requete\nsera la chaîne suivante :\nSELECT ∗FROM FilmSimple\nWHERE titre LIKE ’Vertigo ’\nAND annee BETWEEN 1980 AND 2000\nIl faut toujours encadrer une chaîne de caractères comme $titre par des apos-\ntrophes simples « ’ » car MySQL ne saurait pas faire la différence entre Vertigo et le\nnom d’un attribut de la table. De plus cette chaîne de caractères peut éventuellementcontenir des blancs, ce qui poserait des problèmes. Les apostrophes simples sontacceptées au sein d’une chaîne encadrée par des apostrophes doubles, et réciproque-ment.\nREMARQUE – Que se passe-t-il si le titre du film contient lui même des apostrophes simples,\ncomme, par exemple, « L’affiche rouge » ? Et bien il faut préfixer par « \\», avant la\ntransmission à MySQL, tous les caractères qui peuvent être interprétés comme des délimiteurs\nde chaîne (et plus généralement tous les caractères spéciaux). La chaîne transmise sera donc\nL\\’affiche rouge , et MySQL interprétera correctement cet apostrophe comme faisant\npartie de la chaîne et pas comme un délimiteur.\nCe comportement de PHP est activé par l’option magic_quotes_gpc qui se trouve\ndans le fichier de configuration php.ini . Cette option tend à être à Off dans les versions\nrécentes de PHP, et il faut alors recourir aux fonctions addSlashes() (ou, mieux,\nmysql_escape_string() )e tstripSlashes() qui permettent d’ajouter ou des sup-\nprimer les caractères d’échappement dans une chaîne de caractères. Nous reviendrons\nlonguement sur cet aspect délicat dans le prochain chapitre.\nEn revanche, les apostrophes sont inutiles pour les valeurs numériques comme\n$anMin et$anMax qui ne peuvent être confondus avec des noms d’attribut et ne\nsoulèvent donc pas de problème d’interprétation. Il faut quand même noter que nous\nne faisons aucun contrôle sur les valeurs saisies, et qu’un utilisateur malicieux quiplace des caractères alphanumériques dans les dates, ou transmet des chaînes vides,causera quelques soucis à ce script (vous pouvez d’ailleurs essayer, sur notre site).\n46\n Chapitre 1. Introduction à MySQL et PHP\nUne dernière remarque : ce script PHP est associé au formulaire de l’exemple 1.9\npuisqu’il attend des paramètres que le formulaire a justement pour objectif de collec-\nter et transmettre. Cette association est cependant assez souple pour que tout autremoyen de passer des paramètres (dans le bon mode, get oupost)a us c r i p ts o i t\nacceptée. Par exemple l’introduction des valeurs dans l’URL, sous la forme ci-dessous,est tout à fait valable puisque les variables sont attendues en mode get.\nExMyPHP2.php?titre=Vert%&anMin=1980&anMax=2 000&comb=OR\nPour tout script, on peut donc envisager de se passer du formulaire, soit en\nutilisant la méthode ci-dessus si la méthode est get, soit en développant son propre\nformulaire ou tout autre moyen de transmettre les données en mode post. Il est pos-\nsible par exemple de récupérer la description (sous forme HTML) du ﬁlm Vertigo avec\nl’URL http://us.imdb.com/Title?Vertigo, qui fait directement appel à un programme\nweb du site imdb.com . Cela signiﬁe en pratique que l’on n’a pas de garantie sur la\nprovenance des données soumises à un script, et qu’elles n’ont pas forcément été\nsoumises aux contrôles (JavaScript ou autres) du formulaire prévu pour être associé\nà ce script. Des vériﬁcations au niveau du serveur s’imposent, même si nous lesomettons souvent dans ce livre pour ne pas alourdir nos exemples.\n1.4.3 Formulaires de mises à jour\nL’interaction avec un site comprenant une base de données implique la possibilitéd’effectuer des mises à jour sur cette base. Un exemple très courant est l’inscription\nd’un visiteur aﬁn de lui accorder un droit d’utilisation du site. Là encore les formu-laires constituent la méthode normale de saisie des valeurs à placer dans la base.\nNous donnons ci-dessous l’exemple de la combinaison d’un formulaire et d’un\nscript PHP pour effectuer des insertions, modiﬁcations ou destructions dans la basede données des ﬁlms. Cet exemple est l’occasion d’étudier quelques techniquesplus avancées de déﬁnition de tables avec MySQL et de compléter le passage desparamètres entre le formulaire et PHP .\nUne table plus complète\nL’exemple utilise une version plus complète de la table stockant les ﬁlms.\nExemple 1.11 exemples/FilmComplet.sql :Fichier de création de FilmComplet\n/∗Création d ’ une table FilmComplet ∗/\nCREATE TABLE FilmComplet\n(titre VARCHAR (30) ,\nannee INTEGER ,\nnom_realisateur VARCHAR (30) ,\nprenom_realisateur VARCHAR (30) ,\nannee_naissance INTEGER ,\np a y s E N U M ( \" F R \", \" U S \", \" D E \", \" J P \" ),\n1.4 Accès à MySQL avec PHP\n 47\ngenre SET ( \" C \" ,\" D \" ,\" H \" ,\" S \" ) ,\nresume T E X T\n)\n;\nLa table FilmComplet comprend quelques nouveaux attributs, dont trois utilisent\ndes types de données particuliers.\n1. l’attribut pays est un type énuméré : la valeur – unique – que peut prendre cet\nattribut doit appartenir à un ensemble donné explicitement au moment de la\ncréation de la table avec le type ENUM ;\n2. l’attribut genre est un type ensemble : il peut prendre une ou plusieurs valeurs\nparmi celle qui sont énumérées avec le type SET;\n3. enﬁn l’attribut resume est une longue chaîne de caractères de type TEXT dont\nla taille peut aller jusqu’à 65 535 caractères (soit 216−1: la longueur de la\nchaîne est codée sur 2 octets = 16 bits).\nCes trois types de données ne font pas partie de la norme SQL. En particulier,\nune des règles de base dans un SGBD relationnel est qu’un attribut, pour une lignedonnée, ne peut prendre plus d’une seule valeur. Le type SETde MySQL permet de\ns’affranchir – partiellement – de cette contrainte. On a donc décidé ici qu’un ﬁlmpouvait appartenir à plusieurs genres.\nLe formulaire\nLe formulaire permettant d’effectuer des mises à jour sur la base (sur la table Film-\nComplet) est donné ci-dessous.\nExemple 1.12 exemples/ExForm4.html :Formulaire de mise à jour\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Formulaire complet</ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<form action =\"ExMyPHP3 . php \" method =’post ’>\nTitre : < input type =’text ’size =’20’ name =\"titre\"/> < br/>\nAnnée : < input type =’text ’size =’4’ maxlength =’ 4’\nname =\"annee\" value =\"2000\" />\n<p>\nComédie : < input type =’checkbox ’ name =’genre [] ’ value =’ C’/>\nDrame : < input type =’checkbox ’ name =’genre [] ’ value =’ D’/>\n48\n Chapitre 1. Introduction à MySQL et PHP\nHistoire : < input type =’checkbox ’ name =’genre [] ’ value =’ H’/>\nSuspense : < input type =’checkbox ’ name =’genre [] ’ value =’S’/>\n</p><p>\nFrance : < input type =’radio ’ name =’pays ’ value =’F R’\nchecked =’ 1’ / >\nEtats −Unis : < input type =’radio ’ name =’pays ’ value =’ U S’/>\nAllemagne : < input type =’radio ’ name =’pays ’ value =’D E’/>\nJapon : < input type =’radio ’ name =’pays ’ value =’JP ’/>\n</p>\n<p>\nMetteur en scène (prénom −nom) :\n<input type =’text ’size =’20’ name =\"prenom\" />\n<input type =’text ’size =’20’ name =\"nom\"> < br/>\nAnnée de naissance : < input type =’text ’size =’ 4’ maxlength =’4’\nname =\"annee_naissance\" value = ’2000 ’/>\n</p>\nRésumé : < textarea name =’resume ’ cols =’ 3 0’ rows =’3’ > R é s u m é d u\nfilm\n</textarea >\n<h1>Votre choix</ h1>\n<input type =’submit ’ value =’Insérer ’ name =’inserer ’/>\n<input type =’submit ’ value =’Modifier ’ name =’modifier ’/>\n<input type =’submit ’ value =’Détruire ’ name =’detruire ’/>\n<input type =’reset ’ value =’Annuler ’ / >\n</form >\n</body >\n</html >\nIl est assez proche de celui de l’exemple 1.2, page 13, avec quelques différences\nnotables. Tout d’abord, le nom du champ genre estgenre[].\nComédie : < input type =’checkbox ’ name =’genre [] ’ value =’ C’/>\nDrame : < input type =’checkbox ’ name =’genre [] ’ value =’ D’/>\nHistoire : < input type =’checkbox ’ name =’genre [] ’ value =’ H’/>\nSuspense : < input type =’checkbox ’ name =’genre [] ’ value =’S’/>\nPour comprendre l’utilité de cette notation, il faut se souvenir que les paramètres\nissus du formulaire sont passés au script sur le serveur sous la forme de paires\nnom=valeur. Ici on utilise un champ checkbox puisqu’on peut affecter plusieurs\ngenres à un ﬁlm. Si on clique sur au moins deux des valeurs proposées, par exemple\n« Histoire » et « Suspense », la chaîne transmise au serveur aura la forme suivante :\n...&genre[]=H&genre[]=S&...\nPour le script PHP exécuté par le serveur, cela correspond aux deux instructionssuivantes :\n$genre[] = ’H’;\n$genre[] = ’S’;\n1.4 Accès à MySQL avec PHP\n 49\nImaginons un instant que l’on utilise un nom de variable $genre, sans les\ncrochets []. Alors pour PHP la deuxième affectation viendrait annuler la première\net$genre n’aurait qu’une seule valeur, ’S’. La notation avec crochets indique que\n$genre est en fait un tableau , donc une liste de valeurs. Mieux : PHP incrémente\nautomatiquement l’indice pour chaque nouvelle valeur placée dans un tableau. Lesdeux instructions ci-dessus créent un tableau avec deux entrées, indicées respective-ment par 0 et 1, et stockant les deux valeurs ’H’ et ’S’.\nUne autre particularité du formulaire est l’utilisation de plusieurs boutons\nsubmit, chacun associé à un nom différent.\n<input type =’submit ’ value =’Insérer ’ name =’inserer ’/>\n<input type =’submit ’ value =’Modifier ’ name =’modifier ’/>\n<input type =’submit ’ value =’Détruire ’ name =’detruire ’/>\nQuand l’utilisateur clique sur l’un des boutons, une seule variable PHP est créée,\ndont le nom correspond à celui du bouton utilisé. Le script peut tirer parti de cemécanisme pour déterminer le type d’action à effectuer.\nLe script PHP\nLa troisième composante de cette application de mise à jour est le script PHP .\nExemple 1.13 exemples/ExMyPHP3.php :Le script de mise à jour de FilmComplet\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head><title >Résultat de la mise à jour </title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<h1>Résultat de la mise à jour par formulaire </h1>\n<?php\nrequire ( \"Connect . php\" ) ;\n// Récupération des variables .\n// Quelques contrôles seraient nécessaires ...\n$ t i t r e = $_POST [ ’ t i t r e ’ ] ;\n$annee = $_POST[ ’annee ’ ] ;\n$pays = $ _ POST[ ’ pays ’ ];\n$prenom = $_POST[ ’prenom ’ ] ;\n$nom = $_POST [ ’nom ’ ] ;\n$annee_naissance = $ _ P O S T[ ’annee_naissance ’ ];\n$resume = $_POST[ ’ resume ’ ];\n50\n Chapitre 1. Introduction à MySQL et PHP\n// Il peut n’y avoir aucun genre saisi ...\nif( ! i s S e t ($_POST [ ’ g e nr e ’ ] ) )\n$genre= array () ;\nelse\n$genre = $_POST[ ’ genre ’ ];\necho \"<hr/><h2>\\n\" ;\n// Test du type de la mise à jour effectuée\nif(isSet($ _ P O S T[ ’ inserer ’]))\necho \" Insertion du film $titre \" ;\nelse if (isSet ($ _ P O S T[ ’ modifier ’ ]))\necho \"Modification du film $titre \" ;\nelse if (isSet($ _ P O S T[ ’ detruire ’]))\necho \"Destruction du film $titre \" ;\necho \"< / h 2 > < h r/ > \\ n \";\n// Affichage des données du formulaire\necho \" Titre : $titre <br/> annee : $annee<br/>Pays : $pays<br/>\\n\" ;\n// Préparation de la chaîne pour insérer\n$chaine_genre = \"\"; $separateur = \"\";\nfor ($i= 0 ; $i < count ($genre) ; $i++) {\n$chaine_genre .= $separateur . $genre[ $i ];\n$separateur = \" ,\";\n}\necho \"Genres = $chaine_genre<br/>\" ;\necho \"Résumé = $resume<br/>\\n\" ;\necho \"Mis en scène par $prenom $nom\\n\" ;\n// Connexion à la base , et création de l ’ ordre S Q L\n$connexion = mysql_pconnect (S E R V E U R, N O M , PASSE) ;\nmysql_select_db (BASE, $connexion) ;\nif(isSet($ _ P O S T[ ’ inserer ’]))\n$requete = \"I N S E R T I N T O FilmComplet ( titre , annee , \"\n. \"prenom_realisateur , nom_realisateur , annee_naissance , \"\n. \"pays , genre , resume) V A L U E S ( ’ $titre ’ , $annee , \". \" ’$prenom ’ , ’$nom ’ , $annee_naissance , \"\n. \" ’$pays ’ , ’$chaine_genre ’ , ’$resume ’) \" ;\nif( isSet($ _ P O S T[ ’ modifier ’ ]) )\n$requete = \"U P D A T E FilmComplet S E T annee=$annee , \"\n. \"prenom_realisateur = ’$prenom ’ , nom_realisateur=’$ n o m ’ , \"\n. \"annee_naissance=$annee_naissance , pays=’$pays ’ , \". \" genre = ’ $chaine_genre ’ , resume=’$resume ’ \"\n.\" W H E R E t i t r e=’ $ t i t r e ’\" ;\n1.4 Accès à MySQL avec PHP\n 51\nif( i s S e t ($_POST [ ’ d e t r u i r e ’ ] ) )\n$ r e q u e t e = \"DELETE FROM FilmComplet WHERE t i t r e = ’ $ t i t r e ’ \" ;\n// Exécution de l ’ordre S Q L (u n test d’erreur serait bienvenu)\n$resultat = mysql_query ($requete , $connexion) ;\nif($resultat)\necho \"<hr/>La requête ’$requete ’ a été effectuée .\\n\" ;\nelse {\necho \"La requête n ’a pu être exécutée pour la raison suivante : \"\n.mysql_error ($connexion) ;\n}\n?>\n</body>\n</html>\nCe script procède en plusieurs étapes, chacune donnant lieu à une insertion dans\nla page HTML fournie en retour au serveur.\nTout d’abord, on récupère les paramètres transmis en principe par le formulaire.\nEn pratique rien ne garantit, encore une fois, qu’un utilisateur malicieux ne va pas\nappeler le script sans utiliser le formulaire et sans même passer un paramètre. Ilfaudrait tester l’existence des paramètres attendus, si la sécurité était importante. Cetest peut être effectué avec la fonction isSet(), et un exemple est ici donné pour le\nparamètre genre :\n// Il peut n’y avoir aucun genre saisi ...\nif( ! i s S e t ($_POST [ ’ g e nr e ’ ] ) )\n$genre= array () ;\nelse\n$genre = $_POST[ ’ genre ’ ];\nSi on constate qu’aucun genre n’est transmis (ce qui peut arriver même si l’on\nutilise le formulaire puisque ce dernier ne comprend pas de contrôles), on initialise\nla variable $genre avec un tableau vide ( array()). Ce type de contrôle pourrait/de-\nvrait être effectué pour tous les paramètres : c’est fastidieux mais souvenez-vous qu’un\nscript est un programme en accès libre pour le monde entier...\nOn contrôle ensuite le bouton de déclenchement utilisé. Selon le cas, on trouve\nun élément ’inserer’, ’modifier’,o u ’detruire’ dans le tableau $_POST,e to n\nen déduit le type de mise à jour effectué. On l’afﬁche alors pour informer l’utilisateurque sa demande a été prise en compte. On utilise encore la fonction isSet() de\nPHP pour tester l’existence d’une variable (ici une entrée dans un tableau).\nif(isSet($ _ P O S T[ ’ inserer ’]))\necho \" Insertion du film $titre \" ;\nelseif ( isSet ($ _ P O S T[ ’modifier ’ ]) )\necho \"Modification du film $titre \" ;\nelseif ( i s S e t ($_POST [ ’ d e t r u i r e ’ ] ) )\necho \"Destruction du film $titre \" ;\n52\n Chapitre 1. Introduction à MySQL et PHP\nLa construction if-elseif permet de contrôler successivement les différentes\nvaleurs possibles. On pourrait aussi utiliser une structure switch, ce qui permettrait\nen outre de réagir au cas où aucune des variables ci-dessus n’est déﬁnie.\nOn récupère ensuite les valeurs provenant du formulaire et on les afﬁche. La\nvariable $genre est traitée de manière particulière.\n$chaine_genre = \"\"; $separateur = \"\";\nfor ($i= 0 ; $i < count ($genre) ; $i++) {\n$chaine_genre .= $separateur . $genre[ $i ];\n$separateur = \" ,\";\n}\necho \"Genres = $chaine_genre<br/>\" ;\nNotez l’initialisation des variables $chaine_genre et$separateur. PHP peut\nparfois se montrer assez laxiste et accepter l’utilisation de variables non déclarées, en\nleur donnant alors la valeur 0 ou la chaîne vide selon le contexte. On peut envisagerd’en tirer parti, mais dans certaines conﬁgurations – de plus en plus courantes – leniveau de contrôle (déﬁni par l’option error_reporting dans le ﬁchier de conﬁgu-\nration) est très élevé et ce genre de pratique engendre des messages d’avertissementtrès désagréables. Mieux vaut donc prendre l’habitude d’initialiser les variables.\nRappelons que $genre est un tableau, dont chaque élément correspond à un\ndes choix de l’utilisateur. La fonction count() permet de connaître le nombre\nd’éléments, puis la boucle forest utilisée pour parcourir un à un ces éléments.\nAu passage, on crée la variable $chaine_genre, une chaîne de caractères\nqui contient la liste des codes de genres, séparés par des virgules, selon le formatattendu par MySQL. Si, par exemple, on a choisi « Histoire » et « Suspense »$chaine_genre contiendra \"H,S\".\nEnﬁn on construit la requête INSERT, UPDATE ouDELETE selon le cas.\nDiscussion\nLe script précédent a beaucoup de défauts qui le rendent impropre à une véritableutilisation. Une première catégorie de problèmes découle de la conception de la basede données elle-même. Il est par exemple possible d’insérer plusieurs fois le mêmeﬁlm, une mise à jour peut affecter plusieurs ﬁlms, il faut indiquer à chaque saisiel’année de naissance du metteur en scène même s’il ﬁgure déjà dans la base, etc.\nNous décrirons dans le chapitre 4 une conception plus rigoureuse qui permet d’éviter\nces problèmes.\nSi on se limite à la combinaison HTML/PHP en laissant pour l’instant de côté la\nbase MySQL, les faiblesses du script sont de deux natures.\nPas de contrôles. Aucun test n’est effectué sur les valeurs des données, et en par-\nticulier des chaînes vides peuvent être transmises pour tous les champs. De plus,\nla connexion à MySQL et l’exécution des requêtes peuvent échouer pour desquantités de raisons : cet échec éventuel devrait être contrôlé.\n1.4 Accès à MySQL avec PHP\n 53\nUne ergonomie rudimentaire. En se restreignant à des scripts très simples, on a\nlimité du même coup la qualité de l’interface. Par exemple, on aimerait que\nles formulaires soient présentés avec un alignement correct des champs. Plusimportant : il serait souhaitable, au moment de mettre à jour les informationsd’un ﬁlm, de disposer comme valeur par défaut des valeurs déjà saisies\nCes problèmes peuvent se résoudre en ajoutant du code PHP pour effectuer\ndes contrôles, ou en alourdissant la partie HTML. Le risque est alors d’aboutir à\ndes scripts illisibles et difﬁcilement maintenables. Le chapitre qui suit va montrer\ncomment mettre en œuvre des scripts plus robustes et offrant une interface utilisateur\nplus sûre et plus conviviale. Nous verrons également comment éviter des scripts trèslongs et difﬁcilement lisibles en structurant le code de manière à répartir les tâchesen unités indépendantes.\n\nTechniques de base2\nCe chapitre montre, sans entrer trop rapidement dans des techniques de programma-\ntion avancées (bibliothèques de fonctions, programmation objet, conception d’unebase de données) comment réaliser les bases d’un site avec MySQL et PHP . Le butest double : donner un catalogue des fonctionnalités les plus courantes, et montrer àcette occasion les principales techniques de gestion des interactions web client/ser-veur. Voici les sujets abordés :\n1.Réutilisation de code . Dès que l’on commence à produire les pages d’un\nsite à partir de scripts PHP communiquant avec MySQL, on est amené àprogrammer de manière répétitive des parties de code correspondant soit à des\nopérations routinières (connexion à la base, exécution d’une requête), soit à\ndes tests (validations des champs de saisie, vériﬁcation que des instructionsse sont exécutées correctement), soit enﬁn à du texte HTML. Les fonc-tions constituent un des principaux moyens (l’autre étant la programmationorientée-objet, présentée dans le chapitre suivant) de réutiliser le code en évi-tant par conséquent de répéter indéﬁniment les mêmes instructions (page 56).\n2.Traitement des données transmises par HTTP. Une des principalesspéciﬁcités de la programmation web est la réception et l’envoi de donnéesvia le protocole HTTP . PHP simpliﬁe considérablement le traitement de cesdonnées, et permet souvent de les manipuler sans tenir compte du protocole,comme s’il s’agissait de paramètres passés au script. Dans de nombreuxcas, il faut cependant être attentif aux transformations subies par les données,soit parce qu’elle doivent être codées conformément au protocole HTTP ,soit parce que le décryptage de PHP introduit des modiﬁcations parfois\nnon souhaitées, soit enﬁn à cause de failles potentielles de sécurité. Cela\nsoulève des problèmes délicats liés aux différentes conﬁgurations possiblesde PHP et aux différents contextes d’utilisation (HTML, MySQL, texte\n56\n Chapitre 2. Techniques de base\nsimple, ...). Cette section discute cet aspect essentiel et décrit une stratégie\ngénérale pour régler ces problèmes (page 64).\n3.Gestion des formulaires . La ﬁn du chapitre précédent a montré comment\nmettre à jour une table à partir d’un formulaire. Nous reprenons le sujet demanière beaucoup plus détaillée, en montrant comment contrôler les saisies,comment réafﬁcher le formulaire avec des valeurs par défaut, commentutiliser un seul formulaire pour insertions et mises à jour (page 78).\n4.Transfert et gestion de ﬁchiers . Un site web n’est pas seulement un\nensemble de pages HTML. Il peut également fournir ou recevoir des ﬁchiers.Nous montrons comment transmettre des ﬁchiers du client au serveur,comment les stocker et référencer sur ce dernier, et comment les présenterpour téléchargement. Ces fonctionnalités sont présentées dans le cadrede la gestion d’un petit album photo (page 90).\n5.Gestion des sessions . Le protocole HTTP ne mémorise pas les échanges\nentre un client et un serveur. Pour effectuer un suivi, on doit donc simuler\ndes « sessions », le plus souvent à l’aide de cookies . Nous détaillons pas\nà pas la réalisation d’une session (page 98).\n6.SQL dynamique. Cette section montre comment traiter des requêtes SQL\ndéterminées « dynamiquement » à l’exécution d’un script, et commentafﬁcher le résultat – qui peut être arbitrairement grand – en plusieurs pages,à la manière d’un moteur de recherche (page 109).\nTous ces sujets sont traités indépendamment pour permettre au lecteur de s’y\nreporter directement après une première lecture, et s’appuient sur des exemples com-plets, utilisables et modiﬁables. Les techniques présentées dans ce chapitre formentles briques de base pour la construction d’un site complet, sujet abordé après l’étudede la programmation objet, dans le prochain chapitre. Nous verrons alors comment\nintégrer ces techniques dans une démarche globale, comprenant une conception\nrigoureuse de la base de données, le choix d’un style de développement cohérentet la séparation des codes HTML et PHP .\n2.1 PROGRAMMATION AVEC FONCTIONS\nUne fonction est une partie de code qui ne peut communiquer avec le script appelantque par l’intermédiaire d’un petit nombre de variables – les paramètres – bienidentiﬁées. Toutes les données utilisées localement par la fonction pour accomplirsa tâche particulière ne sont pas accessibles au script appelant. Réciproquement, lafonction ne peut pas manipuler les informations du script.\n2.1.1 Création de fonctions\nUn script reposent sur des fonctions conﬁe à chacune l’implantation d’un serviceprécisément identiﬁé : ouvrir un ﬁchier, lire une donnée, effectuer un calcul, etc.Chaque fonction accomplit son rôle (et rien de plus), et le script n’est alors rien\n2.1 Programmation avec fonctions\n 57\nd’autre qu’un coordinateur qui délègue les diverses tâches à des fonctions, lesquelles\nà leur tour subdivisent leur travail en faisant appel à des fonctions plus spécialisées,\net ainsi de suite. La structuration judicieuse d’un programme en fonctions concourtà la production d’un code sain, lisible et donc facile à mettre à jour. La conceptionde cette structuration vise à deux buts principaux :\n1.déléguer les tâches ingrates, les données secondaires, les contrôles d’erreur à\ndes modules particuliers ;\n2.partager le code : idéalement, on ne devrait jamais écrire deux fois la même\ninstruction car cette instruction devrait être implantée par une fonctionappelée partout où l’on en a besoin.\nEn appliquant ces idées, on obtient un code dans lequel chaque fonction occupe\nau plus quelques dizaines de lignes dans un ﬁchier à part du script principal, ce quipermet de comprendre facilement l’objectif poursuivi et l’algorithme mis en œuvre.A contrario , le mauvais script est celui qui cumule toutes les instructions dans un seul\nﬁchier : on aboutit rapidement à des centaines de lignes accumulant les structures\nprincipales et les détails les plus anodins dans un même code, rapidement illisible. Ce\nstyle de programmation (très courant) est à terme impossible à maintenir et corriger.Une fonction bien conçue, bien écrite et bien testée, c’est un problème sur lequel onne reviendra plus jamais !\nÉcriture de fonctions\nNous allons commencer par déﬁnir une fonction Connexion() qui se connecte\nà MySQL. On peut se demander pourquoi déﬁnir une telle fonction, alors qu’ilen existe déjà une : la réponse est tout simplement que mysql_pconnect() peut\néchouer pour diverses raisons, et renvoie alors une valeur nulle qui ne peut êtreutilisée pour exécuter des requêtes. Si l’on ne teste pas ce cas, on s’expose un jourou l’autre à de gros ennuis. Le tester à chaque appel à mysql_pconnect() rompt le\nprincipe exposé ci-dessus de ne jamais écrire des instructions redondantes.\nLa fonction Connexion()\nLa fonction Connexion() prend comme paramètres les valeurs nécessaires pour se\nconnecter à un serveur sous un compte utilisateur, et se placer ensuite dans une basesi la connexion a réussi. Elle est placée dans un ﬁchier\nConnexion.php qui peut être\ninclus avec la commande require dans n’importe quel script.\nExemple 2.1 exemples/Connexion.php :Fonction de connexion à MySQL\n<?php\n// Fonction Connexion: connexion à M y S Q L\nfunction Connexion ($ p N o m, $pMotPasse , $pBase , $pServeur)\n{\n// Connexion au serveur\n58\n Chapitre 2. Techniques de base\n$connexion = mysql_pconnect ($pServeur , $pNom, $pMotPasse) ;\nif(! $connexion) {\necho \"Désolé , connexion au serveur $pServeur impossible\\n\" ;\nexit ;\n}\n// Connexion à la base\nif(!mysql_select_db ($pBase , $connexion)) {\necho \"Désolé , accès à la base $pBase impossible\\ n\" ;\necho \"<b>Message de M y S Q L : </b> \" . mysql_error ($connexion) ;\nexit ;\n}\n// O n renvoie la variable de connexion\nreturn $connexion ;\n}// Fin de la fonction\n?>\nLa première ligne de la fonction est sa signature (ou prototype). Elle déﬁnit les\nparamètres que la fonction accepte. L’interpréteur vériﬁe, au moment de l’appel à une\nfonction, que le nombre de paramètres transmis correspond à celui de la signature.\nL’apport essentiel de Connexion() par rapport à mysql_pconnect() est de\ntester le cas de l’échec de l’accès au serveur de MySQL et de prendre les mesuresen conséquence. Les deux avantages de l’utilisation des fonctions donnés ci-dessusapparaissent dès cette simple implantation :\n1.délégation : le script qui se connecte à MySQL a certainement des choses plus\nimportantes à faire que de tester ce genre d’erreur ;\n2.partage : c’est le bénéﬁce le plus apparent ici. On n’aura plus jamais à se soucier\nde l’échec de l’accès au serveur. De plus, la politique appliquée en cas d’échecest déﬁnie en un seul endroit. Ici on a choisi de quitter le script, mais le jouroù l’on décide de créer un ﬁchier dans tmpavec toutes les erreurs rencontrées,\nla modiﬁcation affecte seulement la fonction Connexion().\nREMARQUE – Pour l’instant les messages d’erreur sont affichés à l’écran. Sur un site en\nproduction c’est une très mauvaise pratique, pour des raisons d’image et de sécurité. La bonne\nméthode (quoique légèrement hypocrite) consiste à afficher un message courtois disant que\nle site est en maintenance, et à envoyer un message à l’administrateur pour lui signaler le\nproblème.\nExécution de requêtes\nSelon le même principe, il est possible de déﬁnir des fonctions pour exécuter une\nrequête avec MySQL. Le ﬁchier ExecRequete.php contient trois fonctions : la première\npour exécuter une requête, la seconde et la troisième pour récupérer une ligne durésultat respectivement sous forme d’objet (un groupe $o, dont chaque valeur vest\naccessible par $o->v) ou de tableau associatif (un tableau $tdont chaque valeur v\nest accessible par $t[’v’]).\n2.1 Programmation avec fonctions\n 59\nExemple 2.2 exemples/ExecRequete.php :Fonctions exécutant une requête\n<?php\n// Exécution d ’une requête avec M y S Q L\nfunction ExecRequete ( $requete , $connexion)\n{\n$resultat = mysql_query ($requete , $connexion) ;\nif($resultat)\nreturn $resultat ;\nelse {\necho \"<b>Erreur dans l ’exécution de la requête ’ $requete ’.\n</b><br/>\" ;\necho \"<b>Message de M y S Q L : </b> \" . mysql_error ($connexion) ;\nexit ;\n}\n}// Fin de la fonction ExecRequete\n// Recherche de l ’ objet suivant\nfunction ObjetSuivant ( $resultat )\n{\nreturn mysql_fetch_object ( $resultat ) ;\n}\n// Recherche de la ligne suivante (retourne un tableau )\nfunction LigneSuivante ( $resultat )\n{\nreturn mysql_fetch_assoc ($resultat);\n}\n?>\nLe regroupement de fonctions concourant à un même objectif – ici l’exécution\nd’une requête, puis l’exploitation du résultat – est une pratique classique et mène à la\nnotion, elle aussi classique, de module . Un module est un ensemble de fonctionnalités\nqui correspond à une partie cohérente et bien identiﬁée d’une application plus large,placées en général dans un même ﬁchier.\n2.1.2 Utilisation des fonctions\nLes déﬁnitions de fonctions doivent être placées dans des ﬁchiers séparés, lesquelssont inclus avec l’instruction require() ourequire_once() au début de chaque\nscript qui fait appel à elles. Voici l’exemple 1.6, page 37, qui donnait un premierexemple d’accès à la base MySQL à partir d’un script PHP , maintenant réécrit avec\nquelques-unes des fonctions précédentes.\nExemple 2.3 exemples/ExMyPHP4.php :L’exemple 1.6, avec des fonctions\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n60\n Chapitre 2. Techniques de base\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head><title >Connexion à MySQL</ title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n< h 1>Interrogation de la table FilmSimple </h 1>\n<?php\nrequire_once(\"Connect.php\") ;\nrequire_once(\"Connexion.php\") ;\nrequire_once(\"ExecRequete .php\") ;\n$connexion = Connexion( N O M , PASSE, BASE, S E R V E U R) ;\n$ r e s u l t a t = ExecRequete ( \"SELECT ∗F R O M FilmSimple \" , $connexion) ;\nwhile ($film = ObjetSuivant( $resultat ))\necho \"<b>$film −>titre </b>, paru en $film −>annee , r é a l i s é \"\n.\"par $film −>prenom_realisateur $film −>nom_realisateur.<br/>\\n \" ;\n?>\n</body></html>\nOn peut apprécier l’économie réalisée dans la taille du code et la lisibilité qui\nen résulte. Entre autres avantages, il faut noter qu’il n’y a plus dans ce script aucune\nréférence à MySQL. Le jour où l’on choisit d’utiliser – par exemple – PostgreSQL, lesmodiﬁcations ne touchent que les fonctions d’accès à la base et restent transparentespour les autres scripts. La portabilité d’un code MySQL/PHP sur plusieurs SGBD seradéveloppée dans le chapitre 3.\n2.1.3 À propos de require etinclude\nIl existe deux instructions pour inclure du code dans un ﬁchier, require (et sa\nvariante require_once)e t include. La différence est subtile :\n•require(fichier )se contente d’inclure le code de fichier dans le script\ncourant, et tout se passe ensuite comme si l’instruction require avait été\ndéﬁnitivement remplacée par le contenu de fichier ;\n•include(fichier ), en revanche, correspond à une inclusion répétitive de\nfichier, chaque fois que l’instruction est rencontrée.\nEn général, c’est une mauvaise pratique que de placer des instructions dans un\nﬁchier pour l’exécuter avec require ouinclude. Le danger vient du fait que les\nvariables manipulées dans les ﬁchiers inclus viennent se confondre avec celles duscript principal, avec des résultats imprévisibles et surtout difﬁcilement détectables.\n2.1 Programmation avec fonctions\n 61\nL’utilisation de fonctions est bien préférable car les variables des fonctions sont\nlocales, et l’interaction avec le script se limite aux arguments de la fonction, faci-lement identiﬁables.\nEn conclusion, il est fortement recommandé d’utiliser seulement require,e td e\nne placer dans les ﬁchiers inclus que des déﬁnitions de fonctions ou de constantes. On\nest sûr alors que le script ne contient ni variables ni instructions cachées. La fonctioninclude() devrait être réservée aux cas où il faut déterminer, à l’exécution ,l eﬁ c h i e r\nà inclure. Un exemple possible est un site multi-langues dans lequel on crée un ﬁchierpour chaque langue gérée.\nIl est possible d’utiliser require récursivement. Voici par exemple le ﬁchier\nUtilBD.php que nous utiliserons par la suite pour inclure en une seule fois les décla-\nrations de constantes et de fonctions pour l’accès à MySQL.\nExemple 2.4 exemples/UtilBD.php :Un ﬁchier global d’inclusion des constantes et fonctions\n<?php\n// Fonctions et déclarations pour l ’accès à M y S Q L\nrequire_once (\"Connect.php\") ;\nrequire_once (\"Connexion.php\") ;require_once (\"ExecRequete .php\") ;\n?>\nLa variante require_once assure qu’un ﬁchier n’est pas inclus deux fois dans un\nscript (ce qui peut arriver lors d’inclusion transitives, un ﬁchier qui en inclut un autre\nqui en inclut un troisième ...).\n2.1.4 Passage par valeur et passage par référence\nUne fonction prend en entrée des paramètres et renvoie une valeur qui peut alors êtrestockée dans une variable du script appelant, ou transmise comme paramètre à une\nautre fonction. Les paramètres sont passés par valeur en PHP . En d’autres termes, le\nprogramme appelant et la fonction disposent chacun d’un espace de stockage pour les\nvaleurs de paramètres, et l’appel de la fonction déclenche la copie des valeurs depuis\nl’espace de stockage du programme appelant vers l’espace de stockage de la fonction.\nREMARQUE – Attention, les objets sont passés par référence depuis la version 5 de PHP.\nLa conséquence essentielle est qu’une fonction ne peut pas modiﬁer les variables\ndu programme appelant puisqu’elle n’a pas accès à l’espace de stockage de ce der-nier. Une fonction effectue une ou plusieurs opérations, renvoie éventuellement lerésultat, mais ne modiﬁe pas ses paramètres. Il s’agit d’une caractéristique importante\n(« pas d’effet de bord ») pour la lisibilité et la robustesse d’un programme. Elle\npermet en effet d’estimer avec certitude, en regardant un script constitué d’appelsde fonctions, quel est l’effet de chacune. Ce n’est malheureusement plus vrai dès quel’on recours à des pratiques comme l’utilisation de variables globales et le passage parréférence.\nN’utilisez pas de variables globales si vous voulez garder un code sain. Quant au\npassage des paramètres par référence, il est possible en PHP . La notion de référence\n62\n Chapitre 2. Techniques de base\n(identique à celle du C++) correspond à la possibité de désigner un même contenu\npar plusieurs variables. Soit par exemple le fragment suivant\n$ a=3 ;\n$b = &$a;\nLes variables $aet$bréférencent alors le même contenu, dont la valeur est pour\nl’instant 3. Toute modiﬁcation du contenu par l’intermédiaire de $asera visible de\n$bet réciproquement. Par exemple :\n$ a=5 ;\necho $b; // Affiche la valeur 5\nIl faut souligner, pour ceux qui sont familiers avec le langage C, que les références\nne sont pas des pointeurs puisque, contrairement à ces derniers, une référence est\nun symbole désignant un contenu pré-existant (celui d’une autre variable). Pour la\nquestion qui nous intéresse ici, elles peuvent cependant servir, comme les pointeursC, à permettre le partage entre un contenu manipulé par un script et ce mêmecontenu manipulé par une fonction. En passant en effet à une fonction la référence r\nàu n ev a r i a b l e vdu script appelant, toute modiﬁcation effectuée par la fonction sur r\nimpactera v.\nIl est tentant d’utiliser le passage par référence dans (au moins) les deux cas\nsuivants :\n1. pour des fonctions qui doivent renvoyer plusieurs valeurs ;\n2. quand les paramètres à échanger sont volumineux et qu’on craint un impact\nnégatif sur les performances.\nEn ce qui concerne le premier point, on peut remplacer le passage par référence\npar le renvoi de valeurs complexes, tableaux ou objets. Voici un exemple comparant\nles deux approches. Le premier est une fonction qui prend des références sur lesvariables du script principal et leur affecte le jour, le mois et l’année courante. Lesvariables ceJour, ceMois etcetteAnnee sont des références, et permettent donc\nd’accéder au même contenu que les variables du script appelant la fonction. Notezque le passage par référence est obtenu dans la déclaration de la fonction en préﬁxant\npar&le nom des paramètres.\nExemple 2.5 exemples/References.php :Fonction avec passage par référence.\n<?php\n// Exemple de fonction renvoyant plusieurs valeurs grâce à un\n// passage par références\nfunction aujourdhui_ref (&$ceJour , &$ceMois , &$cetteAnnee)\n{\n// O n calcule le jour , le mois et l ’année courante\n$ceJour = date (’ d’);\n$ceMois = date (’ m ’);\n2.1 Programmation avec fonctions\n 63\n$cetteAnnee = date (’ Y’ );\n// Rien à renvoyer !\n}\n?>\nVoici maintenant la fonction équivalente renvoyant la date courante sous forme\nd’un tableau à trois entrées, jour, mois etan.\nExemple 2.6 exemples/RenvoiTableau.php :Fonction renvoyant la date courante\n<?php\n// Exemple de fonction renvoyant plusieurs valeurs grâce à un\n// tableau\nfunction aujourdhui_tab ()\n{\n// Initialisation d u retour\n$retour = array () ;\n// O n calcule le jour , le mois et l ’année courante\n$retour [] = date (’ d’ );\n$retour [] = date (’ m ’ );\n$retour [] = date (’ Y’ );\n// Renvoi du tableau\nreturn $retour ;\n}\n?>\nL’exemple ci-dessous montre l’utilisation des deux fonctions précédentes. On\nutilise la décomposition du tableau en retour grâce à l’opérateur list,m a i so n\npourrait également récupérer une seule variable de type tableau, et la traiter ensuite :\nExemple 2.7 exemples/QuelJour.php :Appel des fonctions précédentes\n<?php\n// Exemple d ’appel à une fonction renvoyant plusieurs// valeurs : passage par référence et passage par tableau\nrequire_once( ’RenvoiTableau .php ’) ;require_once( ’ References .php ’) ;\n// O n veut obtenir le jour , le mois , l ’an.\n$an = $mois = $jour = \"\" ;\n// Passage des valeurs par référence\naujourdhui_ref ($jour , $mois , $an);\necho \"Nous sommes le $jour / $mois / $an<br /> \" ;\n// Appel , et récupération des valeurs du tableau\n64\n Chapitre 2. Techniques de base\nlist ($jour , $mois , $an) = aujourdhui_tab() ;\necho \"Confirmation : nous sommes le $jour / $mois /$an<br/>\" ;\n?>\nUne caractéristique de cette syntaxe est que l’on ne sait pas , en regardant ce code,\nque la fonction aujourdhui_ref() modiﬁe les valeurs de ses paramètres et a donc\nun impact invisible sur le script appelant. Si on commence à utiliser le passage par\nréférence pour certaines fonctions, on se retrouve donc dans un monde incertain oùcertaines variables sont modiﬁées après un appel à une fonction sans que l’on sachepourquoi. Du point de vue de la compréhension du code, le passage des paramètres\npar valeur est donc préférable.\nCe qui nous amène au second argument en faveur du passage par référence : le\npassage par valeur entraîne des copies potentiellement pénalisantes. Cet argument\nest à prendre en considération si on pense que la fonction en cause est appelée trèsfréquemment et manipule des données volumineuses, mais on doit être conscient quele recours aux références est plus délicat à manipuler et rend le code moins sûr.\nDans le cadre de ce livre, où la lisibilité des exemples et du code est un critère\nprimordial, aucune fonction n’utilise de passage par référence (et encore moins devariable globale). Cela montre, incidemment, qu’il est tout à fait possible de se passertotalement de ces mécanismes. Dans la plupart des cas on y gagne un code sain,sans impacter les performances. Je reviendrai à quelques occasions sur ce choix pourdiscuter d’une autre stratégie de développement consistant à recourir au passage par\nréférences. Comme indiqué ci-dessus, les objets sont une exception en PHP : ils sont\ntoujours passés par référence.\n2.2 TRAITEMENT DES DONNÉES TRANSMISES PAR HTTP\nPour étudier de manière concrète les problèmes soulevés par l’échange de données viaHTTP (et leurs solutions), nous allons étudier une application très simpliﬁée d’envoide courrier électronique (terme que nous simpliﬁerons en e-mail) dont la ﬁgure 2.1donne le schéma. Il s’agit d’un script unique,\nMail.php , qui fonctionne en deux modes :\n1. Si aucune donnée ne lui est soumise, le script afﬁche un formulaire de saisie\nd’un e-mail. L’utilisateur peut alors entrer les données du formulaire et lessoumettre. Elles sont transmises, au même script, via HTTP .\n2. Si des données sont soumises (cas où on est donc passé par le mode précédent),\nle script récupère les données et doit :\n•envoyer l’e-mail,\n•stocker l’e-mail dans la base de données,\n•l’afﬁcher en HTML pour conﬁrmer la prise en charge de l’envoi.\nCe qui nous intéresse ici, c’est le traitement des données transférées dans trois\ncontextes différents : envoi sous forme de texte pur, insertion dans MySQL et\n2.2 Traitement des données transmises par HTTP\n 65\nafﬁchage avec HTML. Chaque traitement est implanté par une fonction détaillée\ndans ce qui suit. Voici le script général, Mail.php , qui appelle ces différentes fonctions.\nMessage à envoyer ?\nOui Non\nSaisie, puis\nsoumissionAffichage du\nformulaire\nStockage dansla base\nAffichage àl’écranTransmission des données par HTTPEnvoi du mail Texte\nMySQL\nHTML\nFigure 2.1 — Le schéma de l’application d’envoi d’un e-mail\nExemple 2.8 exemples/Mail.php :Script de gestion d’un e-mail\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \">\n<head>\n<title >Envoi d’u n e −mail </ title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\" />\n</head>\n<body>\n<h1>Envoi de mail </h1>\n<?php\n// Inclusion des fichiers contenant les déclarations de fonctions\nrequire_once (\" Normalisation .php\") ;\nrequire_once (\" ControleMail .php\") ;require_once (\" StockeMail .php\") ;\nrequire_once (\" AfficheMail .php\") ;\nrequire_once (\"EnvoiMail .php\") ;\n// Normalisation des entrées H T T P\nNormalisation () ;\n// Si la variable $envoyer existe , des données ont été saisies\n// dans le formulaire\n66\n Chapitre 2. Techniques de base\nif (isSet( $ _ P O S T[ ’e n v o y e r’])) {\n// Contrôle des données en entrée\nif (! ControleMail($_POST)) {\n// U n problème quelque part ? Il faut réagir\necho \"<p>Quelque chose ne va pas ... </ p>\";\nexit ;\n}\n// O n a passé le test : stockage dans la base\nStockeMail($_POST) ;\n// O n affiche le texte de l ’e −mail\nAfficheMail ($ _ P O S T) ;\n// Envoi de l ’e −mail\nEnvoiMail($_POST) ;\n}\nelse {\n// O n affiche simplement le formulaire\nrequire ( \"FormMail . html\" ) ;\n}\n?>\n</body>\n</html>\nLe premier mode de l’application, avec le formulaire de saisie, est présenté\nﬁgure 2.2.\nFigure 2.2 — Formulaire d’envoi d’un e-mail\n2.2 Traitement des données transmises par HTTP\n 67\n2.2.1 Échappement et codage des données HTTP\nQuand l’utilisateur soumet un formulaire, le navigateur code les données saisies dans\nles champs pour les inclure dans un message HTTP . Rappelons que :\n•en mode getles paramètres sont placés dans l’URL appelée ;\n•en mode post les paramètres sont transmis dans le corps du message HTTP .\nNous allons utiliser le mode post car la méthode geta l’inconvénient de créer\ndes URL très longues pour y stocker les paramètres. Une partie de ces derniers peutd’ailleurs être perdue si la taille limite (256 caractères selon le protocole HTTP) estdépassée. Un mode de passage des paramètres imposant le mode getest celui où l’on\nplace directement les paramètres dans une ancre du document HTML. Supposons par\nexemple qu’on place quelque part dans le document HTML une ancre dans laquelle\non passe le sujet de l’e-mail :\necho \"<a href=’Mail.php?sujet=$sujet’>Message</a>\";\nIl faut être attentif dans ce cas à bien coder l’URL selon les règles HTTP . Si\nle sujet est par exemple Wallace & Gromit ou l’ours ?, l’esperluette « & » et\nle point d’interrogation « ? », placés littéralement dans l’URL, rendront le messageHTTP incompréhensible pour le script. On obtiendra en effet :\necho \"<a href=’Mail.php?sujet=Wallace & Gromit ou l’ours ?>Message</a>\";\nLe codage s’obtient en appliquant la fonction urlEncode() aux chaînes placées\ndans les ancres. Voici donc la bonne version :\n$sujet = \" Wallace & Gromit ou l ’ ours ? \" ;\n$sujetPourURL = urlEncode( $sujet ) ;\necho \"<a href =’Mail . php? sujet=$sujetPourURL ’>Message </a>\" ;\nL’URL sera alors codée comme suit :\nMail.php?sujet=Wallace+%5C%26+Gromit+ou+l%2 7ours+%3F\nRevenons au cas où l’on utilise un formulaire, ce qui garantit que le navigateur\neffectuera le codage pour nous. Après soumission, le message est transmis au scriptindiqué dans l’attribut action du formulaire. Dans notre cas, le script est « réen-\ntrant » car il reçoit lui-même les données soumises par le formulaire qu’il a afﬁché.Il sufﬁt d’être capable de déterminer, à l’entrée du script, si le formulaire vient d’être\nsoumis ou non. On utilise un champ caché, de nom envoyer, qui provoquera donc\nl’instanciation d’une variable PHP après soumission.\nExemple 2.9 exemples/FormMail.html :Le formulaire de saisie des e-mails\n<!−− Formulaire basique pour l ’ envoi d’un e −mail −−>\n<form action =’Mail .php ’ method =’post ’>\n<!−− Champ caché pour indiquer que le formulaire aété soumis −−>\n68\n Chapitre 2. Techniques de base\n<input type =’hidden ’ name =’envoyer ’ value =’ 1’ / >\n<table >\n<tr><th>Destinataire :</ th>\n<td><input type =’text ’size =’40’ name =’destinataire ’/> </ td>\n</tr>\n<tr><th>Sujet :</ th>\n<td><input type =’text ’size =’40’ name =’sujet ’/> </ td>\n</tr>\n<tr><th>Message :</ th>\n<td><textarea rows =’20’ cols =’40’ name =’message ’></ textarea >\n</td>\n</tr>\n</table >\n<input type =’submit ’ value =’Envoyer ’ / >\n</form >\nÀ l’entrée du script, le processeur PHP décrypte les données provenant du\nformulaire et transférées dans le message HTTP , puis les place dans les tableaux\n$_POST ou$_GET selon le mode de transmission choisi. On peut également utiliser\nsystématiquement le tableau $_REQUEST qui fusionne les deux précédents (plus le\ntableau $_COOKIES).\nÀ ce stade, PHP peut effectuer ou non une transformation consistant à préﬁxer\ntoutes les apostrophes simples ou doubles par la barre oblique inverse « \\». Ce\ncomportement est déterminé par l’option de conﬁguration magic_quotes_gpc,e t\nmotivé par l’insertion fréquente des données provenant de formulaires dans desrequêtes SQL. Un des points épineux dans la manipulation de chaînes de caractèresinsérées ou lues dans une base MySQL est en effet la présence d’apostrophes. Prenonsl’exemple suivant :\nINSERT INTO FilmSimple ( titre , annee , nom_realisateur ,\nprenom_realisateur , annee_naissance)\nVALUES ( ’L ’ ours ’ , 1988, ’Annaud ’ , ’Jean −Jacques ’ , 1943)\nMySQL distingue les valeurs grâce aux apostrophes simples « ’ ». Si une valeur\ncontient elle-même une apostrophe, comme « L’ours » dans l’exemple ci-dessus,MySQL est perdu et produit un message d’erreur. La bonne syntaxe est :\nINSERT INTO FilmSimple ( titre , annee , nom_realisateur ,\nprenom_realisateur , annee_naissance)\nVALUES ( ’L\\ ’ ours ’ , 1988, ’Annaud ’ , ’Jean −Jacques ’ , 1943)\nLa présence d’un caractère « \\» devant l’apostrophe (on parle « d’échappe-\nment ») permet à MySQL d’interpréter correctement cette dernière comme faisantpartie de la chaîne. Quand l’option magic_quotes_gpc vaut On, un titre comme\nL’ours sera automatiquement représenté par la valeur L\\’ours dans le script\nrecevant les données. On pourra donc l’insérer tel quel dans une requête SQL.\nCependant, comme le montre l’application que nous sommes en train de créer,\nune chaîne de caractères peut être utilisée dans bien d’autres contextes que SQL, et\n2.2 Traitement des données transmises par HTTP\n 69\n« l’échappement » des apostrophes par des barres obliques devient inutile et gênant.\nIl faut alors se poser sans cesse la question de la provenance de la variable, de laconﬁguration courante de PHP , et de la nécessité ou non d’utiliser l’échappement.C’est encore plus ennuyeux quand on écrit des fonctions puisqu’il faut déterminer siles paramètres peuvent ou non provenir d’une transmission HTTP , et si oui penser àuniformiser, dans les appels à la fonction, la règle d’échappement à utiliser.\nDepuis la parution de PHP 5, les concepteurs et distributeurs du langage semblent\nrenoncer à cet échappement automatique. Le problème est de risquer de se trouverdans une situation où certain serveurs pratiquent l’échappement et d’autres non.\nLe seul moyen pour régler le problème une fois pour toutes et de normaliser systé-\nmatiquement les données HTTP . La politique adoptée dans ce livre (vous êtes libred’en inventer une autre bien entendu) consiste à tester, à l’entrée de tout script, si lemode d’échappement automatique est activé. Si oui, on supprime cet échappement,pour toutes les chaînes transmises, avec la fonction stripSlashes(). On pourra\nalors considérer par la suite que les données HTTP sont représentées normalement,comme n’importe quelle autre chaîne de caractères manipulée dans le script. Voici lafonction qui effectue cette opération sur chacun des tableaux contenant d’une part\ndes données transmises en mode getoupost, d’autre part des cookies .\nExemple 2.10 exemples/Normalisation.php :Traitement des tableaux pour supprimer l’échappement\nautomatique\n<?php\n// Application de la suppression des échappements , si n écessaire ,\n// dans tous les tableaux contenant des données H T T P\nrequire_once(\"NormalisationHTTP .php\") ;\nfunction Normalisation ()\n{\n// Si l ’on est en échappement automatique , on rectifie ...\nif(get_magic_quotes_gpc ()) {\n$_POST = NormalisationHTTP ($_POST) ;\n$_GET = NormalisationHTTP ($_GET) ;\n$_REQUEST = NormalisationHTTP ($_REQUEST) ;\n$_COOKIE = NormalisationHTTP ($_COOKIE) ;\n}\n}\n?>\nLa fonction get_magic_quotes_gpc() indique si l’échappement automatique\nest activé. On parcourt alors les tableaux concernés et traite chaque valeur1avec\nstripSlashes() qui supprime les « \\». Dans le parcours lui-même, il faut prendre\n1. On ne traite pas la cléde chaque élément, en considérant qu’une clé ne devrait pas contenir\nd’apostrophes.\n70\n Chapitre 2. Techniques de base\nen compte le fait qu’un élément du tableau peut constituer lui-même un tableau\nimbriqué (cas par exemple d’un formulaire permettant de saisir plusieurs valeurs pourun champ de même nom, voir page 46). Une manière simple et naturelle de parcourirles tableaux imbriqués sans se soucier du nombre de niveaux est d’appeler récursive-ment la fonction de normalisation NormalisationHTTP(), donnée ci-dessous.\nExemple 2.11 exemples/NormalisationHTTP.php :Parcours récursif des tableaux pour appliquer\nstripSlashes().\n<?php\n// Cette fonction supprime tout échappement automatique\n// des données H T T P dans un tableau de dimension quelconque\nfunction NormalisationHTTP( $tableau )\n{\n// Parcours du tableau\nforeach ($tableau as $cle = > $valeur)\n{\nif(!is_array ($valeur)) // c’est u n élément: o n agit\n$tableau [ $cle ] = stripSlashes ($valeur) ;\nelse // c ’est un tableau : on appelle récursivement\n$tableau [ $cle ] = NormalisationHTTP($valeur) ;\n}\nreturn $tableau ;\n}\n?>\nLa construction foreach utilisée ici est très pratique pour parcourir un tableau\nen récupérant à la fois l’indice et la valeur de chaque entrée. On peut noter que cette\nfonction prend en entrée un tableau et produit en sortie une copie dans laquelle leséchappements éventuels ont été supprimés. Il est possible, si l’on considère que cescopies sont pénalisantes, de traiter les paramètres par référence en les préﬁxant par«&» .\n2.2.2 Contrôle des données HTTP\nLa seconde tâche à effectuer en recevant des données d’un formulaire est le contrôledes données reçues. Cela signiﬁe, au minimum,\n1. le test de l’existence des données attendues,\n2. un ﬁltrage sur ces données, aﬁn de supprimer des caractères parasites qui\npourraient infecter l’application;\n3. et enﬁn le contrôle de quelques caractéristiques minimales sur les valeurs.\nOn n’insistera jamais assez sur le fait qu’un script PHP est un programme que le\nmonde entier peut appeler en lui passant n’importe quoi. Bien entendu la majoritédes utilisateurs du Web a bien autre chose à faire que d’essayer de casser votreapplication, mais il sufﬁt d’un malveillant pour créer des problèmes, et de plus ces\n2.2 Traitement des données transmises par HTTP\n 71\nattaques sont malheureusement automatisables. Un jour ou l’autre vous serez amenés\nà vous poser la question de la robustesse de vos scripts. Le ﬁltrage des données en\nentrée, en particulier, est très important pour les sécuriser.\nLa fonction ci-dessous est une version minimale des contrôles à effectuer. Elle\nrepose pour les contrôles sur les fonctions isSet() etempty() qui testent res-\npectivement l’existence d’une variable et la présence d’une valeur (chaîne non\nvide). Pour le ﬁltrage la fonction utilise htmlSpecialChars() qui remplace les\ncaractères marquant une balise (soit « < », « > » et « & ») par un appel d’entité (soit,\nrespectivement, &lt;, &gt; et&amp;). On peut également envisager de supprimer\ntotalement les balises avec la fonction strip_tags(). L’injection de balises HTML\ndans les champs de formulaires est une technique classique d’attaque d’un site web.\nLa fonction prend en entrée un tableau contenant les données, renvoie true\nsi elles sont validées, et false sinon. Remarquer que le tableau $mail est passé\npar référence pour permettre sa modiﬁcation suite au ﬁltrage. On pourra utilisercette fonction en lui passant le tableau $_POST pour valider la saisie du formulaire\nprécédent, ainsi que tout autre tableau dont on voudrait contrôler le contenu selonles mêmes règles. Il est toujours préférable de concevoir des fonctions les plusindépendantes possibles d’un contexte d’utilisation particulier.\nExemple 2.12 exemples/ControleMail.php :Ébauche de contrôle des données\n<?php\n// Fonction contrôlant l ’entrée de l ’application e −mail .\nfunction ControleMail ( &$mail)\n{\n// Le tableau en paramètre doit contenir les entrées :\n// destinataire , sujet et message. Vérification .\nif(! isSet($mail[ ’ destinataire ’ ]))\n{echo \"Pas d e destinataire!\"; return false ;}\nelse $mail [ ’ destinataire ’ ] = htmlSpecialChars($mail\n[ ’ destinataire ’]) ;\nif(! isSet($mail[ ’ sujet ’ ]))\n{echo \"Pas de sujet !\" ; return false ;}\nelse $mail [ ’ sujet ’ ] = htmlSpecialChars($mail\n[’s u j e t’] );\nif(! isSet ($mail [ ’message ’ ]) )\n{echo \"Pas de message!\" ; return false ;}\nelse $mail [ ’message ’ ] = htmlSpecialChars($mail [ ’ message ’ ]) ;\n// O n vérifie que les données ne sont pas vides\nif(empty ($mail[ ’ destinataire ’]))\n{echo \" Destinataire vide!\" ; return false ;}\nif(empty ($mail[ ’sujet ’]))\n{echo \" Sujet vide !\" ; return false ;}\nif(empty ($mail [ ’ message ’ ]) )\n{echo \"Message vide ! \" ; return false ;}\n72\n Chapitre 2. Techniques de base\n// Maintenant on peut / doit également faire des contrôles\n// sur les valeurs attendues: destinataire , sujet , message.\n// Voir les exercices pour des suggestions .\nreturn true ;\n}\n?>\nOn pourrait envisager beaucoup d’autres contrôles à effectuer, certains étant\ndécrits dans le document d’exercices disponible sur le site. Les contrôles s’appuient\nfréquemment sur la vériﬁcation du format des données (comme, typiquement,l’adresse électronique) et nécessitent le recours aux expressions régulières qui serontprésentées page 87.\nDans toute la suite de ce livre, j’omets le plus souvent de surcharger le code par des\ncontrôles répétitifs et nuisant à la clarté du code. Le ﬁltrage et le contrôle des donnéesen entrée font partie des impératifs de la réalisation d’un site sensible : reportez-vousau site php.net pour des recommandations à jour sur la sécurité des applications\nPHP .\n2.2.3 Comment insérer dans la base de données : insertion dans MySQL\nVoyons maintenant comment effectuer des insertions dans la base à partir desdonnées reçues. Il faut tout d’abord créer une table, ce qui se fait avec le script SQLsuivant :\nExemple 2.13 exemples/Mail.sql :Création de la table stockant les e-mails\n#\n# Création d ’une table pour stocker des e −mails\n#\nCREATE TABLE M a i l ( i d _ m a i l INT AUTO_INCREMENT NOT NULL ,\nd e s t i n a t a i r e VARCHAR( 4 0 ) NOT NULL ,\ns u j e t VARCHAR( 4 0 ) NOT NULL ,\nmessage T E X T N O T N U L L,\ndate_envoi D A T E T I M E,\nPRIMARY KEY ( i d _ m a i l ) ) ;\nPetite nouveauté : on trouve dans la table Mail une option AUTO_INCREMENT,\nspéciﬁque à MySQL. Cette option permet d’incrémenter automatiquement l’attribut\nid_mail à chaque insertion. De plus, cet attribut doit être déclaré comme clé\nprimaire, ce qui signiﬁe qu’il ne peut pas prendre deux fois la même valeur parmiles lignes de la table. On peut insérer une ligne dans Mail sans indiquer de valeur\npour id_mail, déterminée automatiquement par MySQL.\n2.2 Traitement des données transmises par HTTP\n 73\nmysql> INSERT INTO Mail (destinataire, sujet, message, date_envoi)\n-> VALUES (’rigaux@lri.fr’, ’Essai’, ’Test du mail’, NOW());\nQuery OK, 1 row affected (0,00 sec)\nLa fonction LAST_INSERT_ID() permet de savoir quelle est la dernière valeur\ngénérée pour un champ AUTO_INCREMENT.\nmysql> SELECT LAST_INSERT_ID() ;\n+------------------+\n| last_insert_id() |+------------------+\n|3 6|\n+------------------+\n1 row in set (0.06 sec)mysql>\nEnﬁn, on peut vériﬁer qu’il est impossible d’insérer deux fois un e-mail avec le\nmême identiﬁant.\nmysql> INSERT INTO Mail (id_mail, destinataire, sujet,\n-> message, date_envoi)\n-> VALUES (36, ’rigaux@dauphine.fr’, ’Essai’, ’Test du mail’, NOW());\nERROR 1062 (23000): Duplicate entry ’36’ for key 1\nNous reviendrons sur ces questions – essentielles – d’identiﬁcation dans le cha-\npitre 4.\nLa fonction ci-dessous prend un tableau en paramètre, traite ses entrées en\néchappant les apostrophes, et exécute enﬁn la requête.\nExemple 2.14 exemples/StockeMail.php :Commande d’insertion dans MySQL\n<?php\nrequire_once (\"UtilBD.php\") ;\n// Fonction stockant un e −mail dans la base . Le tableau en\n// paramètre doit contenir les entrées destinataire , sujet// et message . N B: il faudrait vérifier les valeurs .\nfunction StockeMail ($mail)\n{\n// Connexion au serveur\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\n// O n \"échappe\" les caractères gênants .\n$destinataire = mysql_real_escape_string($mail[ ’ destinataire ’ ]) ;\n$sujet = mysql_real_escape_string($mail[ ’ sujet ’ ]) ;\n$message = mysql_real_escape_string($mail[ ’message ’ ]) ;\n// Création et exécution de la requête\n74\n Chapitre 2. Techniques de base\n$requete = \"I N S E R T I N T O Mail( destinataire , sujet , message ,\ndate_envoi) \"\n. \"VALUES ( ’ $ d e s t i n a t a i r e ’ , ’ $ s u j e t ’ , ’ $ m e s s a g e ’ , N O W( ) ) \" ;\nExecRequete ( $requete , $connexion) ;\n}\n?>\nSuite à notre décision d’éliminer tout échappement automatique en entrée\nd’un script PHP , il faudra penser systématiquement à traiter avec la fonction\nmysql_real_escape_string() les chaînes à insérer dans MySQL2.\n2.2.4 Traitement de la réponse\nAvant afﬁcher, dans un document HTML, un texte saisi dans un formulaire, il fautse poser les questions suivantes :\n•Quelle sera la mise en forme obtenue ? Rend-elle correctement la saisie del’utilisateur ?\n•Le texte peut-il contenir lui-même des balises HTML qui vont gêner l’afﬁ-chage ?\nVoici un exemple de texte que l’utilisateur pourrait saisir dans le formulaire,\npotentiellement source de problème :\nPour cr´ eer un formulaire, on utilise la balise <form> et une\nsuite de balises <input>. Voici un exemple ci-dessous:\n<form action=’monscript’>\n<input type=text name==’n1’ size=’10’/>\n<input type=text name==’n2’ size=’10’/>\n<input type=’submit’/>\n</form>\nBonne r´ eception!\nPR\nQuand on transmet le texte saisi dans une fenêtre de formulaire au script et que ce\ndernier le renvoie au navigateur pour l’afﬁcher, on obtient le résultat de la ﬁgure 2.3.\nLes balises apparaissent littéralement et ne sont pas interprétées par le navigateur.Pourquoi ? Parce que nous les avons traitées avec htmlSpecialChars() et que le\ntexte <input> a été remplacé par &lt;input&gt;. Faites l’essai, et retirez le ﬁltrage\nparhtmlspecialChars() pour constater les dégâts à l’afﬁchage.\n2. Il est d’usage d’appeler addSlashes() qui sufﬁra dans la très grande majorité des cas, mais\nmysql_real_escape_string() est un peu plus complète et adaptée à MySQL, pour la prise en\ncompte des jeux de caractères par exemple.\n2.2 Traitement des données transmises par HTTP\n 75\nPar ailleurs, pour conserver les sauts de ligne en HTML, il faut insérer explicite-\nment des balises <br/> . PHP fournit une fonction, nl2br(), qui permet de convertir\nles caractères de sauts de ligne en balises <br/> , préservant ainsi l’afﬁchage.\nFigure 2.3 — Affichage du texte d’un e-mail comprenant des balises\nLa chaîne de caractères obtenue après ces traitements prophylactiques est donnée\nci-dessous, ce qui permet d’afﬁcher le résultat donné ﬁgure 2.3.\n<h1>Envoi de mail</h1>\n<b>On a envoy´ e le message suivant: </b>\n<p>Pour cr´ eer un formulaire, on utilise<br />la balise &lt;form&gt; et une suite de balises<br />&lt;input&gt;. Voici un exemple ci-dessous:<br />\n<br />\n&lt;form action=’monscript’&gt;<br />\n&lt;input type=text name==’n1’ size=’10’&gt;<br />\n&lt;input type=text name==’n2’ size=’10’&gt;<br />\n&lt;input type=’submit’&gt;<br />\n&lt;/form&gt;<br />Bonne r´ eception!<br />\n<br />\nPR\nLa présence de lettres accentuées dans un document HTML ne pose pas de\nproblème à un navigateur employant le jeu de caractères standard occidental ou\nl’UTF-8. Rappelons que ce réglage est spéciﬁé au début du document avec l’optionsuivante pour Latin1 :\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n76\n Chapitre 2. Techniques de base\nUne autre possibilité est de remplacer toutes les lettres accentuées (et de manière\ngénérale tous les caractères spéciaux) par un appel à l’entité correspondante (par\nexemple « é » devient « &eacute; »). On obtient ce remplacement avec la fonction\nhtmlEntities().\n2.2.5 Comment obtenir du texte « pur » : envoi de l’e-mail\nFinalement, il reste à envoyer l’e-mail, grâce à la fonction mail() de PHP3.L e s\nquestions à se poser sont ici réciproques de celles étudiées ci-dessus pour le pas-sage d’une représentation en texte brut à une représentation HTML. Si le texte àenvoyer contient des mises en forme HTML, on peut les supprimer avec la fonctionstrip_tags(), comme le montre la fonction ci-dessous.\nExemple 2.15 exemples/EnvoiMail.php :Fonction d’envoi d’un e-mail\n<?php\n// Fonction envoyant un e −mail . O n suppose\n// que les contrôles ont été effectués avant l ’ appel à la\n// fonction\nfunction EnvoiMail ($mail)\n{\n// Extraction des paramètres\n$destinataire = $mail[ ’ destinataire ’ ];\n$sujet = $mail[ ’ sujet ’ ];\n// O n retire toutes les balises H T M L d u message\n$message = strip_tags ($mail [ ’ message ’ ]) ;\n// O n va indiquer l ’ expéditeur , et placer rigaux@dauphine . fr en\n// copie\n$entete = \"From : mysqlphp@dunod . fr\\r\\n\" ;\n$entete .= \"Cc: rigaux@dauphine . fr\\r\\n\" ;\n// Appel à la fonction P H P standard\nmail ($destinataire , $sujet , $message , $entete);\n}\n?>\nL’étude de fonctionnalités plus avancées d’envoi d’e-mails (avec ﬁchiers en atta-\nchement par exemple) dépasse le cadre de ce livre. Comme d’habitude je vous\nrenvoie à php.net, ou à des fonctionnalités prêtes à l’emploi comme phpMailer (voir\nle site developpez.com).\n3. Cette fonction nécessite l’accès à un serveur SMTP , et peut être désactivée chez votre fournisseur\nd’accès pour éviter l’envoi de spams (ou pourriels).\n2.2 Traitement des données transmises par HTTP\n 77\n2.2.6 En résumé : traitement des requêtes et des réponses\nLe cas d’école qui précède montre les principes règles à appliquer aux chaînes de\ncaractères transmises par HTTP , et aux réponses transmises au client. Le tableau 2.1\nrappelle pour sa part la liste des fonctions essentielles au traitement des données\nHTTP .\n1. s’assurer, à l’entrée du script, que les chaînes suivent toujours la même règle\nd’échappement ; étant donné que la conﬁguration peut varier, le seul moyensûr est d’effectuer un pré-traitement à l’entrée dans le script (fonctionNormalisationHTTP());\n2. effectuer tous les contrôles nécessaires sur la présence et les valeurs des\ndonnées transmises ;\n3. ﬁlter les données en entrées, en supprimant notamment les balises avec\nstrip_tags() ou en les neutralisant avec htmlSpecialChars() ;\n4. utiliser un échappement (avec « \\») avant d’insérer dans la base MySQL ;\n5. appliquer un échappement aux caractères réservés HTML (« < », « > »,\n« & »), en les transformant en appels d’entités avant de transmettre à unnavigateur ;\n6. supprimer les balises HTML avant un afﬁchage en mode texte (ou envoi d’un\ne-mail, ou toute autre situation comparable).\nTableau 2.1 — Fonctions utilisées dans cette section\nFonction\n Description\nget_magic_quotes_gpc\n Renvoie « vrai » si les guillemets et apostrophes sont automatique-\nment « échappées » dans les chaînes transmises par HTTP, faux\nsinon.\nisSet (nom variable )\n Renvoie vrai si la variable est définie, faux sinon.\nempty (nom variable )\n Renvoie vrai si la variable n’est pas la chaîne vide, faux sinon.\nhtmlEntities (cha^ ıne )\n Renvoie une chaîne où les caractères spéciaux présents dans\ncha^ ıne sont remplacés par des entités.\nhtmlSpecialChars (cha^ ıne )\n Renvoie une chaîne où les caractères « <», «>», « & », « ’ » et\n«\"»p r é s e n t sd a n s cha^ ıne sont remplacés par des entités.\nstrip_tags (cha^ ıne ,[balises ])\n Renvoie une chaîne où les balises HTML présentes dans cha^ ıne\nsont supprimées (à l’exception de celles données dans le second\nargument, optionnel).\naddSlashes (cha^ ıne )\n Renvoie une chaîne où les guillemets et apostrophes sont préfixéespar «\n\\», notamment en vue de l’insertion dans une base de\ndonnées.\nmysql_real_escape_string (cha^ ıne )\nIdem que la précédente, mais adaptée à MySQL pour le traitementde données binaires ou de lettres accentuées.\nstripSlashes (cha^ ıne )\n Fonction inverse de la précédente : renvoie une chaîne où les barres«\n\\» sont supprimées devant les guillemets et apostrophes.\nnb2br (cha^ ıne )\n Renvoie une chaîne où les caractères ASCII de fin de ligne ( \\n)\nsont remplacés par la balise <br/> .\nurlEncode (cha^ ıne )\n Renvoie une chaîne codée pour pouvoir être insérée dans une URL.\n\n78\n Chapitre 2. Techniques de base\nEst-il nécessaire de préciser qu’il faut rester extrêmement prudent avec les don-\nnées transmises par HTTP ? Il est par exemple très délicat de proposer un formulaire\npour saisir des commandes à effectuer, dans MySQL ou dans le système d’exploita-tion. Encore une fois, reportez-vous au site php.net pour sa documentation sur la\nsécurité des applications PHP , et de nombreuses recommandations à ce sujet.\n2.3 MISE À JOUR D’UNE BASE PAR FORMULAIRE\nL’interface de mise à jour de la table FilmComplet d o n n é eàl aﬁ nd uc h a p i t r e 1\n(voir les exemples pages 47 et 49) est assez rudimentaire et ferait rapidement hurlern’importe quel utilisateur. Nous allons développer un système plus convivial pourinsérer, mettre à jour ou détruire les lignes d’une table, en prenant comme cible latable FilmSimple , qui est un peu plus facile à manipuler (voir le schéma page 28).\n2.3.1 Script d’insertion et de mise à jour\nLe script principal, FilmSimple.php , afﬁche une page dont le contenu varie en fonction\ndu mode choisi. Voici les modes possibles :\n1. En mode par défaut , on afﬁche la liste des ﬁlms en leur associant une ancre\npermettant d’accéder au formulaire de modiﬁcation. Une ancre placée sous letableau permet d’accéder au formulaire d’insertion.\n2. En mode modiﬁcation d’un ﬁlm, on afﬁche un formulaire présentant les champs\nde saisie. Chaque champ vaut par défaut la valeur couramment stockée dans labase pour ce ﬁlm. Seule exception : on ne peut pas modiﬁer le titre puisqu’onsuppose ici que c’est le moyen d’identiﬁer (et donc de retrouver) le ﬁlm modiﬁé.\n3. Enﬁn, en mode insertion, on présente un formulaire de saisie, sans valeur par\ndéfaut.\nPour commencer nous allons déﬁnir avec define() des constantes déﬁnissant les\ndifférents modes. Les constantes permettent de manipuler des symboles, plus facilesà utiliser et plus clairs que des valeurs.\n// Les constantes pour le mode\ndefine (\"M O D E _ D E F A U T\" , \"defaut\");\ndefine ( \"MODE_INSERTION\" , \" i n s e r t i o n \" ) ;\ndefine (\" M O D E _ M A J \" , \"m a j\");\nEnsuite, aﬁn de ne pas se lancer dans un script d’une taille démesurée, on découpe\nle travail en plusieurs parties, correspondant chacune à une fonctionnalité précise,puis on réalise chaque partie par une fonction.\nLa première fonction afﬁche le formulaire. On pourrait prévoir une fonction pour\nun formulaire en mise à jour et une autre pour un formulaire en insertion, mais la plusgrande part du code serait commun, ce qui entraîne une double modiﬁcation chaquefois que le site évolue (par exemple lors de l’ajout d’un champ dans la table).\n2.3 Mise à jour d’une base par formulaire\n 79\nIl est beaucoup plus astucieux de programmer une seule fonction qui afﬁche un\ncontenu légèrement différent en fonction du type de mise à jour souhaité (insertion\nou modiﬁcation). Voici le code de cette fonction. Le style de programmation adoptéici est du HTML dans lequel on insère ponctuellement des instructions PHP . Ce styletrouve très rapidement ses limites en terme de lisibilité, comme vous pourrez vous enconvaincre en essayant de décrypter le contenu. Rassurez-vous, c’est la dernière foisque j’utilise cette gestion obscure des accolades !\nExemple 2.16 exemples/FormFilmSimple.php :Le formulaire avec valeurs par défaut, et modes insertion\nou mise à jour\n<?php\n// Formulaire de saisie , avec valeurs par défaut\nfunction FormFilmSimple ($mode, $val_defaut)\n{\n?>\n<!−− On e s t en HTML −−>\n<form action= ’ FilmSimple .php ’ method= ’ post ’>\n<input type=’hidden ’ name=\" action\" value=\"FormFilmSimple\"/>\n<input type=’hidden ’ name=\"mode\" value=\"<?php echo $mode ?>\"/>\n<table >\n<?php if( $mode == MODE_INSERTION) { ? >\n<tr > <td>Titre : </td> <td> <input type=’ text ’ size=’40 ’ name=\n’ titre ’ value=\"<?php echo $val_defaut [ ’ titre ’]?>\"/>\n</td ></tr >\n<?php } else {? >\n<tr ><td>Mise à jour de </td><td ><?php echo $val_defaut\n[ ’ titre ’]?>\n<input type=’hidden ’\nn a m e =’ titre ’\nvalue=’<?php echo $val_defaut [ ’ titre ’]?> ’/>\n</td ></tr >\n<?php } ?>\n<tr ><td >Année : </ td >\n<td> <input type=’ text ’ size=’4 ’ maxlength=’4 ’\nname=\"annee\" value=\" <?php\necho $val_defaut [ ’annee ’]?>\"/>\n</td ></tr >\n<tr> <td>Réalisateur (prénom −nom) : </ td >\n<td> <input type=’text ’ size=’20 ’ n ame =\"prenom_realisateur\"\nvalue=\"<?php\necho $val_defaut [ ’ prenom_realisateur ’]?>\"/>\n<br/>\n<input type=text size=’20 ’ name =\"nom_realisateur\"\nvalue=\"<?php echo $val_defaut [ ’ nom_realisateur ’]?>\"/>\n</td ></tr >\n80\n Chapitre 2. Techniques de base\n<tr ><td >Année de naissance :\n<td> <input type=’ text ’ size=’4 ’ maxlength=’4 ’\nname=’annee_naissance ’\nvalue=\"<?php echo $val_defaut [ ’ annee_naissance ’]?>\"/>\n</td ></tr >\n<tr > <td colspan=’2 ’> <input type=’submit ’ value=’ Exécuter ’/>\n</td ></tr >\n</ table >\n</form>\n<?php\n}\n?>\nLa fonction FormFilmSimple() prend en paramètres le mode (insertion ou\nmodiﬁcation) et un tableau contenant les valeurs par défaut à placer dans les champs.\nLe mode est systématiquement placé dans un champ caché pour être transmis au\nscript traitant les données du formulaire, et saura ainsi dans quel contexte elles ont\nété saisies :\n<input type=’hidden’name=\"mode\"value=\"<?php echo $mode ?>\"/>\nLes modes d’insertion et de modiﬁcation correspondent à deux afﬁchages diffé-\nrents du formulaire. En insertion le champ « titre » est saisissable et sans valeur pardéfaut. En mise à jour, il est afﬁché sans pouvoir être saisi, et il est de plus dans unchamp caché avec sa valeur courante qui est transmise au script de traitement desdonnées.\n<?php if( $mode == MODE_INSERTION) { ? >\n<tr > <td>Titre : </td> <td> <input type=’ text ’ size=’40 ’ name=’\ntitre ’\nvalue=\"<?= $val_defaut [ ’ titre ’]?>\"/></td\n></tr >\n<?php } else {? >\n<tr> <td>Mise à jour de </td> <td><?= $val_defaut [ ’ titre ’]?></td>\n<td> <input type=’hidden ’\nn a m e =’ titre ’ value=’< ? = $val_defaut[ ’ titre ’]?> ’/></td>< /tr\n>\n<?php } ?>\nLe tableau des valeurs par défaut passé en paramètre à la fonction, $val_defaut,\ndoit contenir un élément par champ, le nom de l’élément étant le nom du champ,\net sa valeur la valeur par défaut du champ. Ce tableau associatif peut s’obtenir parun appel à mysql_fetch_assoc() si le ﬁlm vient de la base et doit être modiﬁé.\nIl peut également s’agir du tableau $_POST ou$_GET après saisie du formulaire,\npour réafﬁcher les données prises en compte. La ﬁgure 2.4 montre le formulaire enmodiﬁcation.\nNotez qu’on place un autre champ caché, action, dans le formulaire. La trans-\nmission de cette variable action au script\nFilmSimple.php indique que des valeurs ont\n2.3 Mise à jour d’une base par formulaire\n 81\nété saisies dans le formulaire, et qu’elles doivent déclencher une insertion ou une\nmise à jour dans la base.\nFigure 2.4 — Formulaire en modification du film Vertigo\nLa seconde fonction effectue les requêtes de mise à jour. Elle prend en entrée le\nmode (insertion ou modiﬁcation), un tableau associatif qui, comme $val_defaut,\ncontient les valeurs d’une ligne de la table FilmSimple , enﬁn l’identiﬁant de\nconnexion à la base.\nExemple 2.17 exemples/MAJFilmSimple.php :Fonction de mise à jour de la table\n<?php\n// Fonction de mise à jour ou insertion de la table FilmSimple\nfunction MAJFilmSimple ($mode , $film , $connexion)\n{\n// Préparation des variables , en traitant par addSlashes\n// les chaînes de caractères\n$titre = addSlashes($film [ ’ titre ’ ]) ;\n$annee = $film [ ’annee ’ ];\n$prenom_realisateur = addSlashes($film [ ’ prenom_realisateur ’ ]) ;\n$nom_realisateur = addSlashes($film [ ’ nom_realisateur ’ ]) ;\n$annee_naissance = $film [ ’annee_naissance ’ ];\nif( $mode == MODE_INSERTION)\n$requete = \"I N S E R T I N T O FilmSimple ( titre , annee , \"\n. \"prenom_realisateur , nom_realisateur , annee_naissance) \". \" V A L U E S ( ’ $titre ’ , ’$annee ’ , ’ $prenom_realisateur ’ , \"\n. \" ’ $nom_realisateur ’ , ’$annee_naissance ’)\" ;\nelse\n82\n Chapitre 2. Techniques de base\n$requete = \"U P D A T E FilmSimple SET annee=’$annee ’ , \"\n. \"prenom_realisateur=’$prenom_realisateur ’ , \"\n. \"nom_realisateur=’$nom_realisateur ’ , \". \"annee_naissance=’$annee_naissance ’ \"\n.\" W H E R E t i t r e=’ $ t i t r e ’\" ;\n// Exécution de l ’ordre S Q L\nExecRequete ( $requete , $connexion) ;\n}\n?>\nEnﬁn, la troisième fonction afﬁche un tableau des ﬁlms présents dans la table, en\nassociant à chaque ﬁlm une ancre pour la modiﬁcation.\nExemple 2.18 exemples/TableauFilms.php :Tableau afﬁchant la liste des ﬁlms\n<?php\n// Affichage du tableau des films\nfunction TableauFilms ($connexion)\n{\n$ r e s u l t a t = ExecRequete ( \"SELECT ∗F R O M FilmSimple \" , $connexion) ;\necho \"<table border =’4’ cellspacing =’2’ cellpadding=’2’>\"\n. \"<caption align =’bottom ’>Table <i>FilmSimple </i ></caption > \"\n. \"<tr> <th>Titre </th> <th> A n n é e</th> <th>Réalisateur </th>\"\n. \"<th>Année naissance </th> <th>Action </th></tr> \\ n\" ;\nwhile ($film = ObjetSuivant ( $resultat )) {\n// O n code le titre pour le placer dans l ’U R L\n$titreURL = urlEncode ($film −>titre);\necho \"<tr > <td>$film −>titre </td> <td>$film −>annee </td> \"\n. \"<td>$film −>prenom_realisateur $film −>nom_realisateur </td> \"\n. \"<td>$film −>annee_naissance </td> \"\n. \"<td> <a href =’FilmSimple .php?mode=\" . M O D E _ M A J\n. \" & amp; titre=$titreURL’>Modifier ce film </a></td></tr > \\n\" ;\n}\necho \"< /t a b l e> \\ n \";\n}\n?>\nLe tableau est standard, la seule particularité se limite à une l’ancre qui contient\ndeux arguments, le mode et le titre du ﬁlm à modiﬁer :\n<a href=’FilmSimple.php?mode=maj&amp;titre=$titreURL’>\nRappelons qu’il faut prendre garde à ne pas placer n’importe quelle chaîne de\ncaractères dans une URL (voir page 67) : des caractères blancs ou accentués seraient\nsans doute mal tolérés et ne donneraient pas les résultats escomptés. On ne doit\n2.3 Mise à jour d’une base par formulaire\n 83\npas non plus placer directement un caractère « &» dans un document (X)HTML.\nOn lui préférera la référence à l’entité « &amp; ». Quand l’URL est produite dyna-\nmiquement, on doit lui appliquer la fonction PHP urlEncode() aﬁn d’éviter ces\nproblèmes.\nLe script principal\nPour ﬁnir, voici le script principal, afﬁchant la page de la ﬁgure 2.5. Toutes les\ninstructions require_once pour inclure les différents ﬁchiers de l’application, ainsi\nque les déclarations de constantes, ont été placées dans un seul ﬁchier, UtilFilmSimple.php ,\ninclus lui-même dans le script. Cela comprend notamment le ﬁchier contenant lafonction NormalisationHTTP() (voir page 70) pour normaliser les entrées HTTP ,\nque nous utiliserons maintenant systématiquement.\nFigure 2.5 — Page de mise à jour des films\nExemple 2.19 exemples/FilmSimple.php :Script de gestion de la table FilmSimple\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \">\n<head>\n<title >Opérations sur la table FilmSimple </ title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\" />\n</head>\n<body>\n84\n Chapitre 2. Techniques de base\n<h2>Opérations sur la table <i>FilmSimple </i ></h2>\n<?php\nrequire_once (\"UtilFilmSimple .php\") ;\n// O n normalise les entrées H T T P\nNormalisation () ;\n// Tableau \"vide\" utilisé comme valeurs par défaut pour les\n// insertions\n$NULL_FILM = array (\"titre\" = > \"\" , \"annee\"= >\"\" ,\"nom_realisateur\"= >\"\" ,\n\"annee_naissance\"= >\"\",\"prenom_realisateur\"= >\"\");\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\nif( ! isSet($ _ P O S T[ ’action ’ ]) and ! isSet($ _ G E T[ ’m o d e’ ]) ) {\n// L’exécution n’est pas lancée depuis le formulaire\n// ou depuis l ’une des ancres créées dans TableauFilms()\n// donc on affiche le tableau des films .\nTableauFilms ($connexion) ;\n// O n place une ancre pour ajouter un film\necho \" <a h r e f = ’ F i l m S i m p l e . php ? mode= \" . MODE_INSERTION\n. \" ’>Ajouter un film </a> \\n\" ;\n}\nelse {\n/ / T r a i t e m e n t d e s é v é n e m e n t s utilisateurs recueillis par\n// l ’application\nif( i s S e t ($_GET [ ’ mode ’ ] ) ) {\n// L’utilisateur a cliqué l ’u n e des ancres permettant de// modifier// ou d’ajouter u n film\nif($_GET [ ’ mode ’ ] == MODE_MAJ) {\n// O n récupère les données du film à modifier et on affiche// le formulaire pré −rempli à l ’aide de ces données.\n$slash_titre = mysql_real_escape_string($ _ G E T[ ’ titre ’ ]) ;\n$ r e q u e t e = \"SELECT ∗F R O M FilmSimple W H E R E titre =’\n$slash_titre ’\";\n$resultat = ExecRequete ($requete , $connexion);\n$film = LigneSuivante ( $resultat ) ;\nFormFilmSimple (M O D E _ M A J, $film) ;\n}\nelse if ( $_GET [ ’ mode ’ ] == MODE_INSERTION) {\n// O n affiche u n formulaire de saisie vierge\nF o r m F i l m S i m p l e (MODE_INSERTION , $NULL_FILM ) ;\n}\n}\nelse if ( i s S e t ($_POST [ ’ a c t i o n ’ ] ) ) {\n// L’ utilisateur a saisi des données dans le formulaire pour\n2.3 Mise à jour d’une base par formulaire\n 85\n// modifier o u insérer u n film , puis a cliqué sur \"Exécuter\"\n// O n contrôle la saisie , met à jour la base et affiche// le tableau actualisé des films.\n// Contrôle des données\nif(ControleFilm ($ _ POST)) {\nMAJFilmSimple($_POST[ ’mode ’ ] , $_POST, $connexion) ;\nTableauFilms ($connexion) ;\n}\n}\n}\n?>\n</body>\n</html>\nL’afﬁchage est déterminé par le paramètre $mode (qui indique dans quel mode\non doit afﬁcher le formulaire) et par le paramètre $action qui, quand il est présent,\nindique que le formulaire a été soumis.\nQuand ces paramètres sont absents, on afﬁche simplement le tableau et l’ancre\nd’insertion. Quand $mode vaut MODE_INSERTION, c’est qu’on a utilisé l’ancre d’in-\nsertion : on appelle le formulaire en lui passant un tableau des valeurs par défaut\nvide. Quand $mode vaut MODE_MAJ, on sait qu’on reçoit également le titre du ﬁlm\nà modiﬁer : on le recherche dans la base et on passe le tableau obtenu à la fonctionFormFilmSimple() pour tenir lieu de valeurs par défaut.\nLa variable $action, si elle est déﬁnie, indique qu’une mise à jour avec le\nformulaire a été effectuée. On effectue d’abord différents contrôles avec la fonc-tion ControleFilmSimple() que nous détaillerons par la suite. Si cette fonction\nrenvoie true, ce qui indique qu’il n’y a pas de problèmes, on appelle la fonction\nMAJFilmSimple() en lui passant le tableau des valeurs provenant du formulaire.\nLe système obtenu permet d’effectuer des mises à jour (insertions et modiﬁca-\ntions) en suivant uniquement des URL dans lesquelles on a placé les informationsdécrivant l’action à effectuer. Il est très représentatif des techniques utilisées cou-ramment pour accéder aux informations dans une base de données et les modiﬁer.\nL’utilisation des fonctions permet de conserver un code relativement concis, dans\nlequel chaque action (mise à jour, afﬁchage, contrôle) est bien identiﬁée et codéeune seule fois. Sur le même principe, il est facile d’ajouter, dans le tableau HTML desﬁlms, une ancre pour détruire le ﬁlm. Nous laissons cette évolution au lecteur, à titred’exercice.\nFilmSimple.php illustre encore une technique assez courante consistant à utiliser un\nseul script dans lequel des opérations différentes sont déclenchées en fonction del’action précédemment effectuée par l’utilisateur. Cette technique peut être asseztroublante dans un premier temps puisqu’elle nécessite de se représenter correcte-ment la succession des interactions client/serveur pouvant mener à un état donné.Elle s’avère en pratique très utile, en évitant d’avoir à multiplier le nombre de scriptstraitant d’une fonctionnalité bien identiﬁée.\n86\n Chapitre 2. Techniques de base\nLe point faible est la production du formulaire avec valeurs par défaut, assez lourde\net qui le serait bien plus encore s’il fallait gérer de cette manière les listes déroulantes.\nNous verrons dans le chapitre consacré à la programmation objet comment dévelop-per des outils automatisant dans une large mesure ce genre de tâche.\n2.3.2 Validation des données et expressions régulières\nRevenons une nouvelle et dernière fois sur les contrôles à effectuer lors de laréception des données soumises via un formulaire (voir page 70 pour une premièreapproche). On peut effectuer des contrôles du côté client, avec JavaScript, ou ducôté serveur, en PHP . Les contrôles JavaScript sont les plus agréables pour l’uti-lisateur puisqu’il n’a pas besoin d’attendre d’avoir saisi toutes ses données dansle formulaire et de les avoir transmises au serveur pour prendre connaissance des\néventuels messages d’erreurs. En revanche la programmation JavaScript n’est pas une\ngarantie puisqu’un esprit malfaisant peut très bien supprimer les contrôles avant detransmettre des informations à votre script. Il est donc indispensable d’ajouter danstous les cas une validation des données côté serveur.\nLes exemples qui suivent donnent quelques exemples de contrôles plus avancés\nque ceux donnés page 70. Nous prenons comme cas d’école la fonction de contrôleControleFilmSimple() qui doit vériﬁer la validité des données avant insertion ou\nmise à jour de la table FilmSimple (voir ce qui précède). Voici tout d’abord la structure\nde cette fonction :\nfunction ControleFilm ($film)\n{\n// Ici des contrôles . Si une erreur est rencontrée , la variable\n// $message est définie\n...\n// Fin des contrôles , affichage éventuel de $message\nif($message) {\necho \"< b>Erreurs rencontrées :</b> <br/>$message\" ;\nFormFilmSimple (M O D E _ I N S E R T I O N, $film) ;\nreturn false ;\n}\nelse return true ;\n}\nOn prend donc en argument les données à placer dans la table (le tableau\nassociatif $film) et on vériﬁe que tout est correct. Comment faire si une erreur a\nété rencontrée ? Une solution brutale est d’afﬁcher le message et de redemander à\nl’utilisateur toute la saisie. Il faut s’attendre à une grosse colère de sa part s’il doit\nsaisir à nouveau 20 champs de formulaire pour une erreur sur un seul d’entre eux.\nLa solution adoptée ici (et recommandée dans tous les cas) est de réafﬁcher\nle formulaire avec les données saisies, en donnant également le message indi-quant où la correction doit être faite. Il sufﬁt bien sûr de reprendre la fonction\n2.3 Mise à jour d’une base par formulaire\n 87\nFormFilmSimple() (voilà qui devrait vous convaincre de l’utilité des fonctions ?)\nen lui passant le tableau des valeurs.\nSuivent quelques contrôles possibles.\nExistence, type d’une variable, présence d’une valeur\nRappelons tout d’abord comment vériﬁer l’existence des variables attendues.\nEn principe le tableau $film doit contenir les éléments titre, annee,\nprenom_realisateur, nom_realisateur etannee_naissance. C’est toujours\nle cas si les données proviennent de notre formulaire de saisie, mais comme rien nele garantit il faut tester l’existence de ces variables avec la fonction isSet().\nif(! isSet ($film [ ’ titre ’ ]) )\n$message = \"Pourquoi n ’y a −t−il pas de titre ???<br/>\" ;\nIl faut également penser à vériﬁer que l’utilisateur a bien saisi un champ. Voici le\ntest pour le nom du metteur en scène (l’expression « $a .= $b » est un abrégé pour\n«$ a=$ a.$ b »).\nif(empty ($film [ ’ nom_realisateur ’ ]) )\n$message .= \"Vous devez saisir le n o m du metteur en scène<br/>\n\";\nSi les variables existent, on peut tester le type avec les fonctions PHP\nis_string(), is_numeric(), is_float(), etc. (voir annexe C). Voici comment\ntester que l’année est bien un nombre.\nif(!is_numeric ($film [ ’annee ’ ]) )\n$message = $message . \"L ’année doit être un entier : $film [\nannee]<br/>\" ;\nLes tests sur le contenu même de la variable sont d’une très grande variété et\ndépendent fortement de l’application. On pourrait vériﬁer par exemple que l’annéea une valeur raisonnable, que le nom et le prénom débutent par une capitale, necontiennent pas de caractère blanc en début de chaîne, ne contiennent pas de chiffre,que le metteur en scène est né avant de réaliser le ﬁlm (!), etc.\nUne partie des tests, celle qui concerne le format des valeurs saisies, peut s’effec-\ntuer par des expressions régulières.\nValidation par expressions régulières\nLes expressions régulières4permettent de déﬁnir des « patterns », ou motifs, que\nl’on peut ensuite rechercher dans une chaîne de caractères ( pattern matching ). Un\nexemple très simple, déjà rencontré, est le test d’une occurrence d’une sous-chaînedans une chaîne avec l’opérateur LIKE de SQL. La requête suivante sélectionne ainsi\ntous les ﬁlms dont le titre contient la sous-chaîne « ver ».\nSELECT * FROM FilmSimple WHERE titre LIKE ’%ver%’\n4. On parle aussi d’expressions rationnelles.\n88\n Chapitre 2. Techniques de base\nLes expressions régulières autorisent une recherche par motif beaucoup plus\npuissante. Une expression décrit un motif en indiquant d’une part le caractère ou\nla sous-chaîne attendu(e) dans la chaîne, et en spéciﬁant d’autre part dans quel ordreet avec quel nombre d’occurrences ces caractères ou sous-chaînes peuvent apparaître.\nL’expression régulière la plus simple est celle qui représente une sous-chaîne\nconstante comme, par exemple, le « ver » dans ce qui précède. Une recherche aveccette expression a la même signiﬁcation que la requête SQL ci-dessus. Il est possibled’indiquer plus précisément la place à laquelle doit ﬁgurer le motif :\n1. le « ˆ » indique le début de la chaîne : l’expression «\n∧ver » s’applique donc à\ntoutes les chaînes commençant par « ver » ;\n2. le $ indique la ﬁn de la chaîne : l’expression « ver$ » s’applique donc à toutes\nles chaînes ﬁnissant par « ver » ;\nOn peut exprimer de manière concise toute une famille de motifs en utilisant les\nsymboles d’occurrence suivants :\n1. « m*» indique que le motif mdoit être présent 0 ou plusieurs fois ;\n2. « m+» indique que le motif moit être présent une (au moins) ou plusieurs fois,\nce qu’on pourrait également exprimer par « mm* » ;\n3. « m?» indique que le motif mpeut être présent 0 ou une fois ;\n4. « m{p,q} » indique que le motif mpeut être présent au moins pfois et au plus\nqfois (la syntaxe {p,} indique simplement le « au moins », sans maximum,\net{p}est équivalent à{p,p}).\nPar défaut, les symboles d’occurrence s’appliquent au caractère qui précède, mais\non peut généraliser le mécanisme avec les parenthèses qui permettent de créer desséquences. Ainsi (ver)+ est une expression qui s’applique aux chaînes contenant au\nmoins une fois la sous-chaîne ver, alors que ver+ s’applique aux sous-chaînes qui\ncontiennent vesuivi d’un ou plusieurs r.\nLe choix entre plusieurs motifs peut être indiqué avec le caractère « | ». Par\nexemple l’expression ver+|lie+ s’applique aux chaînes qui contiennent au moins\nune fois ver ouau moins une fois lie. Pour vériﬁer qu’une chaîne contient un\nchiffre, on peut utiliser l’expression 0|1|2|3|4|5|6|7|8|9 mais on peut également\nencadrer tous les caractères acceptés entre crochets : [0123456789]. Une expression\nconstituée d’un ensemble de caractères entre crochets s’applique à toutes les chaînescontenant au moins un de ces caractères. Si le premier caractère entre les crochetsest\n∧, l’interprétation est inversée : l’expression s’applique à toutes les chaînes qui ne\ncontiennent pas un des caractères. Voici quelques exemples :\n•[ver] : toutes les chaînes avec un v, un e ou un r ;\n•[a-f] : toutes les chaînes avec une des lettres entre a et f ;\n2.3 Mise à jour d’une base par formulaire\n 89\n•[a-zA-Z] : toutes les chaînes avec une lettre de l’alphabet.\n•[∧0-9] : toutes les chaînes sans chiffre.\nPour simpliﬁer l’écriture des expressions certains mot-clés représentent des classes\ncourantes de caractères, données dans la table 2.2. Ils doivent apparaître dans une\nexpression régulière encadrés par « : » pour éviter toute ambiguité comme, parexemple, « :alpha: ».\nTableau 2.2 — Classes de caractères\nMot-clé\n Description\nalpha\n N’importe quel caractère alphanumérique.\nblank\n Espaces et tabulations.\ncntrl\n Tous les caractères ayant une valeur ASCII inférieure à 32.\nlower\n Toutes les minuscules.\nupper\n Toutes les majuscules.\nspace\n Espaces, tabulations et retours à la ligne.\nxdigit\n Chiffres en hexadécimal.\nEnﬁn le point « . » représente n’importe quel caractère, sauf le saut de ligne\nNEWLINE. Le point, comme tous les caractères spéciaux (∧,. ,[ ,] ,( ,) ,* ,\n+, ?, {, , }, \\) doit être précédé par un \\pour être pris en compte de manière\nlittérale dans une expression régulière.\nExpressions régulières et PHP\nLes deux principales fonctions PHP pour traiter des expressions régulières sontereg() etereg_replace(). La première prend trois arguments : l’expression régu-\nlière, la chaîne à laquelle on souhaite appliquer l’expression, enﬁn le dernier para-mètre (optionnel) est un tableau dans lequel la fonction placera toutes les occur-rences de motifs, rencontrés dans la chaîne, satisfaisant l’expression régulière.\nVoici un exemple pour notre fonction de contrôle. On veut tester si l’utilisateur\nplace des balises dans les chaînes de caractères, notamment pour éviter des problèmesà l’afﬁchage. Voyons d’abord l’expression représentant une balise. Il s’agit de toutechaîne commençant par « < », suivi de caractères à l’exception de « > », et seterminant par « > ». L’expression représentant une balise est donc\n<[^>]*>Voici le test appliqué au nom du metteur en scène :\nif(ereg (\"< [ ^> ] ∗>\" , $film [ ’ nom_realisateur ’ ] , $balises ))\n$message .= \"Le n o m contient la balise : \"\n. htmlEntities ($balises [0]) ;\nLa fonction ereg() recherche dans le nom toutes les balises, et les place dans\nle tableau $balises. Elle renvoie true si au moins un motif a été trouvé dans la\nchaîne.\n90\n Chapitre 2. Techniques de base\nOn donne alors dans le message d’erreur la balise rencontrée (on pourrait les afﬁ-\ncher toutes avec une boucle). Attention : pour qu’une balise apparaisse textuellement\ndans la fenêtre d’un navigateur, il faut l’écrire sous la forme &lt;balise&gt; pour\néviter qu’elle ne soit interprétée comme une directive de mise en forme. La fonctionhtmlEntities() remplace dans une chaîne tous les caractères non-normalisés d’un\ntexte HTML par l’entité HTML correspondante.\nVoici un autre exemple testant que le nom du metteur en scène ne contient que\ndes caractères alphabétiques. Si on trouve un tel caractère, on le remplace par une«*»a v e cl af o n c t i o n ereg_replace() aﬁn de marquer son emplacement.\nif(ereg (\"[^ A −Za−z ] \" , $film [ ’ nom_realisateur ’ ]) )\n$message .= \"Le n o m contient u n ou plusieurs caractères \"\n.\" n o n −alphabétiques : \"\n.ereg_replace (\"[^ A −Za−z]\", \" ∗\" , $film [ ’\nnom_realisateur ’ ])\n.\" < b r / > \" ;\nLa fonction ereg_replace() a pour but de remplacer les motifs trouvés dans la\nchaîne (troisième argument) par une sous-chaîne donnée dans le second argument.\nLes expressions régulières sont indispensables pour valider toutes les chaînes dont\nle format est contraint, comme les nombres, les unités monétaires, les adresses élec-\ntroniques ou HTTP , etc. Elles sont également fréquemment utilisées pour inspecter\nla variable USER_AGENT et tester le navigateur utilisé par le client aﬁn d’adapter\nl’afﬁchage aux particularités de ce navigateur (voir également la fonction PHPget_browser()).\n2.4 TRANSFERT ET GESTION DE FICHIERS\nNous montrons maintenant comment échanger des ﬁchiers de type quelconque entrele client et le serveur. L’exemple pris est celui d’un album photo en ligne (trèslimité) dans lequel l’internaute peut envoyer des photos stockées sur le serveur avecune petite description, consulter la liste des photos et en récupérer certaines. Lapremière chose à faire est de vériﬁer que les transferts de ﬁchier sont autorisés dansla conﬁguration courante de PHP . Cette autorisation est conﬁgurée par la directivesuivante dans le ﬁchier\nphp.ini :\n; Whether to allow HTTP file uploads.\nfile_uploads = On\nUne seule table sufﬁra pour notre application. Voici le script de création.\nExemple 2.20 exemples/Album.sql :Table pour l’album photos\n# Création d ’une table pour un petit album photo\nCREATE TABLE Album\n( i d INTEGER AUTO_INCREMENT NOT NULL ,\ndescription T E X T,\n2.4 Transfert et gestion de fichiers\n 91\ncompteur INT EGER D E F A U L T 0,\nPRIMARY KEY ( i d )\n)\n;\nL’attribut compteur, de valeur par défaut 0, donnera le nombre de télécharge-\nments de chaque photo.\n2.4.1 Transfert du client au serveur\nVoici le formulaire permettant d’entrer le descriptif et de choisir le ﬁchier à\ntransmettre au serveur. Il est très important, pour les formulaires transmettant des\nﬁchiers, d’utiliser le mode post et de penser à placer l’attribut enctype à la valeur\nmultipart/form-data dans la balise <form>(voir chapitre 1, page 10). Le\ntransfert d’un ﬁchier donne en effet lieu à un message HTTP en plusieurs parties. En\ncas d’oubli de cet attribut le ﬁchier n’est pas transmis.\nRappelons que les champs <input> de type file créent un bouton de formulaire\npermettant de parcourir les arborescences du disque local pour choisir un ﬁchier.Dans notre formulaire, ce champ est nommé maPhoto. Notez le champ caché\nmax_file_size qui limite la taille du ﬁchier à transférer.\nExemple 2.21 exemples/FormTransfert.html :Formulaire pour sélectionner le ﬁchier à transmettre\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Formulaire de transfert de photographie</ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<h1>Transfert de photographies dans l ’ album</ h1>\n<form enctype=\" multipart /form −data\" action =\"TransfertFichier .php\n\"\nmethod =’post ’>\n<p>\n<textarea name =\"description\"\ncols =’ 5 0’ rows =’3’>Entrez ici la description de la\nphotographie\n</textarea >\n</p><p>\nChoisissez le fichier : < br/>\n<input type =’hidden ’ name =’max_file_size ’ value = ’2000000 ’/>\n<input type =’file ’ size =’40’ name =’maPhoto ’ / >\n92\n Chapitre 2. Techniques de base\n</p>\n<input type =’submit ’ value =’Transférer ’/>\n</form >\n</body >\n</html >\nVoici maintenant le script TransfertFichier.php associé à ce formulaire, montrant\ncomment le ﬁchier est traité à l’arrivée sur le serveur. L’instruction switch,a n a l o g u e\nà celle du C ou du C++, permet de choisir une action à effectuer en fonction de la\nvaleur d’une variable (ici $codeErreur) ou d’une expression : voir page 431 pour\nplus de détails.\nLes informations relatives aux ﬁchiers transférés sont disponibles dans un tableau\n$_FILES à deux dimensions. La première est le nom du champ de formulaire\nd’où provient le ﬁchier (dans notre cas, maPhoto) ; la seconde est un ensemble de\npropriétés décrivant le ﬁchier reçu par le serveur, énumérées dans la table 2.3. Lapropriété error permet de savoir si le transfert s’est bien passé ou, si ce n’est pas le\ncas, quel type de problème est survenu. Les valeurs possibles du code d’erreur sont lessuivantes :\n•UPLOAD_ERR_OK : pas d’erreur, le transfert s’est bien effectué ;\n•UPLOAD_ERR_INI_SIZE : le ﬁchier transmis dépasse la taille maximale auto-\nrisée, cette dernière étant paramétrée dans le ﬁchier php.ini :\n; Maximum allowed size for uploaded files.\nupload_max_filesize = 2M\n•UPLOAD_ERR_FORM_SIZE : la taille du ﬁchier dépasse celle indiquée dans la\ndirective max_file_size qui peut être spéciﬁée dans le formulaire HTML ;\n•UPLOAD_ERR_PARTIAL : le ﬁchier a été transféré seulement partiellement ;\n•UPLOAD_ERR_NO_FILE : aucun ﬁchier n’a été transféré.\nTableau 2.3 — Variables décrivant un transfert de fichier (seconde dimension du tableau $_FILES )\nNom\n Description\nname\n Nom du fichier sur la machine du client.\ntmp_name\n Nom du fichier temporaire sur la machine du serveur.\nsize\n Taille du fichier, en octets.\ntype\n Le type MIME du fichier, par exemple « image/gif »\nerror\n Code d’erreur si le fichier n’a pu être transmis correctement (depuis\nla version 4.2 de PHP).\nExemple 2.22 exemples/TransfertFichier.php :Script de traitement du ﬁchier\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \">\n2.4 Transfert et gestion de fichiers\n 93\n<head>\n<title >Transfert d u fichier </title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\" />\n</head>\n<body>\n<h1>Réception du fichier </h1>\n<?php\nrequire_once (\"Connect.php\") ;\nrequire_once (\"Connexion.php\") ;\nrequire_once (\"ExecRequete .php\") ;\nrequire_once (\"Normalisation .php\") ;\n// Normalisation des données H T T P\nNormalisation () ;\n// Récupération du code indicateur du transfert\n$codeErreur = $_FILES [ ’maPhoto ’ ] [ ’ error ’ ] ;\nif( $ c o d e E r r e u r == UPLOAD_ERR_OK) {\n// L e fichier a bien été transmis\n$fichier = $_FILES [ ’maPhoto ’ ] ;\necho \"< b> N o m du fichier client :</b> \" . $fichier [ ’n a m e’] .\n\"<br/>\" ;\necho \"< b> N o m du fichier serveur :</b> \" . $fichier [ ’tmp_name’] .\n\"<br/>\" ;\necho \"< b>Taille du fichier :</b> \" . $fichier [ ’ size ’] . \"<br/>\";\necho \"<b>Type du f i c h i e r : </b>\" . $fichier [ ’ type ’ ] . \"<br /> \" ;\n// O n insère la description dans la table A l b u m\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\n// Protection des données à insérer\n$description =\nhtmlSpecialChars(mysql_real_escape_string($ _ P O S T\n[’d e s c r i p t i o n’] ) ) ;\n$requete = \"I N S E R T I N T O Album ( description ) V A L U E S\n(’ $description ’)\";\n$resultat = ExecRequete ($requete , $connexion);\n// O n récupère l ’ identifiant attribué par M y S Q L\n$id = mysql_insert_id ($connexion) ;\n/ / C o p i e d u f i c h i e r d a n s l e r é p e r t o i r e PHOTOS\ncopy ( $ f i c h i e r [ ’ t m p _ n a m e ’ ] , \" . / PHOTOS / $ i d . j p g \" ) ;\n}\nelse {\n// U n e erreur quelque part\nswitch ($codeErreur) {\n94\n Chapitre 2. Techniques de base\ncase UPLOAD_ERR_NO_FILE :\necho \"Vous avez oublié de transmettre le fichier !?\\n\" ;\nbreak ;\ncase UPLOAD_ERR_INI_SIZE :\necho \"L e fichier dépasse la taille m a x. autorisée par P H P \";\nbreak ;\ncase UPLOAD_ERR_FORM_SIZE :\necho \"L e fichier dépasse la taille m a x. autorisée par le\nformulaire\";\nbreak ;\ncase UPLOAD_ERR_PARTIAL :\necho \"L e fichier a été transféré partiellement\";\nbreak ;\ndefault :\necho \"N e doit pas arriver !!! \" ;\n}\n}\n?>\n</body>\n</html>\nLe script teste soigneusement ces erreurs et afﬁche un message approprié au\ncas de ﬁgure. Si un ﬁchier est transféré correctement sur le serveur, ce dernier le\ncopie dans un répertoire temporaire (sous Unix, /tmp, paramétrable dans le ﬁchier\nde conﬁguration php.ini ). Le nom de ce ﬁchier temporaire est donné (dans notre\ncas) par $_FILES[’maPhoto’][’tmp_name’] . Notre script afﬁche alors les quatre\ninformations connues sur ce ﬁchier.\nOn insère ensuite la description du ﬁchier dans la table Album . Remarquez que\nl’attribut idn’est pas donné dans la commande INSERT : MySQL se charge d’at-\ntribuer automatiquement un identiﬁant aux champs AUTO_INCREMENT.L af o n c t i o n\nmysql_insert_id() permet de récupérer l’identiﬁant attribué par le dernier ordre\nINSERT effectué.\nFinalement, on copie (fonction copy()) le ﬁchier temporaire dans le sous-\nrépertoire PHOTOS, en lui donnant comme nom l’identiﬁant de la description\ndans MySQL, et comme extension « .jpg ». On a supposé ici pour simpliﬁer que\ntous les ﬁchiers transmis sont au format JPEG, mais il serait bon bien sûr de choisir\nl’extension en fonction du type MIME du ﬁchier transmis.\nAttention : le processus qui effectue cette copie est le programme serveur. Ce\nprogramme doit impérativement avoir les droits d’accès et d’écriture sur les réper-toires dans lesquels on copie les ﬁchiers (ici c’est le répertoire PHOTOS situé sous le\nrépértoire contenant le script\nTransfertFichier.php ).\n2.4 Transfert et gestion de fichiers\n 95\nQuelques précautions\nLe transfert de ﬁchiers extérieurs sur une machine serveur nécessite quelques précau-\ntions. Il est évidemment très dangereux d’exécuter un script PHP ou un programme\nreçu via le Web. Faites attention également à ne pas permettre à celui qui transfère\nle ﬁchier d’indiquer un chemin d’accès absolu sur la machine (risque d’accès àdes ressources sensibles). Enﬁn il est recommandé de contrôler la taille du ﬁchiertransmis, soit au niveau du navigateur, soit au niveau du serveur.\nDu côté navigateur, un champ caché de nom max_file_size peut précéder le\nchamp de type file (voir l’exemple de\nFormTransfert.html ci-dessus). Le navigateur doit\nalors en principe interdire le transfert de ﬁchier plus gros que la taille maximaleindiquée. Comme tous les contrôles côté client, il ne s’agit pas d’une garantie absolue,et il est préférable de la doubler côté serveur. Le paramètre upload_max_filesize\ndans le ﬁchier\nphp.ini indique à PHP la taille maximale des ﬁchiers recevables.\nLe transfert de ﬁchiers sur le serveur peut être dangereux, et mérite que vous\nconsacriez du temps et de la réﬂexion à vériﬁer que la sécurité n’est pas compromise.Tenez-vous également au courant des faiblesses détectées dans les différentes versionsde PHP en lisant régulièrement les informations sur le sujet publiées dans les forumsspécialisés ou sur http://www.php.net .\n2.4.2 Transfert du serveur au client\nVoyons maintenant comment transférer des ﬁchiers du serveur au client. À titred’illustration, nous allons afﬁcher la liste des photos disponibles et proposer leur\ntéléchargement.\nEn principe il existe autant de lignes dans la table Album que de ﬁchiers dans\nle répertoire PHOTOS. On peut donc, au choix, parcourir la table Album et accé-\nder, pour chaque ligne, au ﬁchier correspondant, ou l’inverse. Pour les besoins de\nl’exemple, nous allons adopter ici la seconde solution.\nPHP propose de nombreuses fonctions pour lire, créer, supprimer ou modiﬁer des\nﬁchiers et des répertoires. Nous utilisons ici les fonctions opendir() , qui renvoie un\nidentiﬁant permettant d’accéder à un répertoire, readir() qui permet de parcourir\nles ﬁchiers d’un répertoire, et closedir() qui ferme l’accès à un répertoire. Voici\nces fonctions à l’œuvre dans le script\nListePhotos.php .\nExemple 2.23 exemples/ListePhotos.php :Afﬁchage de la liste des photos\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \">\n<head><title >Liste et téléchargement des photos </ title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\" />\n</head>\n96\n Chapitre 2. Techniques de base\n<body>\n<h1>Liste et téléchargement des photos </h1>\n<?php\nrequire_once (\"UtilBD.php\") ;\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\n// O n affiche la liste des photos\necho \"<table border =’4’ cellspacing =’2’ cellpadding =’2’>\"\n. \"<caption A L I G N=’bottom’>Les photos disponibles </caption > \"\n. \"<tr> <th>Vignette </th> <th>Description </th> <th>Taille </th>\"\n. \"<th>Agrandir </th><th>Compteur </th><th>Action </th ></tr >\\n\" ;\n$dir = opendir ( \"PHOTOS\" ) ;\nwhile ($fichier = readdir ($dir)) {\nif(ereg (\"\\.jpg\\ $\" , $fichier)) {\n$id = substr ($fichier , 0, strpos ($fichier , \".\"));\n$ r e q u e t e = \"SELECT ∗FROM Album WHERE id = ’ $id ’ \" ;\n$resultat = ExecRequete ($requete , $connexion);\n$photo = ObjetSuivant ( $resultat ) ;\necho \" < t r >< t d >< i m g s r c = ’PHOTOS / $ f i c h i e r ’ h e i g h t = ’ 7 0 ’ w i d t h\n=’70’/></t d>\"\n. \"<td>$photo −>description </td>\"\n.\" < t d > \". filesize ( \"PHOTOS / $ f i c h i e r \" ) . \" < / t d > \"\n. \" < t d >< a h r e f = ’PHOTOS / $ f i c h i e r ’ > $ f i c h i e r < / a > < / t d > \"\n. \"<td>$photo −>compteur </td>\"\n. \"<td><a href =’ChargerPhoto .php? id=$id ’> \"\n. \"Télécharger cette photo </a></td> \\ n\" ;\n}\n}\necho \"< /t a b l e> \\ n \";\nclosedir ($dir);\n?>\n<a href=’ FormTransfert . html ’>Ajouter une photo </a>\n</body>\n</html>\nL’accès aux ﬁchiers du répertoire se fait avec la boucle suivante :\n$dir = opendir ( \"PHOTOS\" ) ;\nwhile ($fichier = readdir ($dir)) {\n// O n ne prend que les fichiers J P E G\nif(ereg (\"\\.jpg\\ $\" , $fichier)) {\n}\n}\nclosedir ($dir);\n2.4 Transfert et gestion de fichiers\n 97\nÀ l’intérieur de la boucle on veille à ne prendre que les ﬁchiers JPEG en testant\navec une expression régulière (voir section précédente) que l’extension est bien\n« jpg ». Notez que le caractère réservé PHP « $ » est précédé de \\pour s’assurer\nqu’il est bien passé littéralement à la fonction ereg(), où il indique que la chaîne\ndoit se terminer par « jpeg ». Le point, « . » est lui un caractère réservé dans lesexpressions régulières (il représente n’importe quel caractère), et on « l’échappe »donc également pour qu’il soit interprété littéralement.\nOn récupère ensuite l’identiﬁant de la photographie en prenant, dans le nom du\nﬁchier, la sous-chaîne précédant le « . », dont on se sert pour chercher la descriptionet le compteur de la photographie dans la base. Il ne reste plus qu’à afﬁcher une lignedu tableau HTML.\n•Pour afﬁcher une vignette (format réduit) de la photo, on utilise la balise<img>en indiquant une hauteur et une largeur limitée à 70 pixels.\n•On peut accéder à l’image complète avec l’ancre qui fait référence au ﬁchierJPEG. Si l’utilisateur choisit cette ancre, le serveur envoie automatiquementun ﬁchier avec un en-tête image/jpeg qui indique au navigateur qu’il s’agit\nd’une image et pas d’un ﬁchier HTML.\n•Enﬁn, la fonction filesize() renvoie la taille du ﬁchier passée en argument.\nLe téléchargement du ﬁchier image nous montre pour conclure comment compter\nle nombre d’accès à un ﬁchier. Il y a deux problèmes à résoudre. Le premier est « d’in-tercepter » la demande de téléchargement pour pouvoir exécuter l’ordre SQL qui vaincrémenter le compteur. Le second est d’éviter que le ﬁchier s’afﬁche purement etsimplement dans la fenêtre du navigateur, ce qui n’est pas le but recherché. Il fautau contraire que, quel que soit le type du ﬁchier transmis, le navigateur, au lieu del’afﬁcher, propose une petite fenêtre demandant dans quel répertoire de la machine\nclient on doit le stocker, et sous quel nom.\nLa solution consiste à utiliser un script intermédiaire,\nChargerPhoto.php qui, contrai-\nrement à tout ceux que nous avons vus jusqu’à présent, ne produit aucune ligne\nHTML. Ce script nous permet d’intercaler l’exécution d’instructions PHP entrela demande de l’utilisateur et la transmission du ﬁchier. On peut donc résoudrefacilement les deux problèmes précédents :\n1. l’identiﬁant du ﬁchier à récupérer est passé au script en mode get (voir le\nscript\nListePhotos.php ci-dessus) : on peut donc incrémenter le compteur dans la\ntable Album ;\n2. on donne explicitement l’en-tête du ﬁchier transmis grâce à la fonction\nHeader().\nExemple 2.24 exemples/ChargerPhoto.php :Script de téléchargement d’une photo\n<?php\nrequire_once (\"Connect.php\") ;\nrequire_once (\"Connexion.php\") ;\nrequire_once (\"ExecRequete .php\") ;\n98\n Chapitre 2. Techniques de base\n// Téléchargement d ’une photo identifiée par $ _ G E T[ ’ id ’]\n// O n commence par incrémenter le compteur\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\n$requete = \"U P D A T E Album SET compteur=compteur+1 \"\n. \"WHERE i d = ’ { $_GET [ ’ i d ’ ] } ’ \" ;\n$resultat = ExecRequete ( $requete , $connexion) ;\n// O n envoie u n e n −tête forçant le transfert (download)\n$fichier = $ _ G E T[ ’id ’] . \". jpg\";\n$ c h e m i n = \"PHOTOS / \" ;\nheader (\"C o n t e n t −type : application / force −download \" ) ;\nheader (\"C o n t e n t −disposition : filename=$fichier \") ;\n// Après l ’e n −tête on transmet le contenu du fichier lui −même\nreadFile ($chemin . $fichier ) ;\n?>\nL’incrémentation du compteur est totalement transparente pour l’utilisateur. L’in-\nformation Content-type de l’en-tête demande au navigateur de traiter le contenu\ndu message HTTP comme un ﬁchier à stocker, tandis que Content-disposition\npermet de proposer un nom par défaut, dans la fenêtre de téléchargement, pour ce\nﬁchier. Enﬁn, la fonction readfile() ouvre un ﬁchier et transfère directement son\ncontenu au navigateur.\nL’intérêt de ce genre de script est de permettre d’exécuter un traitement quel-\nconque en PHP , sans aucun afﬁchage, puis de renvoyer à une autre URL sans quel’utilisateur ait à intervenir. On pourrait ici, en plus de l’incrémentation du compteur,regarder qui vient chercher une image (en inspectant son adresse IP , disponibledans la variable serveur REMOTE_ADDR, ou toute autre information contenue dans\nles variables CGI, voir page 16).\nL’en-tête Location: autreURL par exemple permet de renvoyer à l’URL\nautreURL, qui peut être un script PHP ou un ﬁchier HTML produisant réellementl’afﬁchage.\n2.5 SESSIONS\nComme nous l’avons déjà évoqué dans le chapitre 1, le protocole HTTP ne conservepas d’informations sur la communication entre un programme client et un pro-\ngramme serveur. Le terme de session web désigne les mécanismes qui permettent\nd’établir une certaine continuité dans les échanges entre un client et un serveur\ndonnés. Ces mécanismes ont en commun l’attribution d’un identiﬁant de session àu n\nutilisateur, et la mise en œuvre d’un système permettant de transmettre systématique-ment l’identiﬁant de session à chaque accès du navigateur vers le serveur. Le serveursait alors à qui il a affaire, et peut accumuler de l’information sur cet interlocuteur.\n2.5 Sessions\n 99\n2.5.1 Comment gérer une session web ?\nIl existe essentiellement deux systèmes possibles. Le premier consiste à insérer l’iden-\ntiﬁant de session dans toutes les URL des pages transmises au client, ainsi que dans\ntous ses formulaires. Cette solution, conforme au standard HTTP , est très lourde à\nmettre en œuvre. De plus elle s’avère très fragile puisqu’il sufﬁt que l’internauteaccède à ne serait-ce qu’une seule page d’un autre site pour que l’identiﬁant de session\nsoit perdu.\nLa deuxième solution est de créer un ou plusieurs cookies pour stocker l’identiﬁant\nde session, (et peut-être d’autres informations) du côté du programme client. Rappe-\nlons (voir la ﬁn du chapitre 1, page 16) qu’un cookie est essentiellement une donnée\ntransmise par le programme serveur au programme client, ce dernier étant chargé de\nla conserver pour une durée déterminée. Cette durée peut d’ailleurs excéder la duréed’exécution du programme client lui-même, ce qui implique que les cookies soientstockés dans un ﬁchier texte sur la machine cliente.\nOn peut créer des cookies à partir d’une application PHP avec la fonction\nSetCookie(), placée dans l’en-tête du message HTTP . Dès que le navigateur a reçu(et accepté) un cookie venant d’un serveur, il renvoie ce cookie avec tous les accès\nà ce même serveur, et ce durant toute la durée de vie du cookie. Ce processus\nest relativement sécurisé puisque seul le programme serveur qui a créé un cookie\npeut y accéder, ce qui garantit qu’un autre serveur ne peut pas s’emparer de cesinformations. En revanche, toute personne pouvant lire des ﬁchiers sur la machine\ncliente peut alors trouver les cookies en clair dans le ﬁchier cookies .\nLescookies ne font pas partie du protocole HTTP , mais ont justement été inventés\npour pallier les insufﬁsances de ce dernier. Ils sont reconnus par tous les navigateurs,même si certains proposent à leurs utilisateurs de refuser d’enregistrer les cookies sur\nla machine.\nVoici un script PHP qui montre comment gérer un compteur d’accès au site avec\nuncookie.\nExemple 2.25 exemples/SetCookie.php :Un compteur d’accès réalisé avec un cookie\n<?php\n// Est −ce que le cookie existe ?\nif( i s S e t ($_COOKIE [ ’ compteur ’ ] ) ) {\n$m es s age = \" Vous ê t e s d é j à venu { $_COOKIE [ ’ compteur ’ ] } f o i s \"\n. \"m e rendre visite <br/>\\n\" ;\n// O n incrémente le compteur\n$valeur = $ _ C O O K I E[ ’compteur ’ ] + 1;\n}\nelse {\n// Il faut créer le cookie avec la valeur 1\n$message = \"Bonjour , je vous envoie un cookie<br/>\\n\" ;\n$valeur = 1;\n}\n100\n Chapitre 2. Techniques de base\n// Envoi du cookie\nSetCookie (\"compteur\" , $valeur ) ;\n?>\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head>\n<title >Les cookies </ title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<h1> U n compteur d ’ accès au site avec c ookie </h1>\n<?php echo $message ; ?>\n</body>\n</html>\nL’afﬁchage se limite à un message qui varie selon que c’est la première fois ou\nnon qu’un utilisateur se connecte au site. À chaque passage (essayez de recharger\nplusieurs fois la page) le compteur stocké dans le cookie est récupéré et incrémenté.\nCes instructions sont placées avant toute sortie HTML puisque la déﬁnition d’uncookie fait partie de l’en-tête HTTP . Si l’on commet l’erreur de transmettre ne serait-\nce qu’un caractère blanc avant le cookie, on obtient le message suivant:\nWarning: Cannot modify header information -\nheaders already sent by (output started\nat /Applications/MAMP/htdocs/exemples/SetCoo kie.php:2)\nin /Applications/MAMP/htdocs/exemples/SetCookie.php on line 18\nDans ce cas regardez votre code à l’emplacement indiqué par le message, et\ncherchez les caractères transmis avant toute instruction plaçant quelque chose dans\nl’en-tête.\nREMARQUE – Dans les fichiers contenant des déclarations de fonctions ou de classes, une\nbonne habitude à prendre est de ne pas placer la balise fermante PHP. Cela ne gène pas\nl’interpréteur, tout en évitant d’introduire des caractères parasites après la balise fermante.\nL’appel à SetCookie() crée le cookie la première fois, et modiﬁe sa valeur les\nfois suivantes. Par défaut, la durée de vie de ce cookie est celle du processus client\n(le navigateur) mais il est possible de donner une date pour le garder plusieurs jours,\nmois ou années (voir page 16).\n2.5 Sessions\n 101\n2.5.2 Gestion de session avec cookies\nVoyons maintenant comment utiliser les cookies pour gérer des sessions et enregistrer\ndes informations sur un internaute dans une base de données. Les étapes à mettre en\nœuvre sont les suivantes :\n1. quand un internaute arrive pour la première fois sur le site, on lui attribue un\nidentiﬁant unique , et on lui transmet cet identiﬁant dans un cookie ;\n2. à chaque accès ultérieur on est capable de reconnaître l’internaute par son\nidentiﬁant, et on peut mémoriser les informations le concernant dans une ouplusieurs tables ;\n3. quand la session est terminée, on peut valider déﬁnitivement l’ensemble des\nactions effectuées par l’internaute, éventuellement en lui demandant conﬁr-mation.\nL’exemple donné ci-dessous consiste à proposer un menu en plusieurs phases : les\nentrées, les plats, puis les desserts, en conservant à chaque fois l’information sur leschoix précédents.\nREMARQUE – PHP propose un mécanisme pour gérer les sessions. Cependant, pour clarifier\nles choses, nous décrivons dans un premier temps une technique indépendante avant de\nmontrer l’équivalent avec les fonctions PHP. Le chapitre 7 montre comment combiner sessions\nweb et authentification d’accès à un site.\nVoici la table Carte contenant les choix possibles, avec leur type.\nExemple 2.26 exemples/Carte.sql :La carte du restaurant\n# Création d ’une table pour la carte d ’un restaurant\nCREATE TABLE Carte\n(id_choix INTEGER AUTO_INCREMENT NOT NULL ,\nlibelle T E X T,\ntype E N U M (\"Entrée\" , \"Plat\" , \"Dessert\") ,\nPRIMARY KEY (id_choix)\n);\nINSERT INTO Carte(libelle , type) VALUES (\"Crudités\" , \"Entrée\");\nINSERT INTO Carte(libelle , type) VALUES (\"Charcuterie\" , \"Entrée\");\nINSERT INTO Carte(libelle , type) VALUES (\"Hareng\" , \" Entrée \");\nINSERT INTO Carte(libelle , type) VALUES (\"Steak\" , \" Plat \");\nINSERT INTO Carte(libelle , type) VALUES (\"Turbot\" , \" Plat \");\nINSERT INTO Carte(libelle , type) VALUES (\"Choucroute\" , \" Plat \");\nINSERT INTO Carte(libelle , type) VALUES (\" Paris −Brest\" , \"Dessert\");\nINSERT INTO Carte(libelle , type) VALUES (\"Crème caramel\" , \" Dessert \");\nINSERT INTO Carte(libelle , type) VALUES (\"Tarte citron \" , \"Dessert\");\n\n102\n Chapitre 2. Techniques de base\nIl nous faut une autre table pour conserver les choix d’un internaute. Cette table\nassocie l’internaute représenté par son identiﬁant de session, et un choix de la carte\nreprésenté par son identiﬁant id_choix.\nExemple 2.27 exemples/Commande.sql :Les commandes de l’internaute\n# Création d ’une table pour les commandes au restaurant\nCREATE TABLE Commande\n( i d _ s e s s i o n VARCHAR ( 4 0 ) NOT NULL ,\ni d _ c h o i x INTEGER NOT NULL,\nP R I M A R Y K E Y (id_session , id_choix)\n);\nPassons maintenant à la réalisation du système de commandes. Il faut d’abord\nprévoir une fonction pour afﬁcher les choix de la carte en fonction du type (entrée,plat ou dessert). Ces choix sont proposés avec un bouton de type radio.\nExemple 2.28 exemples/FormCommande.php :Le formulaire d’afﬁchage d’un choix à la carte\n<?php\n// Formulaire de saisie d ’un choix à la carte\nfunction FormCommande ($type_choix , $script , $connexion)\n{\n// U n message pour indiquer à quel stade on en est\nif($type_choix = = \"Entrée\")\necho \"Pour commencer nous vous pr oposons les entrées <br/>\" ;\nelse\nif($type_choix = = \" Plat \")\necho \"Maintenant choisissez un plat <br/>\" ;\nelse\necho \"Enfin choisissez un dessert <br/>\" ;\n// Maintenant on crée le formulaire\necho \"<form action=’$script ’ method=’post’> \\n\";\n// Champ caché avec le type de choix\necho \"<input type=’hidden ’ name=’type_choix ’ value=’\n$type_choix ’/>\" ;\n// Recherche des choix selon le type (entrée , plat ou dessert )\n$ r e q u e t e = \"SELECT ∗F R O M Carte W H E R E type=’$type_choix ’\" ;\n$resultat = ExecRequete ($requete , $connexion);\n// Affichage des choix\nwhile ($choix = ObjetSuivant ( $resultat ))\necho \"$choix −>libelle : \"\n. \"<input type=’radio ’ name=’id_choix ’ value=’$choix −>\nid_choix ’/><br/>\" ;\n2.5 Sessions\n 103\necho \"<input type=’submit ’ value=’Exécuter ’/>\\n\" ;\necho \"< /f o r m> \\ n \";\n}\n?>\nLa ﬁgure 2.6 montre le formulaire afﬁché par le script ExSession.php , avec les entrées.\nV o i c il ec o d ed ec es c r i p t .\nFigure 2.6 — Le formulaire, au début de la session\nExemple 2.29 exemples/ExSession.php :Exemple de commande avec session\n<?php\nif( i s S e t ($_COOKIE [ ’ i d _ s e s s i o n ’ ] ) ) {\n// L’identifiant de session existe déjà\n$ i d _ s e s s i o n = $_COOKIE [ ’ i d _ s e s s i o n ’ ] ;\n}\nelse {\n// Créons u n identifiant\n$id_session = $ _ S E R V E R[ ’R E M O T E _ A D D R’] . date (\" U \");\n// Envoi du cookie\nSetCookie (\" id_session \" , $id_session ) ;\n}\n?>\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \">\n<head>\n104\n Chapitre 2. Techniques de base\n<title > U n e c o m m a n d e au restaurant </title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\" />\n</head>\n<body>\n<h1>Faites votre commande au restaurant </h1>\n<?php\nrequire_once (\"Connect.php\") ;\nrequire_once (\"Connexion.php\") ;require_once (\"ExecRequete .php\") ;\nrequire_once (\"Normalisation .php\") ;\nrequire_once (\"FormCommande.php\") ;\n// Connexion à la base\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\n// Normalisation des entrées H T T P\nNormalisation () ;\n// Si le type de choix n’ est pas défini : on commence\n// par proposer les entrées\nif(! isSet ($ _ P O S T[ ’ type_choix ’ ]) ) {\necho \"Bonjour . Nous vous avons attribué la session $id_session\n<br/>\" ;\nFormCommande (\" Entrée \" , \" ExSession . php\" , $connexion) ;\n}\nelse {\n// Insérons dans la table le choix qui vient d’ être fait\n// Il faudrait tester que id_choix est défini ...\n$requete = \"I N S E R T I N T O C o m m a n d e (id_session , id_choix) \"\n. \"VALUES ( ’ $ i d _ s e s s i o n ’ , ’ { $_POST [ ’ i d _ c h o i x ’ ] } ’ ) \" ;\nExecRequete ( $requete , $connexion) ;\n// Affichage des choix déjà effectués\n$ r e q u e t e = \"SELECT C2 . ∗FROM Commande C1 , Carte C2\"\n. \" W H E R E id_session =’ $id_session ’ A N D C 1. id_choix= C 2. id_choix \"\n. \" O R D E R B Y C 2. id_choix \" ;\n$resultat = ExecRequete ( $requete , $connexion) ;\nwhile ($choix = ObjetSuivant ( $resultat ))\necho \"Vous avez choisi : $choix −>libelle <br/> \\n\";\n// Affichage de la suite\nif($ _ P O S T[ ’ type_choix ’ ] = = ’Entrée ’) {\nFormCommande (\" Plat \" , \" ExSession . php\" , $connexion) ;\n}\nelse if ($ _ P O S T[ ’ type_choix ’ ] = = ’ Plat ’) {\nFormCommande (\" Dessert \" , \" ExSession . php\" , $connexion) ;\n}\nelse {\n// Traitement de la commande complète . Ici on détruit ...\n2.5 Sessions\n 105\necho \"Nous avons noté votre commande. Merci !<br/>\" ;\n$ r e q u e t e = \"DELETE FROM Commande WHERE i d _ s e s s i o n = ’\n$id_session ’\";\nExecRequete ( $requete , $connexion) ;\n}\n}\n?>\n</body>\n</html>\nLa première partie est relativement analogue à celle du premier exemple avec\ncookies , page 99. Si l’identiﬁant de session existe, on le conserve. Sinon on le calcule,\net on crée le cookie pour le récupérer aux accès suivants. Pour l’identiﬁant, nous\navons choisi ici simplement de concaténer l’adresse IP du client et le temps « Unix »\nlors de la première connexion (nombre de secondes depuis le 01/01/1970). Il y araisonnablement peu de chances que deux utilisateurs utilisent la même machine aumême moment (sauf cas où, par exemple, plusieurs dizaines de personnes accèdentsimultanément au site derrière une passerelle unique). Cela sufﬁt pour cet exemplesimple.\nPour la suite du script, on dispose de l’identiﬁant de session dans la variable\n$id_session. On afﬁche alors successivement le formulaire pour les entrées, lesplats puis les desserts. À chaque fois, on insère dans la table Commande le choix\neffectué précédemment, et on récapitule l’ensemble des choix en les afﬁchant dansla page HTML. C’est toujours l’identiﬁant de session qui permet de faire le lien\nentre ces informations. Notez que la requête SQL qui récupère les choix de la session\ncourante est une jointure qui fait appel à deux tables. Si vous ne connaissez pas SQL,\nles jointures sont présentées dans le chapitre 7, page 289. Le langage SQL dans sonensemble fait l’objet du chapitre 10. Les ﬁgures 2.7 et 2.8 montrent respectivementle formulaire après choix de l’entrée et du plat, et après le choix du dessert.\nDans ce script, nous devons intégrer des éléments d’un tableau associatif dans une\nchaîne de caractères. Quand il s’agit d’une variable simple, le fait que le nom de lavariable soit préﬁxé par « $ » sufﬁt pour que PHP substitue la valeur de la variable.C’est moins simple pour un tableau associatif. On ne peut pas écrire en effet :\necho \" Ceci est un ´ el´ ement de tableau : $tab[’code’] \"; //Pas correct\nIl existe deux manières correctes de résoudre le problème. Première solution, une\nconcaténation :\necho \" Ceci est un ´ el´ ement de tableau : \". $tab[’code’]; //Correct\nSeconde solution : on encadre par des accolades l’élément du tableau pour qu’il\nn’y ait plus d’ambiguïté.\necho \" Ceci est un ´ el´ ement de tableau : {$tab[’code’]} \"; //Correct\nQuand le dessert a été choisi, la session est terminée. Il faudrait alors demander\nconﬁrmation ou annulation, et agir en conséquence dans la base de données. Ici nousnous contentons de détruire la commande, tâche accomplie !\n106\n Chapitre 2. Techniques de base\nFigure 2.7 — Après choix du plat et de l’entrée\nFigure 2.8 — Le menu est choisi\n2.5.3 Prise en charge des sessions dans PHP\nPHP fournit un ensemble de fonctions pour faciliter la gestion des sessions. Ces\nfonctions permettent, pour l’essentiel :\n1. d’engendrer automatiquement un identiﬁant de session, et de le récupérer à\nchaque nouvel accès ;\n2.5 Sessions\n 107\n2. de stocker des informations associées à la session (par défaut le stockage a lieu\ndans un ﬁchier temporaire) ;\n3. de détruire toutes ces informations une fois la session terminée.\nDans la mesure où nous utilisons une base de données, une partie des fonctions\nde gestion de session, notamment celles qui consistent à conserver des informations\nsur les interactions passées de l’utilisateur, peuvent être avantageusement remplacéespar des accès MySQL. L’intérêt est essentiellement de mieux protéger les accès auxdonnés enregistrées dans le cadre de la session. Nous allons donc nous contenter desfonctions PHP essentielles à la gestion de session, données ci-dessous :\nFonction\n Description\nsession_start()\n Initialise les informations de session. Si aucune session n’existe, un\nidentifiant est engendré et transmis dans un cookie .S il as e s s i o n\n(connue par son identifiant) existe déjà, alors la fonction instancietoutes les variables qui lui sont liées. Cette fonction doit être appeléeau début de tout script utilisant les sessions (il faut que l’instruction\nSet-Cookie puisse être placée dans l’en-tête HTTP).\nsession_destroy()\n Détruit toutes les informations associées à une session.\nsession_id()\n Renvoie l’identifiant de la session.\nEn général, un script PHP intégré dans une session débute avec\nsession_start(), qui attribue ou récupère l’identiﬁant de la session (un cookie\nnommé PHPSESSID). On peut associer des variables à la session en les stockant dans\nle tableau $_SESSION. Une fois qu’une variable a été associée à une session, elle est\nautomatiquement recréée et placée dans le tableau $_SESSION à chaque appel à\nsession_start(). On peut la supprimer avec la fonction unset(), qui détruit\nune variable PHP . Enﬁn, quand la session est terminée, session_destroy()\nsupprime toutes les variables associées (équivalent à un appel à unset() pour\nchaque variable).\nLe script ci-dessous montre la gestion d’une session, équivalente à la précédente,\navec les fonctions PHP .\nExemple 2.30 exemples/SessionPHP.php :Gestion de session avec les fonctions PHP\n<?php\n// L a fonction session_start fait tout le travail\nsession_start () ;\n?>\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head>\n<title > U n e c o m m a n d e au restaurant </title ><link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n108\n Chapitre 2. Techniques de base\n<h1>Faites votre commande au restaurant </h1>\n<?php\nrequire_once (\"Connect.php\") ;\nrequire_once (\"Connexion.php\") ;require_once (\"ExecRequete .php\") ;\nrequire_once (\"Normalisation .php\") ;\nrequire_once (\"FormCommande.php\") ;\n// Connexion à la base\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\n// Normalisation des entrées H T T P\nNormalisation () ;\n// Si le type de choix n’ est pas défini : on commence// par proposer les entrées\nif(! isSet ($ _ P O S T[ ’ type_choix ’ ]) ) {\necho \"Bonjour . Nous vous avons attribué la session \"\n.session_id () . \"<br/>\" ;\nFormCommande ( \" Entrée \" , \" SessionPHP . php \" , $connexion ) ;\n}\nelse {\n// Enregistrons le choix qui vient d’être fait// Il faudrait tester que id_choix est défini ...\n$ r e q u e t e = \"SELECT l i b e l l e FROM C a r t e \"\n. \"W H E R E id_choix=’$ _ P O S T[ id_choix ] ’ \" ;\n$resultat = ExecRequete ( $requete , $connexion) ;\n$choix = ObjetSuivant ( $resultat ) ;\n$_SESSION [ $_POST [ ’ type_choix ’ ] ] = $choix −>libelle ;\n// Affichage des choix déjà effectués\nif( i s S e t ($_SESSION [ ’ Entrée ’ ] ) )\necho \" Votre entrée : \" . $_SESSION [ ’ Entrée ’ ] . \"<br / > \" ;\nif( i s S e t ($_SESSION [ ’ P l a t ’ ] ) )\necho \" Votre p l a t : \" . $_SESSION [ ’ P l a t ’ ] . \"<br / > \" ;\nif( i s S e t ($_SESSION [ ’ D e s s e r t ’ ] ) )\necho \" Votre d e s s e r t : \" . $_SESSION [ ’ D e s s e r t ’ ] . \"<br / > \" ;\n// Affichage de la suite\nif($ _ P O S T[ ’ type_choix ’ ] = = ’Entrée ’)\nFormCommande ( \" P l a t \" , \" SessionPHP . php \" , $connexion ) ;\nelse if ($ _ P O S T[ ’ type_choix ’ ] = = ’ Plat ’)\nFormCommande ( \" D e s s e r t \" , \" SessionPHP . php \" , $connexion ) ;\nelse {\necho \"<p>Nous avons noté votre commande. Merci !<p/>\" ;\nsession_destroy () ;\n}\n}\n2.6 SQL dynamique et affichage multi-pages\n 109\n?>\n</body>\n</html>\nLes deux différences principales sont, d’une part, le recours à la fonction\nsession_start() qui remplace la manipulation explicite des cookies (voir le script\nExSession.php , page 103), et d’autre part l’utilisation du tableau $_SESSION àl ap l a c e\nde la table Commande.\nCe tableau peut être vu comme une variable PHP persistante entre deux échanges\nclient/serveur. Cette persistance est obtenue en stockant les valeurs du tableau\ndans un ﬁchier temporaire, situé par exemple sous Unix dans le répertoire /tmp (et\nconﬁgurable avec le paramètre session_save_path dans le ﬁchier php.ini ).\nCe mécanisme, valable pour la mise en place d’un système de gestion des ses-\nsions très simple, trouve rapidement ses limites. Si de très nombreuses informationsdoivent être associées à une session, il est préférable de les placer dans la basede données, en les référençant par l’identiﬁant de session (donné par la fonctionsession_id()). Une base de données permet de mieux structurer les informations.Elle persiste sur une très longue durée, contrairement à un ﬁchier temporaire. D’autrepart, elle est plus sûre puisque seuls les utilisateurs autorisés peuvent y accéder.\nLes principes de gestion de session présentés ici seront repris de manière plus\nétendue dans le chapitre 7 pour développer des utilitaires robustes et associer la ges-\ntion de sessions à l’authentiﬁcation des utilisateurs dans une base MySQL. Les fonc-\ntionnalités de PHP présentées précédemment nous sufﬁront puisque nous utilisonsMySQL, mais vous pouvez consulter les autres fonctions PHP dans la documentationsi vous pensez avoir à utiliser le mécanisme natif PHP . Il est possible en particulierd’éviter l’utilisation des cookies en demandant à PHP la réécriture de chaque URL\ndans une page pour y inclure l’identiﬁant de session. Comme expliqué au début decette section, cette méthode reste cependant globalement insatisfaisante et peu sûre.\n2.6 SQL DYNAMIQUE ET AFFICHAGE MULTI-PAGES\nDans la plupart des cas les requêtes SQL exécutées dans les scripts PHP sont ﬁxées parle programmeur et ce dernier connaît le type du résultat (nombre d’attributs et nomsdes attributs). Il peut arriver que les ordres SQL soient « dynamiques », c’est-à-diredéterminés à l’exécution. C’est le cas par exemple quand on permet à l’utilisateurd’effectuer directement des requêtes SQL sur la base et d’afﬁcher le résultat sousforme de table. On peut alors faire appel à des fonctions MySQL qui donnent desinformations sur le type du résultat.\nVoici une illustration de cette fonctionnalité avec, en guise de garniture, l’af-\nﬁchage « multi-pages » du résultat. Au lieu de donner en bloc, dans une seulepage HTML, toutes les lignes du résultat de la requête, on afﬁche seulement unsous-groupe de taille ﬁxée (ici, 10), et on donne la possibilité de passer d’un groupe àl’autre avec des ancres.\n110\n Chapitre 2. Techniques de base\n2.6.1 Affichage d’une requête dynamique\nCommençons par écrire une fonction qui prend en argument le résultat d’une requête\n(tel qu’il est rendu par la fonction mysql_query()), la position de la première ligne\nà afﬁcher, et le nombre de lignes à afﬁcher.\nExemple 2.31 exemples/AfficheResultat.php :Afﬁchage partiel du résultat d’une requête SQL\n<?php\n// Affichage partiel du résultat d’une requête\nrequire ( \"UtilBD . php\" ) ;\nfunction AfficheResultat ($resultat , $position , $nbrLignes)\n{\n// Affichage d’un tableau H T M L , avec autant de colonnes\n// que d’attributs . O n affiche $nbrLignes lignes ,\n// à partir de la ligne indiquée par $position ,\necho \"<table border=’4’>\" ;\n$compteurLignes = 1;\n$nbAttr = mysql_num_fields ($resultat);\n$noLigne=0;\nwhile ($tabAttr = mysql_fetch_row ($resultat)) {\n// Avant la première ligne , on affiche l ’en −tête de la table\nif($compteurLignes = = 1) {\necho \"<tr >\" ;\n// Affichage des noms d’ attributs\nfor ( $i =0; $i < $nbAttr ; $i++)\necho \"<th>\" . mysql_field_name ($resultat , $i) . \"</th> \\ n\";\n}\n// Affichage de chaque ligne dans la fourchette [ première ,\ndernière ]\nif($compteurLignes > = $position\nand $compteurLignes < = $position + $nbrLignes −1) {\n$classe = \"A\" . (( $noLigne++) % 2) ;\necho \"<tr class=’$classe ’>\";\nfor ( $i =0; $i < $nbAttr ; $i++) {\nif(empty ($tabAttr [ $i ]) ) $tabAttr [ $i ] = \"C h a m p vide\" ;\necho \"<td>$tabAttr [ $i ]</td>\" ;\n}\necho \"< /t r> \\ n \";\n}\n// Inutile de continuer si tout est affiché\nif($compteurLignes+ + > = $position + $nbrLignes −1)break ;\n}\n2.6 SQL dynamique et affichage multi-pages\n 111\necho \"< /t a b l e> \\ n \";\n}\n?>\nLa fonction AfficheResultat() utilise quelques nouvelles fonctionnalités de\nl’interface MySQL/PHP . Elles permettent d’obtenir la description du résultat, en plus\ndu résultat lui-même.\n1.mysql_num_fields() donne le nombre d’attributs dans le résultat ;\n2.mysql_field_name() donne le nom de l’un des attributs ;\n3.mysql_fetch_row() renvoie la ligne sous forme d’un tableau indicé, plus\nfacile à manipuler que les tableaux associatifs ou les objets quand on doitexploiter le résultat de requêtes quelconques pour lesquelles on ne connaîtpas,ap r i o r i , le type du résultat et donc le nom des attributs.\nL’afﬁchage comprend deux boucles. La première, classique, permet de parcourir\ntoutes les lignes du résultat. Notez qu’ici on ne prend en compte que les lignes àprésenter, à savoir celles dont la position est comprise entre $position et\n$position+$nbrLignes-1. La seconde boucle parcourt, pour une ligne donnée,tous les attributs.\necho \"<tr class=’ A’\" . (($noLigne+ + ) % 2) . \">\";\nfor ( $i =0; $i < $nbAttr ; $i++) {\nif(empty ($tabAttr [ $i ]) ) $tabAttr [ $i ] = \"C h a m p vide\" ;\necho \"<td>$tabAttr [ $i ]</td>\" ;\n}\necho \"< /t r> \\ n \";\nOn alterne la couleur de fond pour rendre la table plus lisible. Notre feuille de\nstyle, films.css , déﬁnit deux couleurs de fond pour les classes A0etA1.\ntr.A0 {background-color:white}\ntr.A1 {background-color:yellow}\nOn utilise alternativement les classes A0etA1pour la balise <tr>. On concatène\npour cela le caractère ’A’ avec le résultat de l’expression $l++ % 2.L av a r i a b l e$l++\nest un entier qui, auto-incrémenté par l’opérateur ’++’, vaut successivement 0, 1, 2,\n3, etc. En prenant cette valeur modulo 2 (l’opérateur ’%’), on obtient l’alternancesouhaitée de 0 et de 1.\n2.6.2 Affichage multi-pages\nVoyons maintenant comment réaliser l’afﬁchage multi-pages, une technique trèsutile pour afﬁcher de longues listes et utilisée, par exemple, par les moteurs derecherche.\n112\n Chapitre 2. Techniques de base\nExemple 2.32 exemples/ExecSQL.php :Afﬁchage multi-pages du résultat d’une requête\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \">\n<head><title >Interrogation avec S Q L</title ><link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\" />\n</head>\n<body>\n< h 1>Interrogation avec S Q L</h 1>\n<form method=’ post ’ action=’ExecSQL.php ’>\n<textarea name =’ requete ’ cols=’50 ’ rows=’3 ’><?php\nif( i s S e t ($_REQUEST [ ’ r e q u e t e ’ ] ) )\necho $_REQUEST [ ’ r e q u e t e ’ ] ;\nelse\necho \"SELECT ∗FROM F i l m S i m p l e \" ;\n?>\n</textarea >\n<br />\n<input name= ’ submit ’ type= ’ submit ’ value= ’ Exécuter ’ />\n</form>\n<?php\nrequire_once (\"UtilBD.php\") ;require_once (\"Normalisation .php\") ;\nrequire_once (\"AfficheResultat .php\");\ndefine ( \"TAILLE_GROUPE \" , 10) ;\n// Connexion à la base\n$connexion = Connexion ( N O M , PASSE, BASE, S E R V E U R) ;\n// Normalisation des entrées H T T P\nNormalisation () ;\n// L a requête existe ? Il faut la traiter .\nif( i s S e t ($_REQUEST [ ’ r e q u e t e ’ ] ) ) {\n$resultat = ExecRequete ($ _ R E Q U E S T[ ’ requete ’ ] , $connexion) ;\n// O n code la requête pour la placer dans une U R L\n$requeteCodee = urlEncode($ _ R E Q U E S T[ ’ requete ’ ]) ;\n// O n vient de soumettre la requête dans le formulaire ? Dans// ce cas la\n// première ligne doit être affichée . Sinon on récupère la\nposition courante\nif( i s S e t ($_POST [ ’ submit ’ ] ) ) {\n$position = 1;\n2.6 SQL dynamique et affichage multi-pages\n 113\n}\nelse {\n$position = $ _ G E T[ ’ position ’ ];\n}\n// Affichage des ancres pour les groupes qui suivent et /ou\n// précèdent\nif($position > T A I LLE_GROUPE) {\n// Il y a des lignes à voir avant\n$avant = $position −TAILLE_GROUPE ;\necho \"<a href=’ExecSQL.php? position=$avant & requete=\n$requeteCodee ’>\"\n. \" V o i r l e s \" . TAILLE_GROUPE . \" l i g n e s p r écédentes </a> <br/>\\n\" ;\n}\nif($position + T A I LLE_GROUPE −1< mysql_num_rows ($resultat))\n{\n// Il y a des lignes à voir après\n$apres = $position + T A I LLE_GROUPE ;\necho \"<a href=’ExecSQL.php? position=$apres&requete=\n$requeteCodee ’>\"\n. \" V o i r l e s \" . TAILLE_GROUPE . \" l i g n e s s u i v a n t e s </ a>< b r / >\\n \" ;\n}\n// Affichage d u résultat\nAfficheResultat ($resultat , $position , T A I LLE_GROUPE) ;\n}\n?>\n</body>\n</html>\nLe script comprend deux parties. Dans la première on présente un simple for-\nmulaire permettant de saisir une requête SQL (on réafﬁche comme texte par défaut\nla requête saisie précédemment le cas échéant). La seconde partie, en PHP , est plusintéressante. Tout d’abord, on commence par récupérer la requête transmise par post\nouget(on utilise donc le tableau $_REQUEST qui contient les deux, voir page 22),\net on l’exécute. Notez qu’aucun traitement n’est appliqué à la requête car on supposeque l’utilisateur entre une syntaxe correcte, y compris l’échappement pour les « ’ »dans les critères de sélection.\nEnsuite, on regarde quelle est la partie du résultat à afﬁcher. Si l’on vient du\nformulaire, la variable $submit est déﬁnie, et la position de départ est toujours 1.\nSinon, la position est transmise dans l’URL (méthode get) et on la récupère.\nOn peut alors créer une ou deux ancres, selon le cas, pour accéder aux 10 lignes\nprécédentes et/ou aux 10 lignes suivantes. Bien entendu, cela n’a pas de sens deproposer les lignes précédentes si l’on est en train d’afﬁcher la première, ni d’afﬁcher\nles 10 suivantes si l’on afﬁche la dernière. La fonction mysql_num_rows() donne\nla position de la dernière ligne. L’URL contient les deux paramètres indispensables\nau bon fonctionnement du script, à savoir la position et la requête (traitée avecurlEncode()). Remarquez qu’il serait possible dès le départ d’afﬁcher une ancrepour chacun des groupes de lignes constituant le résultat de la requête (« les dixpremiers », « les dix suivants », etc.).\n114\n Chapitre 2. Techniques de base\nFinalement, l’appel à la fonction AfficheResultat() avec les paramètres\nappropriés se charge de l’afﬁchage (ﬁgure 2.9).\nFigure 2.9 — Le formulaire d’interrogation, avec affichage multi-pages\nCette technique « simule » une interactivité avec l’utilisateur par réafﬁchage\nd’un contenu modiﬁé en fonction du contexte (ici la position courante), contenu\nlui-même obtenu par une opération (la saisie d’une requête) qui a pu s’effectuer long-temps auparavant. En d’autres termes, comme dans le cas des sessions, on établit unecontinuité de dialogue avec l’internaute en palliant les faiblesses de HTTP/HTML :\n•l’absence d’interactivité d’une page HTML (sauf à recourir à des techniquessophistiquées comme JavaScript ou Flash) est compensée par des appels répé-\ntés au serveur ;\n•HTTP ne gardant aucune mémoire des accès précédents, on prend soin de\nfournir les informations cruciales décrivant le contexte dans les messages (ici,la requête et la position courante) à chaque accès. Les URL incluses dans unepage sont donc codées de manière à transmettre ces informations.\nCe script mérite quelques améliorations, omises pour en faciliter la lecture. Il\nfaudrait effectuer des contrôles et prévoir des situations comme l’absence de résultatpour une requête. Par ailleurs, le choix de réexécuter systématiquement la requêten’est pas toujours le meilleur. Si elle est complexe à évaluer, cela pénalise le client\n(qui attend) et le serveur (qui travaille). D’autre part, si quelqu’un ajoute ou supprime\nen parallèle des lignes dans les tables concernées (voire supprime toutes les lignes)l’afﬁchage sera décalé. Si ces problèmes se posent, une autre solution est d’exécuter larequête la première fois, de stocker le résultat dans une table ou un ﬁchier temporaire,et de travailler ensuite sur ce dernier. Ces améliorations sont laissées au lecteur à titred’exercice.\nProgrammation objet3\nCe chapitre est entièrement consacré à la programmation objet avec PHP . D’un point\nde vue technique et conceptuel, son contenu est certainement l’un des plus avancésde ce livre, mais sa lecture n’est pas indispensable à la compréhension des chapitres\nqui suivent. Il est tout à fait possible de se contenter d’un premier survol consacré\nàl’utilisation de modules objet prêts à l’emploi, et de poursuivre la lecture avant d’y\nrevenir éventuellement par la suite pour explorer la conception et l’implantationorientée-objet.\nComme l’ensemble du livre, ce chapitre est basé sur une approche concrète, avec\ncomme souci constant de présenter les concepts à l’aide d’exemples réalistes et utili-sables en pratique dans de véritables applications. Bien entendu la clarté recherchéeimpose certaines limitations sur les contrôles ou sur certaines fonctionnalités, maisl’une des caractéristiques de la programmation objet est de permettre des extensions\nqui ne remettent pas en cause le cœur de l’implantation, fournissant par là-même de\nbons sujets d’approfondissement. Rappelons que le site associé à ce livre propose undocument énumérant des exercices d’application à partir des exemples donnés.\nPar ailleurs, le chapitre peut se lire selon deux optiques : celle des « utilisateurs »\nqui exploitent des fonctionnalités orientées-objet, et celle des concepteurs et réali-sateurs. Il semble indispensable de maîtriser la première optique puisque l’on trouvemaintenant de très nombreuses fonctionnalités réalisées en suivant une approcheorientée-objet, dont l’intégration, qui peut permettre d’économiser beaucoup detemps, suppose une connaissance des principes de base de cette approche. La seconde\noptique, celle du développeur, demande une conception de la programmation qui\nconstitue un débouché naturel de celle basée sur des fonctions ou des modules,déjà explorée dans les chapitres précédents. On peut tout à fait se passer de laprogrammation objet pour réaliser une application, mais cette technique apporteinconstestablement un plus en termes de maîtrise de la complexité et de la tailledu code, ainsi (mais c’est une question de goût) qu’un certain plaisir intellectuel à\n116\n Chapitre 3. Programmation objet\nproduire des solutions simples et élégantes à des problèmes qui ne le sont pas toujours.\nLe contenu de ce chapitre est une tentative de vous convaincre sur ce point.\nDepuis sa version 5, PHP est devenu un langage orienté-objet tout à fait respec-\ntable, même s’il n’atteint pas encore le niveau de complexité d’une référence commele C++. La première section de ce chapitre est une présentation générale des conceptsde la programmation orientée-objet, tels qu’ils sont proposés par PHP . Cette présen-tation est illustrée par une interface d’accès à un SGBD en général, et à MySQL en\nparticulier. La syntaxe de la partie objet de PHP 5 est présentée successivement par\nles exemples, mais on peut également la trouver, sous une forme concise et structurée,dans le chapitre récapitulatif sur le langage (page 419). La programmation objets’appuie sur un ensemble riche et souvent assez abstrait de concepts, ce qui imposeprobablement aux néophytes plusieurs lectures, en intercalant l’étude des exemplesconcrets qui suivent, pour bien les assimiler.\nLa suite du chapitre consiste, pour l’essentiel, en plusieurs exemples concrets de\nprogrammation objet visant à réaliser les fonctionnalités de base d’une application\nPHP/MySQL : outre l’accès à la base de données, on trouve donc la mise en forme\ndes données avec des tableaux HTML, la production de formulaires, et enﬁn un« squelette » d’application, à la fois prêt à l’emploi et reconﬁgurable, permettantd’effectuer des opérations de mise à jour sur le contenu d’une table MySQL grâceà une interface HTML. Le niveau de difﬁculté va croissant, le dernier exempleexploitant de manière poussée la capacité de la programmation objet à réaliser dessolutions « génériques », le moins dépendantes possibles d’un contexte particulier.À chaque fois, les deux optiques mentionnées précédemment sont successivementprésentées :\n•l’optique utilisateur : comment exploiter et faire appel aux fonctionnalités des\nobjets ;\n•l’optique développeur : comment elles sont conçues et réalisées.\nUn des buts de la programmation objet est d’obtenir des modules fonctionnels\n(des « objets ») de conception et développement parfois très complexes, mais dontl’utilisation peut rester extrêmement simple. Tous les exemples décrits dans ce cha-pitre seront repris pour la réalisation de l’application décrite dans la partie suivante.Il sufﬁra alors de bénéﬁcier de la simplicité d’utilisation, en oubliant la complexitéde la réalisation. Vous pourrez appliquer ce principe de réutilisation à vos propresdéveloppements, soit en y incluant les fonctionnalités décrites dans ce chapitre (etfournies sur le site), soit en récupérant les innombrables solutions fournies sur lessites de développement PHP (voir notamment le site www.developpez.com).\n3.1 TOUR D’HORIZON DE LA PROGRAMMATION OBJET\nProgrammer, c’est spéciﬁer des actions à exécuter au moyen d’un langage qui fournitdes outils à la fois pour concevoir et pour décrire ces actions. On distingue classi-\nquement, parmi ces outils, les structures de données qui permettent de représenter\nl’information à manipuler, et les algorithmes qui décrivent la séquence d’instructions\n3.1 Tour d’horizon de la programmation objet\n 117\nnécessaires pour effectuer l’opération souhaitée. Dans les chapitres précédents, les\nprincipales structures manipulées sont les variables et parfois des tableaux, et lesalgorithmes ont été implantés soit directement dans des scripts, soit sous forme defonctions. Il y a donc, dans l’approche suivie jusqu’à présent, une séparation netteentre les traitements (les fonctions) et les données (variables, tableaux), considérées\ncomme des informations transitoires échangées entre les fonctions.\n3.1.1 Principes de la programmation objet\nLa programmation orientée-objet propose une intégration plus poussée des donnéeset des traitements qui leur sont appliqués. Elle permet de masquer les informationsqui ne servent qu’à une partie bien spéciﬁque de l’application (par exemple la gestiondes échanges avec la base de données) et de regrouper dans un module cohérent cesinformations et les opérations qui portent sur elles. L’ensemble obtenu, données ettraitement, constitue un objet, simplement déﬁni comme un sous-système chargé de\nfournir des services au reste de l’application.\nLes langages objets fournissent des outils très puissants pour la conception et\nla description des actions constituant une application. Concevoir une applicationobjet, c’est d’abord imaginer un espace où des objets coopèrent en assumant chacunune tâche spécialisée. Cette approche permet de penser en termes de communica-tions, d’interactions entre sous-systèmes, ce qui est souvent plus naturel que d’utiliser\ndes outils conceptuels plus techniques comme les structures de données ou les\nfonctions.\nDans une perspective classique, non orientée-objet, on considère une application\nPHP comme un outil généraliste qui doit savoir tout faire, depuis la production\nde code HTML jusqu’à l’interrogation d’une base de données, en passant par les\néchanges avec des formulaires, la production de tableaux, etc. Cette approche pré-sente des limites déjà soulignées pour la maîtrise des évolutions et de la maintenancequand le code atteint une certaine taille (quelques milliers de lignes). En introduisantdes objets dans l’application, on obtient des « boîtes noires » dont le fonctionnementinterne est inconnu du reste de l’application, mais capables de réaliser certainestâches en fonction de quelques demandes très simples.\nPrenons un cas concret correspondant aux objets que nous allons développer\ndans le cadre de ce chapitre. La ﬁgure 3.1 montre une application PHP classique (unmoteur de recherche par exemple) constituée d’un formulaire pour saisir des critères,d’un accès à une base de données pour rechercher les informations satisfaisant lescritères, et enﬁn d’un tableau pour afﬁcher le résultat. Cette application s’appuie sur\ntrois objets :\n1. un objet Formulaire chargé de produire la description HTML du formulaire ;\n2. un objet BDqui communique avec la base de données ;\n3. un objet Tableau qui effectue la mise en forme du résultat en HTML.\nChaque objet est doté d’un étatconstitué des données – ou propriétés – qui lui sont\nnécessaires pour l’accomplissement de ses tâches et d’un comportement constitué de\n118\n Chapitre 3. Programmation objet\nMySQ L\nRequête \nScript PHP\nInterface Interface Interfacedescription\nRésultatHTMLFormulaire\nBD\nTableauchamps\nméthodecible...Etat\nEtat\nconnexion\nEtat\noptions\nvaleursentêtesnomBase\nAffichage(1)\n(2) (3)\n(4)\ndonnées(5)\n(6)HTML(7)\nFigure 3.1 — Application avec objets.\nl’ensemble des opérations – ou méthodes – qu’on peut appliquer à cet état. Dans le cas\nde l’objet BDl’état est par exemple l’identiﬁant de connexion et le nom de la base\ncourante, et le comportement est constitué de méthodes de connexion, d’exécution\nde requêtes, et de parcours du résultat. Pour l’application, il reste à contrôler cesobjets en spéciﬁant les différentes opérations nécessaires (numérotées de 1 à 7 sur laﬁgure) pour arriver au résultat souhaité.\nMéthodes et encapsulation\nLes propriétés et méthodes constituant l’état et le comportement d’un objet peuventêtreprivées oupubliques. Il est fortement recommandé de cacher les propriétés d’un\nobjet en les rendant privées, pour qu’on ne puisse y accéder que par l’intermédiairedes méthodes de cet objet. Les propriétés d’un objet « ﬁchier » comme son nom, son\nemplacement, son état (ouvert, fermé), ne regardent pas l’utilisateur de l’objet. Cette\ndissimulation, désignée par le terme d’encapsulation , offre de nombreux avantages\ndont, par exemple, la possibilité de revoir complètement la description interned’un objet sans remettre en cause les applications qui l’utilisent, ces dernières n’envoyant que les méthodes. Le principe est donc de ne publier qu’un sous-ensemble desméthodes donnant accès sous la forme la plus simple et la plus puissante possible auxfonctionnalités proposées par l’objet. L’application doit juste connaître les méthodespubliques permettant de demander à lun des objets de déclencher telle ou telleopération.\n3.1 Tour d’horizon de la programmation objet\n 119\nVoyons maintenant un exemple concret de programmation objet, consacré à l’in-\nterrogation de la table FilmSimple et à l’afﬁchage de toutes ses lignes. Nous avons déjà\nvu que quand on accède à MySQL et que l’on demande une ligne d’une table sous la\nforme d’un objet, les fonctions d’interfaçage PHP/MySQL créent automatiquementcet objet, sans restriction d’accès sur les propriétés. Si $film est un objet, alors on\naccède librement aux attributs $film->titre et$film->annee qui permettent\nrespectivement d’obtenir le titre et l’année.\nPour nos propres objets, nous ferons toujours en sorte que les propriétés soient pri-\nvées et ne puissent être manipulées que par l’intermédiaire de l’interface constituéede méthodes. Le tableau 3.1 donne la liste des méthodes publiques de la classe MySQL.\nTableau 3.1 — Les méthodes publiques de la classe MySQL\nMéthode\n Description\n__construct (login ,motDePasse ,base ,\nserveur )\nConstructeur d’objets.\nexecRequete (requ^ ete )\n Exécute une requête et renvoie un identifiant de résultat.\nobjetSuivant (r´ esultat )\n Renvoie la ligne courante sous forme d’objet et avance\nle curseur d’une ligne.\nligneSuivante (r´ esultat )\n Renvoie la ligne courante sous forme de tableau associatifet avance le curseur d’une ligne.\ntableauSuivant (r´ esultat )\n Renvoie la ligne courante sous forme de tableau indicéet avance le curseur d’une ligne.\n__destruct ()\n Se déconnecte du serveur de base de données.\nExemple 3.1 exemples/ApplClasseMySQL.php :Application d’un objet.\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head>\n<title >Connexion à MySQL</ title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<h1>Interrogation de la table FilmSimple </h1>\n<?php\nrequire_once (\"Connect.php\") ;\nrequire_once (\"M y S Q L.php\") ;\ntry {\n$bd = new MySQL (NOM, PASSE , BASE , SERVEUR) ;\n$resultat = $ b d −>e xe c Re que t e ( \"SELECT ∗F R O M FilmSimple \") ;\n120\n Chapitre 3. Programmation objet\nwhile ($film = $bd −>objetSuivant ( $resultat ))\necho \"<b>$film −>titre </b>, paru en $film −>annee , r é a l is é \"\n. \"par $film −>prenom_realisateur $film −>nom_realisateur .\n<br/>\\n\" ;\n}\ncatch (Exception $exc) {\necho \"<b>Erreur rencontrée:</b> \" . $exc −>getMessage () . \"\\n\" ;\n}\n?>\n</body>\n</html>\nCe premier exemple montre trois objets d’origines différentes à l’œuvre :\n1. l’objet $film nous est déjà familier : il représente une ligne du résultat d’une\nrequête et comprend autant d’attributs – publics – que de colonnes dans ce\nrésultat ;\n2. l’objet $bdest destiné à interagir avec la base de données ; il est créé grâce à\nune « fabrique » à objets – une classe – nommée MySQL ;\n3. enﬁn, l’objet $exc est une exception PHP , créée quand une erreur survient\nquelque part dans le code ; cet objet contient les informations nécessaires à la\ngestion de l’erreur.\nOn peut déjà remarquer la concision et la clarté du code, obtenues grâce au\nmasquage de nombreuses informations – par exemple l’identiﬁant de connexion à\nla base – ou instructions inutiles. Ce code correspond en fait strictement aux actionsnécessaires à la logique de la fonctionnalité implantée : accès à une base, exécutiond’une requête, parcours et afﬁchage du résultat avec gestion des erreurs potentielles.\nUne bonne partie du code masqué est placé dans l’objet $bd qui fournit les\nservices de connexion, d’interrogation et d’exploration du résultat d’une requête.Nous allons étudier la manière dont cet objet est créé, avant de passer à la gestiondes exceptions.\n3.1.2 Objets et classes\nComment faire pour déﬁnir soi-même ses propres objets ? On utilise des classes,\nconstructeurs décrivant les objets. Une classe est un « moule » qui permet de créer à lademande des objets conformes à la description de la classe. Il y a la même distinctionentre une classe et ses objets, qu’entre le type string et l’ensemble des chaînes de\ncaractères, ou entre le schéma d’une table et les lignes de cette table. On appelleinstances d’une classe les objets conformes à sa description.\nUne classe déﬁnit non seulement les propriétés communes à tous ses objets, mais\négalement leur comportement constitué, comme nous l’avons vu, de l’ensemble des\nméthodes qu’on peut leur appliquer. Un objet ne doit pas être seulement vu commeun ensemble de propriétés, mais aussi – et surtout – comme un (petit) systèmefournissant des services au script qui l’utilise. Un objet ﬁchier, par exemple, devrait\n3.1 Tour d’horizon de la programmation objet\n 121\nfournir des services comme ouvrir (le ﬁchier), fermer (le ﬁchier), lire (une ligne,\nou un mot), ´ecrire,e t c .\nLa classe MySQL regroupe les fonctionnalités de connexion et d’accès à MySQL.\nToutes les spéciﬁcités liées à MySQL sont dissimulées dans la classe et invisibles\nde l’extérieur, ce qui permet de généraliser facilement le code à d’autres SGBD de\nmanière transparente pour le reste de l’application, comme nous le verrons plus\nloin.\nUne classe en PHP se déﬁnit (comme en C++ ou en Java) par un bloc\nclass { ... } qui contient à la fois les propriétés de la classe et les méthodes,\ndésignées par le mot-clé function. Propriétés et méthodes peuvent être qualiﬁées\npar les mots-clés public, private ouprotected, ce dernier correspondant à une\nvariante de private sur laquelle nous reviendrons au moment de discuter de\nl’héritage et de la spécialisation.\nVoici le code complet de la classe MySQL. Cette implantation assez simpliﬁée suf-\nﬁra pour un premier exemple. Une version de cette classe, étendue et améliorée, estproposée avec le code du site Films. Notez enﬁn que PHP propose de manière native\n(depuis la version 5.1) une implantation orientée-objet assez semblable dans sonprincipe à celle que je présente ici, PDO ( Persistent Data Objects). Il est évidemment\npréférable d’utiliser PDO dans un site professionnel, plutôt que mes classes, à viséeessentiellement didactique, même si elles fonctionnent très bien.\nExemple 3.2 exemples/MySQL.php :La classe MySQL.\n<?php\n// U n e classe de gestion des accès à une base M y S Q L (version\n// simplifiée)\nclass M y S Q L\n{\n//−−−− Partie privée : les propriétés\nprivate $connexion , $nomBase ;\n// Constructeur de la classe\nfunction __construct ($login , $motDePasse , $base , $serveur)\n{\n// O n conserve le n o m de la base\n$this −>nomBase = $base ;\n// Connexion au serveur M y S Q L\nif(! $this −>connexion = @mysql_pconnect ( $serveur , $login ,\n$motDePasse))\nthrow new Exception (\" Erreur de connexion au serveur . \") ;\n// Connexion à la base\nif(! @mysql_select_db ($this −>nomBase , $ t h i s −>connexion))\nthrow new Exception (\" Erreur de connexion à la base . \") ;\n}\n// Fin du constructeur\n122\n Chapitre 3. Programmation objet\n//−−−− Partie publique −−−−−−−−−−−−−−−−−−−−−−−−−\n// Méthode d ’ exécution d ’une requête\npublic function execRequete ( $requete )\n{\n$resultat = @mysql_query ( $requete , $this −>connexion) ;\nif(! $resultat)\nthrow new Exception\n(\"Problème dans l ’exécution de la requête : $requete . \"\n.mysql_error ($this −>connexion)) ;\nreturn $resultat ;\n}\n// Accès à la ligne suivante , sous forme d ’ objet\npublic function objetSuivant ( $resultat )\n{ return mysql_fetch_object ( $resultat ) ; }\n// Accès à la ligne suivante , sous forme de tableau associatif\npublic function ligneSuivante ( $resultat )\n{r e t u r n mysql_fetch_assoc ($resultat); }\n// Accès à la ligne suivante , sous forme de tableau indicé\npublic function tableauSuivant ( $resultat )\n{r e t u r n mysql_fetch_row ($resultat); }\n// Échappement des apostr ophes et autres préparations à\n// l ’insertion\npublic function prepareChaine($chaine)\n{ return mysql_real_escape_string($chaine); }\n// Destructeur de la classe : on se déconnecte\nfunction __destruct ()\n{ @mysql_close ($this −>connexion) ; }\n// Fin de la classe\n}\nLa classe comprend quatre parties : les propriétés, le constructeur, les méthodes\nprivées (ou protégées) et publiques, enﬁn le destructeur.\nREMARQUE – Vous noterez que le fichier ne se termine pas par la balise fermante PHP.\nCela évite les problèmes dus aux caractères parasites qui pourraient suivre cette balise et\nempêcher la production d’en-têtes HTTP. L’absence de cette balise ne pose pas de problème\npour l’interpréteur PHP.\nLespropriétés décrivent l’état d’un objet instance de la classe. Nous avons ici\nl’identiﬁant de connexion à MySQL et le nom de la base courante. Ces deux\nvariables sont accessibles dans toutes les méthodes, publiques ou privées, avec lasyntaxe $this->connexion et$this->nomBase. De plus, leur valeur persiste tout\nau long de la durée de vie d’un objet, contrairement aux variables locales d’une\n3.1 Tour d’horizon de la programmation objet\n 123\nfonction classique. Pour des raisons exposées précédemment, les propriétés sont\nprivées . Elles peuvent donc être utilisées dans les méthodes de la classe (préﬁxées\npar$this->), mais restent inaccessibles pour une application manipulant un objet.\nToute interaction passe nécessairement par les méthodes publiques.\nLe constructeur est une méthode (optionnelle) spéciale, ayant soit le nom\n__construct (avec deux caractères ’_’), soit le même nom que la classe. Si un\nconstructeur est déﬁni, il est exécuté au moment où un nouvel objet est créé, ce quipermet donc d’une part d’affecter une valeur initiale, si besoin est, aux propriétés del’objet, d’autre part d’effectuer les tâches initiales de cet objet. Ici, on se connecte auserveur MySQL à la base choisie. Les instructions throw correspondent à des\n« lancers » d’exception quand une erreur est rencontrée : nous y revenons plus loin.Notez l’utilisation de @préﬁxant les fonctions MySQL, pour éviter l’afﬁchage\nincontrôlé de messages d’erreur si un problème survient (en effet, l’opérateur @peut\ns’appliquer à n’importe quelle expression PHP pour annuler les messages d’erreur).\nAprès exécution du constructeur, si aucune erreur n’est rencontrée, les propriétés\n$connexion et$nomBase sont correctement initialisées et prêtes à être utilisées par\nles méthodes. Pour construire un objet, on utilise l’opérateur newsuivi d’un appel au\nconstructeur (ou simplement du nom de la classe si on n’a pas déﬁni de constructeur).\nVoici par exemple la création d’une connexion à MySQL.\nrequire_once (\"Connect.php\") ;\nrequire_once (\"M y S Q L.php\") ;\n$bd = new MySQL (NOM, PASSE , BASE , SERVEUR) ;\nLes constantes NOM, PASSE, BASE etSERVEUR sont déﬁnies dans le ﬁchier\nConnect.php , ce qui permet de les modiﬁer très facilement pour toute l’application. La\nvariable $bd est maintenant un objet sur lequel on va pouvoir appliquer toutes les\nméthodes de la classe MySQL.\nLes méthodes publiques correspondent aux fonctionnalités de base de MySQL.\nNotez qu’on ne peut pas conserver l’identiﬁant du résultat d’une requête comme\nvariable interne au même titre que $connexion car, pour un même objet instance\nde la classe, on peut envisager d’exécuter simultanément plusieurs requêtes. Il existe\ndonc potentiellement plusieurs identiﬁants de résultats valides à un moment donné.\nL plus simple pour les gérer est de les échanger avec le script appelant pour désignerla requête concernée.\n// O n récupère un identifiant de résultat\n$ r e s u l t a t = $bd −>e xe c Re que t e ( \"SELECT ∗FROM F i l m S i m p l e \" ) ;\n// O n s ’en sert pour désigner le résultat qu ’on veut parcourir\nwhile ($film = $bd −> o b j e t S u i v a n t ($resultat)) {...}\nLa dernière méthode, __destruct,e s tl e destructeur que l’on trouve dans des\nlangages orientés-objets plus évolués comme C++. La notion de destructeur estintroduite en PHP 5. Notons que la présence d’un destructeur n’est pas indispensable,et souvent de peu d’utilité en PHP où les ressources sont libérées automatiquementen ﬁn de script. Ici, on ferme la connexion à MySQL.\n124\n Chapitre 3. Programmation objet\n3.1.3 Les exceptions\nVoyons maintenant le mécanisme de « lancer » d’exception. Il répond au problème\nsuivant : un programme (ou un script) un tant soit peu complexe peut être vu commeun arbre composé d’appels successifs à des fonctions qui effectuent des tâches de plusen plus spécialisées au fur et à mesure que l’on s’enfonce dans la hiérarchie. On estsouvent embarassé pour traiter les erreurs dans un tel programme car la manière dontl’erreur doit être gérée dépend du contexte – le programme appelant – parfois éloignéde l’endroit où l’erreur est survenue. La situation classique est illustrée sur un cassimple dans la partie gauche de la ﬁgure 3.2. Le programme A appelle une fonctionB qui appelle elle-même une fonction C, où l’erreur est rencontrée. On peut alors\nconsidérer tout un ensemble de solutions parmi les deux extrêmes suivants :\n1. on reporte l’erreur au moment où on la rencontre, soit dans la fonction C pour\nnotre exemple ;\n2. on remonte l’erreur, de C vers A, par des passages de paramètres successifs vers\nle programme appelant.\nLa première solution, simple, a l’inconvénient de ne pas permettre l’adaptation\nà un contexte particulier. L’impossibilité de se connecter à une base de données par\nexemple peut être, selon le programme, soit une erreur fatale entraînant l’arrêt total,soit une erreur bénigne qui peut être compensée par d’autres actions (par exemple lerecours à une base de secours). Effectuer la décision d’arrêt ou de poursuite au niveaude la procédure de connexion n’est donc pas satisfaisant.\nmessagecode\nExceptioncatchthrow\nTraitement classique Traitement avec exceptionerreur!Fonction Bappel\nappel\nGestion de l’erreurerreur!Fonction CFonction Bappel\nappel\nretour\nretour\nGestion de l’erreurScript A Script A\nObjet C\nFigure 3.2 — Gestion des exceptions.\nLa seconde solution est conceptuellement correcte puisqu’elle permet de décider\nà quel niveau de la hiérarchie des appels on va traiter l’erreur rencontrée. Elle estcependant, dans un cadre classique de programmation par fonctions, pénible à mettreen œuvre à cause de la nécessité d’une part de gérer la « remontée » des erreurs avecdes paramètres ou des valeurs de retour, et d’autre part de devoir détecter sans cesse,après un appel à une fonction, la présence d’une erreur.\n3.1 Tour d’horizon de la programmation objet\n 125\nLe mécanisme de « lancer » d’exception facilite considérablement cette remontée\nd’erreur. Il est maintenant répandu dans de nombreux langages (comme C++, Java\nainsi que d’autres non spéciﬁquement objet comme le PL/SQL d’Oracle). La partiedroite de la ﬁgure 3.2 illustre le principe :\n•quand une erreur est rencontrée, on « lance » ( throw en anglais) une excep-\ntion, placée dans un espace réservé du programme ;\n•à chaque niveau de la hiérarchie des appels, on peut « attraper » ( catch\nen anglais) l’exception levée auparavant par une fonction ou une méthodeappelée.\nLe fait de placer les exceptions dans un espace séparé évite d’avoir à les inclure\ndans les paramètres des fonctions ou méthodes. De plus, une exception est un\nobjet qui fournit plusieurs informations sur le contexte de l’erreur : un message,\nun code d’erreur (optionnel), le ﬁchier et le numéro de la ligne de l’instructionPHP qui a déclenché l’erreur. Ces informations sont respectivement obtenues parles méthodes getMessage(), getCode(), getFile() etgetLine() de la classe\nprédéﬁnie Exception.\nVoici un exemple de gestion d’exception dans la classe MySQL. Au niveau du\nconstructeur, on lance l’exception si la procédure de connexion a échoué :\nfunction __construct ($login , $motDePasse , $base , $serveur)\n{\n...\n// Connexion au serveur M y S Q L\nif(! $this −>connexion = @mysql_pconnect ( $serveur , $login ,\n$motDePasse))\nthrow new Exception (\" Erreur de connexion au serveur . \") ;\n...\n}\nQuand l’instruction throw est déclenchée, l’exécution de la méthode est inter-\nrompue et l’exception est mise en attente. Tout programme appelant la méthode (ouappelant une fonction appelant la méthode, et ainsi de suite) peut « attraper » cetteexception et la traiter. Il faut pour cela utiliser la construction suivante :\ntry {\n// Espace d’interception des exceptions lancées\n}\ncatch (Exception $e)\n{\n// Traitement de l ’exception lancée\n}\nLe bloc trydéﬁnit la partie du script qui va « attraper » toute exception lancée\npar un appel à une méthode effectuée dans le bloc. Quand une exception est attrapéedans le bloc try, le ﬂux d’exécution se redirige immédiatement vers le bloc catch\nqui récupère l’exception en la plaçant dans une variable (ici $e) et peut alors la\ntraiter. Voici comment nous avons géré les exceptions de la classe MySQL dans le\nscript ApplClasseMySQL.php, page 119.\n126\n Chapitre 3. Programmation objet\ntry {\n$bd = new MySQL (NOM, PASSE , BASE , SERVEUR) ;\n...\n}\ncatch (Exception $exc)\n{\necho \"<b>Erreur rencontrée:</b> \" . $exc −>getMessage () . \"\\n\" ;\n}\nIl est évidemment possible de décider au cas par cas de la gestion d’une exception.\nOn peut se contenter de l’afﬁcher, comme dans l’exemple ci-dessus, ou bien envoyer\nun e-mail à l’administrateur et afﬁcher un message neutre et poli à l’utilisateur si l’onne souhaite pas exhiber une faiblesse du site. Le chapitre 5 reviendra en détail sur lapolitique de gestion des erreurs.\n3.1.4 Spécialisation : classes et sous-classes\nUn concept essentiel en programmation objet est la spécialisation : il désigne la\npossibilité de créer des sous-classes déﬁnissant des objets plus spécialisés que ceux dela classe-mère. Si on considère par exemple une classe Fichier avec des méthodes\nd’ouverture, de fermeture, d’afﬁchage et de lecture/écriture dans le ﬁchier, on peut\nensuite spécialiser le concept de ﬁchier avec des sous-classes FichierTexte,\nFichierImage, FichierBinaire, FichierR´ epertoire,e t c .E nP H P ,o nd i t\nqu’une sous-classe étend sa classe parente. Chaque objet instance de la sous-classe est\naussi une instance de la super-classe et peut être traité comme tel si c’est nécessaire.\nDans notre exemple, chaque instance de FichierTexte est aussi instance de\nFichier. Voici un squelette des déﬁnitions possibles de la classe Fichier et de\ndeux de ses sous-classes :\nclass Fichier {\n// Propriétés\nprivate $ n o m;\n// Constructeur\npublic __construct ($nomFichier) { }\n// Une méthode\np u b l i c co p i er ($destination) {...}\n}\n// Sous −classe des fichiers texte\nclass FichierTexte extends Fichier\n{\n// Propriétés\nprivate $contenu ;\n// Ajout d ’une méthode\npublic afficher($nom_imprimante) { ...}\n}\n3.1 Tour d’horizon de la programmation objet\n 127\n// Sous −classe des fichiers répertoire\nclass Répertoire extends Fichier\n{\n// Propriétés\nprivate $liste_fichiers ;\n// Surcharge de la méthode copier ()\npublic copier ($destination) { /∗Définition propre aux\nrépertoires ∗/}\n}\nCet exemple très partiel est essentiellement destiné à illustrer les principaux\nconcepts liés à la spécialisation : héritage des propriétés ou méthodes de la super-classe,\najout de propriétés ou de méthodes dans les sous-classes, surcharge de méthodes.\nVoyons cela dans l’ordre.\nHéritage\nLa notion d’héritage découle directement de celle de spécialisation. Dans la mesure\noù un objet instance d’une sous-classe est aussi une instance de la super-classe, lasous-classe doit disposer – ou « hériter » – de toutes les propriétés et méthodes decette dernière. Par exemple les ﬁchiers textes étant des ﬁchiers particuliers, toutesles descripions ou opérations valables pour les ﬁchiers au sens générique du terme le\nsont également pour un ﬁchier texte. Un objet instance de FichierTexte dispose\ndonc, sans qu’il soit besoin de rien préciser ou redéﬁnir, de la propriété nomet de la\nméthode copier().\nL’héritage permet de considérer l’ensemble des instances d’une classe C,ou de\nn’importe laquelle de ses classes descendantes comme des objets uniformes dotés du\nmême comportement, celui de la classe C. Dans notre exemple, les ﬁchiers texte\nou les répertoires (et aussi les ﬁchiers images, les ﬁchiers exécutables ou toute autre\ninstance d’une sous-classe de Fichier) ont un nom et disposent de la méthode\ncopier(), ce qui peut servir par exemple à effectuer une sauvegarde en appliquant\nsystématiquement cette méthode sans se soucier du type précis de ﬁchier manipulé.\nEn d’autres termes, on « factorise » au niveau de la super-classe le comportementcommun à toutes les instances de ses descendantes, facilitant ainsi les traitementsqui n’ont pas besoin d’effectuer de distinction entre les différentes spécialisations.\nAjout de nouvelles propriétés ou méthodes\nDans certaines circonstances, on souhaite au contraire considérer un objet commeune instance d’une classe spécialisée dotée de caractéristiques particulières. La classeFichierTexte illustre cet aspect : les objets instances de cette classe ont, en plus des\npropriétés et méthodes de la classe Fichier, des propriétés et méthodes propres :\n•la propriété contenu permet de stocker sous forme de chaîne de caractères le\ncontenu du ﬁchier ;\n•la méthode afficher rend possible le rendu de ce contenu.\nCes caractéristiques sont propres à ce type de ﬁchier : on n’imagine pas de gérer le\ncontenu d’un ﬁchier exécutable ou de l’afﬁcher. L’ajout de propriétés ou de méthodes\n128\n Chapitre 3. Programmation objet\nqui rafﬁnent la description des objets de la super-classe est un aspect inséparable de\nla spécialisation.\nSurcharge\nEnﬁn la surcharge est le mécanisme qui consiste à enrichir, voire à remplacer com-\nplètement, un comportement déﬁni au niveau de la super-classe par un autre, adaptéaux caractéristiques de la classe spécialisée.\nREMARQUE – Attention, la documentation PHP utilise le terme « surcharge » (overloading )\ndans un sens différent de celui consacré en programmation objet. La notion de surcharge\nprésentée ici est conforme avec celle classique, rencontrée en C++ ou en Java.\nDans notre exemple la méthode copier() de la sous-classe R´ epertoire doit\nêtre implantée différemment de la méthode codée au niveau de la classe Fichier,\ncar, outre la copie du ﬁchier-répertoire lui-même, on doit également copier l’en-\nsemble des ﬁchiers contenus dans le répertoire. Ce comportement de la méthode\ncopier() est tout à fait spéciﬁque à ce type de ﬁchier et nécessite toute la « sur-\ncharge » – la redéﬁnition – de la méthode héritée. Voici, très simpliﬁé, l’essentiel desinstructions que l’on pourrait trouver dans cette surcharge :\nclass Répertoire {\n// Propriétés\nprivate $liste_fichiers ;\n// Une méthode\npublic copier ($destination)\n{\n// O n c o m m e n c e par copier le répertoire lui −même\n// en appelant la mét hode de la super −classe\nparent :: copier($destination);\n// Puis on copie tous les fichiers contenus\nforeach ($this −>liste_fichier as $fichier)\n$fichier −>copier($destination);\n}\nCette méthode se décompose clairement en deux parties : l’une consistant à\neffectuer une copie standard, telle qu’elle est déﬁnie au niveau de la classe parent,l’autre répercutant la demande de copie sur l’ensemble des ﬁchiers contenus dans lerépertoire et référencés par la propriété ajoutéee liste_fichiers.\nPour appliquer la copie standard, on doit appeler le code déﬁni au niveau de la\nclasse parente. On utilise pour cela la construction parent::copier. Cette pratique\nest d’usage dans tous les cas, fréquents, où la surcharge consiste à enrichir le compor-\ntement déﬁni au niveau de la classe générique, ce qui implique de conserver ce com-portement tout en lui ajoutant de nouvelles instructions. Ces nouvelles instructionsconsistent ici à parcourir l’ensemble des ﬁchiers contenus en leur appliquant à leurtour la méthode copier().\n3.1 Tour d’horizon de la programmation objet\n 129\nforeach ($this −>liste_fichiers as $fichier)\n$fichier −>copier($destination);\nÀ chaque étape de la boucle, la variable $fichier référence un des ﬁchiers\ncontenus dans le répertoire, et on demande à cet objet de se copier vers la destination.\nIl s’agit d’un excellent exemple du processus d’abstraction consistant à voir selonles circonstances ces ﬁchiers comme des objets « génériques » (instance de la classeFichier) ou comme des objets spécialisées, instances des sous-classes de Fichier.\nIl faut imaginer ici, pour se limiter à notre exemple, que les ﬁchiers contenus dansun répertoire peuvent être soit des ﬁchiers texte, soit eux-mêmes des répertoirescontenant d’autres ﬁchiers. En les considérant uniformément, dans la boucle, commedes instances de Fichier dotés d’une méthode de copie, on s’évite le souci d’avoir\nà distinguer les différents types d’actions à effectuer en fonction du type précis deﬁchier manipulé, et on laisse à l’objet lui-même le soin de déterminer la méthode àappliquer.\nCe type de programmation peut sembler subtil quand on y est confronté les\npremières fois, mais il s’acquiert d’autant plus vite qu’on est convaincu du gainapporté par un raisonnement en termes génériques sans avoir à se soucier à chaqueinstant des détails d’implantation. La simplicité du code obtenu une fois qu’on arésolu le problème de la conception et de la modélisation d’une application objetvient largement compenser l’effort initial à fournir.\n3.1.5 Spécialisation et classes abstraites : la classe BD\nVoyons un exemple complet qui nous permettra également d’introduire un dernier\nconcept. La suite du chapitre consistera à approfondir, par la conception et l’implan-\ntation de plusieurs classes, tout ce qui est résumé ici.\nNotre exemple consiste ici à déﬁnir, en recourant à la spécialisation objet, un\nensemble de classes déﬁnissant de manière uniforme les accès à une base de donnéesrelationnelle, quelle qu’elle soit. Nous allons prendre comme cibles MySQL, Post-greSQL et ORACLE, avec comme objectif la possibilité de déﬁnir des applicationsqui utilisent indifféremment l’un ou l’autre système, et ce de manière totalementtransparente. Le site décrit dans la seconde partie de l’ouvrage s’appuie sur ces classespour rendre le code compatible avec tout système relationnel.\nREMARQUE – Le code proposé ici fonctionne correctement, mais il est surtout conçu comme\nune illustration des concepts orientés-objet. Comme signalé précédemment, l’interface PDO\nde PHP offre une solution normalisée et plus complète. Reportez-vous page 238 pour une\nintroduction à PDO.\nEn termes de spécialisation, il n’y a aucune raison de dire qu’une classe déﬁnissant\nles interactions avec PostgreSQL hérite de celle accédant à MySQL, ou l’inverse. La\nbonne question à se poser est toujours « un objet instance de la classe spécialisée est-il\naussi un objet de la classe générique ? ». La réponse est clairement non puisqu’unobjet accédant à MySQL n’est pas un objet accédant à PostgreSQL et vice-versa. Enrevanche tous deux sont des exemples d’un concept commun, celui d’objet accédant\n130\n Chapitre 3. Programmation objet\nà une base de données. Ce concept commun n’a pas d’instanciation : il n’existe pas\nd’objet qui fournisse ce comportement indépendamment d’un choix concret d’une\nbase de données spéciﬁque.\nQuand on a besoin de déﬁnir un comportement commun à un ensemble d’objets\nsans que ce comportement puisse être directement instancié, on utilise la notiondeclasse abstraite qui permet de factoriser la description des méthodes fournies par\ntous les objets instances des classes spécialisées, à charge pour ces classes de déﬁnir\nl’implantation appropriée de chacune de ces méthodes. Dans notre cas, il s’agit de\ndéﬁnir toutes les méthodes (au sens précis de : noms, liste des paramètres en entréeet en sortie, rôle de la méthode) communes à tous les objets, quel que soit le SGBDauquel ils permettent d’accéder. Il nous faut au minimum :\n1. une méthode de connexion ;\n2. une méthode d’exécution des requêtes ;3. une ou plusieurs méthodes pour récupérer le résultat ;4. une méthode pour traiter les apostrophes ou autres caractères gênants dans\nles chaînes à insérer dans les requêtes (la technique d’échappement pouvant\nvarier d’un SGBD à un autre) ;\n5. une gestion des erreurs.\nAu moment de la déﬁnition de ces méthodes, il faut s’assurer qu’elles corres-\npondent à des fonctionnalités qui peuvent être fournies par tous les SGBD. Il faut\négalement réﬂéchir soigneusement aux paramètres d’entrée et de sortie nécessaires\nà chaque méthode (on désigne souvent par signature cette spéciﬁcation des para-\nmètres). En d’autres termes, on doit déﬁnir de manière générique, c’est-à-dire sans\nse soucier des détails d’implantation, l’interface d’accès à un SGBD en évitant de se\nlaisser inﬂuencer, à ce stade, par les particularités de l’un d’entre eux. Voici la classeabstraite BD.\nExemple 3.3 exemples/BD.php :La classe abstraite BD\n<?php\n// Classe abstraite définissant une interface générique d’accès\n// à une base de données . Version s i m p l i f i é e : une d éf in it io n// plus complète est donnée avec le site Films\nabstract class B D\n{\n//−−−− Partie privée : les propriétés\nprotected $connexion , $nom_base;\n// Constructeur de la classe\nfunction __construct ($login , $mot_de_passe , $base , $serveur)\n{\n// O n conserve le n o m de la base\n$this −>nom_base = $base ;\n3.1 Tour d’horizon de la programmation objet\n 131\n// Connexion au serveur par appel à une méthode privée\n$this −>connexion = $this −>connect($login , $mot_de_passe ,\n$base , $serveur) ;\n// Lancé d’exception en cas d’erreur\nif($this −>connexion == 0)\nthrow new Exception (\" Erreur de connexion au S G B D\") ;\n// Fin du constructeur\n}\n// Méthodes privées\nabstract protected function connect ($login ,\n$mot_de_passe , $base , $serveur ) ;\nabstract protected function exec ($requete) ;\n// Méthodes publiques\n// Méthode d ’ exécution d ’une requête\npublic function execRequete ( $requete )\n{\nif(! $resultat = $this −>exec ($requete))\nthrow new Exception\n(\"Problème dans l ’exécution de la requête : $requete.<br/> \"\n.$ t h i s −>messageSGBD() ) ;\nreturn $resultat ;\n}\n// Méthodes abstraites\n// Accès à la ligne suivante , sous forme d ’ objet\nabstract public function objetSuivant ($resultat);\n// Accès à la ligne suivante , sous forme de tableau associatif\nabstract public function ligneSuivante ( $resultat );\n// Accès à la ligne suivante , sous forme de tableau indicé\nabstract public function tableauSuivant ($resultat);\n// Echappement des apostr ophes et autres préparations à\n// l ’insertion\nabstract public function prepareChaine($chaine) ;\n// Retour du message d ’ erreur\nabstract public function messageSGBD () ;\n// Fin de la classe\n}\nLa déﬁnition d’une classe abstraite est préﬁxée par le mot-clé abstract,d em ê m e\nque toutes les méthodes de la classe pour lesquelles seule la signature est donnée.\nToute classe PHP comprenant au moins une méthode abstraite doit elle-même êtredéclarée comme abstraite.\n132\n Chapitre 3. Programmation objet\nREMARQUE – La notion de classe abstraite existe depuis PHP 5, de même que celle\nd’interface , concept assez proche mais encore un peu plus générique, que nous ne présentons\npas ici.\nDans la classe BDtoutes les méthodes sont abstraites, à l’exception du construc-\nteur et de la méthode execRequete() qui exécute une requête. Ces deux méthodes\nmontrent comment répartir les tâches entre classe abstraite et classe dérivée :\n1. tout ce qui est commun à l’ensemble des SGBD doit être factorisé au niveau\nde la classe abstraite : ici il s’agit de la réaction à adopter si une connexion\nou l’exécution d’une requête échoue (on a choisi en l’occurrence de lever une\nexception) ;\n2. tout ce qui est spéciﬁque à un système particulier doit être dévolu à une\nméthode abstraite qui devra être implantée au niveau de chaque classe dérivée\n(ici on a donc deux méthodes abstraites connect() etexec() destinées\nà fournir respectivement le code de connexion et d’exécution de requêtespropres à chaque système).\nLa mention protected introduite ici est une variante de private. Elle signiﬁe\nque la méthode ou la propriété est invisible de tout script appelant (comme sielle était privée) mais accessible en revanche à toute sous-classe qui peut donc lasurcharger. Toute propriété ou méthode déclarée private n’est accessible que dans la\nclasse qui la déﬁnit. La méthode exec() par exemple doit être déclarée protected\npour pouvoir être redéﬁnie au niveau des sous-classes de BD.\nIl est impossible d’instancier un objet d’une classe abstraite. Celle-c n’est d’une\ncertaine manière qu’une spéciﬁcation contraignant l’implantation des classes déri-vées. Pour être instanciables, ces classes dérivées doivent impérativement fournir uneimplantation de toutes les méthodes abstraites. Voici la classe BDMySQL (à comparer\navec la classe MySQL, page 121).\nExemple 3.4 exemples/BDMySQL.php :La classe dérivée BDMySQL\n<?php\n// Sous −classe de la classe abstraite B D , implantant l ’accès à\n/ / MySQL\nrequire_once(\"B D.php\") ;\nclass B D M y S Q L extends B D\n{\n// Pas de propriétés : elles sont héritées de la classe B D\n// Pas de constructeur : lui aussi est hérité\n// Méthode connect : connexion à M y S Q L\nprotected function connect ($login , $mot_de_passe , $base ,\n$serveur)\n{\n// Connexion au serveur M y S Q L\n3.1 Tour d’horizon de la programmation objet\n 133\nif(! $this −>connexion = @mysql_pconnect ( $serveur , $login ,\n$mot_de_passe))\nreturn 0;\n// Connexion à la base\nif(! @mysql_select_db ($this −>nom_base , $this −>connexion))\nreturn 0;\nreturn $this −>connexion ;\n}\n// Méthode d ’ exécution d ’une requête .\nprotected function exec ($requete)\n{ return @mysql_query ( $requete , $this −>connexion) ; }\n// Partie publique: implantation des méthodes abstraites\n// Accès à la ligne suivante , sous forme d ’ objet\npublic function objetSuivant ( $resultat )\n{ return mysql_fetch_object ( $resultat ) ; }\n// Accès à la ligne suivante , sous forme de tableau associatif\npublic function ligneSuivante ( $resultat )\n{r e t u r n mysql_fetch_assoc ($resultat); }\n// Accès à la ligne suivante , sous forme de tableau indicé\npublic function tableauSuivant ( $resultat )\n{r e t u r n mysql_fetch_row ($resultat); }\n// Echappement des apostr ophes et autres préparation à\n// l ’insertion\npublic function prepareChaine($chaine)\n{ return mysql_real_escape_string($chaine); }\n// Retour du message d ’ erreur\npublic function messageSGBD ()\n{r e t u r n mysql_error ($this −>connexion) ;}\n// Méthode ajoutée : renvoie le schéma d ’une table\npublic function schemaTable($nom_table)\n{\n// Recherche de la liste des attributs de la table\n$liste_attr = @mysql_list_fields($this −>nom_base ,\n$nom_table , $this −>connexion) ;\nif(! $liste_attr ) throw n ew Exception (\"Pb d ’ analyse de\n$nom_table\") ;\n// Recherche des attributs et stockage dans le tableau\nfor ($i = 0; $i < mysql_num_fields ($liste_attr); $i+ + ) {\n$nom = mysql_field_name ($liste_attr , $i);\n$schema[$ n o m][ ’longueur ’] = mysql_field_len( $liste_attr , $i\n);\n$schema [$nom ] [ ’ type ’ ] = mysql_field_type ($liste_attr , $i);\n$schema [$nom ] [ ’ cle_primaire ’ ] =\n134\n Chapitre 3. Programmation objet\nsubstr_count (mysql_field_flags ($liste_attr , $i) , \"\nprimary_key\") ;\n$schema[$ n o m][ ’ not_null ’ ] =\nsubstr_count (mysql_field_flags ($liste_attr , $i) , \"not_null\" );\n}\nreturn $schema;\n}\n// Destructeur de la classe : on se déconnecte\nfunction __destruct ()\n{if($this −>connexion) @mysql_close ( $this −>connexion) ; }\n// Fin de la classe\n}\n?>\nOn peut noter que la redéﬁnition du constructeur est inutile puisqu’il est déjà\nfourni au niveau de la classe parente. En revanche, il faut en déﬁnir la partie\nspéciﬁque, soit les méthodes connect() etexec(). Au moment où on effectuera\nune instanciation d’un objet de la classe BDMySQL, l’exécution se déroulera comme\nsuit :\n•le constructeur déﬁni dans la classe BDsera appelé, puisqu’il est hérité, et non\nsurchargé ;\n•ce constructeur appelle à son tour la méthode connect() qui, elle, est déﬁnie\nau niveau de la classe BDMySQL.\nLe constructeur lèvera une exception si la méthode connect() échoue. On a\nbien l’interaction souhaitée entre le code générique de la classe parente et le codespéciﬁque de la classe dérivée. Le même mécanisme s’applique à l’exécution derequêtes, avec la méthode générique execRequete() appelant la méthode spéci-\nﬁque exec() (ainsi, éventuellement, que la méthode messageSGBD()), et levant\nune exception si nécessaire en fonction du retour de cette dernière. Cela étant, uneclasse publique de la super-classe peut toujours être surchargée. Si on souhaite parexemple lever deux exceptions différentes, une pour l’erreur de connexion au serveuret l’autre pour l’erreur d’accès à une base, on peut redéﬁnir un constructeur pour laclasse BDMySQL comme suit :\nfunction __construct ($login , $mot_de_dasse , $base , $serveur)\n{\n// O n conserve le n om de la base\n$this −>nom_base = $base ;\n// Connexion au serveur M y S Q L\nif(! $this −>connexion =\n@mysql_pconnect ( $serveur , $login , $mot_de_dasse ))\nthrow new Exception (\" Erreur de connexion au serveur . \") ;\n// Connexion à la base\nif(! @mysql_select_db ($this −>nom_base , $this −>connexion))\n3.1 Tour d’horizon de la programmation objet\n 135\nthrow new Exception (\" Erreur de connexion à la base . \") ;\n}\nAttention : quand une méthode est surchargée (donc redéﬁnie dans une classe\ndérivée), la méthode de la classe parente n’est plus appelée. La surcharge est donc\nbien un remplacement de la méthode héritée. C’est valable également pour le\nconstructeur : la déﬁnition d’un constructeur pour la classe BDMySQL implique que le\nconstructeur de la super-classe BDne sera plus appelé au moment de l’instanciation\nd’un objet BDMySQL. Il est cependant possible de faire l’appel explicitement grâce à\nla syntaxe parent::BD() : voir l’exemple de la classe R´ epertoire, page 128.\nToutes les autres méthodes abstraites sont ensuite implantées par un simple appel\nà la fonction correspondante de l’interface de programmation (API) MySQL. Il est\nbien entendu possible d’étendre la puissance de la classe dérivée en lui ajoutant\nd’autres fonctionnalités de MySQL. Ces méthodes seraient alors spéciﬁques auxinstances de la classe BDMySQL et ne pourraient donc pas être appelées dans une\napplication souhaitant pouvoir accéder à des SGBD différents et se fondant surl’interface déﬁnie dans la super-classe BD.\nRegardons de plus près la méthode schemaTable. Si tout se passe bien, elle\nrenvoieun tableau associatif à deux dimensions décrivant pour chaque attribut (pre-\nmière dimension du tableau) les options de création de la table passée en paramètre\n(seconde dimension). Il s’agit à peu de choses près des informations du CREATE\nTABLE : longueur et type d’un attribut donné, et booléen indiquant si cet attribut\nfait partie de la clé primaire identiﬁant une ligne de la table.\nCette fonction renvoie une valeur dont la taille peut être importante. Cette\nvaleur, initialement stockée dans une variable locale de la méthode, schemaTable,\ndoit ensuite être copiée vers une variable du script appelant. Ce code est correct\nmais on peut se poser la question de l’impact négatif sur les performances en casd’appels intensifs à cette méthode pour des tables contenant beaucoup d’attributs.L’utilisation d’un passage par référence peut alors s’envisager (voir la discussionpage 61). On aurait le simple changement :\nfunction schemaTable($nom_table , & $schema) {\n// C o m m e avant\n...\n}\net la fonction alimenterait directement la variable du script appelant, dont on obtientici une référence.\nLa méthode schemaTable() est une méthode ajoutée (elle sera utilisée pour une\nautre classe, page 167). La déclarer sous forme de méthode abstraite au niveau de laclasse BDenrichirait la spéciﬁcation des interactions, mais imposerait l’implantation\nde cette méthode dans toutes les sous-classes.\nIl reste à déﬁnir autant de sous-classes que de SGBD, soit ORACLE, ou Post-\ngreSQL, ou encore SQLite, un moteur SQL directement intégré à PHP depuis laversion 5, etc. La classe ci-dessous correspond à PostgreSQL.\n136\n Chapitre 3. Programmation objet\nExemple 3.5 exemples/BDPostgreSQL.php :La classe dérivée BDPostgreSQL\n<?php\n// Sous −classe de la classe abstraite B D , implantant l ’accès à\n// PostgreSQL\nrequire_once(\"B D.php\") ;\nclass BDPostgreSQL extends BD\n{\n// Pas de propriétés : elles sont héritées de la classe B D\n// Pas de constructeur : lui aussi est hérité\n// Méthode connect : connexion à PostgreSQL\nprotected function connect ($login , $mot_de_passe , $base ,\n$serveur)\n{\n// Quelques ajustements PostgreSQL ...\n$login = strToLower( $login ) ; $base = strToLower($base) ;\nif($serveur = = ’ localhost ’) $serveur =\"\" ;\n// Création de la chaîne de connexion\n$chaineC = \" user=$login dbname=$base password=$mot_de_passe\nhost=$serveur\" ;\n// Connexion au serveur et à la base\nreturn $this −>connexion = pg_connect ($chaineC) ;\n}\n// Méthode d ’ exécution d ’une requête\nprotected function exec ($requete)\n{ return @pg_exec ( $this −>connexion , $requete ) ; }\n//−−−− Partie publique −−−−−−−−−−−−−−−−−−−−−−−−−\n// Accès à la ligne suivante , sous forme d ’ objet\nfunction objetSuivant ( $resultat )\n{r e t u r n pg_fetch_object ($resultat); }\n// Accès à la ligne suivante , sous forme de tableau associatif\nfunction ligneSuivante ( $resultat )\n{ return pg_fetch_assoc ( $resultat ) ; }\n// Accès à la ligne suivante , sous forme de tableau indicé\nfunction tableauSuivant ( $resultat )\n{r e t u r n pg_fetch_row ($resultat); }\n// Echappement des apostr ophes et autres préparations à\n// l ’insertion\npublic function prepareChaine($chaine)\n{ return addSlashes($chaine) ; }\n// Retour du message d ’ erreur\npublic function messageSGBD ()\n{ return pg_last_error($this −>connexion) ;}\n// Destructeur de la classe : on se déconnecte\n3.1 Tour d’horizon de la programmation objet\n 137\nfunction __destruct ()\n{ @pg_close ( $this −>connexion) ; }\n// Fin de la classe\n}\n?>\nOn retrouve la même structure que pour BDMySQL, avec l’appel aux fonctions cor-\nrespondantes de PostgreSQL, et la prise en compte de quelques spéciﬁcités. Caracté-\nristique (assez désagréable...) de l’interface PHP/PostgreSQL : tous les identiﬁcateurs(noms de tables, d’attributs, de base, etc.) sont systématiquement traduits en minus-cules, ce qui impose quelques conversions avec la fonction PHP strToLower() (voir\nla méthode connect() ci-dessus). De plus, pour la connexion au serveur localhost,\nPostgreSQL demande que le nom du serveur soit la chaîne vide. Ces particularitéspeuvent être prises en compte au moment de l’implantation des méthodes abstraites.\nOn peut maintenant considérer qu’un objet instance de la classe BDMySQL ou un\nobjet instance de la classe BDPostgreSQL sont tous deux conformes au comporte-\nment décrit dans la super-classe commune, BD. On peut donc les utiliser exactement\nde la même manière si on se limite au comportement commun déﬁni dans cettesuper-classe. Le script suivant montre un code qui, hormis le choix initial de laclasse à instancier, fonctionne aussi bien pour accéder à MySQL que pour accéder àPostgreSQL (ou SQLite, ou ORACLE, ou tout autre système pour lequel on déﬁnira\nune sous-classe de BD).\nExemple 3.6 exemples/ApplClasseBD.php :Accès générique à un SGBD.\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head><title >Application de la classe B D </title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<h1>Application de la classe B D</h1>\n<?php\nrequire_once (\"Connect.php\") ;\n// L a sous −classe pour M y S Q L\nrequire_once (\"B D M y S Q L. class .php\") ;\n// L a sous −classe pour PostgreSQL\nrequire_once (\"BDPostgreSQL. class .php\") ;\n// L a sous −classe pour SQLite\nrequire_once (\"BDSQLite. class .php\") ;\n138\n Chapitre 3. Programmation objet\ntry {\nif(isSet($ _ G E T[ ’postgresql ’]))\n$bd = new BDPostgreSQL (N O M , PASSE, BASE, SERVEUR) ;\nelse if (isSet($ _ G E T[ ’ sqlite ’]))\n$bd = new BDSQLite (N O M , PASSE, BASE, SERVEUR) ;\nelse\n$bd = new BDMySQL (N O M , PASSE, BASE, SERVEUR) ;\n$ r e s u l t a t = $bd −>e xe c Re que t e ( \"SELECT ∗FROM F i l m S i m p l e \" ) ;\nwhile ($film = $bd −>objetSuivant ( $resultat ))\necho \"<b>$film −>titre </b>, paru en $film −>annee , \"\n. \" réalisé par $film −>prenom_realisateur $film −>\nnom_realisateur <br/>\" ;\n}\ncatch (Exception $exc)\n{\necho \"<b>Erreur rencontrée:</b> \" . $exc −>getMessage () . \"\\n\" ;\n}\n?>\n</body>\n</html>\nSi on passe une variable postgresql en mode GET, c’est à PostgreSQL qu’on se\nconnecte, sinon c’est à MySQL, ou à SqLite, etc. Dans une application importante,\ndétaillée dans la seconde partie de ce livre, on peut instancier initialement un objeten choisissant le SGBD à utiliser, et le passer ensuite en paramètre aux fonctions ouobjets qui en ont besoin. Ceux-ci n’ont alors plus à se soucier de savoir à quel systèmeils accèdent, tant qu’ils se conforment au comportement de la classe générique.\nREMARQUE – Écrire une application multi-plateformes demande cependant quelques pré-\ncautions supplémentaires. Il existe de nombreuses différences mineures entre les différents\nSGBD qui peuvent contrarier, et parfois compliquer, la production d’un code complètement\ncompatible. La première précaution à prendre (nécessaire, mais par forcément suffisante...) est\nde respecter strictement la norme SQL du côté SGBD. Il faut ensuite étudier soigneusement\nles interfaces entre PHP et le SGBD pour détecter les points susceptibles de poser problème.\nLe fait que l’interface de PostgreSQL traduise tous les identificateurs en minuscules est par\nexemple une source d’incompatibilité à prendre en compte dès la conception, en n’utilisant\nque des identificateurs déjà en minuscules. Nous revenons en détail page 233 sur le problème\nde la portabilité multi-SGBD.\n3.1.6 Résumé\nCe premier tour d’horizon a permis de voir l’essentiel des principes de la programma-\ntion objet. Si c’est votre premier aperçu de cette technique, il est probable que voustrouviez tout cela compliqué et inutilement abstrait. À l’usage, la cohérence de cetteapproche apparaît, ainsi que ses avantages, notamment en terme sde simpliﬁcationde la programmation et de la maintenance. Il n’est pas obligatoire de programmer\n3.1 Tour d’horizon de la programmation objet\n 139\nen objet pour réaliser des applications robustes, et on peut envisager de ne pas\nmaîtriser l’ensemble de la panoplie des concepts et techniques. La programmationPHP s’oriente cependant de plus en plus vers l’utilisation et la réutilisation d’objetsprêts à l’emploi. La compréhension de ce mode de production du logiciel sembledonc s’imposer.\nLes exemples qui vont suivre permettent d’approfondir cette première présenta-\ntion et de présenter quelques nouveautés qui sont brièvement résumées ci-dessouspour compléter cette première section.\nConstantes. Il est possible en PHP 5 de déﬁnir des constantes locales à une classe.\nL’usage est principalement d’initialiser des valeurs par défaut utilisables par la\nclasse et ses sous-classes.\nPropriétés et méthodes statiques. Les méthodes ou propriétés vues jusqu’à présent\nétaient toujours considérées dans le cadre d’un objet de la classe. Chaque objetdispose d’une valeur propre pour chaque propriété, et les méthodes appliquéesà un objet s’appliquent à ces valeurs. Les propriétés et méthodes statiques sontau contraire rattachées à la classe, pas à chacune de ses instances. Il en existedonc une unique copie par classe, utilisable, par exemple, pour compter le nombred’objets instanciés à un moment donné.\nInterfaces. Une interface, comme son nom l’indique, est la spéciﬁcation d’une liste\nde fonctions avec leur nom et leur mode d’appel. Une classe abstraite propose lemême type de spéciﬁcation, implicitement destinée à s’appliquer aux instancesde la classe. La notion d’interface est un peu plus générale dans la mesure oùelle est déﬁnie indépendamment de toute classe, donc de toute instance. Une\nclasse peut alors implanter une ou plusieurs interfaces. L’utilisation des interfaces\npermet de pallier en partie l’absence de concepts comme l’héritage multiple. Il\ns’agit cependant de techniques avancées qui dépassent le cadre de ce livre et neseront donc pas détaillées.\nIdentité d’un objet. Un objet, c’est une identité et une valeur. Deux objets sont dits\nidentiques s’ils ont la même identité, et égaux s’ils ont la même valeur. L’égalité se\nteste avec l’opérateur classique ==, alors que l’identité se teste avec l’opérateur\nPHP5 ===\n1.\nImportant : quand on passe un objet en paramètre à une fonction, c’est son\nidentité (ou sa référence, en terminologie PHP) qui est transmise, pas sa valeur.De même l’affectation $a = $b;,o ùb est un objet, fait de aune référence vers b\n(voir page 61). Les objets constituent donc une exception au principe de passagedes paramètres par valeur en usage dans tous les autres cas. Concrètement, cela\nsigniﬁe que toute modiﬁcation effectuée dans la fonction appelée agit directement\nsur l’objet, pas sur sa copie. Cette règle ne vaut que depuis la version 5, puisquePHP 4 (et versions antérieures) appliquaientt la règle du passage par valeur.\n1. Ceux qui confondraient déjà l’opérateur d’affectation =et l’opérateur de comparaison ==\napprécieront !\n140\n Chapitre 3. Programmation objet\nClasses cibles L’opérateur :: permet dans certains cas d’indiquer\nexplicitement la classe dans laquelle chercher une déﬁnition. La syntaxe est\nNomClasse::d´ efinition,o ù d´ efinition est soit une constante de la classe\nNomClasse, soit une propriété ou une méthode statique. Deux mot-clés réservéspeuvent remplacer NomClasse :parent etself qui désignent respectivement\nla classe parent et la classe courante. Quand une méthode est surchargée, ilspeuvent indiquer quelle version de la méthode on souhaite appeler (voir parexemple page 128).\nLe chapitre 11 complète cette rapide présentation et donne l’ensemble de la\nsyntaxe objet de PHP . En ce qui concerne la modélisation des applications objet,\nrappelons que tout ce qui précède est repris, en PHP , d’autre langages orientés-objet,notamment du C++ et, dans une moindre mesure de Java. Pour aller plus loindans l’approfondissement de la programmation objet, vous pouvez recourir à unouvrage généraliste consacré au C++, à Java, ou à la conception objet en géné-ral.\n3.2 LA CLASSE TABLEAU\nLa classe présentée dans cette section montre comment concevoir et réaliser unutilitaire de production de tableaux HTML qui évite d’avoir à multiplier sans cesse,au sein du code PHP , des balises <tr>,<td>, etc. Un tel utilitaire prend place dans\nune stratégie générale de séparation du code HTML et du code PHP sur laquelle nous\nreviendrons au chapitre 5.\nLa première chose à faire quand on projette la création d’une nouvelle classe,\nc’est de bien identiﬁer les caractéristiques des objets instances de cette classe,leur représentation, les contraintes portant sur cette représentation, et enﬁn les\nméthodes publiques qu’ils vont fournir. À terme, ce qui nous intéresse, c’est lamanière dont on va pouvoir communiquer avec un objet.\n3.2.1 Conception\nLe but est de produire des tableaux HTML. Il faut pour cela les construire dansl’objet, en attendant de pouvoir afﬁcher par la suite le code HTML correspondant.Pour commencer, il faut se faire une idée précise de ce qui constitue un tableau et\ndes options de présentation dont on veut disposer. On cherche le meilleur rapport\npossible entre la simplicité de l’interface des tableaux, et la puissance des fonction-nalités. On peut commencer par identiﬁer les besoins les plus courants en analysantquelques cas représentatifs de ce que l’on veut obtenir, puis spéciﬁer les données ettraitements nécessaires à la satisfaction de ces besoins.\nLes tableaux sont très utilisés en présentation de données statistiques. Prenons\nle cas d’une base d’information sur la fréquentation des ﬁlms (aou « box ofﬁce »pour faire court), classée selon divers critères comme les villes et la semaine d’ex-ploitation, et voyons les différentes possibilités de représentation par tableau. La\n3.2 La classe Tableau\n 141\npremière possibilité est simplement de mettre chaque donnée en colonne, comme\nci-dessous.\nTableau 3.2 — Tableau A.\nFilm\n Semaine\n Ville\n Nb entrées\nMatrix\n 1\n Paris\n 12000\nMatrix\n 2\n Paris\n 15000\nMatrix\n 3\n Paris\n 11000\nSpiderman\n 1\n Paris\n 8000\nSpiderman\n 2\n Paris\n 9000\nSpiderman\n 3\n Paris\n 9500\nMatrix\n 1\n Caen\n 200\nMatrix\n 2\n Caen\n 2100\nMatrix\n 3\n Caen\n 1900\nSpiderman\n 1\n Caen\n 1500\nSpiderman\n 2\n Caen\n 1600\nSpiderman\n 3\n Caen\n 1200\nC’est la représentation qu’on obtient classiquement avec un SGBD relationnel\ncomme MySQL. Elle est assez peu appropriée à la visualisation des propriétés du jeude données (comme l’évolution du nombre d’entrées, ou les proportions entre lesdifférents ﬁlms). Voici une seconde possibilité qui montre, sur Paris, et par ﬁlm, lenombre d’entrées au cours des différentes semaines.\nTableau 3.3 — Tableau B.\nBox office\n Semaine 1\n Semaine 2\n Semaine 3\nMatrix\n 12000\n 15000\n 11000\nSpiderman\n 8000\n 9000\n 9500\nOn s’est ici limité à deux dimensions, mais des artiﬁces permettent de présenter\ndes tableaux de dimension supérieure à 2. Voici par exemple une variante du tableau\nprécédent, montrant les mêmes données sur Paris etsur Caen, ce qui donne un\ntableau à trois dimensions.\nTableau 3.4 — Tableau C.\nBox office\n Film\n Semaine 1\n Semaine 2\n Semaine 3\nParis\nMatrix\n 12000\n 15000\n 11000\nSpiderman\n 8000\n 9000\n 9500\nCaen\nMatrix\n 2000\n 2100\n 1900\nSpiderman\n 1500\n 1600\n 1200\nBien entendu on pourrait présenter les entrées dans un ordre différent, comme\ndans l’exemple ci-dessous.\n142\n Chapitre 3. Programmation objet\nTableau 3.5 — Tableau D.\nBox office\nSemaine 1\n Semaine 2\n Semaine 3\nParis\n Caen\n Paris\n Caen\n Paris\n Caen\nMatrix\n 12000\n 2000\n 15000\n 2100\n 11000\n 1900\nSpiderman\n 8000\n 1500\n 9000\n 1600\n 9500\n 1200\nUne possibilité encore :\nTableau 3.6 — Tableau E.\nParis\nSemaine 1\n Semaine 2\n Semaine 3\nMatrix\n 12000\n 15000\n 11000\nSpiderman\n 8000\n 9000\n 9500\nCaen\nSemaine 1\n Semaine 2\n Semaine 3\nMatrix\n 200\n 2100\n 1900\nSpiderman\n 1500\n 1600\n 1200\nTous ces exemples donnent dans un premier temps un échantillon des possibilités\nde présentation en clariﬁant les caractéristiques des données qui nous intéressent.\nCes deux aspects, présentation et données, sont en partie indépendants puisqu’àpartir du même box ofﬁce, on a réussi à obtenir plusieurs tableaux très différents.\nL’étape suivante consiste à décrire dces tableaux de manière plus abstraite. Pour\nles données, nous pouvons distinguer les dimensions , qui servent au classement, et\nlesmesures qui expriment la valeur constatée pour une combinaison donnée de\ndimensions\n2. Dans les exemples ci-dessus, les dimensions sont les ﬁlms, les villes,\nles semaines, et la seule mesure est le nombre d’entrées. Autrement dit, le nombred’entrées est fonction d’un ﬁlm, d’une ville, et d’une semaine.\nVeut-on gérer plusieurs mesures, c’est-à-dire présenter plusieurs valeurs dans une\nmême cellule du tableau ? On va répondre « non » pour simpliﬁer. D’une manièregénérale on a donc une fonction Mqui prend en paramètres des dimensions\nd\n1,d2,..., dpet renvoie une mesure m. On peut gérer cette information grâce à\nun tableau PHP multi-dimensionnel $M[d 1][d 2]...[dp]. À ce stade il faut se\ndemander si cela correspond, de manière sufﬁsamment générale pour couvrirlargement les besoins, aux données que nous voudrons manipuler. Répondons« oui » et passons à la présentation du tableau.\nUn peu de réﬂexion sufﬁt à se convaincre que si l’on souhaite couvrir les pos-\nsibilités A, B, C, D et E ci-dessus, l’utilisation de la classe deviendra assez difﬁcilepour l’utilisateur (ainsi bien sûr que la réalisation du code, mais cela importe moinspuisqu’en principe on ne fera l’effort une fois et on n’y reviendra plus). Le cas du\n2. Cette modélisation reprend assez largement la notation, le vocabulaire et les principes en usage\ndans les entrepôts de données, supports privilégiés de ce type de tableaux statistiques.\n3.2 La classe Tableau\n 143\ntableau E, assez éloigné des autres, sera ignoré. Voici, pour un tableau avec deux\ndimensions d1etd2, la représentation adoptée.\nCSG\n e[d2,c1\n2]\n e[d2,c2\n2]\n...\n e[d3,cq\n2]\ne[d1,c1\n1]\nM[c11,c12]\nM[c11,c2\n2]\n...\n M[c1\n1,cq\n2]\ne[d1,c2\n1]\nM[c21,c1\n2]\nM[c2\n1,c22]\n...\n M[c21,cq\n2]\n...\n ...\n ...\n...\n ...\ne[d1,cp\n1]\nM[cp1,c1\n2]\nM[cp\n1,c2\n2]\n...\n M[cp\n1,cq2]\nTableau 3.7 — Les méthodes publiques de la classe tableau\nMéthode\n Description\nTableau (tabAttrs )\n Constructeur de tableaux en fonction d’une dimen-\nsion et d’une liste de paramètres de présentation.\najoutValeur (ligne ,colonne ,valeur )\n Définit la valeur du tableau dans une cellule\ndonnée par les paramètres ligne etcolonne .\najoutEntete (dimension ,cle,texte )\n Définit l’en-tête pour la dimension dimension et\nla clé cle.\nTableauHTML ()\n Produit la représentation HTML du tableau.\najoutAttributsTable (tabAttrs )\n Ajouts de paramètres de présentation pour la balise\n<table>.\nsetCouleurPaire (couleur )\n Couleur de fond pour les lignes paires.\nsetCouleurImpaire (couleur )\n Couleur de fond pour les lignes impaires.\nsetAfficheEntete (dimension ,couleur )\nIndique si l’on souhaite ou non afficher l’en-tête pourla dimension.\nsetCoinSuperieurGauche (texte )\n Texte à placer dans le coin supérieur gauche.\nLes éléments apparaissant dans cette présentation sont :\n•Le libellé du coin supérieur gauche CSG (dans le tableau C par exemple c’est\n« Box ofﬁce ») ;\n•les clés de la dimension 1, notées ci\n1, pour chaque ligne i,a v e c1 /lessorequalslanti/lessorequalslantp(dans\nle tableau B ce sont les titres de ﬁlms ; dans le tableau C les villes) ;\n•les clés de la dimension 2, notées cj\n2, pour chaque ligne j,a v e c1 /lessorequalslantj/lessorequalslantq(dans\nnotre exemple il s’agit de ’Semaine’ suivi du numéro de la semaine) ;\n•les en-têtes de la dimension dk,n o t é s e[dk,ci\nk],a v e c k=1o u k=2;\n•enﬁn M[i,j]désigne la valeur de la mesure pour la position (i,j)du tableau.\nUne fois cet effort de modélisation effectué, tout le reste devient facile. Les\ninformations précédentes doivent pouvoir être manipulées par l’intermédiaire de\nl’interface de la classe Tableau et donc être stockées comme propriétés des objets de\nla classe Tableau. Par ailleurs, elles doivent être accessibles en entrée ou en sortie\npar l’intermédiaire d’un ensemble de méthodes publiques.\nCe modèle de tableau capture les exemples A et B. En l’étendant à trois dimen-\nsions, on obtient également les présentations C et D. En revanche il ne convient pas\n144\n Chapitre 3. Programmation objet\nau tableau E : il faut savoir renoncer aux cas qui rendent beaucoup plus complexes\nles manipulations sans que cela soit justiﬁé par le gain en puissance.\nDans ce qui suit, nous donnons des exemples d’utilisation, ainsi que l’implanta-\ntion de la classe, en nous limitant au cas à deux dimensions. La gestion d’un nombrede dimensions quelconque est partiellement réalisée dans le code fourni sur le site,et partiellement laissée au lecteur (le polycopié d’exercices fournit des suggestionscomplémentaires).\n3.2.2 Utilisation\nLa table 3.7 donne la liste des méthodes publiques de la classe Tableau. On trouve\nbien entendu le constructeur de la classe, qui prend en paramètres la dimension dutableau et des attributs HTML à placer dans la balise <table>. Les trois méthodes\nsuivantes sont les plus importantes. Elles déﬁnissent respectivement l’ajout d’unevaleur dans une cellule (le tableau Mdes mesures), la description des en-têtes (le\ntableau e) et enﬁn la sortie de la chaîne de caractères contenant la représentation\nHTML du tableau.\nLes autres méthodes publiques sont moins essentielles. Elles permettent de régler\nl’apparence du tableau en affectant certaines valeurs à des paramètres internes à laclasse utilisés ensuite au moment de la génération de la chaîne HTML.\nVoyons maintenant comment on utilise cette classe dans une petite application\nde test qui extrait des données de MySQL et les afﬁche sous forme de tableau HTML.Le script SQL suivant permet de créer la table BoxOfﬁce (les exemples contiennent\nun autre script,\nInsBoxOffice.sql , pour insérer un échantillon de données dans cette\ntable).\nExemple 3.7 exemples/BoxOffice.sql :Création de la table BoxOfﬁce.\n# Création d ’une table pour box o ffice simplifié\nC R E A T E T A B L E BoxOffice\n(titre V A R C H A R (60) N O T N U L L ,\nsemaine I N T E G E R N O T N U L L,\nville V A R C H A R (60) N O T N U L L,\nn b _ e n t r e e s INTEGER NOT NULL,\nP R I M A R Y K E Y (titre , semaine , ville)\n);\nLe script ApplClasseTableau.php , ci-dessous, instancie deux objets de la classe\nTableau, correspondant aux présentations A et B données précédemment. Cesdeux objets sont alimentés à partir des lignes issues d’une même requête, ce quimontre concrètement comment on peut facilement choisir une présentationparticulière en partant des mêmes données. Notez qu’il n’y a pratiquement plus uneseule balise HTML apparaissant dans ce script. La ﬁgure 3.3 donne le résultat.\n3.2 La classe Tableau\n 145\nExemple 3.8 exemples/ApplClasseTableau.php :Application de la classe Tableau.\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head><title > La classe tableau </title ><link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<?php\nrequire_once (\"Connect.php\") ;require_once (\"B D M y S Q L.php\") ;\nrequire_once (\"Tableau .php\") ;\ntry {\n// Connexion à la base de données\n$bd = new BDMySQL (N O M , PASSE, BASE, SERVEUR) ;\n// Création du premier tableau\n$tableauA = new Tableau (2 , array (\"border\"=>2)) ;\n$tableauA −>setAfficheEntete(1, FALSE );\n// Création du second tableau\n$tableauB = new Tableau(2 , array (\"border\"=>2)) ;\n$tableauB −>setCoinSuperieurGauche(\"B o x office\");\n$tableauB −>setCouleurImpaire(\" silver \") ;\n$i=0;\n// Recherche des films parisiens\n$resultat = $ b d −>e xe c Re que t e ( \"SELECT ∗F R O M BoxOffice W H E R E\nville=’Paris ’\");\nwhile ($bo = $bd −>objetSuivant ( $resultat )) {\n// Premier tableau : présentation standard , en colonnes\n$i ++;\n$tableauA −>ajoutValeur($i , \"Film\" , $bo −>titre);\n$tableauA −>ajoutValeur($i , \"Ville\" , $bo −>ville);\n$tableauA −>ajoutValeur($i , \"Semaine\" , $bo −>semaine) ;\n$tableauA −>ajoutValeur($i , \"N b entrées\" , $bo −>nb_entrees) ;\n// Second tableau : présentation par titre et par semaine\n$tableauB −>ajoutEntete(2, $bo −>semaine , \"Semaine \" . $bo −>\nsemaine) ;\n$tableauB −>ajoutValeur($bo −>t itr e , $bo −>semaine , $bo −>\nnb_entrees) ;\n}\n// Affichage des tableaux\necho $tableauA −>tableauHTML () . \"<br/>\\n\" ;\n146\n Chapitre 3. Programmation objet\necho $tableauB −>tableauHTML () . \"<br/>\\n\" ;\n}\ncatch (Exception $exc) {\n// Un e erreur est survenue\necho \"<b>Erreur rencontrée:</b> \" . $exc −>getMessage () . \"\\n\" ;\n}\n?>\n</body>\n</html>\nFigure 3.3 — Affichage des deux tableaux.\nBien entendu on utilise un objet de la classe BDMySQL pour se connecter, effectuer\nune requête et parcourir le résultat. Ce qui nous intéresse ici c’est la production des\ntableaux. Le premier, tableauA, est instancié comme suit :\n$tableauA = new Tableau (2 , array (\"border\"=>2)) ;\n$tableauA −>setAfficheEntete(1, FALSE );\nOn indique donc qu’il s’agit d’un tableau à deux dimensions, avec une bordure\nde 2 pixels. On peut noter la pratique consistant à passer un nombre variable de\nparamètres (ici des attributs HTML) sous la forme d’un tableau PHP . La seconde\ninstruction supprime l’afﬁchage des en-têtes de la dimension 1.\nEnsuite, à chaque fois que la boucle sur le résultat de la requête renvoie un objet\nbo, on insère des valeurs avec la méthode ajoutValeur(). Rappelons que cette\nfonction déﬁnit la valeur de M[c 1,c2]oùc1(respectivement c2) est la clé désignant\nla ligne (respectivement la colonne) de la cellule.\n3.2 La classe Tableau\n 147\n$i ++;\n$tableauA −>ajoutValeur($i , \"Film\" , $bo −>titre );\n$tableauA −>ajoutValeur($i , \"Ville\" , $bo −>ville);\n$tableauA −>ajoutValeur($i , \"Semaine\" , $bo −>semaine) ;\n$tableauA −>ajoutValeur($i , \"N b entrées\" , $bo −>nb_entrees) ;\nIci la clé de la dimension 1 (les lignes) est basée sur un compteur incrémenté à\nchaque passage dans la boucle, et la clé de la dimension 2 (les colonnes) est un texte\nqui servira également d’en-tête (voir ﬁgure 3.3).\nPour le second tableau, tableauB, on applique les mêmes principes. L’instancia-\ntion est identique. On appelle deux méthodes qui ﬁxent le libellé du coin supérieur\ngauche, et une couleur de fond pour les lignes impaires.\n$tableauB −>setCoinSuperieurGauche(\"Box office \") ;\n$tableauB −>setCouleurImpaire(\" silver \") ;\nPuis, à chaque passage dans la boucle, on insère une valeur de la mesure\nnbEntr´ ees indexée par le titre du ﬁlm (dimension 1, les lignes) et par la semaine\n(dimension 2, les colonnes). De plus, au lieu de garder l’en-tête par défaut pour lescolonnes (le numéro de la semaine), on le déﬁnit avec la méthode ajoutEntete()\ncomme étant la concaténation de la chaîne \"Semaine \" et du numéro de semaine.\n$tableauB −>ajoutEntete(2, $bo −>semaine , \"Semaine \" . $bo −>semaine) ;\n$tableauB −>ajoutValeur($bo −>titre , $bo −>semaine , $bo −>nbEntrees) ;\nIl n’y a rien de plus à faire. L’appel de la méthode tableauHTML() renvoie une\nchaîne qui peut être placée dans un document HTML. Bien entendu on pourraitaméliorer la présentation, par exemple en cadrant à droite les colonnes contenantdes nombres. C’est possible – et facile- - en ajoutant des méthodes appropriées à laclasse Tableau. Ce type d’extension est très utile à réaliser pour bien comprendre\ncomment fonctionne une classe.\nCet exemple montre comment la programmation objet permet de s’affranchir de\ndétails de bas niveau comme, ici, les balises HTML à utiliser en ouverture et enfermeture ou l’ordre de création des cellules. On se contente de déclarer le contenudu tableau et l’objet se charge de fournir une chaîne de caractères contenant sadescription HTML. Cette chaîne peut alors être utilisée par l’application comme bon\nlui semble. On pourrait par exemple la placer dans une cellule d’un autre tableau pour\nobtenir très facilement des imbrications. Ce qui compte, pour bien utiliser la classe,c’est d’une part de comprendre la modélisation (et donc ce qu’est conceptuellementun objet tableau), et d’autre part de connaître les modes de contrôle et d’interactionavec l’objet.\n148\n Chapitre 3. Programmation objet\n3.2.3 Implantation\nIl reste à regarder le code de la classe pour voir comment les différentes méthodes\nsont implantées. Rappelons que la consultation du code est inutile si on souhaite\nseulement utiliser la classe. D’ailleurs dans des langages compilés comme C++ et Java,\nle code n’est pas disponible ; seules les spéciﬁcations de l’interface sont fournies auxutilisateurs.\nLe code de la classe tableau est bien entendu disponible sur le site de ce livre.\nNous allons présenter les parties les plus importantes, en les commentant à chaquefois. Pour commencer, on trouve les propriétés, toutes privées.\nclass Tableau\n{\n//−−−− Partie privée : les constantes et les variables\nprivate $nb_dimensions ;\n// Tableau des valeurs à afficher\nprivate $tableau_valeurs ;\n// Tableaux des en −têtes\nprivate $entetes , $options_lig , $options_col ;\n// Options de présentation pour la table . A compléter.\nprivate $options_tables , $couleur_paire , $couleur_impaire ,\n$csg , $affiche_entete , $repetition_ligne= array () ,\n$option_dim= array () ;\n// Constante pour remplir les cellules vides\nc o n s t VAL_DEFAUT= \"&n b s p ; \" ;\nOn trouve la dimension du tableau, le tableau des valeurs ( M[c 1][c2]dans la modé-\nlisation) et le tableau des en-têtes ( e[d,c]dans la modélisation). Les autres attributs\nsont tous destinés à la présentation HTML. Une nouveauté syntaxique, non rencon-\ntrée jusqu’à présent, est la déﬁnition d’une constante locale à la classe, qui peut être\nréférencée avec la syntaxe self::VAL_DEFAUT ouTableau::VAL_DEFAUT.\nLe constructeur, donné ci-dessous, effectue essentiellement des initialisations. Il\nmanque de nombreux tests pour améliorer la robustesse de la classe. Je vous inviteà y réﬂéchir et ajouter les contrôles et levées d’exceptions nécessaires (ne faudrait-il\npas par exemple s’inquiéter des valeurs possibles de la dimension ?).\nfunction __construct ($n b_dimensions=2, $tab_at trs= array ())\n{\n// Initialisation des variables privées\n$this −>tableau_valeurs = array () ;\n$this −>options_tables=$this −>couleur_paire=$this −>\ncouleur_impaire=\"\" ;\n// Initialisation de la dimension. Quelques tests s ’imposent\n// ...\n$this −>nb_dimensions=$nb_dimensions ;\n// Initialisation des tableaux d’e n −têtes pour chaque\ndimension\nfor ($dim=1; $dim <= $this −>nb_dimensions ; $dim++) {\n3.2 La classe Tableau\n 149\n$this −>entetes [$dim] = array () ;\n$this −>affiche_entete [$dim] = TRUE ;\n}\n// Attributs de la balise <table >\n$this −>ajoutAttributsTable($tab_attrs);\n}\nLes méthodes commençant setouget, traditionnelles en programmation objet,\nne servent à rien d’autre le plus souvent qu’à accéder, en écriture ou en lecture, aux\npropriétés de la classe (on parle parfois d’« accesseurs »). En voici un exemple avec laméthode setCouleurImpaire() qui affecte la couleur de fond des lignes impaires.\npublic function setCouleurImpaire($couleur) {\n$this −>couleurImpaire = $couleur ;\n}\nBien entendu, il sufﬁrait de rendre publique la propriété couleur_impaire pour\néviter d’écrire une méthode spéciale. Les scripts pourraient alors directement lamodiﬁer. Cela rendrait malheureusement déﬁnitivement impossible toute évolutionultérieure pour contrôler la valeur affectée à couleur_impaire. Plus généralement,\nrendre publique une propriété empêche toute modiﬁcation ultérieure apportée à\nl’organisation interne d’une classe.\nREMARQUE – PHP 5 fournit des méthodes dites « magiques » pour éviter la programmation\nsystématique des accesseurs. La méthode __get(nom )est appelée chaque fois que l’on\nutilise la syntaxe $o->nom pour lireune propriété qui n’existe pas explicitement dans la\nclasse ; __set(nom, valeur )est appelée quand on utilise la même syntaxe pour faire\nune affectation. Enfin, __call(nom, params )intercepte tous les appels à une méthode\nqui n’existe pas. Des exemples de ces méthodes sont donnés page 267.\nLa méthode ajoutValeur() insère une nouvelle valeur dans une cellule dont les\ncoordonnées sont données par les deux premiers paramètres. Voici son code. Notez\nqu’on en proﬁte pour affecter une valeur par défaut (la valeur de la clé elle-même) àl’en-tête de la ligne et de la colonne correspondante. Ici encore quelques contrôles\n(par exemple sur les paramètres en entrée) seraient les bienvenus.\npublic function ajoutValeur($cle_ligne , $cle_colonne , $valeur)\n{\n// Maintenance des en −têtes\nif(! array_key_exists($cle_ligne , $this −>entetes [1]) )\n$this −>entetes [1][ $cle_ligne ] = $cle_ligne ;\nif(! array_key_exists($cle_colonne , $this −>entetes [2]) )\n$this −>entetes [2][ $cle_colonne ] = $cle_colonne ;\n// Stockage de la valeur\n$this −>tableau_valeurs [ $cle_ligne ][ $cle_colonne ] = $valeur ;\n}\nLe code donné ci-dessus fonctionne pour les tableaux à deux dimensions. Pour les\ntableaux de dimension quelconque, l’implantation est un peu plus compliquée, mais\nﬁgure dans le code fourni sur le site.\n150\n Chapitre 3. Programmation objet\nTroisième méthode importante, ajoutEntete() se contente d’affecter un texte\nà l’en-tête d’une ligne ou d’une colonne (selon la dimension passée en paramètre)\npour une valeur de clé donnée. Comme on l’a vu ci-dessus, par défaut cet en-têtesera la clé elle-même, ce qui peut convenir dans beaucoup de cas.\npublic function ajoutEntete($dimension , $cle , $texte)\n{\n// Stockage de la chaîne servant d’en −tête\n$this −>entetes [$dimension ][ $cle ] = $texte ;\n}\nIl reste ﬁnalement (en ignorant d’autres méthodes annexes que je vous laisse\nconsulter directement dans le code) la méthode produisant le tableau HTML. Par-tant de toutes les mesures reçues au fur et à mesure et stockées dans les propriétésd’un objet, cette méthode construit une chaîne de caractères contenant les balisesHTML appropriées. Le code ci-dessous est une version légèrement simpliﬁée de la\nméthode complète.\nfunction tableauHTML ()\n{\n$chaine = $ligne = \"\" ;\n// Affiche −t ’on le coin supérieur gauche?\nif($this −>affiche_entete [1]) $ligne = \"<th>$this −>csg </th>\" ;\nif(!empty ($this −>legende)) {\n$nb_cols = count ($this −>entetes [2]) ;\n$chaine = \"<tr class =’header’>\\n<th colspan=$nb_cols>\n$this −>legende\"\n.\" < / t h > \\ n < / t r > \\ n \" ;\n}\n// Création des ent −êtes de colonnes (dimension 2)\nif($this −>affiche_entete [2]) {\nforeach ($this −>entetes [2] as $cle = > $texte)\n$ligne .= \"<th>$texte </th> \\ n\" ;\n// Ligne des en −têtes .\n$chaine = \"<tr class =’header ’>$ligne </tr > \\n\" ;\n}\n$i=0;\n// Boucles imbriquées sur les deux tableaux de clés\nforeach ($this −>entetes [1] as $cle_lig = > $enteteLig) //\nLignes\n{\nif($this −>affiche_entete [1])\n$ligne = \"<th>$enteteLig </th> \\n\" ;\nelse\n$ligne = \"\" ;\n$i ++;\n3.2 La classe Tableau\n 151\nforeach ($this −>entetes [2] as $cle_col = > $enteteCol) //\nColonnes\n{\n// O n prend la valeur si elle existe , sinon le défaut\nif(isSet($ t h i s −>tableau_valeurs [ $cle_lig ][ $cle_col ])\n)\n$valeur = $this −>tableau_valeurs [$cle_lig ][$cle_col ];\nelse\n$valeur = self ::V A L _ D E F A U T;\n// O n place la valeur dans u n e cellule\n$ligne .= \"<td>$valeur </td> \\n\" ;\n}\n// Eventuellement on tient compte de la couleur\nif($i % 2 = = 0 ) {\n$options_lig = \" class=’even ’\";\nif(!empty ($this −>couleur_paire))\n$options_lig .= \" bgcolor=’$this −>couleur_paire ’ \";\n}\nelse if ($i % 2 = = 1 ) {\n$options_lig = \" class=’odd ’\";\nif(!empty ($this −>couleur_impaire))\n$options_lig = \" bgcolor=’$this −>couleur_impaire ’ \" ;\n}\nelse $options_lig = \"\";\n// Doit −on appliquer une option?\nif(isSet($ t h i s −>options [1][ $cle_lig ]))\nforeach ($this −>options [1][ $cle_lig ] as $option = >\n$valeur)\n$options_lig .= \" $option=’$valeur ’ \" ;\n$ligne = \"<tr$options_lig > \\n$ligne\\ n</tr> \\ n\";\n// Prise en compte de la demande de répétition d ’une\n// ligne\nif(isSet($ t h i s −>repetition_ligne [1][ $cle_lig ])) {\n$rligne = \"\";\nfor ($i= 0 ; $i < $this −>repetition_ligne [1][ $cle_lig ];\n$i ++)\n$rligne .= $ligne ;\n$ligne = $rligne ;\n}\n// O n ajoute la ligne à la chaîne\n$chaine .= $ligne ;\n}\n// Placement dans la balise T A B L E, et retour\nreturn \"<table $this −>options_tables > \\n$chaine </table> \\ n\" ;\n}\n152\n Chapitre 3. Programmation objet\nLe tableau associatif entetes contient toutes les clés permettant d’accéder aux\ncellules stockées dans le tableau tableau_valeurs, ainsi que les libellés associés à\nces clés et utilisés pour les en-têtes. Il sufﬁt donc d’une boucle sur chaque dimension\npour récupérer les coordonnées d’accès à la cellule, que l’on peut alors insérer dansdes balises HTML. Pour le tableau B par exemple, le contenu du tableau entetes,\ntel qu’on peut le récupérer avec la fonction PHP print_r() qui afﬁche tous les\néléments d’un tableau, est le suivant :\n•dimension 1 :Array ( [Matrix] => Matrix [Spiderman] => Spiderman )\n•dimension 2 :\nArray ( [1] => Semaine 1 [2] => Semaine 2 [3] => Semaine 3 )\nEn parcourant les clés à l’aide des boucles imbriquées de la méthode\ntableauHTML(), on obtient les paires (Matrix, 1), (Matrix, 2), (Matrix,\n3), puis (Spiderman, 1), (Spiderman, 2), (Spiderman, 3). Chaque paire\n(cl´ e1, cl´ e2) déﬁnit une entrée tableauValeurs[cle1][cle2].\n3.3 LA CLASSE FORMULAIRE\nVoici un deuxième exemple de classe « utilitaire » visant à produire du code HTMLcomplexe, en l’occurrence une classe Formulaire pour générer des formulaires\nHTML. Outre la création des champs de saisie, cette classe permet de soignerla présentation des formulaires en alignant les champs et les textes explicatifs àl’aide de tableaux HTML\n3. Comme précédemment, nous cherchons à obtenir des\nfonctionnalités puissantes par l’intermédiaire d’une interface la plus simple possible,en cachant donc au maximum la complexité du code.\n3.3.1 Conception\nComme pour la classe Tableau, il faut ﬁxer précisément le type de service qui sera\nfourni par la classe en cherchant un bon compromis entre les fonctionnalités, et lacomplexité de leur utilisation.\nLe premier rôle de la classe est de permettre la création de champs de saisie,\nconformes à la spéciﬁcation HTML, avec toutes les options possibles : taille afﬁchée,taille maximale, valeur par défaut et même contrôles Javascript. Un objet de la classedevra donc servir « d’usine » à fabriquer ces champs en utilisant des méthodes dédiéesauxquelles on passe les paramètres appropriés. De plus chaque champ doit pouvoirêtre accompagné d’un libellé indiquant sa destination. On pourra par exempledisposer d’une méthode de création d’un champ de saisie de texte :\nchampTexte (libell´ e,nomChamp, valeurD´ efaut, tailleAffich´ ee, tailleMax )\n3. Il est également possible d’obtenir cet alignement avec des feuilles de style CSS.\n3.3 La classe Formulaire\n 153\nPar ailleurs la classe Formulaire doit également fournir des fonctionnalités de\nplacement des champs et des libellés les uns par rapport aux autres, ce qui peut se\ngérer à l’aide de tableaux HTML.\nLa ﬁgure 3.4 montre les possibilités attendues, avec des traits en pointillés qui\nindiquent le tableau HTML permettant d’obtenir un alignement régulier des dif-férents composants du formulaire. La première partie présente les champs dans untableau à deux colonnes, la première correspondant aux libellés, et la seconde auxchamps quel que soit leur type : texte, mot de passe, liste déroulante, etc. Dans lecas où le champ consiste en un ensemble de choix matérialisés par des boutons (lechamp 4 dans la ﬁgure), on souhaite créer une table imbriquée associant à chaque\nbouton un sous-libellé, sur deux lignes. Ce premier type de présentation sera désigné\npar le terme Mode Table, orientation verticale .\nChoix a Choix b Choix c ...Libellé 1\nLibellé 2Libellé 3\nLibellé 4\nLibellé ValiderLibellé X Libellé Y Libellé Z ...\n... ... ...Mode Table,\nhorizontalchamp 1\nchamp 2champ 3\nchamp X champ Y champ Z\nchamp X champ Y champ ZMode Table, vertical Mode libre\nFigure 3.4 — Conception de la classe Formulaire\nL ad e u x i è m ep a r t i ed uf o r m u l a i r ed el aﬁ g u r e 3 . 4o r g a n i s el ap r é s e n t a t i o ne n\nautant de colonnes qu’il y a de champs, ces colonnes étant préﬁxées par le libellé\ndu champ. Ce mode de présentation, désigné par le terme Mode Table, orientation\nhorizontale , permet d’affecter plusieurs zones de saisie pour un même champ, une par\nligne.\nEnﬁn, le formulaire doit permettre une présentation libre – c’est-à-dire sans\nalignement à l’aide de tableau – comme le bouton de validation à la ﬁn du formulaire.\nLa classe doit proposer un ensemble de méthodes pour créer tous les types de\nchamps possibles dans un formulaire HTML, et disposer chaque champ en fonctiondu mode de présentation qui a été choisi. Cela suppose que l’objet chargé de produire\n154\n Chapitre 3. Programmation objet\nle formulaire connaisse, lors de la création du champ, le mode de présentation\ncourant.\nEn résumé il s’agit d’implanter une fois pour toutes, sous forme de classe orientée-\nobjet, les tâches courantes de production et de mise en forme de formulaire que l’ontrouve dans toutes les applications web en général, et tout particulièrement dans lesapplications s’appuyant sur une base de données.\n3.3.2 Utilisation\nCommençons par présenter l’utilisation de la classe avant d’étudier ses mécanismesinternes. La liste des méthodes publiques est donnée dans la table 3.8. Elles appar-tiennent à deux catégories :\nTableau 3.8 — Les méthodes publiques de la classe Formulaire\nMéthode\n Description\nchampTexte (libell´ e,nom,val,long ,longMax )\n C h a m pd es a i s i ed et e x t e .\nchampMotDePasse (libell´ e,nom,val,long ,longMax )\nChamp de saisie d’un mot de passe.\nchampRadio (libell´ e,nom,val,liste )\n Boutons radio\nchampListe (libell´ e,nom,val,taille ,liste )\n Boutons select\nchampFenetre (libell´ e,nom,val,ligs ,cols )\n Boutons textarea\nchampCache (nom,val )\n Champ caché.\nchampFichier (libell´ e,nom,taille )\n Champ fichier ( upload ).\nchampValider (libell´ e,nom )\n Bouton submit\ndebutTable (orientation ,attributs ,nbLignes )\n Entrée en mode table.\najoutTexte (texte )\n Ajout d’un texte libre.\nfinTable ()\n Sortie du mode table.\ngetChamp (idChamp )\n Récupération d’un champ du formu-\nlaire.\nformulaireHTML ()\n Retourne la chaîne de caractères conte-nant le formulaire HTML.\n•Production d’un champ de formulaire.\nÀ chaque type de champ correspond une méthode qui ne prend en argumentque les paramètres strictement nécessaires au type de champ souhaité. Parexemple la méthode champTexte() utilise un libellé, le nom du champ, sa\nvaleur par défaut, sa taille d’afﬁchage et la taille maximale (ce dernier para-\nmètre étant optionnel). Parmi les autres méthodes, on trouve champRadio(),\nchampListe(), champFenetre(),e t c .\nChaque méthode renvoie l’identiﬁant du champ créé. Cet identiﬁant permet\nd’accéder au champ, soit pour le récupérer et le traiter isolément (méthodegetChamp()), soit pour lui associer des contrôles Javascript ou autres.\n•Passage d’un mode de présentation à un autre.Ces méthodes permettent d’indiquer que l’on entre ou sort d’un mode Table,en horizontal ou en vertical.\n3.3 La classe Formulaire\n 155\nVoici un premier exemple illustrant la simplicité de création d’un formulaire. Il\ns’agit d’une démonstration des possibilités de la classe, sans déclenchement d’aucune\naction quand le formulaire est soumis. Nous verrons dans le chapitre 5 commentutiliser cette classe en association avec la base de données pour créer très rapidementdes interfaces de saisie et de mise à jour.\nExemple 3.9 exemples/ApplClasseFormulaire.php :Exemple démontrant les possibilités de la classe\nFormulaire.\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head><title >Création d’u n formulaire </title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<?php\nrequire_once (\" Formulaire .php\") ;\n// Instanciation du formulaire\n$form = new Formulaire (\" post \" , \"ApplClasseFormulaire .php\") ;\n// U n champ caché\n$form −>champCache (\"mode\" , \"Démonstration \") ;\n// Tableau en mode vertical , avec quelques champs\n$form −>debutTable(Formulaire ::V E R T I C A L) ;\n$form −>champTexte (\"N o m\" , \"n o m\" , \"Entrez votre n o m\" , 40) ;\n$form −>champTexte (\" Prénom \" , \"prenom \" , \" Entrez votre prénom \" , 40) ;\n/ / Un champ radio , avec la l i s t e des choix dans un tableau PHP\n$form −>champRadio (\"Sexe\" , \" sexe \" , \" M\" , array (\"M \" = > \"Masculin \" ,\n\"F\"=>\"Féminin\"));\n// U n champ select , avec la liste des choix dans un tableau P H P\n$form −>champListe (\" Justificatif \" , \" nation \" , \"cni \" , 1,\narray( \"cni\"=>\"Carte d’ identité\" ,\n\"pass\"= >\"Passeport\" ,\n\"pc\"= >\"Permis de conduire \")) ;\n/ / Un champ textar ea\n$form −>champFenetre (\" Bref C V\" , \"cv\" , \"Votre C V en quelques\nlignes\" , 4, 50);\n/ / Un champ f i c h i e r\n$form −>champFichier (\"Votre photo \" , \"photo \" , 30) ;\n/ / Fin du mode v e r t i c a l\n$form −>finTable () ;\n156\n Chapitre 3. Programmation objet\n$form −>ajoutTexte (\"<b>Vos enfants </b>\") ;\n// Tableau en mode horizontal , avec 5 lignes\n$form −> d e b u t T a b l e ( F o r m u l a i r e : : HORIZONTAL , a r r a y ( ) , 5 ) ;\n$form −>champTexte ( \"Prénom\" , \"prenom [ ] \" , \" \" , 20 , 30) ;\n$form −> c h a m p T e x t e ( \" N o m \", \" n o m [ ]\", \"\", 2 0, 3 0 );\n$form −>champTexte (\"N é en\" , \"annee_naissance [] \" , \"\" , 4) ;\n$form −>finTable () ;\n// Bouton de validation , avec placement libre\n$form −> champValider (\"Valider la saisie\" , \"valider\");\n// Affichage du formulaire\necho $form −>formulaireHTML () ;\n?>\nFigure 3.5 — Affichage du formulaire de démonstration.\nL’afﬁchage du formulaire est donné dans la ﬁgure 3.5. Quelques lignes de spé-\nciﬁcation, accompagnées du nombre strictement minimal de paramètres, sufﬁsent\npour créer ce formulaire, sans qu’il soit nécessaire d’avoir à produire explicitementla moindre balise HTML. Cet avantage est d’autant plus appréciable que le résultatcomprend une imbrication assez complexe de balises de formulaires, de tableaux, etde données provenant du script PHP , qui seraient très fastidieuses à intégrer si l’onne disposait pas de ce type d’outil automatisé.\n3.3 La classe Formulaire\n 157\n3.3.3 Implantation\nL’implantation de la classe nécessite des structures internes un peu plus sophistiquées\nque celles vues jusqu’à présent. Il s’agit en effet de décrire le contenu d’un formu-laire, sous une forme offrant le plus de souplesse possible. On doit être capable parexemple de récupérer individuellement la description HTML de l’un des champs,ou de désigner un champ auquel on souhaite associer un contrôle Javascript. Enﬁnles propriétés doivent contenir toutes les informations nécessaires pour produire la\nchaîne HTML du formulaire.\nOn va représenter ce contenu sous la forme d’une liste de composants ,àc h o i s i r\nparmi\n•un champ de saisie, accompagné de son libellé ;\n•un texte libre à insérer dans le formulaire ;\n•l’indication d’un début de tableau, accompagné des caractéristiques dutableau ;\n•l’indication d’une ﬁn de tableau.\nLa ﬁgure 3.6 montre l’organisation globale de la classe, en distinguant la partie\npublique (en haut) proposant une interface à l’utilisateur, et une partie privée\n(en bas) constituée de méthodes internes et de propriétés (essentiellement, ici, lescomposants). Le principe général est que toutes les méthodes insèrent de nouveauxcomposants, sauf formulaireHTML() qui va consulter les composants existants pour\nproduire le formulaire.\nUtilisateurInterface\ncomposants\n(1)\n(2)champINPUT()\nchampSELECT()champTEXTAREA()debutTable() champTexte() champSelect() ajoutTexte() finTable() formulaireHTML()\nchampLibelle()Partie privéePartie publique\nFigure 3.6 — Organisation de la classe Formulaire\nREMARQUE – On pourrait (devrait ...) créer une classe FormComposant pour représenter\net manipuler ces composants. En programmation objet, tout concept doit donner lieu à la\ncréation d’une classe, avec des avantages à moyen et long terme en matière d’évolutivité.\nL’inconvénient est de rendre la conception et l’organisation des classes plus ardu à maîtriser.\nC’est la raison pour laquelle nous n’allons pas plus loin, au moins dans ce chapitre.\nL’insertion d’un nouveau composant se fait directement pour le début ou la ﬁn\nd’une table, et pour l’ajout d’un texte. Pour l’ajout d’un champ accompagné de son\n158\n Chapitre 3. Programmation objet\nlibellé, on a recours à un ensemble de méthodes privées un peu plus important. Tout\nd’abord, il existe une méthode dédiée à chaque type de champ ( input, select,e t c . )\nqui se charge de construire la balise HTML correctement. Ensuite toute demandede création d’un champ passe par la méthode champLibelle() qui choisit d’abord\n(ﬂèche 1), en fonction de la demande, la méthode de création de champ spécialisée,puis crée le composant avec le champ et le libellé (ﬂèche 2).\nVoyons maintenant dans le détail le code de la classe, en commençant par les\npropriétés.\nclass Formulaire\n{\n// ---- Partie priv´ ee : les propri´ et´ es et les constantes\nconst VERTICAL = 1;\nconst HORIZONTAL = 2;\n// Propri´ et´ es de la balise <form>\nprivate $methode, $action, $nom, $transfertFichier=FALSE;\n// Propri´ et´ es de pr´ esentation\nprivate $orientation=\"\", $centre=TRUE, $classeCSS, $tableau ;\n// Propri´ et´ es stockant les composants du formulaire\nprivate $composants=array(), $nbComposants=0;\nOn trouve donc :\n•les paramètres à placer dans la balise ouvrante <form>,a v e c methode qui\npeut valoir getoupost, action, le nom du script à déclencher sur validation\ndu formulaire, transfertFichier qui indique si le formulaire permet ou non\nde transférer des ﬁchiers, et le nom du formulaire qui peut être utilisé pour les\ncontrôles Javascript ;\n•les propriétés déterminant la présentation du formulaire, avec orientation,\nqui peut être soit VERTICAL,s o i t HORIZONTAL, deux constantes locales à la\nclasse, soit la chaîne vide qui indique qu’on n’est pas en mode table. Lavariable booléenne centre indique si le formulaire doit être centré dans la\npage HTML. Enﬁn une variable tableau, correspondant à un objet de la\nclasse Tableau qui va nous aider à mettre en forme les champs ;\n•la représentation des composants : un simple tableau, et le nombre de compo-sants créés à un moment donné.\nBien entendu, comme toutes les classes objet, celle-ci ne demande qu’à être\ncomplétée. Des suggestions en ce sens sont proposées dans le polycopié d’exercices.\nConstructeur\nLe constructeur de la classe Formulaire se contente d’initialiser les attributs,\nnotamment ceux qui seront par la suite placés dans la balise ouvrante <form>.\nDeux d’entre eux sont obligatoires : la méthode employée (qui est en général post)\n3.3 La classe Formulaire\n 159\net le nom du script associé au formulaire. Les paramètres optionnels indiquent si le\nformulaire doit être centré, la classe CSS déﬁnissant la présentation (cette classen’est pas utilisée dans la version présentée ici), et le nom du formulaire.\nfunction Formulaire ($methode , $action , $centre= true ,\n$classe=\"Form\" , $nom=\"Form\" )\n{\n// Initialisation des propriétés d e l ’objet avec les\nparamètres\n$this −>methode = $methode ;\n$this −>action = $action ;\n$this −>classeCSS = $classe ;\n$this −>nom = $nom ;\n$this −>centre = $centre ;\n}\nQuelques contrôles seraient les bienvenus (sur la méthode par exemple, qui ne\npeut prendre que deux valeurs). Comme d’habitude nous les omettons pour ne passurcharger le code.\nMéthodes privées\nLa classe comprend ensuite un ensemble de méthodes privées pour produire leschamps d’un formulaire HTML. Toutes ces méthodes renvoient une chaîne decaractères contenant la balise complète, prête à insérer dans un document HTML.La méthode champINPUT(), ci-dessous, produit par exemple un champ input du\ntype demandé, avec son nom, sa valeur, le nombre de caractères du champ de saisie,\net le nombre maximal de caractères saisissables par l’utilisateur\n4.\n// Méthode pour créer un champ input général\np r i v a t e f u n c t i o n champINPUT ( $type , $nom , $val , $ t a i l l e ,\n$tailleMax)\n{\n// Attention aux problèmes d’ affichage\n$val = htmlSpecialChars($val) ;\n// Création et renvoi de la chaîne de caractères\nreturn \"<input type=’$type ’ name=\\\"$ n o m\\\" \"\n. \"value=\\\"$val\\\" size =’ $taille ’ maxlength=’$tailleMax ’/>\\n\" ;\n}\nQuand on manipulate des chaînes en y incluant des variables, attention à bien\nimaginer ce qui peut se passer si les variables contiennent des caractères gênants\ncomme « ’ ». Pour l’attribut value par exemple, on a appliqué au préalable la\nfonction htmlSpecialChars().\nLes paramètres passés aux méthodes créant des champs peuvent varier en fonction\ndu type de champ produit. Par exemple les méthodes produisant des listes de choix\n4. On peut faire déﬁler un texte dans un champ de saisie. Le nombre de caractères saisissables n’est\ndonc pas limité par la taille d’afﬁchage du champ.\n160\n Chapitre 3. Programmation objet\nprennent en argument un tableau associatif – comme $liste dans la méthode ci-\ndessous – dont la clé est la valeur de chaque choix, et l’élément le libellé associé.\n// Champ pour sélectionner dans une liste\np r i v a t e f u n c t i o n champSELECT ($nom , $ l i s t e , $defaut , $ t a i l l e\n=1)\n{\n$s = \"<select n a m e= \\ \"$ n o m\\\" size=’$taille ’> \\n\";\nwhile (list ($val , $libelle ) = each ($liste)) {\n// Attention aux problèmes d’affichage\n$val = htmlSpecialChars($val) ;\n$defaut = htmlSpecialChars($defaut) ;\nif($val != $defaut)\n$s .= \"<option value= \\ \"$val\\ \">$libelle </option> \\ n\";\nelse\n$s .= \"<option value= \\ \"$val\\\" selected=’1’>$libelle </\noption>\\n\" ;\n}\nreturn $s . \"</select > \\ n\" ;\n}\nDans la méthode ci-dessus, on crée un champ select constitué d’une liste\nd’options. Une autre méthode champBUTTONS, que nous vous laissons consulter dans\nle ﬁchier Formulaire.php , dispose tous les choix sur deux lignes, l’une avec les libellés,\nl’autre avec les boutons correspondants. Elle est utilisée pour les listes de boutons\nradio oucheckbox.\nUne méthode plus générale permet de produire la chaîne contenant un champ\nde formulaire, quel que soit son type. Comme les paramètres peuvent varier selon cetype, on utilise à cette occasion une astuce de PHP pour passer un nombre variablede paramètres. La variable $params ci-dessous est un tableau associatif dont la clé est\nle nom du paramètre, et l’élément la valeur de ce paramètre. Dans le cas d’un champtextarea par exemple, $params doit être un tableau à deux éléments, l’un indexé\nparROWS et l’autre par COLS.\n// C h a m p de formulaire\nprivate function champForm ( $type , $nom , $val , $params , $ l i s t e =\narray ())\n{\nswitch ($type)\n{\ncase \"text\": case \"password\" : case \"submit \" : case \"reset\":\ncase \"file\": case \"hidden\" :\n// Extraction des paramètres de la liste\nif( isSet ($params [ ’SIZE ’ ]) )\n$taille = $params [ \"SIZE\" ];\nelse $taille = 0;\nif( isSet ($params [ ’M A X L E N G T H’ ]) and $params [ ’M A X L E N G T H’\n]!=0)\n$tailleMax = $params [ ’ M A X L E N G T H’ ];\nelse $tailleMax = $taille ;\n3.3 La classe Formulaire\n 161\n// Appel de la méthode champInput\n$champ = $this −>champInput ($type , $nom, $val , $taille ,\n$tailleMax) ;\n// Si c’est u n transfert de fichier : s ’en souvenir\nif($type = = \"file\") $this −>transfertFichier= TRUE ;\nbreak ;\ncase \"textarea\":\n$lig = $params [ \"R O W S\" ]; $col = $params [ \"C O L S\" ];\n// Appel de la méthode champTextarea de l ’ objet courant\n$champ = $this −>champTextarea ($nom, $val , $lig , $col ) ;\nbreak ;\ncase \"select\":\n$taille = $params [ \"SIZE\" ];\n// Appel de la méthode champSelect de l ’ objet courant\n$champ = $this −>champSelect ($nom, $liste , $val , $taille )\n;\nbreak ;\ncase \"checkbox\" :\n$champ = $this −>champButtons ( $type , $nom , $ l i s t e , $val ,\n$params) ;\nbreak ;\ncase \"radio\":\n// Appel de la méthode champButtons de l ’ objet courant\n$champ = $this −>champButtons ( $type , $nom , $ l i s t e , $val ,\narray ()) ;\nbreak ;\ndefault :echo \"<b> E R R E U R: $type est un type inconnu </b>\\n\" ;\nbreak ;\n}\nreturn $champ;\n}\nQuand un bouton file est créé, on positionne la propriété\n$this->transfertFichier àtrue pour être sûr de bien produire la balise\n<form>avec les bons attributs. En fait, avec cette technique, on est assuré que\nle formulaire sera toujours correct, sans avoir à s’appuyer sur le soin apporté au\ndéveloppement par l’utilisateur de la classe.\nLa méthode champForm permet d’appeler la bonne méthode de création de\nchamp en fonction du type souhaité. La structure de test switch utilisée ci-dessus\n(voir chapitre 11) est bien adaptée au déclenchement d’une action parmi une liste\nprédéterminée en fonction d’un paramètre, ici le type du champ. L’ensemble des\ntypes de champ text, password, submit, reset, hidden etfile correspond par\nexemple à la méthode champInput.\n162\n Chapitre 3. Programmation objet\nCréation des composants\nFinalement nous disposons de tous les éléments pour commencer à construire les\ncomposants d’un formulaire. Chacune des méthodes qui suit construit un composant\net le stocke dans la propriété composants de l’objet. Voici le cas le plus simple, pour\ncommencer : l’ajout d’un composant de texte dans le formulaire.\n// Ajout d ’un texte quelconque\npublic function ajoutTexte ($texte)\n{\n// O n ajoute un élément dans le tableau $composants\n$this −>composants [ $this −>nbComposants ] = array ( \" t y p e \" => \"TEXTE \" ,\n\"texte\" = > $ tex te);\n// Renvoi de l ’identifiant de la ligne , et incrémentation\nreturn $this −>nbComposants++;\n}\nUn composant est représenté par un tableau associatif PHP comprenant toujours\nun élément type, et d’autres éléments qui dépendent du type de composant. Pour un\ntexte, on a simplement un élément texte mais nous verrons que pour un champ la\ndescription est un peu plus riche.\nLe composant est stocké dans le tableau composants, propriété de l’objet, et\nindicé par un numéro qui tient lieu d’identiﬁant pour le composant. Cet identiﬁantest renvoyé de manière à ce que l’utilisateur garde un moyen de référencer lecomposant pour, par exemple, le récupérer ou le modiﬁer par l’intermédiaire d’autresméthodes.\nLa seconde méthode (privée celle-là) construisant des composants est\nchampLibelle().\n// Création d’u n c h a m p avec s o n libellé\nprivate function champLibelle ($libelle , $ n o m, $val , $type ,\n$params= array () , $liste= array ())\n{\n// Création de la balise H T M L\n$champHTML = $ t h i s −>champForm ( $type , $nom , $val , $params ,\n$liste);\n// O n m e t le libellé e n gras\n$libelle = \"< b>$libelle </b>\";\n// Stockage du libellé et de la balise dans le contenu\n$this −>composants [ $this −>nbComposants ] = array ( \" t y p e \" => \"CHAMP\" ,\n\"libelle\" = > $ l i b e l l e,\n\"champ\" = > $ c h a m p H T M L);\n// Renvoi de l ’identifiant de la ligne , et incrémentation\nreturn $this −>nbComposants++;\n}\n3.3 La classe Formulaire\n 163\nLa méthode champLibelle() construit tout d’abord, par appel à la méthode\nchampForm(), une chaîne contenant le champ du formulaire. On dispose alors des\nvariables $champHTML et$pLibelle que l’on place simplement dans le tableau\nreprésentant le composant, en indiquant que le type de ce dernier est CHAMP.\nLe troisième type de composant à créer indique le début d’un tableau permettant\nd’afﬁcher les champs de manière ordonnée.\n// Début d ’une table , mode horizontal ou v e r t i c a l\npublic function debutTable ( $orientation=Formulaire ::V E R T I C A L,\n$attributs= array () , $nbLignes=1)\n{\n// O n instancie u n objet pour créer ce tableau H T M L\n$tableau = new Tableau (2, $attributs ) ;\n// Jamais d’affichage de l ’e n −tête des lignes\n$tableau −>setAfficheEntete (1, FALSE );\n// Action selon l ’orientation du tableau\nif( $ o r i e n t a t i o n == F o r m u l a i r e : : HORIZONTAL)\n$tableau −>setRepetitionLigne (1, \"ligne\" , $nbLignes);\nelse // Pas d’affichage non plus de l ’e n −tête des colonnes\n$tableau −>setAfficheEntete (2, FALSE );\n// O n crée un composant dans lequel on place le tableau\n$this −>composants [ $this −>nbComposants ] =\narray ( \" t y p e \" => \"DEBUTTABLE\" ,\n\"orientation\"= > $orientation ,\n\"tableau\"= > $tableau);\n// Renvoi de l ’ identifiant de la ligne et incrémentation\nreturn $this −>nbComposants++;\n}\nLa présentation basée sur un tableau est, bien entendu, déléguée à un objet\nde la classe Tableau (voir section précédente) spécialisé dans ce type de tâche.\nOn instancie donc un objet de cette classe quand on sait qu’il faudra produire un\ntableau, et on le conﬁgure selon les besoins de mise en forme du formulaire (revoirsi nécessaire la ﬁgure 3.4, page 153, pour la conception de la classe et les règles deprésentation). Ici :\n1. quelle que soit l’orientation, horizontale ou verticale, on n’utilise jamais d’en-\ntête pour les lignes ;\n2. en afﬁchage horizontal, on répète nfois la ligne contenant les différents\nchamps en appelant la méthode repetitionLigne() de la classe Tableau (non\nprésentée précédemment, mais consultable dans le code) ;\n3. en afﬁchage vertical, on n’afﬁche pas non plus d’en-tête pour les colonnes.\nUne fois conﬁguré, l’objet tableau est inséré, avec l’orientation choisie, dans\nle composant de type DEBUTTABLE. L’objet sera utilisé dès que l’on demandera la\nproduction du formulaire avec la méthode formulaireHTML().\n164\n Chapitre 3. Programmation objet\nEnﬁn, voici la dernière méthode créant un composant marquant la ﬁn d’une\nprésentation basée sur un tableau HTML.\npublic function finTable ()\n{\n// Insertion d’une ligne marquant la fin de la table\n$this −>composants [ $this −>nbComposants++] = array (\"type\"= >\"\nFINTABLE\" ) ;\n}\nMéthodes publiques de création de champs\nNous en arrivons à la partie publique de la classe correspondant à la création de\nchamps. À titre d’exemple, voici trois de ces méthodes.\npublic function champTexte( $libelle , $nom, $val , $taille ,\n$tailleMax=0)\n{\nreturn $this −>champLibelle($libelle , $ n o m, $val ,\n\"text\", array ( \"SIZE\"=>$taille ,\n\" M A X L E N G T H \"= >$tailleMax)) ;\n}\npublic function champRadio( $libelle , $nom, $val , $l is t e )\n{\nreturn $this −>champLibelle($libelle , $ n o m, $val ,\n\"radio\", array () , $liste);\n}\npublic function champFenetre($libelle , $ n o m, $val , $lig , $col)\n{\nreturn $this −>champLibelle($libelle , $ n o m, $val , \"textarea\" ,\narray (\"R O W S\"=>$lig , \"C O L S\"=>$col )) ;\n}\nToutes font appel à la même méthode privée champLibelle(), et renvoient\nl’identiﬁant de champ transmis en retour par cette dernière. La méthodechampLibelle() est plus générale mais plus difﬁcile d’utilisation. Le rôle des\nméthodes publiques est véritablement de servir d’interface aux méthodes privées, ce\nqui signiﬁe d’une part restreindre le nombre et la complexité des paramètres,et d’autre part contrôler la validité des valeurs de ces paramètres avant de lestransmettre aux méthodes privées. On pourrait contrôler par exemple que lenombre de colonnes d’un champ textarea est un entier positif.\nNotez, dans l’appel à champLibelle(), le passage du cinquième paramètre sous\nforme d’un tableau associatif indiquant un des attributs de la balise HTML correspon-dante. Par exemple champTexte(), qui correspond à une balise <input> , indique\nla taille d’afﬁchage et la taille maximale de saisie en passant comme paramètrearray(\"SIZE\"=>$pTaille, \"MAXLENGTH\"=>$pTailleMax). Cette technique de\n3.3 La classe Formulaire\n 165\npassage de paramètres est un peu délicate à utiliser car il est facile d’y introduire des\nerreurs. En s’en servant uniquement dans le cadre d’une méthode privée, on limiteles inconvénients.\nProduction du formulaire\nFinalement, il reste à produire le formulaire avec la méthode formulaireHTML().\nQuand cette méthode est appelée, toute la description du contenu du formulaire est\ndisponible dans le tableau composants. Il s’agit donc essentiellement de parcourir\nces composants et de créer la présentation appropriée. On concatène alors successi-\nvement la balise d’ouverture, en faisant attention à utiliser l’attribut enctype si un\nchamp de type file a été introduit dans le formulaire, puis la chaîne de caractères\ndans laquelle on a placé tous les composants, enﬁn la balise fermante.\npublic function formulaireHTML ()\n{\n// O n place un attribut enctype si on transfère un fichier\nif($this −>transfertFichier)\n$encType = \"enctype=’ multipart /form −data ’\" ;\nelse\n$encType=\" \" ;\n$formulaire = \"\" ;\n// Maintenant , on parcourt les composants et on crée le H T M L\nforeach ($this −>composants as $idComposant => $description )\n{\n// Agissons selon le type de la ligne\nswitch ($description [\"type\"])\n{\ncase \"CHAMP\" :\n// C’ est un champ de formulaire\n$libelle = $description[ ’libelle ’ ];\n$champ = $description [ ’champ’ ];\nif($this −>orientation = = Formulaire ::V E R T I C A L)\n{\n$this −>tableau −>ajoutValeur($idComposant ,\n\" libelle \" , $libelle);\n$this −>tableau −>ajoutValeur($idComposant , \"champ\",\n$champ) ;\n}\nelse if ($this −> o r i e n t a t i o n == F o r m u l a i r e : : HORIZONTAL)\n{\n$this −>tableau −>ajoutEntete (2 , $idComposant ,\n$libelle);\n$this −>tableau −>ajoutValeur ( \" ligne \" , $idComposant ,\n$champ) ;\n}\nelse\n$formulaire .= $libelle . $champ;\nbreak ;\n166\n Chapitre 3. Programmation objet\ncase \"TEXTE \" :\n// C’est u n texte simple à insérer\n$formulaire .= $description [ ’texte ’ ];\nbreak ;\ncase \"DEBUTTABLE \" :\n// C’est le début d’un tableau H T M L\n$this −>orientation = $description [ ’ orientation ’ ];\n$this −>tableau = $description [ ’ tableau ’ ];\nbreak ;\ncase \"FINTABLE\" :\n// C’est la fin d’un tableau H T M L\n$formulaire .= $this −>tableau −>tableauHTML () ;\n$this −>orientation=\"\";\nbreak ;\ndefault :// N e devrait jamais arriver ...\necho \" <p>ERREUR CLASSE FORMULAIRE ! ! < / p> \" ;\n}\n}\n// Encadrement du formulaire par les balises\n$formulaire = \"\\ n <form method=’$this −>methode ’ \" . $encType\n.\" a c t i o n = ’ $ t h i s −>action ’ name=’$this −>nom ’ > \"\n. $formulaire . \"</form>\" ;\n// Il faut éventuellement le centrer\nif($this −>centre) $formulaire = \"<center>$formulaire\n</center > \\n\" ;;\n// O n retourne la chaîne de caractères contenant le\n// formulaire\nreturn $formulaire ;\n}\nEssentiellement le code consiste à parcourir les composants et à agir en fonction\nde leur type. Passons sur l’ajout de texte et regardons ce qui se passe quand on\nrencontre un composant de début ou de ﬁn de tableau. Dans le premier cas (débutde tableau), on récupère dans le composant courant l’objet de la classe tableau\ninstancié au moment de l’appel à la méthode debutTable() avec les paramètres\nappropriés. On place ce tableau dans la propriété tableau de l’objet, et on indique\nqu’on passe en mode table en affectant la valeur de la propriété orientation.À\npartir de là, cet objet devient disponible pour créer la mise en page des champsrencontrés ensuite.\nDans le second cas (ﬁn de tableau), on vient de passer sur toutes les informations\nà placer dans le tableau et on peut donc produire la représentation HTML de cedernier avec tableauHTML(), la concaténer au formulaire, et annuler le mode tableau\nen affectant la chaîne nullle à orientation.\n3.4 La classe IhmBD\n 167\nC’est donc l’objet tableau qui se charge entièrement de la mise en forme des\nlignes et colonnes permettant d’aligner proprement les champs du formulaire. Bien\nentendu, il faut entre les composants de début et de ﬁn de table alimenter le tableauavec ces champs : c’est ce que fait la partie traitant les composants de type CHAMP.\nIl sufﬁt d’appeler la méthode ajoutValeur() de la classe Tableau en fonction de\nl’orientation souhaitée.\n•En mode Table, vertical, les libellés sont dans la première colonne et leschamps dans la seconde. On indexe les lignes par l’identiﬁant du composant,la première colonne par ’ libelle’ et la seconde par ’ champ’.\n•En mode Table, horizontal, les libellés sont dans les en-têtes de colonne,chaque champ forme une colonne. On indexe donc chaque colonne parl’identiﬁant du composant, et l’unique ligne par ligne. Notez qu’on a indiqué,\nau moment de l’instanciation du tableau, que cette ligne devait être répétéeplusieurs fois.\nEnﬁn, en mode libre ( orientation est vide), on écrit simplement le libellé suivi\ndu champ.\nEn résumé, la classe Formulaire se limite, du point de vue de l’application, à\nl’ensemble des méthodes présentées dans le tableau 3.8, page 154. En ce qui concernela partie privée de la classe, si elle est bien conçue, il n’y aura plus à y revenirque ponctuellement pour quelques améliorations, comme par exemple ajouter desattributs HTML, gérer des classes CSS de présentation, introduire un système decontrôles JavaScript, etc. L’utilisation des objets produits par la classe est beaucoupplus simple que son implantation qui montre un exemple assez évolué de gestioninterne d’une structure complexe, pilotée par une interface simple.\n3.4 LA CLASSE IHMBD\nNous allons conclure par un dernier exemple de classe très représentatif d’un aspectimportant de la programmation objet, à savoir la capacité d’allier une réalisationgénérique (c’est-à-dire adaptée à toutes les situations) de tâches répétitives, et l’adap-\ntation (voire le remplacement complet) de cette réalisation pour résoudre des casparticuliers. Le cas d’école considéré ici est celui des opérations effectuées avec PHPsur les tables d’une base de données. Les quelques chapitres qui précèdent ont montréque ces opérations sont souvent identiques dans leurs principes, mais varient dans ledétail en fonction :\n•de la structure particulière de la table ;\n•de règles de gestion spéciﬁques comme, par exemple, la restriction à la listedes valeurs autorisées pour un attribut.\nLes règles de gestion sont trop hétéroclites pour qu’on puisse les pré-réaliser\nsimplement et en toute généralité. Leur codage au cas par cas semble inévitable.En revanche la structure de la table est connue et il est tout à fait envisageabled’automatiser les opérations courantes qui s’appuient sur cette structure, à savoir :\n1. la recherche d’une ligne de la table par sa clé ;\n168\n Chapitre 3. Programmation objet\n2. la représentation de la table par un tableau HTML ;\n3. la production d’un formulaire de saisie ou de mise à jour ;4. des contrôles, avant toute mise à jour, sur le type ou la longueur des données\nà insérer ;\n5. enﬁn la production d’une interface de consultation, saisie ou mise à jour\nsemblable à celle que nous avons étudiée page 78.\nLa classe IhmBD (pour « Interface homme-machine et Bases de Données ») est\nune implantation de toutes ces fonctionnalités. Elle permet d’obtenir sans aucun\neffort, par simple instanciation d’un objet suivi d’un appel de méthode, une inter-face complète sur une table de la base. Bien entendu, cette interface peut s’avérerinsatisfaisante du point de vue de l’ergonomie, de la présentation, ou du respect desrègles particulières de gestion pour une table donnée. Dans ce cas on peut soit utilisercertaines méthodes pour régler des choix de présentation, soit déﬁnir une sous-classe\nspécialisée. Tous ces aspects sont développés dans ce qui suit.\nCette classe est un bon exemple du processus d’abstraction mis en œuvre cou-\nramment en programmation objet, et visant à spéciﬁer de manière générale un com-\nportement commun à de nombreuses situations (ici l’interaction avec une base dedonnées). Le bénéﬁce de ce type de démarche est double. En premier lieu on obtient\ndes outils pré-déﬁnis qui réduisent considérablement la réalisation d’applications. En\nsecond lieu on normalise l’implantation en décrivant à l’avance toutes les méthodesà fournir pour résoudre un problème donné. Tout cela aboutit à une économieimportante d’efforts en développement et en maintenance. Dernier avantage : ladescription de la classe va nous permettre de récapituler tout ce que nous avons vusur les techniques d’accès à MySQL (ou plus généralement à une base de données)avec PHP .\n3.4.1 Utilisation\nDans sa version la plus simple, l’utilisation de la classe est élémentaire : on instancieun objet en indiquant sur quelle table on veut construire l’interface, on indique\nquelques attributs de présentation, et on appelle la méthode genererIHM() .L e s\nquelques lignes de code qui suivent, appliquées à la table Carte qui a déjà servi pour\nla mini-application « Prise de commandes au restaurant » (voir page 99), sufﬁsent.\nExemple 3.10 exemples/ApplClasseIhmBD.php :Application de la classe ImhBD.\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head><title >Création d’u n formulaire </title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n3.4 La classe IhmBD\n 169\n<body>\n<?php\nrequire_once (\"B D M y S Q L.php\") ;\nrequire_once (\"I h m B D.php\") ;\nrequire (\" Normalisation .php\") ;\nrequire (\" Connect . php \") ;\n// Normalisation des entrées H T T P\nNormalisation () ;\ntry {\n/ / Connexion à la base\n$bd = new BDMySQL (N O M , PASSE, BASE, SERVEUR) ;\n// Creation de l ’ interface sur la table Carte\n$ihm = new IhmBD ( \" Carte \" , $bd ) ;\n// Les e n −têtes (pas obligatoire : le n o m d u c h a m p sert d’e n −\n// tête sinon)\n$ihm −>setEntete(\"id_choix\" , \"N u m é r o du plat\");\n$ihm −>setEntete(\"libelle\" , \"Libellé d u plat\");\n$ihm −>setEntete(\"type\" , \"Type du plat\");\n// Génération de l ’ interface\necho $ihm −>genererIHM($_REQUEST) ;\n}\ncatch (Exception $exc) {\necho \"<b>Erreur rencontrée:</b> \" . $exc −>getMessage () . \"\\n\" ;\n}\n?>\nBien entendu on réutilise la classe BDMySQL qui fournit tous les services néces-\nsaires pour accéder à la base, de même que la classe Tableau nous servira pour\nles tableaux et la classe Formulaire pour les formulaires. Notez que l’utilisation\nd’une classe normalisée pour accéder à la base de données signiﬁe que tout ce qui\nest décrit ci-dessous fonctionne également avec un SGBD autre que MySQL, en\ninstanciant simplement un objet bdservant d’interface avec ce SGBD et conforme\naux spéciﬁcations de la classe abstraite BD(voir page 130). La ﬁgure 3.7 montre\nl’afﬁchage obtenu avec le script précédent. Il s’agit de bien plus qu’un afﬁchage\nd’ailleurs : on peut insérer de nouvelles lignes, ou choisir de modiﬁer l’une des lignesexistantes à l’aide du formulaire. L’ajout de la fonction de destruction est, comme uncertain nombre d’autres fonctionnalités, laissée en exercice au lecteur.\nOn obtient donc un outil en partie semblable à ce qu’offre phpMyAdmin.L a\nstructure de la table est récupérée de MySQL (ou de tout autre SGBD) et utiliséepour produire le formulaire, le tableau, les contrôles, etc. Bien entendu phpMyAdmin\npropose beaucoup plus de choses, mais il existe une différence de nature avec la classeIhmBD. Alors que phpMyAdmin est un outil intégré, nos objets fournissent des briques\n170\n Chapitre 3. Programmation objet\nFigure 3.7 — Affichage de l’interface sur la table Carte .\nlogicielles qui peuvent être intégrées dans toute application utilisant les méthodes\npubliques énumérées dans la table 3.9. Elles constituent une panoplie des accès àune table, à l’exception de l’ouverture d’un curseur pour accéder à un sous-ensembledes lignes.\nTableau 3.9 — Les méthodes publiques de la classe IhmBD\nMéthode\n Description\nformulaire (action ,ligne )\n Renvoie un formulaire en saisie ou en mise à jour\nsur une ligne.\ninsertion (ligne )\n Insère d’une ligne.\nmaj(ligne )\n Met à jour d’une ligne.\ntableau (attributs )\n Renvoie un tableau HTML avec le contenu de la\ntable.\nsetEntete (nomAttribut ,valeur )\nAffecte un en-tête descriptif à un attribut.\nchercheLigne (ligne ,format )\n Renvoie une ligne recherchée par sa clé, au format\ntableau associatif ou objet.\ngenererIHM (paramsHTTP )\n Produit une interface de consultation/mise à jour,basée sur les interactions HTTP.\nREMARQUE – Ce besoin de disposer d’outils génériques pour manipuler les données d’une\nbase relationnelle à partir d’un langage de programmation, sans avoir à toujours effectuer\nrépétitivement les mêmes tâches, est tellement répandu qu’il a été « normalisé » sous le nom\nd’Object-Relational Mapping (ORM) et intégré aux frameworks de développement tel que celui\n3.4 La classe IhmBD\n 171\nprésenté dans le chapitre 9. La classe hmBD est cependant légèrement différente puisqu’elle\npermet de générer des séquences de consultation/saisie/mise à jour, ce que les outils d’ORM\nne font généralement pas.\nCes méthodes peuvent être utilisées individuellement ou par l’intermédiaire\ndes interactions déﬁnies dans la méthode genererIHM() . Elles peuvent aussi être\nrédéﬁnies ou spécialisées. On aimerait bien par exemple disposer d’une liste dérou-\nlante pour le type de plat dans le formulaire de la table Carte. Il sufﬁt alors de\ndéﬁnir une sous-classe IhmCarte dans laquelle on ne ré-implante que la méthode\nformulaire(). Toutes les autres méthodes héritées de la super-classe, restent doncdisponibles.\n3.4.2 Implantation\nVoyons maintenant l’implantation de la classe. Tout repose sur la connaissance duschéma de la table, telle qu’elle est fournie par la méthode schemaTable de la classe\nBD. Rappelons (voir page 132) que cette méthode renvoie un tableau associatif avec,pour chaque attribut de la table, la description de ses propriétés (type, longueur,participation à une clé primaire). Ce tableau a donc deux dimensions :\n1. la première est le nom de l’attribut décrit ;\n2. la seconde est la propriété, soit type,s o i t longueur,s o i t cle_primaire,s o i t\nenﬁn not_null.\nDans l’exemple de la table Carte, on trouvera dans le tableau décrivant le\nschéma un élément [’id_choix’][’type’] avec la valeur integer,u né l é m e n t\n[’id_choix’][’cle_primaire’] avec la valeur true,e t c .\nREMARQUE – La classe ne fonctionne que pour des tables dotées d’une clé primaire,\nautrement dit d’un ou plusieurs attributs dont la valeur identifie une ligne de manière unique.\nLa présence d’une clé primaire est de toute façon indispensable : voir le chapitre 4.\nVoici le début de la classe. On énumère quelques constantes locales, puis des\npropriétés dont l’utilité sera détaillée ultérieurement, et enﬁn le constructeur de la\nclasse.\nclass I h m B D\n{\n//−−−− Partie privée : les constantes et les variables\nconst I N S _ B D = 1;\nc o n s t MAJ_BD = 2 ;c o n s t DEL_BD = 3 ;\nconst E D I T E R = 4;\nprotected $bd , $nomScript , $nomTable , $schemaTable , $entetes ;\n// Le constructeur\nfunction __construct ($nomTable , $bd , $script=\"moi\")\n{\n172\n Chapitre 3. Programmation objet\n// Initialisation des variables privées\n$this −>bd = $bd ;\n$this −>nomTable = $nomTable ;\nif($script = = \"mo i\")\n$this −>nomScript = $_SERVER [ ’ PHP_SELF ’ ] ;\nelse\n$this −>nomScript = $script ;\n// Lecture du schéma de la table\n$this −>schemaTable = $bd −>schemaTable($nomTable) ;\n// Par défaut , les textes des attributs sont leurs noms\nforeach ($this −>schemaTable as $ n o m = > $options)\n$this −>entetes [$ n o m] = $ n o m;\n}\nLe constructeur prend en entrée un nom de table, un objet de la classe BD(poten-\ntiellement également instance d’une sous-classe de BD:BDMySQL, BDPostgreSQL,\nBDSQLite, etc.) et le nom du script gérant l’interface avec la table. On com-\nmence par copier ces données dans les propriétés de l’objet pour les conserver\ndurant toute sa durée de vie5. On recherche également le schéma de la table\ngrâce à l’objet bd, et on le stocke dans la propriété schemaTable.S il at a b l e\nn’existe pas, l’objet bdlèvera en principe une exception qu’on pourrait « attraper »\nici.\nREMARQUE – On reçoit un objet, bd, passé par référence, alors que toutes les autres\nvariables sont passées par valeur (comportement adopté depuis PHP 5). On stocke également\nune référence à cet objet avec l’instruction :\n$this −>bd = $bd ;\nL’opérateur d’affectation, pour les objets, n’effectue pas une copie comme pour tous les\nautres types de données, mais une référence. La variable $this->bd et la variable $bd\nréférencent donc le même objet après l’affectation ci-dessus (voir page 61 pour la présentation\ndes références). Il s’ensuit que deux codes indépendants vont travailler sur le même objet, ce\nqui peut parfois soulever des problèmes. Le script appelant a en effet instancié $bd et peut\nà bon droit estimer que l’objet lui appartient et qu’il peut en faire ce qu’il veut. Un objet dela classe\nIhmBD a lui aussi accès à cet objet et va le conserver durant toute sa durée de vie.\nChacun peut effectuer des opérations incompatibles (par exemple fermer la connexion à labase) avec des résultats potentiellement dangereux. On pourrait effectuer une véritable copie\nde l’objet avec l’opérateur\nclone :\n$this −>bd = c l o n e $bd ;\nOn s’assure alors qu’il n’y aura pas de problème posé par le partage d’un même objet, le\nprix (modique) à payer étant l’utilisation d’un peu plus de mémoire, et une opération de\ncopie.\n5. Par défaut, on utilise le script courant, où l’objet aura été instancié, et dénoté\n$_SERVER[’PHP_SELF’].\n3.4 La classe IhmBD\n 173\nVoyons maintenant les principales méthodes de la classe IhmBD.L am é t h o d e\ncontrole() prend en entrée un tableau associatif contenant les données d’une ligne\nde la table manipulée. Elle doit être appelée avant une mise à jour. Son rôle est de\ncontrôler autant que possible que tout va bien se passer au moment de l’exécutionde la requête. Bien entendu une partie des contrôles dépend de règles spéciﬁques à latable manipulées qui ne peuvent pas être codées de manière générique, mais on peuttoujours contrôler la longueur ou le type des données en fonction du schéma de la\ntable. On peut aussi « échapper » les apostrophes avec la méthode prepareChaine()\nde la classe BD. C’est cette dernière manipulation qui est effectuée dans le code\nci-dessous, le reste étant à compléter. Comme la plupart des méthodes données par\nla suite, controle() s’appuie sur le tableau schema pour connaître le nom des attributs\nde la table et y accéder.\n// Méthode effectuant des contrôles avant mise à jour\nprotected function controle($ligne)\n{\n$lignePropre = array () ;\n// O n c o m m e n c e par traiter toutes les chaînes des attributs\nforeach ($this −>schemaTable as $ n o m = > $options) {\n// Traitement des apostrophes\n$lignePropre [$ n o m] = $this −>bd−>prepareChaine( $ligne [$nom])\n;\n}\n// O n peut , de plus , contrôler le type ou la longueur des\n// données d ’ après le schéma de la table ... A faire !\nreturn $lignePropre ;\n}\nLa méthode controle() prend un tableau en entrée, copié du script appelant vers\nl’espace des variables de la fonction, et renvoie un tableau en sortie, copié de la\nfonction vers le script appelant. Si on a peur que cela nuise aux performances, il restetoujours possible de recourir à un passage par référence.\nLa méthode formulaire() est donnée ci-dessous. Elle renvoie un formulaire adapté\nau mode de mise à jour à effectuer (insertion ou modiﬁcation, voir page 78 pour lesprincipes de création de ce type de formulaire).\n// Création d’un formulaire générique\npublic function formulaire ($action , $ligne)\n{\n// Création de l ’objet formulaire\n$form = new Formulaire (\"post\" , $this −>nomScript , false );\n$form −>champCache ( \" action \" , $action ) ;\n$form −>debutTable () ;\n// Pour chaque attribut , création d ’un champ de saisie\nforeach ($this −>schemaTable as $ n o m = > $options) {\n// D’abord vérifier que la valeur par défaut existe\n174\n Chapitre 3. Programmation objet\nif(! isSet ($ligne [$ n o m]) ) $ligne [$ n o m] = \"\" ;\n// Attention : traitement des balises H T M L avant\n// affichage\n$ligne [$ n o m] = htmlSpecialChars( $ligne [$ n o m]) ;\n// O n met la clé primaire en champ caché\nif($options [ ’ cle_primaire ’ ] and $action = = I h m B D::\nMAJ_BD) {\n$form −>champCache ($nom , $ l i g n e [ $nom ] ) ;\n}\nelse {\n// Affichage du champ\nif($options [ ’type ’ ] = = \"blob\")\n$form −>champfenetre ($this −>entetes [$ n o m] ,\n$nom , $ l i g n e [ $nom ] ,\n4, 30) ;\nelse\n$form −>champTexte ( $this −>entetes [$ n o m] ,\n$nom , $ l i g n e [ $nom ] ,\n$options [ ’longueur ’ ]) ;\n}\n}\n$form −>finTable () ;\nif($action = = I h m B D::M A J _ B D)\n$form −>champValider (\"Modifier\" , \"submit\") ;\nelse\n$form −>champValider (\"Insérer\" , \"submit\");\nreturn $form −>formulaireHTML () ;\n}\nNoter l’utilisation de la fonction htmlSpecialChars() pour traiter les données\nvenant de la base aﬁn d’éviter les inconvénients résultant de la présence de balises\nHTML dans ces données (sujet traité page 64). La méthode utilise bien entendu laclasse Formulaire pour aligner régulièrement chaque champ avec son en-tête. De\nmême, la méthode tableau() ci-dessous s’appuie sur un objet de la classe Tableau.\nLà aussi on prend soin d’appliquer htmlSpecialChars() aux données provenant\nde la base.\n// Création d’un tableau générique\npublic function tableau($attributs= array ())\n{\n// Création de l ’ objet Tableau\n$tableau = n e w Tableau(2, $attributs);\n$tableau −>setCouleurImpaire(\" silver \") ;\n$tableau −>setAfficheEntete(1, false );\n// Texte des e n −têtes\nforeach ($this −>schemaTable as $ n o m = > $options)\n$tableau −>a j o u t E n t e t e (2 , $nom , $ t h i s −>entetes [$ n o m]) ;\n3.4 La classe IhmBD\n 175\n$tableau −>ajoutEntete(2, \"action\" , \"Action\");\n// Parcours de la table\n$ r e q u e t e = \"SELECT ∗FROM $ t h i s −>nomTable\" ;\n$resultat = $this −>bd−>execRequete ( $requete ) ;\n$i=0;\nwhile ($ligne = $this −>bd−>ligneSuivante ( $resultat )) {\n$i ++;\n// Création des cellules\nforeach ($this −>schemaTable as $ n o m = > $options) {\n// Attention : traitement des balises H T M L avant affichage\n$ligne [$ n o m] = htmlSpecialChars($ligne [$ n o m]) ;\n$tableau −>ajoutValeur($i , $ n o m, $ligne [$ n o m]) ;\n}\n// Création de l ’ U R L de modification\n$urlMod = $this −>accesCle( $ligne) . \" & amp; action=\" . I h m B D::\nEDITER ;\n$modLink = \"<a href =’ $this −>nomScript?$urlMod’>modifier </a>\" ;\n$tableau −>ajoutValeur($i , \"action\" , $modLink) ;\n}\n// Retour de la chaîne contenant le tableau\nreturn $tableau −>tableauHTML () ;\n}\nJe laisse le lecteur consulter directement le code des méthodes accesCle(),\ninsertion(), maj() etchercheLigne() qui construisent simplement des requêtes\nSQL SELECT, INSERT ouUPDATE en fonction du schéma de la table et des don-\nnées passées en paramètre. La dernière méthode intéressante est genererIHM()\nqui déﬁnit les interactions avec le formulaire et le tableau. Trois actions sont pos-\nsibles :\n1. on a utilisé le formulaire pour effectuer une insertion : dans ce cas on exécute\nla méthode insertion() avec les données reçues par HTTP ;\n2. on a utilisé le formulaire pour effectuer une mise à jour : dans ce cas on exécute\nla méthode maj() ;\n3. on a utilisé l’ancre modiﬁer du tableau pour éditer une ligne et la modiﬁer :\ndans ce cas on appelle le formulaire en mise à jour.\nSi le formulaire n’est pas utilisé en mise à jour, on l’afﬁche en mode insertion.\nDans tous les cas, on afﬁche le tableau contenant les lignes, ce qui donne le codesuivant :\n176\n Chapitre 3. Programmation objet\npublic function genererIHM ($para msHTTP)\n{\n// A −t ’on demandé une action?\nif( i s S e t ($paramsHTTP [ ’ action ’ ] ) )\n$action = $paramsHTTP [ ’ action ’ ] ;\nelse\n$action = \"\" ;\n$affichage = \"\";\nswitch ($action) {\ncase IhmBD : : INS_BD :\n// O n a demandé une insertion\n$this −>i n s e r t i o n ($paramsHTTP) ;\n$affichage .= \"<i>Insertion effectuée .</i>\";\nbreak ;\ncase IhmBD : : MAJ_BD :\n// O n a demandé une modification\n$this −>maj ($paramsHTTP) ;\n$affichage .= \"<i>Mise à jour effectuée .</i>\";\nbreak ;\ncase IhmBD : : EDITER :\n// O n a demandé l ’accès à une ligne en mise à jour\n$ligne = $this −>chercheLigne ($paramsHTTP) ;\n$affichage .= $this −>formulaire(I h m B D::M A J _ B D, $ligne);\nbreak ;\n}\n// Affichage du formulaire en insertion si on n’a pas édité\n// en mise à jour\nif( $ a c t i o n != IhmBD : : EDITER) {\n$affichage .= \"< h 2>Saisie </h 2>\";$affichage .= $this −>formulaire(I h m B D::I N S _ B D, array ()) ;\n}\n// O n met toujours le tableau du contenu de la table\n$affichage .= \"< h 2>Contenu de la table <i>$this −>nomTable </ i >\n</h2>\"\n.$ t h i s −>tableau( array (\"border\" = > 2)) ;\n// Retour de la page H T M L\nreturn $affichage ;\n}\nCette classe fournit ainsi une version « par défaut » des fonctionnalités d’accès à\nune table, version qui peut sufﬁre pour élaborer rapidement une interface. Pour des\nbesoins plus sophistiqués, il est possible de spécialiser cette classe pour l’adapter auxcontraintes et règles de manipulation d’une table particulière. Le chapitre 5 donneun exemple complet d’une telle spécialisation (voir page 267). À titre de mise enbouche, voici la sous-classe IhmCarte qui surcharge la méthode formulaire() pour\nprésenter les types de plat sous la forme d’une liste déroulante.\n3.4 La classe IhmBD\n 177\nExemple 3.11 exemples/IhmCarte.php :La sous-classe IhmCarte\n<?\nrequire_once(\"I h m B D. class .php\") ;\n// Classe étendant I h m B D, spécialisée pour la table Carte\nclass IhmCarte extends I h m B D\n{\n// L a carte est caractérisée par les types de plats autorisés\nprivate $typesAutorises = array (\"EntrÈe\" = > \"EntrÈe\" ,\n\"Plat\" = > \"Plat\" ,\n\"Dessert\" = > \"Dessert\");\n// Le constructeur de la classe . Attention à bien penser// à appeler le constructeur de la super −classe .\nfunction __construct($nomTable , $bd , $script=\"moi\")\n{\n// Appel du constructeur de I h m B D\nparent :: __construct($nomTable , $bd , $script ) ;\n// O n peut placer les entÍtes dËs maintenant\n$this −>e n t e t e s [ ’ id_choix ’ ] = \"NumÈro du p l a t \" ;\n$this −>entetes [ ’ libelle ’] = \"LibellÈ du plat\";\n$this −>entetes [ ’type ’] = \"Type du plat\";\n}\n/∗ ∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗ Partie publique ∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗ ∗ /\n// Redéfinition du formulaire\npublic function formulaire ($action , $ligne)\n{\n// Création de l ’objet formulaire\n$form = new Formulaire (\" get \" , $this −>nomScript , false );\n$form −>champCache ( \" action \" , $action ) ;\n$form −>debutTable () ;\n// En mise à jour , la clé est cachée , sinon elle est\nsaisissable\nif($action = = I h m B D::M A J _ B D)\n$form −> champCache (\"id_choix \" , $ligne [ ’ id_choix ’ ]) ;\nelse\n$form −>champTexte ( $this −>entetes [ ’ id_choix ’ ] , ’ id_choix ’ , \"\" ,\n4) ;\n// Vérifier que la valeur par défaut existe\nif(!isSet($ligne[ ’ libelle ’])) $ligne[ ’libelle ’] = \"\";\nif(! isSet ($ligne [ ’type ’ ]) ) $ligne [ ’type ’ ] = \"Entrée\" ;\n$form −>champTexte ( $this −>entetes[ ’ libelle ’] , \"libelle\" ,\n178\n Chapitre 3. Programmation objet\n$ligne [ ’ libelle ’ ] , 30);\n$form −>champListe ( $this −>entetes [ ’type ’ ] , \"type\" ,\n$ligne [ ’type ’ ] , 1,\n$this −>typesAutorises);\n$form −>finTable () ;\nif($action = = I h m B D::M A J _ B D)\n$form −>champValider (\"Modifier\" , \"submit\") ;\nelse\n$form −>champValider (\"Insérer\" , \"submit\");\nreturn $form −>formulaireHTML () ;\n}\n}\n?>\nSeules deux méthodes sont surchargées : le constructeur et le formulaire. Pour le\nconstructeur, notez que l’on combine un appel au constructeur de la classe générique\navec parent::__construct et l’ajout de quelques initialisations. Quand on mani-\npulera un objet de la classe IhmCarte, le constructeur et le formulaire seront ceux de\nla sous-classe, toutes les autres méthodes provenant par héritage de la super-classe.\nDEUXIÈME PARTIE\nConception\net création d’un site\nÀ partir d’ici nous commençons la conception et la réalisation du site W EBSCOPE ,\nune application complète de gestion d’une base de ﬁlms et d’appréciations sur\nces ﬁlms. Comme pour les exemples, récupérez le code sur le site du livre etdécompressez-le dans htdocs . La structure des répertoires est plus complexe que celle\nutilisée jusqu’à présent. Pour vous aider à retrouver les ﬁchiers, les exemples dulivre donnent leur nom en le préﬁxant par le chemin d’accès à partir de la racinewebscope.\nVous trouverez dans le répertoire W\nEBSCOPE un ﬁchier LISEZ_MOI qui indique\ncomment installer l’application, créer la base et l’initialiser avec un ensemble deﬁlms et d’artistes.\n\nCréation d’une base MySQL4\nCe chapitre présente le processus de conception et de déﬁnition du schéma d’une base\nMySQL. Le schéma correspond à tout ce qui relève de la description de la base. Il\ndéﬁnit la forme de la base, ainsi que les contraintes que doit respecter son contenu.\nLa conception d’un schéma correct est essentielle pour le développement d’une\napplication viable. Dans la mesure où la base de données est le fondement de tout le\nsystème, une erreur pendant sa conception est difﬁcilement récupérable par la suite.\nNous décrivons dans ce chapitre les principes essentiels, en mettant l’accent sur lespièges à éviter, ainsi que sur la méthode permettant de créer une base saine.\n4.1 CONCEPTION DE LA BASE\nLa méthode généralement employée pour la conception de bases de données est deconstruire un schéma Entité/Association (E/A). Ces schémas ont pour caractéristiques\nd’être simples et sufﬁsamment puissants pour représenter des bases relationnelles. Deplus, la représentation graphique facilite considérablement la compréhension.\nLa méthode distingue les entités qui constituent la base de données, et les asso-\nciations entre ces entités. Ces concepts permettent de donner une structure à la\nbase, ce qui s’avère indispensable. Nous commençons par montrer les problèmes qui\nsurviennent si on traite une base relationnelle comme un simple ﬁchier texte, ce que\nnous avons d’ailleurs fait, à peu de choses près, jusqu’à présent.\n4.1.1 Bons et mauvais schémas\nReprenons la table FilmSimple largement utilisée dans les chapitres précédents. Voici\nune représentation de cette table, avec le petit ensemble de ﬁlms sur lequel nousavons travaillé.\n182\n Chapitre 4. Création d’une base MySQL\ntitre\n année\n nom_realisateur\n prénom_realisateur\n annéeNaiss\nAlien\n 1979\n Scott\n Ridley\n 1943\nVertigo\n 1958\n Hitchcock\n Alfred\n 1899\nPsychose\n 1960\n Hitchcock\n Alfred\n 1899\nKagemusha\n 1980\n Kurosawa\n Akira\n 1910\nVolte-face\n 1997\n Woo\n John\n 1946\nPulp Fiction\n 1995\n Tarantino\n Quentin\n 1963\nTitanic\n 1997\n Cameron\n James\n 1954\nSacrifice\n 1986\n Tarkovski\n Andrei\n 1932\nL’objectif de cette table est clair. Il s’agit de représenter des ﬁlms avec leur\nmetteur en scène. Malheureusement, même pour une information aussi simple, il\nest facile d’énumérer tout un ensemble de problèmes potentiels. Tous ou presquedécoulent d’un grave défaut de la table ci-dessus : il est possible de représenter lamême information plusieurs fois.\nAnomalies lors d’une insertion\nRien n’empêche de représenter plusieurs fois le même ﬁlm. Pire : il est possible d’in-sérer plusieurs fois le ﬁlm Vertigo en le décrivant à chaque fois de manière différente,\npar exemple en lui attribuant une fois comme réalisateur Alfred Hitchcock, puis une\nautre fois John Woo, etc.\nUne bonne question consiste d’ailleurs à se demander ce qui distingue deux ﬁlms\nl’un de l’autre, et à quel moment on peut dire que la même information a été répétée.\nPeut-il y avoir deux ﬁlms différents avec le même titre par exemple ? Si la réponse est« non », alors on devrait pouvoir assurer qu’il n’y a pas deux lignes dans la table avecla même valeur pour l’attribut titre. Si la réponse est « oui », il reste à déterminer\nquel est l’ensemble des attributs qui permet de caractériser de manière unique un\nﬁlm.\nAnomalies lors d’une modification\nLa redondance d’informations entraîne également des anomalies de mise à jour.\nSupposons que l’on modiﬁe l’année de naissance de Hitchcock pour la ligne Vertigo et\npas pour la ligne Psychose . On se retrouve alors avec des informations incohérentes.\nLes mêmes questions que précédemment se posent d’ailleurs. Jusqu’à quel point\npeut-on dire qu’il n’y a qu’un seul réalisateur nommé Hitchcock, et qu’il ne doit doncy avoir qu’une seule année de naissance pour un réalisateur de ce nom ?\nAnomalies lors d’une destruction\nOn ne peut pas supprimer un ﬁlm sans supprimer du même coup son metteur enscène. Si on souhaite, par exemple, ne plus voir le ﬁlm Titanic ﬁgurer dans la base de\ndonnées, on va effacer du même coup les informations sur James Cameron.\n4.1 Conception de la base\n 183\nLa bonne méthode\nUne bonne méthode évitant les anomalies ci-dessus consiste à ;\n1. être capable de représenter individuellement les ﬁlms et les réalisateurs, de\nmanière à ce qu’une action sur l’un n’entraîne pas systématiquement une\naction sur l’autre ;\n2. déﬁnir une méthode d’identiﬁcation d’un ﬁlm ou d’un réalisateur, qui permette\nd’assurer que la même information est représentée une seule fois ;\n3. préserver le lien entre les ﬁlms et les réalisateurs, mais sans introduire de\nredondance.\nCommençons par les deux premières étapes. On va distinguer la table des ﬁlms\net la table des réalisateurs. Ensuite, on décide que deux ﬁlms ne peuvent avoir lemême titre, mais que deux réalisateurs peuvent avoir le même nom. Aﬁn d’avoir unmoyen d’identiﬁer les réalisateurs, on va leur attribuer un numéro, désigné par id.\nOn obtient le résultat suivant, les identiﬁants (ou clés) étant en gras.\nTableau 4.1 — La table des films\ntitre\n année\nAlien\n 1979\nVertigo\n 1958\nPsychose\n 1960\nKagemusha\n 1980\nVolte-face\n 1997\nPulp Fiction\n 1995\nTitanic\n 1997\nSacrifice\n 1986\nTableau 4.2 — La table des réalisateurs\nid\n nom_realisateur\n prénom_realisateur\n année_naissance\n1\n Scott\n Ridley\n 1943\n2\n Hitchcock\n Alfred\n 1899\n3\n Kurosawa\n Akira\n 1910\n4\n Woo\n John\n 1946\n5\n Tarantino\n Quentin\n 1963\n6\n Cameron\n James\n 1954\n7\n Tarkovski\n Andrei\n 1932\nPremier progrès : il n’y a maintenant plus de redondance dans la base de données.\nLe réalisateur Hitchcock, par exemple, n’apparaît plus qu’une seule fois, ce quiélimine les anomalies de mise à jour évoquées précédemment.\nIl reste à représenter le lien entre les ﬁlms et les metteurs en scène, sans introduire\nde redondance. Maintenant que nous avons déﬁni les identiﬁants, il existe un moyensimple pour indiquer quel est le metteur en scène qui a réalisé un ﬁlm : associer\n184\n Chapitre 4. Création d’une base MySQL\nl’identiﬁant du metteur en scène au ﬁlm. On ajoute un attribut id_realisateur\ndans la table Film, et on obtient la représentation suivante.\nTableau 4.3 — La table des films\ntitre\n année\n id_realisateur\nAlien\n 1979\n 1\nVertigo\n 1958\n 2\nPsychose\n 1960\n 2\nKagemusha\n 1980\n 3\nVolte-face\n 1997\n 4\nPulp Fiction\n 1995\n 5\nTitanic\n 1997\n 6\nSacrifice\n 1986\n 7\nTableau 4.4 — La table des réalisateurs\nid\n nom_realisateur\n prénom_realisateur\n année_naissance\n1\n Scott\n Ridley\n 1943\n2\n Hitchcock\n Alfred\n 1899\n3\n Kurosawa\n Akira\n 1910\n4\n Woo\n John\n 1946\n5\n Tarantino\n Quentin\n 1963\n6\n Cameron\n James\n 1954\n7\n Tarkovski\n Andrei\n 1932\nCette représentation est correcte. La redondance est réduite au minimum puisque,\nseule la clé identiﬁant un metteur en scène a été déplacée dans une autre table (on\nparle de clé étrangère ). On peut vériﬁer que toutes les anomalies citées ont disparu.\nAnomalie d’insertion. Maintenant que l’on sait quelles sont les caractéristiques qui\nidentiﬁent un ﬁlm, il est possible de déterminer au moment d’une insertion sielle va introduire ou non une redondance. Si c’est le cas, on doit interdire cetteinsertion.\nAnomalie de mise à jour. Il n’y a plus de redondance, donc toute mise à jour affecte\nl ’ u n i q u ei n s t a n c ed el ad o n n é eàm o d i ﬁ e r .\nAnomalie de destruction. On peut détruire un ﬁlm sans affecter les informations\nsur le réalisateur.\nCe gain dans la qualité du schéma n’a pas pour contrepartie une perte d’informa-\ntion. Il est facile de voir que l’information initiale (autrement dit, avant décomposi-\ntion) peut être reconstituée intégralement. En prenant un ﬁlm, on obtient l’identité\n4.1 Conception de la base\n 185\nde son metteur en scène, et cette identité permet de trouver l’unique ligne dans la\ntable des réalisateurs qui contient toutes les informations sur ce metteur en scène.\nCe processus de reconstruction de l’information, dispersée dans plusieurs tables, peuts’exprimer avec SQL.\nLa modélisation avec un graphique Entité/Association offre une méthode simple\npour arriver au résultat ci-dessus, et ce même dans des cas beaucoup plus complexes.\n4.1.2 Principes généraux\nUn schéma E/A décrit l’application visée, c’est-à-dire une abstraction d’un domaine\nd’étude, pertinente relativement aux objectifs visés. Rappelons qu’une abstractionconsiste à choisir certains aspects de la réalité perçue (et donc à éliminer les autres).Cette sélection se fait en fonction de certains besoins qui doivent être précisément\nanalysés et déﬁnis.\nPar exemple, pour le site Films, on n’a pas besoin de stocker dans la base de\ndonnées l’intégralité des informations relatives à un internaute, ou à un ﬁlm. Seulescomptent celles qui sont importantes pour l’application. Voici le schéma décrivantla base de données du site\nFilms(ﬁgure 4.1). Sans entrer dans les détails pour l’instant,\non distingue\n1. des entités, représentées par des rectangles, ici Film,Artiste ,Internaute etPays ;\n2. des associations entre entités représentées par des liens entre ces rectangles. Ici\non a représenté par exemple le fait qu’un artiste joue dans des ﬁlms, qu’un\ninternaute notedes ﬁlms, etc.\nemailInternaute\nFilmmot de passe\nannée naissancenoteDonne une note\nannée naissanceidRéalise\nJoue\nannée\ngenrerésumé Pays\nnomlanguecodeArtiste\nnom\nid\ntitrenom\nprénom\nrôleprénom\nFigure 4.1 — S c h é m ad el ab a s ed ed o n n é e s Films\nChaque entité est caractérisée par un ensemble d’attributs, parmi lesquels un\nou plusieurs forment l’identiﬁant unique (en gras). Comme nous l’avons exposé\n186\n Chapitre 4. Création d’une base MySQL\nprécédemment, il est essentiel de dire ce qui caractérise de manière unique une\nentité, de manière à éviter la redondance d’information.\nLes associations sont caractérisées par des cardinalités . Le point noir sur le lien\nRéalise ,d uc ô t éd el ’ e n t i t éFilm , signiﬁe qu’un artiste peut réaliser plusieurs ﬁlms.\nL’absence de point noir du côté Artiste signiﬁe en revanche qu’un ﬁlm ne peut\nêtre réalisé que par un seul artiste. En revanche dans l’association Donne une note ,\nun internaute peut noter plusieurs ﬁlms, et un ﬁlm peut être noté par plusieursinternautes, ce qui justiﬁe la présence d’un\n•aux deux extrémités de l’association.\nLe choix des cardinalités est essentiel . Ce choix est parfois discutable, et constitue,\navec le choix des identiﬁants, l’aspect le plus délicat de la modélisation. Repre-nons l’exemple de l’association Réalise . En indiquant qu’un ﬁlm est réalisé par un\nseulmetteur en scène, on s’interdit les – rares – situations où un ﬁlm est réalisé\npar plusieurs personnes. Il ne sera donc pas possible de représenter dans la basede données une telle situation. Tout est ici question de choix et de compromis :est-on prêt en l’occurrence à accepter une structure plus complexe (avec un\n•de\nchaque côté) pour l’association Réalise , pour prendre en compte un nombre minime\nde cas ?\nOutre les propriétés déjà évoquées (simplicité, clarté de lecture), évidentes sur\nce schéma, on peut noter aussi que la modélisation conceptuelle est totalementindépendante de tout choix d’implantation. Le schéma de la ﬁgure 4.1 ne spéciﬁeaucun système en particulier. Il n’est pas non plus question de type ou de structurede données, d’algorithme, de langage, etc. En principe, il s’agit donc de la partiela plus stable d’une application. Le fait de se débarrasser à ce stade de la plupart\ndes considérations techniques permet de se concentrer sur l’essentiel : que veut-on\nstocker dans la base ?\nUne des principales difﬁcultés dans le maniement des schémas E/A est que la\nqualité du résultat ne peut s’évaluer que par rapport à une demande souvent ﬂoue etincomplète. Il est donc souvent difﬁcile de valider (en fonction de quels critères ?) lerésultat. Peut-on afﬁrmer par exemple que :\n1. que toutes les informations nécessaires sont représentées ?\n2. qu’un ﬁlm ne sera jamais réalisé par plus d’un artiste ?\nIl faut faire des choix, en connaissance de cause, en sachant toutefois qu’il\nest toujours possible de faire évoluer une base de données, quand cette évolutionn’implique pas de restructuration trop importante. Pour reprendre les exemples\nci-dessus, il est facile d’ajouter des informations pour décrire un ﬁlm ou un\ninternaute ; il serait beaucoup plus difﬁcile de modiﬁer la base pour qu’unﬁlm passe de un, et un seul, réalisateur, à plusieurs. Quant à changer la clé deInternaute , c’est une des évolutions les plus complexes à réaliser. Les cardinalités\net le choix des clés font vraiment partie des aspects décisifs des choix deconception.\n4.1 Conception de la base\n 187\n4.1.3 Création d’un schéma E/A\nLe modèle E/A, conçu en 1976, est à la base de la plupart des méthodes de concep-\ntion. La syntaxe employée ici est celle de la méthode OMT, transcrite pratiquement à\nl’identique dans UML. Il existe beaucoup d’autres variantes, dont celle de la méthodeMERISE principalement utilisée en France. Ces variantes sont globalement équiva-lentes. Dans tous les cas la conception repose sur deux concepts complémentaires,entité etassociation .\nEntités\nOn désigne par entité tout objet ou concept identiﬁable etpertinente pour l’application.\nComme nous l’avons vu précédemment, la notion d’identité est primordiale. C’est elle\nqui permet de distinguer les entités les unes des autres, et de dire qu’une informationest redondante ou qu’elle ne l’est pas. Il est indispensable de prévoir un moyentechnique pour pouvoir effectuer cette distinction entre entités au niveau de la basede données : on parle d’identiﬁant ou de clé. La pertinence est également essentielle :\non ne doit prendre en compte que les informations nécessaires pour satisfaire lesbesoins. Par exemple :\n1. le ﬁlm Impitoyable ;\n2. l’acteur Clint Eastwood ;\nsont des entités pour la base Films.\nLa première étape d’une conception consiste à identiﬁer les entités utiles. On\npeut souvent le faire en considérant quelques cas particuliers. La deuxième est deregrouper les entités en ensembles : en général, on ne s’intéresse pas à un individuparticulier mais à des groupes. Par exemple il est clair que les ﬁlms et les acteurs\nsont des ensembles distincts d’entités. Qu’en est-il de l’ensemble des réalisateurs et\nde l’ensemble des acteurs ? Doit-on les distinguer ou les assembler ? Il est certaine-ment préférable de les assembler, puisque des acteurs peuvent aussi être réalisateurs.Chaque ensemble est désigné par son nom.\nLes entités sont caractérisées par des propriétés : le nom, la date de naissance,\nl’adresse, etc. Ces propriétés sont dénotées attributs dans la terminologie du modèle\nE/A. Il n’est pas question de donner exhaustivement toutes les caractéristiques d’uneentité. On ne garde que celles utiles pour l’application.\nPar exemple le titre et l’année de production sont des attributs des entités de la\nclasse Film. Il est maintenant possible de décrire un peu plus précisément le contenu\nd’un ensemble d’entités par un typequi est constitué des éléments suivants :\n1. son nom (par exemple, Film);\n2. la liste de ses attributs ;\n3. l’indication du (ou des) attribut(s) permettant d’identiﬁer l’entité : ils consti-\ntuent la clé.\n188\n Chapitre 4. Création d’une base MySQL\nUn type d’entité, comprenant les éléments ci-dessus, décrit toutes les entités d’un\nmême ensemble. On représente ce type graphiquement comme sur la ﬁgure 4.2 qui\ndonne l’exemple de deux entités, Internaute etFilm.\nNom de l’entité\nCléFilm\nmot de passe\nannée de naissancenomemailInternauteAttributs\nAttributsannée\ngenrerésumétitre\nprénom\nFigure 4.2 — Représentation des entités\nChoix de l’identifiant\nDans le premier cas, on a décidé qu’un internaute était identiﬁé par son email, ce qui\nest cohérent pour une application web. Il est en fait très rare de trouver un attributd’une entité pouvant jouer le rôle d’identiﬁant. Le choix du titre pour identiﬁer unﬁlm serait par exemple beaucoup plus discutable. En ce qui concerne les artistes,acteurs ou réalisateurs, l’identiﬁcation par le nom seul paraît vraiment impossible.On pourrait penser à utiliser la paire (nom,pr´ enom), mais l’utilisation d’identiﬁants\ncomposés de plusieurs attributs, quoique possible, peut poser des problèmes de per-formance et complique les manipulations par SQL.\nDans la situation, fréquente, où on a du mal à déterminer quelle est la clé d’une\nentité, on crée un identiﬁant « abstrait » indépendant de tout autre attribut. Pour lesartistes, nous avons ajouté id, un numéro séquentiel qui sera incrémenté au fur et\nà mesure des insertions. Ce choix est souvent le meilleur, dès lors qu’un attribut nes’impose pas de manière évidente comme clé.\nAssociations\nLa représentation (et le stockage) d’entités indépendantes les unes des autres est depeu d’utilité. On va maintenant décrire les associations entre des ensembles d’entités.\nUne bonne manière de comprendre comment on doit représenter une associationentre des ensembles d’entités est de faire un graphe illustrant quelques exemples, les\nplus généraux possibles.\nPrenons le cas de l’association représentant le fait qu’un réalisateur met en scène\ndes ﬁlms. Sur le graphe de la ﬁgure 4.3 on remarque que :\n1. certains réalisateurs mettent en scène plusieurs ﬁlms ;\n2. inversement, un ﬁlm est mis en scène par au plus un réalisateur.\nLa recherche des situations les plus générales possibles vise à s’assurer que les deux\ncaractéristiques ci-dessus sont vraies dans tout les cas. Bien entendu on peut trouver\n4.1 Conception de la base\n 189\n1% des cas où un ﬁlm a plusieurs réalisateurs, mais la question se pose alors : doit-on\nmodiﬁer la structure de notre base, pour 1% des cas. Ici, on a décidé que non.\nPsychoseVertigo\nImpitoyable Alfred HitchcockClint EastwoodLes réalisateurs Les liens \"Réalise\" Les films\nFigure 4.3 — Association entre deux ensembles.\nCes caractéristiques sont essentielles dans la description d’une association. On les\nreprésente sur le schéma de la manière suivante :\n1. si une entité Apeut être liée à plusieurs entités B, on indique cette multiplicité\npar un point noir ( •) à l’extrémité du lien allant de AversB;\n2. si une entité Apeut être liée à au plus une entité B, alors on indique cette\nunicité par un trait simple à l’extrémité du lien allant de AversB;\nPour l’association entre Réalisateur etFilm, cela donne le schéma de la ﬁgure 4.4.\nCette association se lit Un réalisateur réalise un ﬁlm , mais on pourrait tout aussi bien\nutiliser la forme passive avec comme intitulé de l’association Est réalisé par et une\nlecture Un ﬁlm est réalisé par un réalisateur . Le seul critère à privilégier dans ce choix\ndes termes est la clarté de la représentation.\nFilm\nRéaliseRéalisateur\ntitre\nannéegenrerésumé année naiss.id\nprénomnom\nFigure 4.4 — Représentation de l’association.\nPrenons maintenant l’exemple de l’association (Acteur,Film) représentant le\nfait qu’un acteur joue dans un ﬁlm. Un graphe basé sur quelques exemples est donné\ndans la ﬁgure 4.5. On constate tout d’abord qu’un acteur peut jouer dans plusieursﬁlms, et que dans un ﬁlm on trouve plusieurs acteurs. Mieux : Clint Eastwood, quiapparaissait déjà en tant que metteur en scène, est maintenant également acteur, etdans le même ﬁlm.\n190\n Chapitre 4. Création d’une base MySQL\nClint EastwoodLes films Les acteurs Les liens \"Joue\"\nInspecteur HarryImpitoyableEnnemi d’état\nGene Hackman\nFigure 4.5 — Association (Acteur,Film)\nCette dernière constatation mène à la conclusion qu’il vaut mieux regrouper\nles acteurs et les réalisateurs dans un même ensemble, désigné par le terme plus\ngénéral « Artiste ». On obtient le schéma de la ﬁgure 4.6, avec les deux associations\nreprésentant les deux types de lien possible entre un artiste et un ﬁlm : il peut\njouer dans le ﬁlm, ou le réaliser. Ce « ou » n’est pas exclusif : Eastwood joue dansImpitoyable , qu’il a aussi réalisé.\nFilm\nRéalise\nJoueArtiste\nrôletitre\nannéegenrerésumé année naiss.id\nprénomnom\nFigure 4.6 — Associations entre Artiste etFilm .\nDans le cas d’associations avec des cardinalités multiples de chaque côté, certains\nattributs doivent être affectés qu’à l’association elle-même. Par exemple, l’association\nJoue a pour attribut le rôle tenu par l’acteur dans le ﬁlm (ﬁgure 4.6). Clairement, on\nne peut associer cet attribut ni à Acteur puisqu’il a autant de valeurs possibles qu’il y a\nde ﬁlms dans lesquels cet acteur a joué, ni à Film, la réciproque étant vraie également.\nSeules les associations ayant des cardinalités multiples de chaque côté peuvent porterdes attributs.\nAssociations impliquant plus de deux entités\nOn peut envisager des associations entre plus de deux entités, mais elles sont plus\ndifﬁciles à comprendre, et la signiﬁcation des cardinalités devient beaucoup plus\nambiguë.\nImaginons que l’on souhaite représenter dans la base de données les informations\nindiquant que tel ﬁlm passe dans telle salle de cinéma à tel horaire. On peut êtretenté de représenter cette information en ajoutant des entités Salle etHoraire ,e te n\ncréant une association ternaire comme celle de la ﬁgure 4.7.\n4.1 Conception de la base\n 191\nAvec un peu de réﬂexion, on décide que plusieurs ﬁlms peuvent passer au même\nhoraire (mais pas dans la même salle !), qu’un ﬁlm est vu à plusieurs horaires diffé-\nrents, et que plusieurs ﬁlms passent dans la même salle (mais pas au même horaire !).D’où les cardinalités multiples pour chaque lien. On peut affecter des attributs à cetteassociation, comme par exemple le tarif, qui dépend à la fois de l’horaire, du ﬁlm etde la salle.\nHoraire\nid\nheure début\nidnomadresseSalletarif Film\ntitre\nannéegenrerésumé\nheure fin\nFigure 4.7 — Association ternaire.\nCes associations avec plusieurs entités sont assez difﬁciles à interpréter, et elle\noffrent beaucoup de liberté sur la représentation des données, ce qui n’est pas\ntoujours souhaitable. On ne sait pas par exemple interdire que deux ﬁlms passentdans la même salle au même horaire. Le graphe de la ﬁgure 4.8 montre que cetteconﬁguration est tout à fait autorisée.\nLes salles14-16\n16-18Impitoyable\nVertigo\nSalle 1Salle 2Les horairesLes films\nFigure 4.8 — Graphe d’une association ternaire.\nLes associations autres que binaires sont donc à éviter dans la mesure du\npossible. Il est toujours possible de remplacer une telle association par une\nentité. Sur l’exemple précédent, on peut tout simplement remplacer l’association\n192\n Chapitre 4. Création d’une base MySQL\nternaire par une entité Séance, qui est liée, par des associations binaires, aux trois\nentités existantes (voir ﬁgure 4.9). Il est préférable d’avoir plus d’entités et moins\nd’associations complexes, car cela rend l’interprétation du schéma plus facile.Dans le cas de la séance, au lieu de considérer simultanément trois entités etune association, on peut prendre maintenant séparément trois paires d’entités,chaque paire étant liée par une association binaire.\nHoraire\nid\nheure début\nidSéance\ntarifFilm\ntitre\nannéegenrerésumé\nidnomadresseSalleheure fin\nFigure 4.9 — Transformation d’une association ternaire en entité.\nRécapitulatif\nEn résumé, la méthode basée sur les graphiques Entité/Association est simple et\npratique. Elle n’est malheureusement pas infaillible, et repose sur une certaine expé-rience. Le principal inconvénient est qu’il n’y a pas de règle absolue pour déterminerce qui est entité, attribut ou association, comme le montre l’exemple précédent oùune association s’est transformée en entité.\nÀ chaque moment de la conception d’une base, il faut se poser des questions\nauxquelles on répond en se basant sur quelques principes de bon sens :\n1. rester le plus simple possible ;\n2. éviter les associations compliquées ;3. ne pas représenter plusieurs fois la même chose ;4. ne pas mélanger dans une même entité des concepts différents.\nVoici quelques exemples de questions légitimes, et de réponses qui paraissent raison-\nnables.\n« Est-il préférable de représenter le metteur en scène comme un attribut de Film ou comme\nune association avec Artiste ? »\n4.2 Schéma de la base de données\n 193\nRéponse : comme une association, car on connaît alors non seulement le nom,\nmais aussi toutes les autres propriétés (prénom, année de naissance, ...). De plus,\nces informations peuvent être associées à beaucoup d’autres ﬁlms. En utilisant une\nassociation, on permet à tous ces ﬁlms de référencer le metteur en scène, en évitantla répétition de la même information à plusieurs endroits.\n« Est-il indispensable de gérer une entité Horaire ? »\nRéponse : pas forcément ! D’un côté, cela permet de normaliser les horaires.\nPlusieurs séances peuvent alors faire référence au même horaire, avec les avantagesen termes de gain de place et de cohérence cités précédemment. En revanche, onpeut considérer que cela alourdit le schéma inutilement. On peut alors envisager dedéplacer les attributs de Horaire (soit heure d´ ebut etheure fin)d a n s Séance.\n« Pourquoi ne pas mettre le nom du pays comme attribut de Film ? »\nC’est envisageable. Mais l’utilité d’associer un ﬁlm au pays qui l’a produit est\ncertainement de pouvoir faire des classements par la suite. Il s’agit d’une situationtypique où on utilise une codiﬁcation pour ranger des données par catégorie. Si on\nmet le nom du pays comme attribut, l’utilisateur peut saisir librement une chaînede caractères quelconque, et on se retrouve avec « U.S.A », «États Unis », « U.S »,etc, pour désigner les États-Unis, ce qui empêche tout regroupement par la suite. Lefait de référencer une codiﬁcation imposée, représentée dans Pays, force les valeurs\npossibles, en les normalisant.\n4 . 2 S C H É M AD EL AB A S ED ED O N N É E S\nLa création d’un schéma MySQL est simple une fois que l’on a déterminé les entitéset les associations. En pratique, on transcrit le schéma E/A en un schéma relationnelcomprenant toutes les tables de la base, en suivant quelques règles données dans cequi suit. Nous prenons bien entendu comme exemple le schéma de la base Film,t e l\nqu’il est donné dans la ﬁgure 4.1, page 185.\n4.2.1 Transcription des entités\nOn passe donc d’un modèle disposant de deux structures (entités et associations) àun modèle disposant d’une seule (tables). Logiquement, entités et associations seronttoutes deux transformées en tables. La subtilité réside dans la nécessité de préserverlesliens existants dans un schéma E/A et qui semblent manquer dans les schémas de\ntables. Dans ce dernier cas, on utilise un mécanisme de référence par valeur basé sur\nlesclésdes tables.\nLa clé d’une table est le plus petit sous-ensemble des attributs qui permet\nd’identiﬁer chaque ligne de manière unique. Nous avons omis de spéciﬁer la clé\ndans certaines tables des chapitres précédents, ce qui doit absolument être évité\n194\n Chapitre 4. Création d’une base MySQL\nquand on passe à une application sérieuse. Une table doit toujours avoir une clé. À\npartir de maintenant, nous indiquons la clé en gras.\nChaque entité du schéma E/A devient une table de même nom dans la base de\ndonnées, avec les mêmes attributs que l’entité. Étant donné le schéma E/A Films,o n\nobtient les tables suivantes :\n•Film (id , titre, année, genre, résumé)\n•Artiste ( id, nom, prénom, année_naissance)\n•Internaute ( email, nom, prénom, mot_de_passe, année_naissance)\n•Pays (code , nom, langue)\nOn a perdu pour l’instant tout lien entre les relations.\n4.2.2 Associations de un à plusieurs\nOn désigne par « associations de un à plusieurs » (que l’on abrège « associations 1\nà n ») celles qui ont une cardinalité multiple d’un seul côté. Pour une associationA−\n•B, le passage à une représentation relationnelle suit les règles suivantes :\n1. on crée les tables AetBcorrespondant aux entités ;\n2. la clé de Adevient aussi un attribut de B.\nL’idée est qu’une ligne de Bdoit référencer une (et une seule) ligne de A. Cette\nréférence peut se faire de manière unique et sufﬁsante à l’aide de l’identiﬁant. On« exporte » donc la clé de Adans B, où elle devient une clé étrangère .V o i c il es c h é m a\nobtenu pour la base Films après application de cette règle. Les clés étrangères sont en\nitaliques.\n•Film (id , titre, année, genre, résumé, id_réalisateur, code_pays)\n•Artiste ( id, nom, prénom, année_naissance)\n•Internaute ( email, nom, prénom, mot_de_passe, année_naissance)\n•Pays (code , nom, langue)\nIl n’y a pas d’obligation à donner le même nom à la clé étrangère et la clé\nprincipale (que nous appellerons clé primaire à partir de maintenant). L’attribut\nid_realisateur correspond à l’attribut idd’Artiste , mais son nom est plus représentatif\nde son rôle exact : donner, pour chaque ligne de la table Film, l’identiﬁant de l’artiste\nqui a mis en scène le ﬁlm.\nLes tables ci-dessous montrent un exemple de la représentation des associations\nentre Film etArtiste d’une part, Film etPays d’autre part (on a omis le résumé du ﬁlm).\nSi on ne peut avoir qu’un artiste dont l’ idest 2 dans la table Artiste , en revanche rien\nn’empêche cet artiste 2 de ﬁgurer plusieurs fois dans la colonne id_realisateur de la\ntable Film. On a donc bien l’équivalent de l’association un à plusieurs élaborée dans\nle schéma E/A.\n4.2 Schéma de la base de données\n 195\nTableau 4.5 —L at a b l e Film\nid\n titre\n année\n genre\n id_realisateur\n code_pays\n1\n Alien\n 1979\n Science Fiction\n 51\n US\n2\n Vertigo\n 1958\n Suspense\n 52\n US\n3\n Psychose\n 1960\n Suspense\n 52\n US\n4\n Kagemusha\n 1980\n Drame\n 53\n JP\n5\n Volte-face\n 1997\n Action\n 54\n US\n6\n Van Gogh\n 1991\n Drame\n 58\n FR\n7\n Titanic\n 1997\n Drame\n 56\n US\n8\n Sacrifice\n 1986\n Drame\n 57\n FR\nTableau 4.6 —L at a b l e Artiste\nid\n nom\n prénom\n année_naissance\n51\n Scott\n Ridley\n 1943\n52\n Hitchcock\n Alfred\n 1899\n53\n Kurosawa\n Akira\n 1910\n54\n Woo\n John\n 1946\n56\n Cameron\n James\n 1954\n57\n Tarkovski\n Andrei\n 1932\n58\n Pialat\n Maurice\n 1925\nTableau 4.7 —L at a b l e Pays\ncode\n nom\n langue\nUS\n Etats Unis\n anglais\nFR\n France\n français\nJP\n Japon\n japonais\n4.2.3 Associations de plusieurs à plusieurs\nOn désigne par « associations de plusieurs à plusieurs » (que l’on abrège en\n« associations n-m ») celles qui ont des cardinalités multiples des deux côtés.La transformation de ces associations est plus complexe que celle des associationsun à plusieurs, ce qui explique que le choix fait au moment de la conception\nsoit important. Prenons l’exemple de l’association Joue entre un artiste et un\nﬁlm. On ne peut pas associer l’identiﬁant d’un ﬁlm à l’artiste, puisqu’il peut jouer\ndans plusieurs, et réciproquement on ne peut pas associer l’identiﬁant d’un acteur\nàu nﬁ l m .\nEn présence d’une association A\n•−•B, on doit donc créer une table spéciﬁquement\ndestinée à représenter l’association elle-même, selon les règles suivantes :\n1. on crée les tables AetBpour chaque entité ;\n2. on crée une table ABpour l’association ;\n3. la clé de cette table est la paire constituée des clés des tables AetB;\n4. les attributs de l’association deviennent des attributs de AB.\nPour identiﬁer une association, on utilise donc la combinaison des clés des\ndeux entités. Si on reprend la représentation sous forme de graphe, il s’agit en fait\nd’identiﬁer le lien qui va d’une entité à une autre. Ce lien est uniquement déterminépar ses points de départ et d’arrivée, et donc par les deux clés correspondantes.\n196\n Chapitre 4. Création d’une base MySQL\nVoici le schéma obtenu après application de toutes les règles qui précèdent. On\nobtient deux nouvelles tables, Rôle etNotation , correspondant aux deux associations\nn - md us c h é m ad el aﬁ g u r e4 . 1 .\n•Film (id , titre, année, genre, résumé, id_réalisateur, code_pays)\n•Artiste ( id, nom, prénom, année_naissance)\n•Internaute ( email, nom, prénom, mot_de_passe, année_naissance)\n•Pays (code , nom, langue)\n•Rôle ( titre, id_acteur, nom_rôle)\n•Notation ( titre, email,n o t e )\nIl peut arriver que la règle d’identiﬁcation d’une association par les clés des deux\nentités soit trop contraignante quand on souhaite que deux entités puissent être\nliées plus d’une fois dans une association. Si, par exemple, on voulait autoriser uninternaute à noter un ﬁlm plus d’une fois, en distinguant les différentes notations parleur date, il faudrait, après avoir ajouté l’attribut date, identiﬁer la table Notation\npar le triplet (email, id_film, date). On obtiendrait le schéma suivant.\n•Notation ( email ,id_ﬁlm ,d a t e ,n o t e )\nIl ne s’agit que d’une généralisation de la règle pour les associations n-m. Dans\ntous les cas, la clé est un sur-ensemble des clés des entités intervenantes.\nLes tables suivantes montrent un exemple de représentation de Rôle.O np e u t\nconstater le mécanisme de référence unique obtenu grâce aux clés des relations.Chaque rôle correspond à un unique acteur et à un unique ﬁlm. De plus, on ne peutpas trouver deux fois la même paire (titre,id_acteur) dans cette table, ce qui\nn’aurait pas de sens. En revanche, un même acteur peut ﬁgurer plusieurs fois (maispas associé au même ﬁlm). Chaque ﬁlm peut lui-aussi ﬁgurer plusieurs fois (mais pasassocié au même acteur).\nTableau 4.8 —L at a b l e Film\nid\n titre\n année\n genre\n id_realisateur\n code_pays\n9\n Impitoyable\n 1992\n Western\n 100\n USA\n10\n Ennemi d’état\n 1998\n Action\n 102\n USA\nTableau 4.9 —L at a b l e Artiste\nid\n nom\n prénom\n année_naissance\n100\n Eastwood\n Clint\n 1930\n101\n Hackman\n Gene\n 1930\n102\n Scott\n Tony\n 1930\n103\n Smith\n Will\n 1968\nTableau 4.10 —L at a b l e Rôle\nid_film\n id_acteur\n rôle\n9\n 100\n William Munny\n9\n 101\n Little Bill\n10\n 101\n Bril\n10\n 103\n Robert Dean\nOn peut remarquer ﬁnalement que chaque partie de la clé de la table Rôle est\nelle-même une clé étrangère qui fait référence à une ligne dans une autre table :\n1. l’attribut id_film fait référence à une ligne de la table Film (un ﬁlm) ;\n2. l’attribut id_acteur fait référence à une ligne de la table Artiste (un acteur).\n4.3 Création de la base Films avec MySQL\n 197\nLe même principe de référencement et d’identiﬁcation des tables s’applique à la\ntable Notation dont un exemple est donné ci-dessous. Il faut bien noter que, par\nchoix de conception, on a interdit qu’un internaute puisse noter plusieurs fois le\nmême ﬁlm, de même qu’un acteur ne peut pas jouer plusieurs fois dans un mêmeﬁlm. Ces contraintes ne constituent pas des limitations, mais des décisions prisesau moment de la conception sur ce qui est autorisé, et sur ce qui ne l’est pas. Vousdevez, pour vos propres bases de données, faire vos propres choix en connaissancede cause.\nTableau 4.11 —L at a b l e Film\nid\n titre\n année\n genre\n id_realisateur\n code_pays\n1\n Alien\n 1979\n Science Fiction\n 51\n US\n2\n Vertigo\n 1958\n Suspense\n 52\n US\n3\n Psychose\n 1960\n Suspense\n 52\n US\n4\n Kagemusha\n 1980\n Drame\n 53\n JP\n5\n Volte-face\n 1997\n Action\n 54\n US\n6\n Van Gogh\n 1991\n Drame\n 58\n FR\n7\n Titanic\n 1997\n Drame\n 56\n US\n8\n Sacrifice\n 1986\n Drame\n 57\n FR\nTableau 4.12 —L at a b l e Internaute\nemail\n nom\n prénom\n année_naissance\ndoe@void.com\n Doe\n John\n 1945\nfogg@verne.fr\n Fogg\n Phileas\n 1965\nTableau 4.13 —L at a b l e Notation\nid_film\n email\n note\n1\n fogg@verne.fr\n 4\n5\n fogg@verne.fr\n 3\n1\n doe@void.com\n 5\n8\n doe@void.com\n 2\n7\n fogg@verne.fr\n 5\nLe processus de conception détaillé ci-dessus permet de décomposer toutes les\ninformations d’une base de données en plusieurs tables, dont chacune stocke un desensembles d’entités gérés par l’application. Les liens sont déﬁnis par un mécanismede référencement basé sur les clés primaires et les clés étrangères. Il est important debien comprendre ce mécanisme pour maîtriser la construction de bases de donnéesqui ne nécessiteront par de réorganisation – nécessairement douloureuse – par lasuite.\n4.3 CRÉATION DE LA BASE FILMS AVEC MySQL\nIl reste maintenant à créer cette base avec MySQL. La création d’un schémacomprend essentiellement deux parties : d’une part la description des tables et de\nleur contenu, d’autre part les contraintes qui portent sur les données de la base. La\nspéciﬁcation des contraintes est souvent placée au second plan malgré sa grandeimportance. Elle permet d’assurer, au niveau de la base des contrôles sur l’intégritédes donnés qui s’imposent à toutes les applications accédant à cette base.\n198\n Chapitre 4. Création d’une base MySQL\nLe langage utilisé est la partie de SQL qui concerne la déﬁnition des données –\nleLangage de Déﬁnition de Données ou LDD. Il existe plusieurs versions de SQL. Le\nplus ancien standard date de 1989. Il a été révisé de manière importante en 1992. La\nnorme résultant de cette révision, à laquelle se conforme MySQL, est SQL 92, SQL2ou SQL ANSI. MySQL propose des extensions à la norme, mais nous allons nousﬁxer pour but de développer un site compatible avec tous les SGBD relationnels,ce qui amène à éviter ces extensions. Une discussion consacrée à la portabilité surdifférents SGBD est proposée page 233.\n4.3.1 Tables\nLa commande principale est CREATE TABLE que nous avons déjà rencontrée. Voici\nla commande de création de la table Internaute .\nCREATE TABLE Internaute (email VARCHAR (40) NOT NULL ,\nnom VARCHAR (30) NOT NULL ,\nprenom VARCHAR (30) NOT NULL ,\nmot_de_passe VARCHAR (32) NOT NULL ,\nannee_naissance INTEGER );\nLa syntaxe se comprend aisément. La seule difﬁculté est de spéciﬁer le type de\nchaque attribut. MySQL propose un ensemble très riche de types, proche de lanorme SQL ANSI. Nous nous limiterons à un sous-ensemble, sufﬁsant pour la grandemajorité des applications, présenté dans le tableau 4.14. Entre autres bonnes raisons\nde ne pas utiliser tousles types de MySQL, cela permet de rester compatible avec les\nautres SGBD. À l’exception de TEXT, les types mentionnés dans le tableau 4.14 sont\nconnus de tous les SGBD relationnels.\nTableau 4.14 — Les principaux types de données SQL\nType\n Description\nCHAR (n)\nUne chaîne de caractères de longueur fixe égale à n.\nINTEGER\n Un entier.\nVARCHAR (n)\nUne chaîne de caractères de longueur variable d’au plus n.\nDECIMAL (m,n )\nUn numérique sur mchiffres avec ndécimales.\nDATE\n Une date, avec le jour, le mois et l’année.\nTIME\n Un horaire, avec heure, minutes et secondes.\nTEXT\n Un texte de longueur quelconque.\nLeNOT NULL dans la création de table Internaute indique que l’attribut correspon-\ndant doit toujours avoir une valeur. Une autre manière de forcer un attribut à toujours\nprendre une valeur est de spéciﬁer une valeur par défaut avec l’option DEFAULT.\nCREATE TABLE Notation (id_film INTEGER NOT NULL ,\nemail VARCHAR (40) NOT NULL ,\nnote INTEGER DEFAULT 0) ;\n4.3 Création de la base Films avec MySQL\n 199\n4.3.2 Contraintes\nLa création d’une table telle qu’on l’a vue précédemment est assez sommaire car elle\nn’indique que le contenu de la table sans spéciﬁer les contraintes que doit respecter\nce contenu. Or il y a toujours des contraintes et il est indispensable de les inclure dans\nle schéma pour assurer, dans la mesure du possible, l’intégrité de la base.\nVoici les règles – ou contraintes d’intégrité – que l’on peut demander au système de\ngarantir :\n1. un attribut doit toujours avoir une valeur ;\n2. un attribut (ou un ensemble d’attributs) constitue(nt) la clé de la table ;\n3. un attribut dans une table est lié à la clé primaire d’une autre table ( intégrité\nréférentielle) ;\n4. la valeur d’un attribut doit être unique au sein de la table ;5. un attribut ne peut prendre ses valeurs que parmi un ensemble prédéﬁni.\nLes contraintes sur les clés doivent être systématiquement spéciﬁées.\nContrainte NOT NULL\nIl peut arriver que la valeur d’un attribut soit inconnue : on dit dans ce cas qu’elle\nest « à NULL ».NULL n’est pas une valeur mais une absence de valeur ce qui est très\ndifférent d’une valeur « blanc » ou « 0 ». Conséquences :\n1. on ne peut pas faire d’opération incluant un NULL ;\n2. on ne peut pas faire de comparaison avec un NULL.\nL’option NOT NULL oblige à toujours indiquer une valeur. On peut ainsi demander\nà MySQL de garantir que tout internaute a un mot de passe.\nmot_de_passe VARCHAR(60) NOT NULL\nMySQL rejettera alors toute tentative d’insérer une ligne dans Internaute sans\ndonner de mot de passe. Si les valeurs à NULL sont autorisées, il faudra en tenir\ncompte quand on interroge la base. Cela peut compliquer les choses, voire donnerdes résultats surprenants : forcez vos attributs important à avoir une valeur.\nClés d’une table\nIl peut y avoir plusieurs clés dans une table, mais l’une d’entre elles doit être choisiecomme clé primaire . Ce choix est important : la clé primaire est la clé utilisée pour\nréférencer une ligne et une seule à partir d’autres tables. Il est donc assez délicat de laremettre en cause après coup. En revanche, les clés secondaires peuvent être crééesou supprimées beaucoup plus facilement. La clé primaire est spéciﬁée avec l’optionPRIMARY KEY.\nCREATE TABLE Internaute (email VARCHAR (40) NOT NULL ,\nnom VARCHAR (30) NOT NULL ,\n200\n Chapitre 4. Création d’une base MySQL\nprenom VARCHAR (30) NOT NULL ,\nmot_de_passe VARCHAR (32) NOT NULL ,\nannee_naissance INTEGER ,\nPRIMARY KEY (email));\nIl devrait toujours y avoir une PRIMARY KEY dans une table pour ne pas risquer\nd’insérer involontairement deux lignes strictement identiques. Une clé peut être\nconstituée de plusieurs attributs :\nCREATE TABLE Notation (id_film INTEGER NOT NULL ,\nemail VARCHAR (40) NOT NULL ,\nnote INTEGER NOT NULL ,\nPRIMARY KEY (id_film , email)) ;\nTous les attributs ﬁgurant dans une clé doivent être déclarés NOT NULL.C e l an ’ a\npas vraiment de sens en effet d’identiﬁer des lignes par des valeurs absentes. CertainsSGBD acceptent malgré tout d’indexer des valeurs nulles, mais MySQL le refuse.\nOn peut également spéciﬁer que la valeur d’un attribut est unique pour l’ensemble\nde la colonne. Cela permet d’indiquer des clés secondaires . On peut ainsi indiquer que\ndeux artistes ne peuvent avoir les mêmes nom et prénom avec l’option UNIQUE.\nCREATE TABLE Artiste (id INTEGER NOT NULL ,\nnom VARCHAR (30) NOT NULL ,\nprenom VARCHAR (30) NOT NULL ,\nannee_naissance INTEGER ,\nPRIMARY KEY (id),\nUNIQUE (nom, prenom)) ;\nIl est facile de supprimer cette contrainte de clé secondaire par la suite. Ce\nserait beaucoup plus difﬁcile si on avait utilisé la paire (nom, prenom) comme\nclé primaire, puisqu’elle serait alors utilisée pour référencer un artiste dans d’autrestables.\nL ac l éd el at a b l eArtiste est un numéro qui doit être incrémenté à chaque\ninsertion. On pourrait utiliser l’option AUTO_INCREMENT, mais elle est spéciﬁque à\nMySQL, ce qui empêcherait l’utilisation de notre application avec d’autres SGBD.Le site utilise un générateur d’identiﬁant décrit dans la section consacrée à laportabilité, page 233. Si vous ne vous souciez pas de compatibilité, l’utilisation deAUTO_INCREMENT, décrite page 72, est tout à fait appropriée.\nClés étrangères\nLa norme SQL ANSI permet d’indiquer les clés étrangères dans une table, autrementdit, quels sont les attributs qui font référence à une ligne dans une autre table. Onpeut spéciﬁer les clés étrangères avec l’option FOREIGN KEY.\nCREATE TABLE Film ( id INTEGER NOT NULL ,\ntitre VARCHAR (50) NOT NULL ,\nannee INTEGER NOT NULL ,\nid_realisateur INTEGER ,\ngenre VARCHAR (30) NOT NULL ,\n4.3 Création de la base Films avec MySQL\n 201\nresume T E X T, /∗LONG p o u r ORACLE ∗/\ncode_pays VARCHAR (4) ,\nPRIMARY KEY (id),\nFOREIGN KEY (id_realisateur) R E F E R E N C E S\nArtiste ,\nFOREIGN KEY ( c o d e _ p a y s ) REFERENCES P a y s ) ;\nLa commande\nFOREIGN KEY (id_realisateur) REFERENCES Artiste\nindique qu’id_realisateur référence la clé primaire de la table Artiste .E np r i n -\ncipe MySQL devrait vériﬁer, pour toute modiﬁcation pouvant affecter le lien entre\nles deux tables, que la valeur de id_realisateur correspond bien à une ligne\nd’Artiste. Ces modiﬁcations sont :\n1. l’insertion dans Film avec une valeur inconnue pour id_realisateur ;\n2. la destruction d’un artiste ;\n3. la modiﬁcation d’id dans Artiste ou d’id_realisateur dans Film.\nEn d’autres termes le lien entre Film etArtiste est toujours valide. Cette contrainte\nest importante pour garantir qu’il n’y a pas de fausse référence dans la base, par\nexemple qu’un ﬁlm ne fait pas référence à un artiste qui n’existe pas. Il est beaucoupplus confortable d’écrire une application par la suite quand on sait que les informa-tions sont bien là où elles doivent être.\nREMARQUE – MySQL accepte toujours la clause FOREIGN KEY , mais n’applique les\ncontraintes définies par cette clause que quand la table est créée avec le type InnoDB . InnoDB\nest un module de stockage et de gestion de transaction qui peut être utilisé optionnellement.\nPar défaut, MySQL crée des tables dont le type, MyISAM, est celui de son propre moteur de\nstockage, lequel ne reconnaît ni clés étrangères, ni transactions.\nÉnumération des valeurs possibles\nLa norme SQL ANSI comprend une option CHECK (condition ) pour exprimer des\ncontraintes portant soit sur un attribut, soit sur une ligne. La condition elle-même\npeut être toute expression suivant la clause WHERE dans une requête SQL. Les\ncontraintes les plus courantes sont celles consistant à restreindre un attribut à unensemble de valeurs, mais on peut trouver des contraintes arbitrairement complexes,faisant référence à d’autres relations.\nVoici un exemple simple qui restreindrait, en SQL ANSI, les valeurs possibles des\nattributs annee etgenre dans la table Film.\nCREATE TABLE Film ( id INTEGER NOT NULL ,\ntitre VARCHAR (50) NOT NULL ,\nannee INTEGER NOT NULL\nCHECK (annee BETWEEN 1890 AND 2100) NOT\nNULL ,\nid_realisateur INTEGER ,\n202\n Chapitre 4. Création d’une base MySQL\ngenre VARCHAR (30) NOT NULL\nCHECK (genre IN ( ’ Histoire ’ , ’Western ’ , ’\nDrame ’ ) ) ,\nresume T E X T, /∗LONG p o u r ORACLE ∗/\ncode_pays VARCHAR (4) ,\nPRIMARY KEY (id),\nFOREIGN KEY (id_realisateur) R E F E R E N C E S\nArtiste ,\nFOREIGN KEY ( c o d e _ p a y s ) REFERENCES P a y s ) ;\nComme pour les clés étrangères, MySQL accepte la clause CHECK mais ne traite\npas la contrainte qu’elle déﬁnit. Il n’est pas non plus possible d’obtenir la contrainte\ndéﬁnissant un intervalle pour les années.\nUne autre manière de déﬁnir, dans la base, l’ensemble des valeurs autorisées\npour un attribut –en d’autres termes, une codiﬁcation imposée– consiste à placer cesvaleurs dans une table et la lier à l’attribut par une contrainte de clé étrangère. C’estce que nous avons fait par exemple pour la table Pays.\nCREATE TABLE Pays (code VARCHAR (4) NOT NULL ,\nnom VARCHAR (30) DEFAULT ’ Inconnu ’ NOT NULL ,\nlangue VARCHAR (30) NOT NULL ,\nPRIMARY KEY (code));\nINSERT INTO Pays (code , n o m, langue)\nVALUES ( ’F R’ , ’France ’ , ’ Français ’);\nINSERT INTO Pays (code , n o m, langue)\nVALUES ( ’ U S A ’ ,’ E t a t sU n i s ’ ,’ A n g l a i s ’ ) ;\nINSERT INTO Pays (code , n o m, langue)\nVALUES (’ I T’, ’I t a l i e’, ’I t a l i e n’ );\n...\nComme MySQL n’associe pas de vériﬁcation automatique à la commande\nFOREIGN KEY (du moins avec le type de tables par défaut), il faut faire cette\nvériﬁcation dans l’application, et notamment, comme nous le verrons, au niveau del’interface qui permet de saisir les données.\nCréation de la base\nLe ﬁchier Films.sql donne le script complet de création de la base Films. À l’exception\ndu type TEXT pour le résumé, les commandes sont conformes au SQL ANSI.\nExemple 4.1 webscope/installation/Films.sql :Script de création de la base Films.\n/∗ Commandes de c r é a t i o n de la base Films .\nS Q L A N S I S A U F le type T E X T (remplacer par L O N G pour O R A C L E ) ∗/\nCREATE TABLE I n t e r n a u t e ( e m a i l VARCHAR ( 4 0 ) NOT NULL ,\nnom VARCHAR ( 3 0 ) NOT NULL ,\nprenom V A R C H A R (30) N O T NULL,\n4.3 Création de la base Films avec MySQL\n 203\nmot_de_passe V A R C H A R (32) N O T N U L L,\nannee_naissance I N T E G E R,\nPRIMARY KEY ( e m a i l ) ) ;\nC R E A T E T A B L E Pays (code V A R C H A R(4) N O T N U L L,\nnom VARCHAR ( 3 0 ) DEFAULT ’ I n c o n n u ’ NOT NULL ,\nl a n g u e VARCHAR ( 3 0 ) NOT NULL ,\nP R I M A R Y KEY (code)) ;\nC R E A T E T A B L E Artiste (id I N T E G E R N O T N U L L,\nnom VARCHAR ( 3 0 ) NOT NULL ,\nprenom V A R C H A R (30) N O T NULL,\nannee_naissance I N T E G E R,\nPRIMARY KEY ( i d ) ,\nUNIQUE ( nom , p r e n o m ) ) ;\nCREATE TABLE F i l m ( i d INTEGER NOT NULL,\ntitre V A R C H A R (50) N O T N U L L ,\nannee INTEGER NOT NULL,\nid_realisateur I N T E G E R,\ngenre V A R C H A R (30) N O T N U L L,\nresume T E X T, /∗LONG p o u r ORACLE ∗/\ncode_pays V A R C H A R (4) ,\nPRIMARY KEY ( i d ) ,\nF O R E I G N K E Y (id_realisateur) R E F E R E N C E S Artiste ,\nFOREIGN KEY ( c o d e _ p a y s ) REFERENCES P a y s ) ;\nC R E A T E T A B L E Notation (id_film I N T E G E R N O T N U L L,\ne m a i l VARCHAR ( 4 0 ) NOT NULL ,\nn o t e INTEGER NOT NULL ,\nP R I M A R Y K E Y (id_film , email) ,\nF O R E I G N K E Y (id_film) R E F E R E N C E S Film ,\nFOREIGN KEY ( e m a i l ) REFERENCES I n t e r n a u t e ) ;\nC R E A T E T A B L E Role (id_film I N T E G E R N O T N U L L,\nid_acteur I N T E G E R N O T N U L L,\nn o m _ r o l e VARCHAR( 6 0 ) ,\nP R I M A R Y K E Y (id_film , id_acteur ) ,\nF O R E I G N K E Y (id_film) R E F E R E N C E S Film ,\nF O R E I G N K E Y (id_acteur) R E F E R E N C E S Artiste);\nCes tables sont créées, à l’aide du client mysql ,a v e cl ac o m m a n d e:\n% mysql <Films.sql\nen supposant, comme nous l’avons fait précédemment, que la base a été créée au\npréalable avec la commande CREATE DATABASE Films, et que l’utilisateur a son\ncompte d’accès déﬁni dans un ﬁchier de conﬁguration .my.cnf . On peut alors rappeler\nles options de création avec la commande DESCRIBE.\n204\n Chapitre 4. Création d’une base MySQL\nmysql> DESC Artiste;\n+-----------------+-------------+------+-----+-- -------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-----------------+-------------+------+-----+-- -------+-------+\n| id | int(11) | | PRI | 0 | |\n| nom | varchar(30) | | MUL | | |\n| prenom | varchar(30) | | | | |\n| annee_naissance | int(11) | YES | | NULL | |+-----------------+-------------+------+-----+-- -------+-------+\n4.3.3 Modification du schéma\nLa création d’un schéma n’est qu’une première étape dans la vie d’une base de\ndonnées. On est toujours amené par la suite à créer de nouvelles tables, à ajouter\ndes attributs ou à en modiﬁer la déﬁnition. La forme générale de la commande\npermettant de modiﬁer une table est :\nALTER TABLE nomTable ACTION description\noùACTION peut être principalement ADD, MODIFY, DROP ouRENAME,e t descrip-\ntion est la commande de modiﬁcation associée à ACTION. La modiﬁcation d’une\ntable peut poser des problèmes si elle est incompatible avec le contenu existant. Parexemple, passer un attribut à NOT NULL implique que cet attribut a déjà des valeurs\npour toutes les lignes de la table.\nLa commande DROP TABLE nomTable supprime une table. Elle est évidemment\ntrès dangereuse une fois la base créée, avec des données. Il n’est plus possible de\nrécupérer une table détruite avec DROP TABLE.\nModification des attributs\nVoici quelques exemples d’ajout et de modiﬁcation d’attributs. La syntaxe complètede la commande ALTER TABLE est donnée dans l’annexe B.\nOn peut ajouter un attribut region àl at a b l eInternaute avec la commande :\nALTER TABLE Internaute ADD region VARCHAR (10) ;\nS’il existe déjà des données dans la table, la valeur sera à NULL ou à la valeur par\ndéfaut. La taille de region étant certainement insufﬁsante, on peut l’agrandir avec\nMODIFY, et la déclarer NOT NULL par la même occasion :\nALTER TABLE Internaute M O D I F Y region VARCHAR (30) NOT NULL ;\nIl est également possible de diminuer la taille d’une colonne, avec le risque d’une\nperte d’information pour les données existantes. On peut même changer son type,pour passer par exemple de VARCHAR àINTEGER, avec un résultat non déﬁni.\nL’option ALTER TABLE permet d’ajouter une valeur par défaut.\nALTER TABLE Internaute ALTER region SET DEFAULT ’P AC A ’ ;\nEnﬁn on peut détruire un attribut avec DROP.\nALTER TABLE Internaute DROP region ;\n4.3 Création de la base Films avec MySQL\n 205\nVoici une session de l’utilitaire mysql illustrant les commandes de mise à jour\ndu schéma. phpMyAdmin propose de son côté des formulaires HTML très pratiques\npour effectuer les mêmes modiﬁcations.\nmysql> ALTER TABLE Internaute ADD region VARCHAR(10);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 0 Duplicates: 0 Warnings: 0\nmysql> DESC Internaute;\n+-----------------+-------------+------+-----+-- -------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-----------------+-------------+------+-----+-- -------+-------+\n| email | varchar(40) | | PRI | | |\n| nom | varchar(30) | | | | |\n| prenom | varchar(30) | | | | |\n| mot_de_passe | varchar(32) | | | | |\n| annee_naissance | int(11) | YES | | NULL | || region | varchar(10) | YES | | NULL | |\n+-----------------+-------------+------+-----+-- -------+-------+\nmysql> ALTER TABLE Internaute MODIFY region VARCHAR(30) NOT NULL;Query OK, 0 rows affected (0.00 sec)\nRecords: 0 Duplicates: 0 Warnings: 0\nmysql> DESC Internaute;\n+-----------------+-------------+------+-----+-- -------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-----------------+-------------+------+-----+-- -------+-------+\n| email | varchar(40) | | PRI | | |\n| nom | varchar(30) | | | | |\n| prenom | varchar(30) | | | | |\n| mot_de_passe | varchar(32) | | | | || annee_naissance | int(11) | YES | | NULL | |\n| region | varchar(30) | YES | | NULL | |\n+-----------------+-------------+------+-----+-- -------+-------+\nmysql> ALTER TABLE Internaute ALTER region SET DEFAULT ’PACA’;Query OK, 0 rows affected (0.00 sec)Records: 0 Duplicates: 0 Warnings: 0\nmysql> DESC Internaute;\n+-----------------+-------------+------+-----+-- -------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-----------------+-------------+------+-----+-- -------+-------+\n| email | varchar(40) | | PRI | | |\n| nom | varchar(30) | | | | |\n| prenom | varchar(30) | | | | |\n| mot_de_passe | varchar(32) | | | | || annee_naissance | int(11) | YES | | NULL | |\n| region | varchar(30) | YES | | PACA | |\n+-----------------+-------------+------+-----+-- -------+-------+\n206\n Chapitre 4. Création d’une base MySQL\nmysql> ALTER TABLE Internaute DROP region;\nQuery OK, 0 rows affected (0.00 sec)Records: 0 Duplicates: 0 Warnings: 0\nCréation d’index\nPour compléter le schéma d’une table, on peut déﬁnir des index . Un index offre un\nchemin d’accès aux lignes d’une table considérablement plus rapide que le balayage\nde cette table – du moins quand le nombre de lignes est très élevé. MySQL crée\nsystématiquement un index sur la clé primaire de chaque table. Il y a deux raisons àcela ;\n1. l’index permet de vériﬁer rapidement, au moment d’une insertion, que la clé\nn’existe pas déjà ;\n2. beaucoup de requêtes SQL, notamment celles qui impliquent plusieurs tables\n(jointures), se basent sur les clés des tables pour reconstruire les liens. L’index\npeut alors être utilisé pour améliorer les temps de réponse.\nUn index est également créé automatiquement pour chaque clause UNIQUE uti-\nlisée dans la création de la table. On peut de plus créer d’autres index, sur un ouplusieurs attributs, si l’application utilise des critères de recherche autres que les clésprimaire ou secondaires.\nLa commande MySQL pour créer un index est la suivante :\nCREATE [UNIQUE] INDEX nomIndex ONnomTable (attribut1 [, ...])\nLa clause UNIQUE indique qu’on ne peut pas trouver deux fois la même clé. La\ncommande ci-dessous crée un index de nom idxNom sur les attributs nometprenom\nde la table Artiste . Cet index a donc une fonction équivalente à la clause UNIQUE\ndéjà utilisée dans la création de la table.\nCREATE UNIQUE INDEX idxNom ON Artiste (nom, prenom);\nOn peut créer un index, cette fois non unique, sur l’attribut genre de la table Film.\nCREATE INDEX idxGenre ON Film (genre);\nCet index permettra d’exécuter très rapidement des requêtes SQL ayant comme\ncritère de recherche le genre d’un ﬁlm.\nSELECT *FROM FilmWHERE genre = ’Western’\nCela dit il ne faut pas créer des index à tort et à travers, car ils ont un impact\nnégatif sur les commandes d’insertion et de destruction. À chaque fois, il faut en effet\nmettre à jour tous les index portant sur la table, ce qui représente un coût certain.\nOrganisation\ndu développement5\nCe chapitre est une introduction aux choix techniques à effectuer au moment de\nla mise en développement d’un site basé sur PHP et MySQL. Avant de s’embarquertête baissée dans la réalisation de scripts PHP , il est en effet important de se poserun certain nombre de questions sur la pertinence des décisions (ou des absencesde décision...) prises à ce stade initial de développement, et sur leurs conséquencesà court, moyen et long terme. Il s’agit véritablement d’envisager un changementd’échelle pour passer de la production de quelques scripts de petite taille comme ceuxétudiés dans les chapitres précédents, à un code constitué de milliers de lignes utiliséquotidiennement par de nombreuses personnes et soumis à des évolutions produites\npar une équipe de développeurs. Voici un échantillon de ces questions :\n1. comment organiser le code pour suivre une démarche logique de développe-\nment et de maintenance, et déterminer sans ambiguïté à quel endroit on doit\nplacer tel ou tel fragment de l’application ;\n2. quels outils utiliser pour tout ce qui relève du « génie logiciel » : édition des\nﬁchiers, sauvegardes, versions, livraisons, tests, etc.\n3. comment assurer la portabilité à long terme et le respect des normes ?\n4. quels sont les impératifs de sécurité, quel est le degré de robustesse et de\nconﬁdentialité attendu ?\nL’importance de ces questions est à relativiser en fonction du développement\nvisé. Si vous êtes seul à produire et maintenir un site web dynamique basé sur\nquelques tables, quelques formulaires et un nombre limité de pages, le respect dequelques règles générales et l’utilisation d’outils légers sufﬁra. Pour des applicationsprofessionnelles impliquant des équipes de développeurs pour plusieurs centainesde jours-homme planiﬁés, le recours à une méthodologie extrêmement rigoureuses’impose. Dans ce dernier cas, il est d”ailleurs indispensable de s’appuyer sur un\n208\n Chapitre 5. Organisation du développement\nframework de développement qui fournit un cadre de travail contraint et normalisé.\nJe présente un de ces frameworks, le Zend Framework , dans le chapitre 9.\nDans le présent chapitre nous allons commencer par tour d’horizon des régles\norganisationnelles de base, accompagné d’une présentation rapide des outils qui faci-\nlitent leur application. On peut très bien envisager de tout développer en utilisant lebloc-notes des accessoires Windows, mais il paraît plus sérieux de recourir à des outilsspécialisés. Parmi les logiciels libres, il faut citer au minimum un environnementintégré comme Eclipse , un navigateur permettant de valider le code HTML comme\nFirefox associé à Web Developer, et enﬁn un système de gestion de versions comme\nSubversion ou CVS. Le réalisation de suites de tests avec PhpUnit et la productionde documentation avec PhpDoc sont également brièvement abordés. Le but n’est pasici de couvrir complètement des outils de génie logiciel, mais de montrer leur rôle etleur intérêt dans le cadre d’un processus de développement rigoureux.\nLes sections suivantes sont consacrées à la résolution d’autres problèmes « structu-\nrels », indépendants des problèmes « fonctionnels » liés à une application spéciﬁque :gestion des erreurs et des exceptions, et portabilité multi-SGBD. Ce livre ne prétendpas être un traité complet d’ingénierie logicielle, mais je propose pour chaque pro-blème une solution, avec un double objectif : être à la fois concret, en fournissant une\nméthode utilisable, et simple, pour permettre au lecteur de comprendre la démarche.\nLe prochain chapitre, complémentaire, sera consacré à l’organisation du code\nproprement dite, avec une introduction à l’architecture Modèle-Vue-Contrôleur\n(MVC), maintenant très souvent adoptée pour la réalisation d’applications web detaille signiﬁcative.\n5.1 CHOIX DES OUTILS\nVoici pour commencer un bref aperçu de quelques valeurs sûres qui s’avèrent à l’usageextrêmement pratiques pour faciliter le développement et la maintenance d’un site.\n5.1.1 Environnement de développement intégré Eclipse\nL’écriture de code peut être assez rébarbative, et comprend de nombreux aspects répé-titifs dont on peut penser qu’ils gagneraient à être automatisés. Les Environnements\nde Développement Intégrés (acronyme IDE en anglais) fournissent dans un cadre bien\nconçu tous les outils qui facilitent la tâche du développeur : contrôle syntaxique,navigation dans les ﬁchiers, aide à la saisie, liste de tâches, etc. Le plus connu de cesIDE est certainement Eclipse (http://www.eclipse.org ) initialement conçu et réalisé\npour des applications Java, mais propose de très nombreuses extensions, dont unedédiée à PHP , le PHP Development Tools ou PDT.\nLa ﬁgure 5.1 montre Eclipse en action avec la perspective PDT sur le site W\nEB-\nSCOPE . L’ensemble des fenêtres et leur disposition sont entièrement conﬁgurables.\nVoici une description qui vous donnera une idée de la puissance de cet outil.\n5.1 Choix des outils\n 209\n•la partie gauche supérieure montre la hiérarchie des répertoires du projet\nWEBSCOPE ;\n•la partie gauche inférieure est une aide à la programmation PHP , avec entre\nautres la possibilité de trouver rapidement une fonction et son mode d’appel ;\n•la partie centrale est le ﬁchier PHP en cours d’édition ; les catégories syn-taxiques (variables, instructions, structures de contrôle) sont mises en valeurpar des codes couleurs, et les erreurs de syntaxe sont détectées et signalées parl’éditeur ;\n•la partie droite est un résumé de la structure du ﬁchier PHP courant ; ici il\ns’agit d’une classe, avec des méthodes privées et publiques, des constantes, des\npropriétés, etc. ;\n•enﬁn la partie basse contient des informations sur le projet et le ﬁchiercourant, comme les tâches à effectuer, des annotations sur le code, la liste desproblèmes détectés, etc.\nFigure 5.1 — Environnement de développement Eclipse pour PHP\nL’apprentissage de ce type d’outil demande quelques heures d’investissement pour\nune utilisation basique ou quelques jours pour une utilisation avancée. Dans tousles cas, le gain en termes de confort d’utilisation et de temps est considérable. Je\nne saurais donc trop vous conseiller d’effectuer cet effort dès que vous entamerez la\nréalisation de scripts PHP qui dépassent les simples exemples vus jusqu’à présent.\nL’installation est simple (et gratuite). Vous devez commencer par installer Eclipse,\ntéléchargeable sur le site http://www.eclipse.org . Pour l’extension PHP , toutes les ins-\ntructions se trouvent sur la page http://www.eclipse.org/pdt/ . Essentiellement il sufﬁt,\n210\n Chapitre 5. Organisation du développement\ndans Eclipse, d’accéder au choix Software update du menu Help, et de télécharger PDT\nà partir de http://download.eclipse.org/tools/pdt/updates . En cas de problème, vériﬁez les\ndépendances et compatibilités de version en cherchant sur le Web : on trouve presque\ntoujours quelqu’un qui a bien voulu indiquer la marche à suivre.\n5.1.2 Développement en équipe : Subversion\nSi vous développez seul, une seule version de vos ﬁchiers sur votre machine sufﬁt.\nDès que l’on travaille à plusieurs sur la même application, le problème des mises à\njour concurrentes se pose. Comment être sûr qu’on ne va pas se retrouver à travaillerà deux sur le même ﬁchier, avec risque de conﬂit ; comment récupérer facilement lesévolutions effectuées par quelqu’un d’autre ; comment gérer des versions, surveillerles évolutions, comprendre ce qui a changé ? Des outils ont été créés pour faciliterla gestion des évolutions et le développement collectif sur une même application.Le plus répandu est sans doute CVS (Concurrent Versioning System ), qui tend à être\nremplacé par Subversion, un autre système très proche dans ses principes mais un peuplus puissant.\nLa présentation des principes de gestion de version dépasse évidemment le cadre\nde ce livre\n1, mais il est important d’être au moins averti de l’existence de ces outils, de\nleur apport à la résolution des problèmes soulevés par le développement coopératif,et enﬁn de leur facilité de mise en œuvre. Une fois la conﬁguration effectuée, un oudeux clics sufﬁsent pour livrer les évolutions effectuées, et au contraire récupérer lesévolutions faites par d’autres.\nVous pouvez tout à fait sauter la description qui suit si cette problématique ne vous\nconcerne pas, ou pas tout de suite. Mais si vous êtes intéressés par la découverte etl’expérimentation d’un développement en commun et d’utilisation de CVS, je vouspropose tout simplement de participer à l’amélioration du site W\nEBSCOPE dont le\ncode est disponible sur le serveur CVS de SourceForge à l’adresse suivante.\nwebscope.cvs.sourceforge.net\nVoici comment procéder, en utilisant Eclipse qui fournit une interface de navi-\ngation et d’utilisation de CVS simple et puissante2. Il faut tout d’abord indiquer\nle serveur CVS. Pour cela, accédez au menu Windows, puis Open perspective et\nchoisissez la perspective CVS. La fenêtre de gauche montre alors la liste des serveursCVS répertoriés. Elle est initialement vide, mais vous allez ajouter un serveur avecle bouton CVS situé en haut de la fenêtre. La ﬁgure 5.2 montre le formulaire deconﬁguration qui s’afﬁche alors.\nEntrez les informations comme indiqué. Pour le compte de connexion, vous\npouvez soit utiliser une connexion anonyme si vous n’avez pas créé de compte sur\n1. Je vous recommande la lecture du livre (en anglais) librement disponible consacré à SubVersion,\nà l’adresse http://svnbook.red-bean.com/.\n2. CVS est nativement intégré à Eclipse. Pour utiliser Subversion il faut installer Subclipse, ce quise fait en quelques minutes.\n5.1 Choix des outils\n 211\nFigure 5.2 — Configuration de la connexion au serveur CVS\nSourceForge, soit utiliser votre compte SourceForge. Dans le premier cas vous pourrez\njuste récupérer le code, sans faire de modiﬁcation. Il est bien entendu préférablede créer un compte sur SourceForge pour bénéﬁcier pleinement des fonctionnalitéscollaboratives.\nUne fois connecté au serveur CVS, vous pouvez explorer les versions et les ﬁchiers\ndu projet W\nEBSCOPE . La ﬁgure 5.3 montre la navigation et la consultation des\nFigure 5.3 — Exploration du répertoire distant CVS\n212\n Chapitre 5. Organisation du développement\nﬁchiers dans la branche HEAD qui contient la version en cours de développement\ndu projet. Les versions successives sont dans d’autres branches.\nVous pouvez récupérer une version en utilisant le clic droit sur un répertoire (par\nexemple, webscope de la branche HEAD) et en choisissant l’option checkout. Eclipse\nva alors importer l’ensemble des ﬁchiers du site dans un projet sur votre machine\nlocale, et vous pouvez commencer des modiﬁcations sur les ﬁchiers pour améliorerle code. Toutes les modiﬁcations agissent sur la version locale, indépendamment detout ce qui peut se passer par ailleurs sur le serveur CVS de SourceForge. Quand vousestimez que vous avez apporté une contribution signiﬁcative au code et que voussouhaitez l’intégrer au CVS, utilisez à nouveau le clic droit sur votre projet local, etchoisissez l’option Team , puis Commit comme indiqué sur la ﬁgure 5.4.\nFigure 5.4 — Validation de modifications, et transfert sur le serveur CVS\nVous voici entré dans le processus de développement coopératif avec Eclipse et\nCVS. À chaque moment, vous pouvez au choix utiliser la commande Commit pour\nvalider vos modiﬁcations et les transférer sur le CVS, ou au contraire la commandeUpdate pour récupérer dans votre copie locale les modiﬁcations effectuées par les\nautres utilisateurs.\nJe n’en dis pas plus à ce stade. Lisez un tutorial sur CVS pour comprendre le\nfonctionnement de base (qui tient en quelques commandes) et pratiquez avec le siteCVS que je vous propose sur SourceForge. Le site web du livre vous informera desdéveloppements et évolutions de ce prolongement collectif au code décrit dans lereste de ce livre.\n5.1 Choix des outils\n 213\n5.1.3 Production d’une documentation avec PhpDoc\nLa communauté des développeurs PHP a produit de nombreux outils pour constituer\ndes environnements logiciels de qualité. Ces outils contribuent à faire de PHP unconcurrent tout à fait présentable de langages anciens et éprouvés comme C++ ouJava. La possibilité de produire une documentation directement à partir du codefait partie de ces acquis. Dans le monde PHP , l’outil qui semble le plus utilisé estPhpDocumentor http://www.phpdoc.org/ et c’est donc celui que je présente ensuite.\nCela étant des logiciels plus généralistes comme doxygen , qui s’applique également\nau C, au C++, à Java et à beaucoup d’autres langages, produisent également un trèsbeau travail.\nDocumenter du PHP pour PhpDoc\nPhpDoc produit un site HTML statique contenant une description techniqueextraites des ﬁchiers PHP d’une application web. La ﬁgure 5.5 montre un exemple\nd’une page PhpDoc produite automatiquement pour le site W\nEBSCOPE .\nFigure 5.5 — Exemple de page produite par PhpDoc\nLa documentation est basée sur la notion de DocBlock qui sert à documenter des\n« éléments » du code. Les éléments sont les fonctions, les variables, les classes, et tous\nles composants logiciels d’une application PHP . Chaque DocBlock est simplement un\ncommentaire de la forme /** ...*/ (notez les deux étoiles initiales) constitué de\ntrois parties aparaissant dans l’ordre suivant :\n1. une description courte ;\n2. une description longue ;\n214\n Chapitre 5. Organisation du développement\n3. des balises choisies parmi un ensemble pré-déﬁni et décrivant un des aspects\nde l’élément documenté (par exemple, la balise @author indique l’auteur de\nl’élément).\nLa stratégie utilisée pour la documentation varie selon le type d’élément docu-\nmenté. Pour faire simple, limitons-nous ici au cas des classes PHP orientées-objet. On\npeut les documenter à deux niveaux : la classe et la méthode (on pourrait envisagertrois niveaux si on mettait plusieurs classes dans une page). Voici quelques exemplesde balises utiles dans ce contexte.\n•@category est le nom de l’application ;\n•@package est une notion correspondant à un regroupement de classes parta-\ngeant un même objectif (par exemple toutes les classes interagissant avec labase de données) ;\n•@copyright est le nom du titulaire de la propriété intellectuelle ;\n•@license est la licence d’exploitation ;\n•@version est le numéro de version.\nVoici un exemple de DocBlock pour la classe BDde notre application.\n/**\n* Classe abstraite d´ efinissant une interface g´ en´ erique d’acc` es ` a une BD\n*\n* Cette classe d´ efinit les m´ ethodes g´ en´ eriques d’acc` es ` a une base de donn´ ees\n* quel que soit le serveur utilis´ e. Elle est abstraite et doit ^ etre sp´ ecialis´ ee* pour chaque syst` eme (MySQL, Oracle, etc.)*\n* @category Pratique de MySQL et PHP\n* @package BD* @copyright Philippe Rigaux\n* @licence GPL\n* @version 1.0.0*/\nAu niveau des méthodes, on peut ajouter la description du type et du rôle de\nchaque paramètre, ainsi que le type de la valeur retournée. Les paramètres sont\nmarqués par la balise @param, suivi du type et d’une phrase qui décrit le paramètre.\nLa balise @tag suit a même convention. Voici un exemple, toujours tiré de la classe\nBD.\n/**\n* Constructeur de la classe\n*\n* Le constructeur appelle la m´ ethode connect() de la classe\n*e t v ´ erifie que la connexion a bien ´ et´ e´etablie. Sinon une\n* exception est lev´ ee.\n*\n* @param string Login de connexion* @param string mot de passe\n5.1 Choix des outils\n 215\n* @param string nom de la base\n* @param string nom du serveur* @return null*/\nfunction __construct ($login, $mot_de_passe, $base, $serveur){\n.. ..\n}\nLa production de cette documentation technique est particulièrement utile pour\nles bibliothèques, classes et fonctions utilitaires fréquemment appelées et pour les-\nquelles une description des modes d’appel est indispensable.\nComment utiliser PhpDoc\nPhpDoc s’installe très simplement comme une application PHP . Récupérez surhttp://www.phpdoc.org/ le ﬁchier archive et décompressez-le dans le répertoire htdocs .\nRenommez le nouveau répértoire obtenu en phpdoc . Vous pouvez maintenant y\naccéder à http://localhost/phpdoc .\nSi vous voulez documenter une application, par l’exemple l’application W\nEB-\nSCOPE , le plus simple, pour éviter de saisir systématiquement les paramètres de\nproduction de la documentation, est de créer un ﬁchier de conﬁguration à placerdans users/ dans le répertoire phpdoc . À titre d’illustration, voici un ﬁchier de conﬁ-\nguration minimal permettant d’analyser l’application web W\nEBSCOPE et de placer\nla documentation générée dans wsdoc.\n;Titre g´ en´ eral\ntitle = Documentation WebScope\n;; Quelle est l’application ` a documenter\ndirectory = /Applications/MAMP/htdocs/webscope\n;; O` u´ecrire la documentation?\ntarget = /Applications/MAMP/htdocs/wsdoc;;Doit-on consid´ erer les fichiers cach´ es?\nhidden = false\n;; Doit-on montrer les ´ el´ ements priv´ es? (@access private)\nparseprivate = off\n;; Quel est le package principal?\ndefaultpackagename = WebScope\n;; Fichiers ` a ignorer\nignore = *.tpl\n;; Style de la documentation\noutput=HTML:Smarty:HandS\n216\n Chapitre 5. Organisation du développement\nCe ﬁchier de conﬁguration apparaît alors dans la liste des choix quand on accède\nà la page de conﬁguration de PhpDoc. Il ne reste plus ensuite qu’à l’afﬁcher avec le\nnavigateur web. PhpDoc peut également engendrer d’autres formats, et notammentle format DocBook qu’on peut ensuite transformer en PDF . Toutes les documenta-tions techniques des composants PHP Open Source sont créées de cette manière(mais pas toujours avec PhpDoc, car, comme signalé ci-dessus, des logiciels commedoxygen font un travail au moins équivalent et valent la peine d’être étudiés).\n5.1.4 Tests unitaires avec PhpUnit\nVous devez bien entendu tester vos développements et vous assurer de leur correc-tion, en toutes circonstances. Le test est une tâche fastidieuse mais nécessaire pourune production de qualité. Le contrôle et la certiﬁcation du logiciel constituent unsujet extrêmement vaste. Une première étape consiste à effectuer des test unitaires aﬁn\nde contrôler les briques de base d’une application, si possible de façon automatique.\nL’outil de test unitaire pour PHP s’appelle PhpUnit et constitue la déclinaison\npour PHP de JUnit (pour Java) ou CppUnit (pour C++). Son site d’accueil esthttp://www.phpunit.de . Ce qui suit constitue une brève introduction à son utilisation.\nIl faut commencer par installer PhpUnit. Le site donne deux procédures d’ins-\ntallation : la première avec pear, un gestionnaire de composants PHP , la seconde par\ntéléchargement et conﬁguration. Si pearn’est pas installé dans votre environnement,\nsuivez simplement les instructions sur le site de PHPUnit pour une installationdirecte.\nDans les deux cas, on se retrouve avec un script PHP phpunit qui s’exécute en\nligne de commande (pas d’interface web). Commençons par un exemple trivial. Nousavons créé une classe Addition avec une méthode ajout() dont le but est d’ajouter\ndeux nombres. Le code n’est pas trop compliqué :\nExemple 5.1 exemples/Addition.php :Une classe sans intérêt, mais à tester quand même\n<?php\nclass Addition {\npublic function ajout ($a , $b)\n{\nreturn $a + $b;\n}\n}\n?>\nMaintenant nous allons créer un second script PHP qui va tester le premier.\nComme il s’agit d’un cas ﬁctif, les deux scripts sont dans le répertoire de nos exemples,mais en général il faut bien entendu imaginer que l’application de test est séparée decelle qui est testée.\n5.1 Choix des outils\n 217\nExemple 5.2 exemples/PremierTest.php :Une seconde classe, qui teste la première\n<?php\n/∗∗ Test de la classe addition\n∗\n∗/\nrequire_once ( ’PHPUnit/Framework.php ’) ;\nrequire_once (\"Addition .php\") ;\nclass PremierTest extends PHPUnit_Framework_Testcase {\npublic function testAjout () {\n$addition = new Addition() ;\n$this −>assertEquals (2 , $addition −>ajout (1, 1));\n$this −>assertNotEquals(3, $addition −>ajout (2, 2));\n}\n}\n?>\nLa simplicité de l’exemple a le mérite de le rendre assez clair. La classe de test\ninstancie un objet de la class testée, exécute une méthode et effectue des contrôles\nsur le résultat obtenu. On vériﬁe ici que 1 +1=2 et que 2 +2/negationslash=3. Il reste à lancer\nle script phpunit sur cette classe de test.\n> phpunit PremierTest\nPHPUnit 3.3.1 by Sebastian Bergmann.\n.\nTime: 0 secondsOK (1 test, 2 assertions)\nTout s’est bien passé. Voici maintenant quelques explications. PHPUnit s’appuie\nsur des conventions de nommage consistant à donner aux classes de test un nom se\nterminant par Test et aux méthodes de test un nom commençant par test. La classe\nde test ne doit pas être située dans le même répertoire que l’application : le but est\nde lancer une application (de test) qui travaille sur une autre application (normale),cette dernière ne devant pas subir la moindre modiﬁcation.\nUne classe de test hérite de PHPUnit_FrameworkTestCase. Ce faisant elle\ndispose de tout un ensemble d’assertions et de mécanismes pour exécuter les tests.\nLe script phpunit reçoit le nom de la classe de test et exécute chacune des méthodes\nde test. À l’intérieur de chaque méthode de test, on place une liste d’assertionsexprimant ce que le code testé doit faire et quels résultats il doit fournir. Dans notreexemple trivial, on vériﬁe les résultats de deux additions. Dans un exemple plusréaliste, il faut inclure toutes les assertions exprimant ce qui doit caractériser selon\n218\n Chapitre 5. Organisation du développement\nnous le comportement de la méthode testée. À titre d’exemple, changez le + en -\ndans notre méthode d’addition, puis effectuez à nouveau le test. Voici ce que l’on\nobtient :\n> phpunit PremierTest\nPHPUnit 3.3.1 by Sebastian Bergmann.\nF\nTime: 0 secondsThere was 1 failure:\n1) testAjout(PremierTest)\nFailed asserting that <integer:0> matches expected value <integer:2>.\n/Applications/MAMP/htdocs/exemples/PremierT est.php:14\nFAILURES!Tests: 1, Assertions: 1, Failures: 1.\nUn des tests sur la méthode ajout() a échoué (celui qui effectue le contrôle\n2=1+1), l’autre a réussi (celui qui vériﬁe que 3 /negationslash=2+2). Il existe bien entendu de\ntrès nombreuses autres assertions que vous pouvez découvrir dans la documentation\nde PHPUnit.\nEffectuer des tests implique d’instancier la classe à tester, puis d’appliquer des\nméthodes sur l’objet obtenu. Pour éviter l’aspect répétitif de ce mécanisme, PHPUnit\nfournit un générateur de « squelette » d’une classe de test. La commande, toujours surnotre exemple simple, est :\n> phpunit --skeleton Addition\nOn obtient une classe AdditionTest que voici :\nExemple 5.3 exemples/AdditionTest.php :La classe de test engendrée automatiquement par PHPUnit\n<?php\nrequire_once ’PHPUnit/Framework.php ’ ;\nrequire_once ’Addition .php ’ ;\n/∗∗\n∗Test class for Addition .\n∗Generated by PHPUnit on 2008 −10−19 at 17:36:45.\n∗/\nclass AdditionTest extends PHPUnit_Framework_TestCase\n{\n/∗∗\n∗@var Addition\n∗@access protected\n5.1 Choix des outils\n 219\n∗/\nprotected $object ;\n/∗∗\n∗Sets up the fixture , for example , opens a network\nconnection .\n∗This method is called before a test is executed .\n∗\n∗@access protected\n∗/\nprotected function setUp()\n{\n$this −>object = new Addition ;\n}\n/∗∗\n∗Tears down the fixture , for example , closes a network\nconnection .\n∗This method is called after a test is executed.\n∗∗@access protected\n∗/\nprotected function tearDown()\n{\n}\n/∗∗\n∗@todo Implement testAjout () .\n∗/\npublic function testAjout () {\n// Remove the following lines when you implement this\ntest .\n$this −>markTestIncomplete(\n’ This test has not been implemented yet . ’\n);\n}\n}\n?>\nDeux méthodes spéciales, setUp() ettearDown() ont été créées pour, respecti-\nvement, instancier un objet de la classe Addition et libérer cet environnement de\ntest. C’est à nous de compléter ces deux méthodes pour initialiser l’environnement\nde test (par exemple on pourrait se connecter à la base de données avant d’effectuer\ndes tests sur une application PHP/MySQL). Ensuite PHPUnit crée une méthodetestnomM´ eth ()pour chaque méthode nomM´ eth de la classe testée. Ici nous avons\ndonc une méthode testAjout(). Toutes ces méthodes de test sont à implanter,\ncomme le montre le @todo placé dans le DocBlock.\nQuand ce travail est réalisé pour toutes les classes et fonctions d’une\napplication, on peut regrouper les tests dans des suites g r â c eàl ac l a s s e\n220\n Chapitre 5. Organisation du développement\nPHPUnit_FrameworkTestSuite. Voici un exemple simple montrant comment\nintégrer notre classe de tests dans une suite.\nExemple 5.4 exemples/MesTests.php :Création d’une suite de tests\n<?php\n/∗∗\n∗Ensemble des tests de l ’application\n∗/\nrequire_once ’PHPUnit/Framework.php ’ ;\nrequire_once ’PHPUnit/TextUI/TestRunner .php ’ ;\n/∗∗ Inclusion des classes à tester\n∗\n∗/\nrequire_once ’AdditionTest .php ’ ;\nclass MesTests\n{\npublic static function main()\n{\nPHPUnit_TextUI_TestRunner : : run( s e l f : : suite () ) ;\n}\npublic static function suite ()\n{\n$suite = new PHPUnit_Framework_TestSuite( ’Tous mes tests ’) ;\n$suite −>addTestSuite(\"AdditionTest\") ;\nreturn $suite ;\n}\n}\n?>\nOn peut ensuite exécuter une suite de tests avec phpunit . Arrêtons là pour cette\nbrève introduction dont le but est esentiellement de vous donner une idée du\nprocessus de constitution de tests automatiques pour valider une application. Unefois ces tests mis en place – ce qui peut évidemment prendre beaucoup de temps – onpeut les ré-exécuter à chaque nouvelle version de l’application pour vériﬁer qu’il n’y\na pas de régression.\n5.1.5 En résumé\nCe qui précède a montré une partie des outils qui constituent un environnement de\nhaut niveau pour la production et la maintenance d’applications web. On pourraitencore citer Phing , un descripteur de tâches comparable au make Unix, pour enchaî-\nner automatiquement des étapes de construction (vériﬁcation syntaxique, tests,\n5.2 Gestion des erreurs\n 221\ndocumentation, etc.) d’une application livrable, Xdebug pour déverminer (« débu-\ng u e r»...)o up r o ﬁ l e rd e sa p p l i c a t i o n s ,e t c .\nEncore une fois l’utilisation de ces outils est à apprécier en fonction du contexte.\nEclipse est vraiment un must : cet IDE rend de tels services qu’il est vraiment difﬁcile\nde s’en passer une fois qu’on y a goûté. Les tests et la documentation constituent\nquant à eux des efforts importants qui s’imposent principalement dans les processusde production de code de haute qualité, en vue par exemple d’une certiﬁcation.\n5.2 GESTION DES ERREURS\nMême si l’on a mis en place une procédure de tests automatisée avec PHPUnit,il faut toujours envisager qu’une erreur survienne pendant le déroulement d’uneapplication. La gestion des erreurs est un problème récurrent. Il faut se poser enpermanence la question des points faibles du code et des conséquences possibles d’un\nfonctionnement incorrect ou de données non conformes à ce qui est attendu. Cette\nvigilance est motivée par trois préoccupations constantes :\n1. avertir correctement l’utilisateur du problème et des solutions pour le\nrésoudre ;\n2. ne pas laisser l’application poursuivre son exécution dans un contexte cor-\nrompu ;\n3. être prévenu rapidement et précisément de la cause de l’erreur aﬁn de pouvoir\nla corriger.\nIl faut également s’entendre sur le sens du mot « erreur ». Nous allons en distin-\nguer trois types : erreurs d’utilisation, erreurs syntaxiques et erreurs internes.\nErreurs d’utilisation\nDans le contexte d’applications web, de nature fortement interactives, beaucoup« d’erreurs » résultent de données ou d’actions imprévues de la part de l’utilisateur.Ce dernier n’est pas en cause, puisqu’on peut très bien considérer que l’interfacedevrait interdire ces saisie ou actions. Il n’en reste pas moins que ces erreurs secaractérisent par la nécessité de fournir un retour indiquant pourquoi l’appel à telleou telle fonctionnalité a été refusé ou a échoué.\nNous avons déjà étudié la question du contrôle des données en entrée d’un script\n(voir page 70) et la production de messages en retour. Toute erreur d’utilisationimplique une communication avec l’utilisateur, laquelle prend dans la majorité des\ncas la forme d’un message à l’écran.\nErreurs internes\nLes erreurs internes les plus communes sont dues à la manipulation de données\nanormales (comme une division par zéro) ou à la défaillance d’un des composantsde l’application (le serveur de base de données par exemple). Ce qui caractérise\n222\n Chapitre 5. Organisation du développement\nune erreur interne, c’est l’apparition d’une conﬁguration dans laquelle l’application\nne peut plus fonctionner correctement. Ces conﬁgurations ne sont pas toujoursdétectables durant la phase de test, car elles dépendent parfois d’événements quiapparaissent de manière imprévisible. Une bonne application devrait être capable deréagir correctement à ce type d’erreur.\nErreurs syntaxiques\nEnﬁn, les erreurs syntaxiques sont dues à une faute de programmation, par exemplel’appel à une fonction avec de mauvais paramètres, ou toute instruction incor-recte empêchant l’interprétation du script. En principe, elles devraient être élimi-nées au moment des tests. Si ceux-ci ne sont pas menés systématiquement, cer-\ntaines parties du code peuvent ne jamais être testées avant le passage en produc-\ntion.\nL’approche PHP\nLa section qui suit présente les principales techniques de traitement d’erreur en PHP .Leserreurs d’utilisation ne sont pas spéciﬁquement considérées puisque nous avons\ndéjà vu de nombreux exemples, et qu’il n’y a pas grand chose d’autre à faire quede tester systématiquement les entrées d’un script ou d’une fonction, et de produireun message si quelque chose d’anormal est détecté. L’utilisation des exceptions PHPn’est pas pratique dans ce cas, car un lancer d’exception déroute le ﬂux d’exécution duscript vers la prochaine instruction catch, ce qui n’est souvent pas souhaitable pour\nce type d’erreur. Les erreurs syntaxiques doivent être éliminées le plus vite possible. La\npremière sous-section ci-dessous montre comment mettre en œuvre dès la phase dedéveloppement un contrôle très strict des fautes de programmation.\nEnﬁn les erreurs internes peuvent être interceptées et traitées, en PHP 5, par l’un\nou l’autre des deux moyens suivants :\n1. les erreurs PHP ;\n2. les exceptions .\nPour chacun il est possible de déﬁnir des gestionnaires d’erreur spécialisés, que\nl’on pourra donc régler différemment sur un site de développement ou sur un site deproduction.\n5.2.1 Erreurs syntaxiques\nLes fautes de programmation sont en principe détectables au moment des tests, siceux-ci sont menés de manière sufﬁsamment exhaustive. PHP est un langage assezpermissif, qui autorise une programmation assez relâchée. Cela permet un dévelop-pement très rapide et assez confortable, mais en contrepartie cela peut dans certainscas rendre le comportement du script erroné.\nEn PHP les variables ne sont pas déclarées, sont typées en fonction du contexte,\net peuvent même, si l’installation est conﬁgurée assez souplement, ne pas être\n5.2 Gestion des erreurs\n 223\ninitialisées. Dans beaucoup de cas, l’interpréteur PHP essaie de corriger automa-\ntiquement les imprécisions ou erreurs de syntaxe légères dans un script. Voici unexemple d’un script contenant beaucoup de minimes incorrections syntaxiques. Ensupposant que PHP est conﬁguré dans un mode où la non-déclaration des variablesest tolérée, la correction s’effectue silencieusement, avec des résultats parfois insatis-faisants.\nExemple 5.5 exemples/TestErreur.php :Un script avec des erreurs minimes de code.\n<?php\n// Script montrant l ’usage du contrôle des erreurs\nheader (\"C o n t e n t −type : text / plain\");\ndefine (ma_constante , 5) ;\n$tableau = array (\"1\" = > \"Valeur 1\" ,\n\"second_element\" = > \"Valeur 2\" ,\n\"ma_constante\" = > \"Valeur 3\") ;\n$texte = \"U n texte à afficher\";\necho \"Affichage de la variable \\$texte : $texTe\\ n\" ;\necho \" Premier élément = \" . $tableau [1] . \"\\n\" ;\necho \"Second élément = \" . $tableau [ second_element ] . \"\\n\" ;\necho \" Dernier élément = \" . $tableau [ ma_constante ];\n?>\nCe script se contente de produire du texte non HTML. Voici ce qui s’afﬁche dans\nla fenêtre du navigateur :\nAffichage de la variable $texte :\nPremier ´ el´ ement = Valeur 1\nSecond ´ el´ ement = Valeur 2Dernier ´ el´ ement =\nCe n’est pas tout à fait ce qui était souhaité. Le contenu de la variable $texte\net celui du dernier élément du tableau ne s’afﬁchent pas (voyez-vous d’où vient le\nproblème ?). Ce genre d’anomalie peut passer inaperçu, ou être très difﬁcile à détecter.\nIl est possible de régler le niveau des messages d’erreur produits par PHP avec la\nfonction error_reporting() qui prend en argument un ou plusieurs des niveaux\nde messages du tableau 5.1.\nCes niveaux sont des constantes prédéﬁnies qui peuvent être combinées par des\nopérateurs de bits (voir page 429). L’appel à la fonction error_reporting() avec\nl’argument E_ERROR | E_WARNING demande l’afﬁchage des deux types d’erreur. La\nvaleur par défaut3est généralement E_ALL | ˜E_NOTICE ce qui signiﬁe que toutes\n3. Elle dépend de l’installation de PHP .\n224\n Chapitre 5. Organisation du développement\nTableau 5.1 — Niveau des messages d’erreur dans PHP\nValeur\n Niveau d’erreur\n Description\nE_ALL\n Tous les avertissements et erreurs ci-dessous.\n1\n E_ERROR\n Erreurs fatales (interruption du script).\n2\n E_WARNING\n Erreurs légères (le script continue).\n4\n E_PARSE\n Erreur de compilation/analyse.\n8\n E_NOTICE\n Avertissements (une erreur légère qui peut être intentionnelle,\ncomme la non-initialisation d’une variable).\n16\n E_CORE_ERROR\n Erreurs fatales pendant le lancement de PHP.\n32\n E_CORE_WARNING\n Avertissement pendant le lancement de PHP.\n64\n E_COMPILE_ERROR\n Erreur fatale pendant la compilation.\n128\n E_COMPILE_WARNING\n Avertissement pendant la compilation.\n256\n E_USER_ERROR\n Erreur fatale engendrée par le programmeur.\n512\n E_USER_WARNING\n Erreur légère engendrée par le programmeur.\n1024\n E_USER_NOTICE\n Avertissement engendré par le programmeur.\n1024\n E_STRICT\n Avertissement indiquant une syntaxe PHP 4 qui risque de ne plusêtre supportée à l’avenir.\nles erreurs sont signalées, sauf les « avertissements ». Voici ce que l’on obtient avec le\nscript précédent en plaçant au début un appel à error_reporting() avec la valeur\nE_ALL :\n<b>Notice</b>: Use of undefined constant ma_constante -\nassumed ’ma_constante’ in <b>TestErreur.php</b> on line <b>8</b>\n<b>Notice</b>: Undefined variable: texTe in\n<b>TestErreur.php</b> on line <b>15</b>\nAffichage de la variable $texte :\nPremier ´ el´ ement = Valeur 1\n<b>Notice</b>: Use of undefined constant second_element -\nassumed ’second_element’ in <b>TestErreur.php</b> on line <b>17</b>\nSecond ´ el´ ement = Valeur 2\n<b>Notice</b>: Undefined offset: 5 in\n<b>TestErreur.php</b> on line <b>18</b>\nDernier ´ el´ ement =\nQuatre erreurs de niveau E_NOTICE ont été détectées. La première indique l’oubli\ndes apostrophes dans la déﬁnition de la constante ma_constante. PHP les a remises,\nce qui est correct. La deuxième erreur concerne la variable $texTe (avec un « T »\nmajuscule) qui n’est pas déﬁnie, d’où l’absence d’afﬁchage. Ce genre de problème\nsurvient facilement et est très difﬁcile à détecter. Troisième erreur : on a oublié les\n5.2 Gestion des erreurs\n 225\napostrophes dans l’expression $tableau[second_element]. PHP n’a pas trouvé\nde constante nommée second_element et suppose donc – à raison – qu’il sufﬁt de\nremettre les apostrophes. Enﬁn la dernière erreur est la même que précédemment,\nmais cette fois la constante existe et PHP la remplace par sa valeur, 5. L’entrée 5 dutableau n’existe pas et un message est donc produit, expliquant l’absence d’afﬁchagepour le dernier élément du tableau.\n5.2.2 Gestion des erreurs en PHP\nLes erreurs rencontrées ci-dessus sont engendrées par PHP qui se base sur des règlessyntaxiques plus ou moins strictes selon le niveau choisi. Ces erreurs sont alorstransmises au gestionnaire d’erreurs qui détermine comment les traiter. Une erreur\nPHP est décrite par quatre informations :\n1. le niveau d’erreur (voir tableau 5.1) ;\n2. le message d’erreur ;3. le nom du script ;4. le numéro de la ligne fautive dans le script.\nLe gestionnaire d’erreurs par défaut afﬁche ces informations à l’écran dès que\nl’erreur survient. On aura donc par exemple :\n<b>Notice</b>: Undefined offset: 5 in\n<b>TestErreur.php</b> on line <b>18</b>\nCe fonctionnement est très pratique durant la phase de développement d’une\napplication. En plaçant le niveau d’erreur à E_ALL (ou même à E_ALL | E_STRICT\nsi on développe en PHP 5 « pur »), on afﬁche tous les messages PHP et on obtient le\ncode le plus propre possible après avoir éliminé leur cause. Ce niveau d’erreur maxi-mal peut être obtenu globalement en modiﬁant le paramètre error_reporting\ndans le ﬁchier\nphp.ini , ou spéciﬁquement en appelant error_reporting() avec la\nvaleur E_ALL.\nQuand l’application est mise en production, il est plus délicat d’afﬁcher systémati-\nquement des messages qui peuvent correspondre à des erreurs anodines. L’alternativeest de rediriger ces messages vers un ﬁchier ( error logging ) en modiﬁant les paramètres\nde conﬁguration suivants dans le ﬁchier\nphp.ini :\n•display_errors passe à Off;\n•log_errors passe à On;\n•error_log passe à stderr ou au nom du ﬁchier de stockage.\nUn directive associée, ignore_repeated_errors, permet d’éviter (en la posi-\ntionnant à On) la répétition des messages relatifs à une même ligne dans un même\nﬁchier. Cela peut servir à ne pas donner l’occasion à un internaute malveillantd’engendrer un très gros ﬁchier par répétition ad nauseam de la même manipulation\nengendrant une erreur.\n226\n Chapitre 5. Organisation du développement\nQuand on utilise Apache, stderr est redirigé vers le ﬁchier error_log .O np e u t\nchoisir d’utiliser un ﬁchier comme /tmp/erreurs-php.log . On y trouvera donc toutes les\nerreurs engendrées par les applications PHP , qui ne seront plus afﬁchées à l’écran si\ndisplay_errors est positionné à Off. Cela suppose bien entendu un suivi régulier\nde ce ﬁchier pour détecter rapidement les erreurs qui surviennent et ne pas laisser unsite « planté » pendant des heures ou des jours.\nSignalons que la fonction error_log() peut être utilisée d’une part pour écrire\ndirectement dans le ﬁchier des erreurs, d’autre part pour être averti par e-mail si onle souhaite. Il semble cependant préférable de mettre en place ce genre de politiquegrâce aux outils de personnalisation du traitement des erreurs, présentés plus loin,qui offrent l’avantage de pouvoir être redéﬁnis facilement pour un site particulier,indépendamment du reste de l’application.\nErreurs engendrées par l’application\nBien entendu PHP ne peut pas détecter les erreurs internes correspondant à la rupturede règles propres à l’application. Traditionnellement, on gère ces erreurs tant bienque mal en envoyant un message de détresse à l’écran et en interrompant le scriptavec exit oudie. Il est possible de faire mieux en intégrant ces erreurs applicatives\ndans le système de gestion des erreurs de PHP avec la fonction trigger_error()\nqui prend deux paramètres :\n1. le message d’erreur ;\n2. le niveau d’erreur parmi E_USER_NOTICE (valeur par défaut),\nE_USER_WARNING etE_USER_ERROR.\nL’utilisation du troisième niveau ( E_USER_ERROR) provoque de plus l’interrup-\ntion du script si l’erreur est rencontrée, ce qui revient donc (mais de manière plus\npropre) à un exit. L’avantage de cette solution est que les erreurs sont alors traitées\ncomme des erreurs de syntaxe PHP , ce qui permet de les gérer beaucoup plus souple-\nment en les faisant entrer dans le cadre de la gestion d’erreurs décrite précédemment.\nConcrètement, on peut, en jouant seulement sur le paramétrage, faire varier lecomportement de l’ensemble des scripts en demandant à ce que l’afﬁchage ne sefasse plus à l’écran mais dans un ﬁchier de journalisation, y compris pour les erreursengendrées par l’application (et gérées explicitement par le programmeur).\nLa fonction ci-dessous montre quelques exemples d’utilisation de\ntrigger_error() pour une fonction de gestion des ﬁchiers transférés d’un client\nau serveur (voir page 91).\nfunction CopieFichierTransmis ( $fichier , $destination )\n{\n// O n récupère le code d’erreur éventuel\n$code_erreur = $fichier [ ’ error ’ ];\nif($code_erreur = = U P L O A D _ E R R _ O K) {\nif(!copy ( $fichier [ ’tmp_name ’ ] , $destination))\ntrigger_error (\"Impossible de copier le fichier !\" ,\nE_USER_ERROR) ;\n5.2 Gestion des erreurs\n 227\n}\nelse {\n// U n e erreur quelque part?\nswitch ($code_erreur)\n{\ncase UPLOAD_ERR_INI_SIZE :\ntrigger_error (\"L e fichier dépasse la taille m a x.\nautorisée par P H P\" ,\nE_USER_ERROR) ;\nbreak ;\ncase UPLOAD_ERR_FORM_SIZE :\ntrigger_error (\"L e fichier dépasse la taille m a x. \".\n\"autorisée par le formulaire\" ,\nE_USER_ERROR) ;\nbreak ;\ncase UPLOAD_ERR_PARTIAL :\ntrigger_error (\"Le fichier a été transféré partiellement\n\",\nE_USER_ERROR) ;\nbreak ;\n}\n}\n}\n5.2.3 Les exceptions PHP\nLes exceptions existent depuis PHP 5, et sont étroitement associées aux améliora-\ntions de la programmation orientée-objet. Le principe des exceptions a été présentépage 124. Rappelons-le brièvement ici, dans une optique de mise en place d’une\ngestion des erreurs\n4.\nLes exceptions sont des objets, instanciés par le programmeur, et placés dans un\nespace réservé de PHP grâce à l’instruction throw. Le fait de disposer d’un espace\nspéciﬁque pour stocker les exceptions évite de les gérer dans la programmation en\nréservant des variables pour transmettre les codes et les messages d’erreur d’unefonction à l’autre.\nOn peut, à tout moment, « attraper » les exceptions « lancées » précédemment\npar un script avec l’instruction catch. Comme les erreurs, les exceptions fournissent\nquatre informations : un message, un code d’erreur (optionnel), le ﬁchier et le numérode la ligne de l’instruction PHP qui a déclenché l’erreur. Ces informations sontrespectivement obtenues par les méthodes getMessage(), getCode(), getFile()\netgetLine() de la classe prédéﬁnie Exception.\n4. La discussion qui suit suppose acquises les bases de la programmation objet, telles qu’elles sont\nprésentées dans le chapitre 3.\n228\n Chapitre 5. Organisation du développement\nLa classe Exception ne demande qu’à être étendue dans des sous-classes person-\nnalisant la gestion des exceptions et la description des erreurs rencontrées. Voici à\ntitre d’exemple une sous-classe SQLException destinée à gérer plus précisément les\nerreurs survenant au cours d’un accès à un SGBD.\nExemple 5.6 exemples/SQLException.php :Extension de la classe Exception pour les exceptions SQL\n<?php\n/∗∗\n∗Sous −classe de la classe exception , spécialisée pour\n∗ les erreurs soulevées par u n S G B D\n∗/\nclass SQLException extends Exception\n{\n// Propriétés\nprivate $sgbd ; // n o m d u S G B D utilisé\nprivate $code_erreur ; // code d ’ erreur du S G B D\n// Constructeur\nfunction SQLException ($message , $sgbd , $code_erreur=0)\n{\n// Appel du constructeur de la classe parente\nparent :: __construct($message) ;\n// Affectation aux propriétés de la sous −classe\n$this −>sgbd = $sgbd ;\n$this −>code_erreur = $code_erreur ;\n}\n// Méthode ren voyant le S G B D qui a levé l ’ erreur\npublic function getSGBD()\n{\nreturn $this −>sgbd ;\n}\n// Méthode ren voyant le code d ’ erreur du S G B D\npublic function getCodeErreur ()\n{\nreturn $this −>code_erreur ;\n}\n}\n?>\nOn peut alors lancer explicitement une exception instance de SQLException et\nintercepter spéciﬁquement ce type d’exception. Rappelons encore une fois que touteinstance d’une sous-classe est aussi instance de toutes les classes parentes, et donc\nqu’un objet de la classe SQLException est aussi un objet de la classe Exception,c e\nqui permet de le faire entrer sans problème dans le moule de gestion des exceptionsPHP 5.\n5.2 Gestion des erreurs\n 229\nLe fragment de code ci-dessous montre comment exploiter cette gestion des\nexceptions personnalisées.\n// Bloc d’interception des exceptions\ntry\n{\n// Connexion\n$bd = mysql_connect ( ( SERVEUR , NOM, PASSE ) ;\nif(! $bd) // Erreur survenue? O n lance l ’ exception\nthrow new SQLException ( \" Erreur de connexion \" , \"M y S Q L\" ) ;\n...\n}\ncatch (SQLException $e) // Interception d ’une erreur SQL\n{\ntrigger_error (\" Erreur survenue dans \" . $e −>getSGBD () .\n\":\".$ e −>getMessage () , E _ U S E R _ E R R O R) ;\n}\ncatch (Exception) // Interception de n’importe quelle erreur\n{\ntrigger_error (\"Erreur : \" . $e −>getMessage () , E _ U S E R _ E R R O R) ;\n}\nOn a utilisé plusieurs blocs catch, en interceptant les erreurs les plus précises en\npremier. PHP exécutera le premier bloc catch spéciﬁant une classe dont l’exception\nest instance.\nL’utilisation des exceptions implique leur surveillance et leur interception par\nune construction try etcatch. Si, quand le script se termine, PHP constate que\ncertaines exceptions n’ont pas été interceptées, il transformera ces exceptions en\nerreurs standards, avec afﬁchage ou placement dans le ﬁchier des erreurs selon lapolitique choisie. Le message produit est cependant assez peu sympathique. Voici parexemple ce que l’on obtient si on oublie d’intercepter les exceptions soulevées par laclasse d’accès aux bases de données BD.\nFatal error: Uncaught exception ’Exception’ with\nmessage ’Erreur de connexion au SGBD’\nin BD.class.php:23\nOn peut remplacer ce comportement un peu brutal par un gestionnaire d’excep-\ntion personnalisé, comme le montrera la prochaine section.\nL’introduction des exceptions depuis PHP 5 fait de ce dernier –au moins pour cet\naspect – un langage aussi puissant et pratique que C++ ou Java, auxquels il emprunte\nd’ailleurs très exactement le principe et la syntaxe de cette gestion d’erreurs. Lesexceptions offrent un mécanisme natif pour décrire, créer et gérer des erreurs de\ntoutes sortes, sans imposer une gestion « manuelle » basée sur des échanges de codes\nd’erreur au moment des appels de fonctions, suivi du test systématique de ces codes.\nLa gestion des exceptions est d’une grande souplesse : on peut spécialiser les diffé-\nrents types d’exception, choisir à chaque instant celle qu’on veut traiter, « relancer »\n230\n Chapitre 5. Organisation du développement\nl e sa u t r e sp a ru n throw, séparer clairement les parties relevant de la gestion des\nerreurs de celles relevant du code de l’application.\nAttention cependant : le lancer d’une exception interrompt le script jusqu’au\ncatch le plus proche, ce qui n’est pas forcément souhaitable pour toutes les erreurs\ndétectées. Par exemple, quand on teste les données saisies dans un formulaire, on\npréfère en général afﬁcher d’un coup toutes les anomalies détectées pour permettre à\nl’utilisateur de les corriger en une seule fois. Ce n’est pas possible avec des exceptions.\n5.2.4 Gestionnaires d’erreurs et d’exceptions\nPHP permet la mise en place de gestionnaires d’erreurs et d’exceptions personnalisésgrâce aux fonction set_error_handler() etset_exception_handler(). Toutes\ndeux prennent en argument une fonction qui implante la gestion personnalisée.\nCommençons par la gestion des erreurs. La fonction gestionnaire doit prendre\nen entrée 5 paramètres : le niveau d’erreur, le message, le nom du script, le numérode ligne et enﬁn le contexte (un tableau qui contiendra les variables existantes aumoment où la fonction est appelée).\nQuand une erreur est déclenchée, par l’interpréteur PHP ou par le développeur\nv i al af o n c t i o n trigger_error(), PHP appelle la fonction gestionnaire d’erreurs en\nlui passant les valeurs appropriées pour les paramètres. L’exemple ci-dessous montreune fonction de gestion d’erreur.\nExemple 5.7 webscope/lib/GestionErreurs.php :Un gestionnaire d’erreurs PHP\n<?php\n// Définition d’u n gestionnaire d’erreurs.\n// Elle affiche le message en français.\nfunction GestionErreurs ($niveau_erreur , $message ,\n$script , $no_ligne , $contexte= array ())\n{\n// Regardons le niveau de l ’ erreur\nswitch ($niveau_erreur) {\n// Les erreurs suivantes ne doivent pas être transmises ici !\ncase E_ERROR :\ncase E_PARSE :\ncase E_CORE_ERROR :\ncase E_CORE_WARNING :\ncase E_COMPILE_ERROR :\ncase E_COMPILE_WARNING :\necho \"Cela ne doit jamais arriver !! \" ;\nexit ;\ncase E_WARNING :\n$typeErreur = \"Avertissement P H P\" ;\nbreak ;\ncase E_NOTICE :\n$typeErreur = \"Remarque P H P\" ;\n5.2 Gestion des erreurs\n 231\nbreak ;\ncase E_STRICT :\n$typeErreur = \"Syntaxe obsolète P H P 5\" ;\nbreak ;\ncase E_USER_ERROR :\n$typeErreur = \"Avertissement de l ’ application \" ;\nbreak ;\ncase E_USER_WARNING :\n$typeErreur = \"Avertissement de l ’ application \" ;\nbreak ;\ncase E_USER_NOTICE :\n$typeErreur = \"Remarque P H P\" ;\nbreak ;\ndefault :\n$typeErreur = \"Erreur inconnue\" ;\n}\n// Maintenant on affiche en rouge\necho \"<font color=’red’><b>$typeErreur </b> : \" . $message\n. \"<br/>Ligne $no_ligne du script $script </font> <br/>\" ;\n// Erreur utilisateur? O n stoppe le script.\nif($niveau_erreur = = E _ U S E R _ E R R O R) exit ;\n}\n?>\nOn peut noter que les niveaux d’erreur E_ERROR, E_PARSE, E_CORE_ERROR,\nE_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING sont traités de\nmanière rapide : en principe PHP gèrera toujours ce type d’erreur lui-même, sans\nfaire appel au gestionnaire d’erreur ; on ne devrait donc pas les rencontrer ici.\nPour les autres niveaux d’erreur on met en place une gestion personnalisée,\nconsistant ici simplement à afﬁcher les informations en rouge. On peut faire exac-\ntement ce que l’on veut : écrire dans un ﬁchier de log(journalisation), envoyer\nun e-mail à l’administrateur, ou toute combinaison appropriée de ces solutions.Une possibilité par exemple est d’une part d’afﬁcher un message neutre et poli àl’utilisateur du site l’informant que l’application est provisoirement indisponible etque l’équipe d’ingénieurs s’active à tout réparer, d’autre part d’envoyer un e-mail à\ncette dernière pour la prévenir du problème.\nLe gestionnaire d’erreurs est mis en place grâce à l’appel suivant :\n// Gestionnaire personnalisé d’erreurs . Voir GestionErreurs .php.\nset_error_handler(\"GestionErreurs\");\n232\n Chapitre 5. Organisation du développement\nSoulignons que ceci vient remplacer la gestion normale des erreurs PHP , et qu’il\nest donc de sa responsabilité d’agir en fonction du niveau détecté. Notre gestionnaire\ninterrompt donc le script avec une instruction exit quand une erreur de niveau\nE_USER_ERROR est rencontrée. Si l’on souhaite dans un script abandonner, tempo-\nrairement ou déﬁnitivement, la gestion personnalisée des erreurs, on peut revenirau gestionnaire par défaut avec la fonction restore_error_handler(). Cela peut\nêtre utile par exemple quand on inclut des scripts PHP pas entièrement compatiblesPHP 5 et pour lesquels l’interpréteur engendre des messages d’avertissement.\nLe gestionnaire d’exception est basé sur le même principe que le gestionnaire\nd’erreur : on déﬁnit une fonction personnalisée qui prend en entrée un objet instancede la classe Exception (et donc de n’importe laquelle de ses sous-classes). Pour\nfaire simple, on peut transformer l’exception en erreur en appelant le gestionnaired’erreurs déﬁni précédemment.\nExemple 5.8 webscope/lib/GestionExceptions.php :Un gestionnaire d’exceptions PHP\n<?php\n// Définition d’u n gestionnaire d’exceptions. O n fait\n// simplement appel au gestionnaire d ’ erreurs\nfunction GestionExceptions ($exception)\n{\n// O n transforme donc l ’exception en erreur\nGestionErreurs (E _ U S E R _ E R R O R,\n$exception −>getMessage () ,\n$exception −>getFile () ,\n$exception −>getLine ()) ;\n}\n?>\nOn peut alors mettre en œuvre le gestionnaire d’exceptions grâce à l’appel\nsuivant :\nset_exception_handler(\"GestionExceptions\");\nLa fonction GestionExceptions() sera appelée pour toute exception lancée\ndans un script qui n’est pas interceptée par un bloc catch. Une solution possible est\ndonc de ne pas utiliser du tout les tryet les catch et de se reposer entièrement sur\nle gestionnaire d’exceptions. C’est d’ailleurs la solution adoptée pour notre site.\nAttention à ne pas entrer dans une boucle sans ﬁn en utilisant un gestionnaire\nd’erreurs qui lance une exception, laquelle à son tour se transforme en erreur et ainsi\nde suite.\nUne fois ces gestionnaires en place, il sufﬁt de les modiﬁer selon les besoins pour\nobtenir une politique de gestion des erreurs ﬂexible et évolutive.\n5.3 Portabilité multi-SGBD\n 233\n5.3 PORTABILITÉ MULTI-SGBD\nNous abordons maintenant la question de la portabilité sur plusieurs systèmes de\nbases de données. Le présent livre est principalement orienté vers MySQL, mais ceproduit lui-même s’attache à respecter la norme SQL, ce qui ouvre la perspective depouvoir porter une application sur d’autres SGBD. Pour un site spéciﬁque, installé\nen un seul exemplaire, avec le choix déﬁnitif d’utiliser MySQL, la question de la\nportabilité ne se pose pas. À l’autre extrême un logiciel généraliste que l’on souhaitediffuser le plus largement possible gagnera à être compatible avec des systèmesrépandus comme PostgreSQL, ORACLE, voire SQLite. SQLite est une interfaceSQL pour stocker et rechercher des données dans un ﬁchier, sans passer par unserveur de bases de données. SQLite est fourni avec PHP 5 et ne nécessite doncaucune installation autre que celle de PHP .\nLe site W\nEBSCOPE est conçu (et testé) pour être portable, ce qui impose quelques\nprécautions initiales discutées ici.\nMySQL est un SGBD relationnel. Il appartient à une famille de systèmes très\nrépandus – ORACLE, PostgreSQL, SQL Server, SYBASE, DB2, le récent SQLite –qui tous s’appuient sur le modèle relationnel de représentation et d’interrogation desdonnées, modèle dont la principale concrétisation est le langage SQL.\nEn théorie, toute application s’appuyant sur un SGBD relationnel est portable sur\nles autres. En pratique, chaque système ajoute à la norme SQL ses propres spéciﬁcités,\nce qui nécessite, quand on veut concevoir une application réellement portable, de\nbien distinguer ce qui relève de la norme et ce qui relève des extensions propriétaires.Cette section décrit les écueils à éviter et donne quelques recommandations. Lesite proposé dans les chapitres qui suivent s’appuie sur ces recommandations pourproposer un code entièrement portable. La seule modiﬁcation à effectuer pour passerd’un système à un autre est un simple changement de paramètre de conﬁguration.Comme nous allons le voir, le développement d’une application portable n’est pasplus difﬁcile que celle d’une application dédiée, à condition de mettre en placequelques précautions initiales simples.\nCette section peut être omise sans dommage par ceux qui n’envisagent pas\nd’utiliser un autre système que MySQL.\n5.3.1 Précautions syntaxiques\nIl faut bien distinguer deux parties dans SQL. Le langage de déﬁnition de données, ou\nLDD, permet de créer tous les composants du schéma – principalement les tables. Lescommandes sont les CREATE, ALTER,e t DROP. Le langage de manipulation de données\n(LMD) comprend les commandes SELECT, UPDATE, INSERT etDELETE.\nMySQL est très proche de la norme SQL, et tout ce que nous avons présenté\njusqu’ici, à quelques exceptions près, relève de cette norme et peut fonctionner sousun autre SGBD. Ces exceptions sont :\n1. certains types de données, dont, principalement, TEXT ;\n234\n Chapitre 5. Organisation du développement\n2. des constructions comme ENUM etSET;\n3. l’auto-incrémentation des clés (option AUTO_INCREMENT deCREATE TABLE).\nIl sufﬁt d’ignorer ENUM etSET. Pour les types de données, MySQL propose un\nensemble plus riche que celui de la norme SQL. Le tableau 2.1, page 462, donne la\nliste des types disponibles et précise ceux qui appartiennent à la norme SQL ANSI :il faut se limiter à ces derniers pour une application portable.\nCela étant, certains types très pratiques, comme TEXT, ne sont pas normalisés (ou,\nplus précisément, la norme SQL qui préconise BIT VARYING n’est pas suivie). Il est\nsouvent nécessaire d’utiliser ce type car les attributs de type VARCHAR sont limités à\nune taille maximale de 255 caractères. Le type TEXT existe dans PostgreSQL, mais\npas dans ORACLE où son équivalent est le type LONG. Le script de création de notre\nschéma,\nFilms.sql , page 202, est entièrement compatible avec la norme, à l’exception\ndu résumé du ﬁlm, de type TEXT, qu’il faut donc remplacer par LONG si l’on souhaite\nutiliser ORACLE. Ce genre de modiﬁcation affecte l’installation, et pas l’utilisationdu site, ce qui limite les inconvénients.\nUn type normalisé en SQL, mais assez difﬁcile d’utilisation est le type DATE.D a n s\nle cadre d’une application PHP , le plus simple est de stocker les dates au format dit« Unix », soit un entier représentant le nombre de secondes depuis le premier janvier1970. Des fonctions PHP (notamment getDate()) permettent ensuite de manipuler\net d’afﬁcher cette valeur à volonté.\nPour les mots-clés de SQL et les identiﬁcateurs, il n’y a pas de problème si on se\nlimite aux caractères ASCII (mieux vaut éviter les lettres accentuées). L’utilisationdes majuscules et minuscules est en revanche un point délicat. Les mots-clés SQL ne\nsont pas sensibles à la casse, et il en va de même des identiﬁcateurs. Pour un système\nrelationnel, toutes les syntaxes suivantes seront donc acceptées, quelle que soit lacasse employée pour créer le schéma :\n•SELECT TITRE FROM FILM ;\n•select titre from film ;\n•Select Titre From Film.\nAttention cependant à MySQL qui stocke chaque table dans un ﬁchier dont le\nnom est celui donné à la table dans la commande CREATE TABLE. Sous un système\nUNIX où les noms de ﬁchiers sont sensibles à la casse, MySQL ne trouvera ni la\ntable FILM ni la table ﬁlmsi le ﬁchier s’appelle Film. Il faut donc toujours nommer les\ntables de la même manière dans la clause FROM, ce qui est facilité par l’emploi d’une\nconvention uniforme comme – par exemple – une majuscule pour la première lettre\net des minuscules ensuite.\nIl faut de plus prendre en compte PHP qui, lui, est sensible à la casse dans les noms\ndes variables. Les variables $TITRE, $titre et$Titre sont donc considérées comme\ndifférentes. Ces noms de variables sont attribués automatiquement par les fonctionsPHP d’accès aux bases de données comme mysql_fetch_object() (MySQL),\npg_fetch_object() (PostgreSQL), oci_fetch_object() (ORACLE), etc. Tout\n5.3 Portabilité multi-SGBD\n 235\ndépend de la manière dont ces fonctions nomment les attributs dans les résultats. Or\nles systèmes appliquent des règles très différentes :\n•MySQL utilise la même casse que celle de la clause SELECT : après un SELECT\nTitre FROM Film on récupèrera donc une variable $Titre ;\n•PostgreSQL utilise toujours les minuscules, quelle que soit la casse employée :\naprès un SELECT Titre FROM Film on récupèrera donc une variable\n$titre ;\n•ORACLE utilise toujours les majuscules, quelle que soit la casse employée :\naprès un SELECT Titre FROM Film on récupèrera donc une variable\n$TITRE.\nCes différentes conventions sont dangereuses car elle inﬂuent directement sur la\ncorrection du code PHP . Avec l’apparition de la couche PDO qui uniformise l’accèsaux bases de données depuis la version PHP 5.1, le problème est plus facile à résoudre,mais il est préférable dès le départ d’adopter des noms dattributs loù la casse n’est passigniﬁcative : nous avons choisi d’utiliser uniquement les minuscules.\nDernier point auquel il faut être attentif : l’échappement des chaînes de caractères\npour traiter les caractères gênants (typiquement, les apostrophes) avant une insertionou une mise à jour. On utilise traditionnellement la fonction addSlashes() qui\nconvient pour MySQL et PostgreSQL, mais par pour ORACLE, SQLite ou SYBASEqui utilisent le doublement des apostrophes. Il faut donc encapsuler la techniqued’échappement dans une fonction qui se charge d’appliquer la méthode appropriéeen fonction du SGBD utilisé (c’est la méthode prepareChaine() de notre classe\nBD).\n5.3.2 Le problème des séquences\nVoyons maintenant le problème de l’incrémentation automatique des identiﬁants. Ilest très fréquent d’utiliser comme clé primaire d’une table un numéro qui doit doncêtre incrémenté chaque fois que l’on insère une nouvelle ligne. En l’absence d’unmécanisme spéciﬁque pour gérer ce numéro, on peut penser à prendre le numéromaximal existant et à lui ajouter 1. En SQL cela s’exprime facilement comme ceci :\nSELECT MAX (id) + 1 FROM <table >\n−− puis insertion dans la table avec le numéro obtenu\nCette solution n’est pas très satisfaisante. Il faut en effet s’assurer que deux sessions\nutilisateur ne vont pas simultanément effectuer la requête donnant le nouvel id, souspeine de se retrouver avec deux commandes INSERT utilisant le même identiﬁant.\nOn peut verrouiller la table avant d’effectuer la requête SELECT,a up r i xd ’ u n\nblocage temporaire mais général, y compris pour les sessions qui ne cherchent pasà créer d’identiﬁant. Enﬁn, dernier inconvénient, cela peut soulever des problèmesde performances.\nTous les systèmes fournissent donc des générateurs d’identiﬁants, ou séquences .\nMalheureusement aucun n’applique la même méthode. Dans MySQL, on peut asso-cier une option AUTO_INCREMENT à une clé primaire (voir par exemple page 199).\n236\n Chapitre 5. Organisation du développement\nSi on n’indique pas cette clé dans une commande INSERT, MySQL se charge auto-\nmatiquement d’attribuer un nouvel identiﬁant. De plus il est possible de récupérer\nl’identiﬁant précédemment attribué avec la fonction last_insert_id().S Q L i t e\nemploie la même méthode, sans spéciﬁer AUTO_INCREMENT.\nSous ORACLE et PostgreSQL, on utilise des séquences5qui sont des composants\ndu schéma dédiés à la génération d’identiﬁants. Une séquence est créée par lacommande DDL suivante :\nCREATE SEQUENCE <nomS´ equence>;\nIl existe, pour chaque système, de nombreuses options permettant d’indiquer la\nvaleur initiale, la valeur maximale, le pas d’incrémentation, etc. Sous PostgreSQL,on peut obtenir un nouvel identiﬁant en appliquant la fonction NEXTVAL() àl a\nséquence. Ensuite, dans la même session, on obtient l’identiﬁant qui vient d’êtreattribué avec la fonction CURRVAL(). Voici un exemple de session sous PostgreSQL.\nOn crée la séquence, on appelle deux fois NEXTVAL() puis une fois CURRVAL().\nFilms=# CREATE SEQUENCE ma_sequence;\nCREATE SEQUENCEFilms=# SELECT NEXTVAL(’ma_sequence’);\nnextval\n---------\n1\nFilms=# SELECT NEXTVAL(’ma_sequence’);\nnextval\n---------\n2\nFilms=# SELECT CURRVAL(’ma_sequence’);\ncurrval\n---------\n2\nLe fonctionnement est pratiquement identique sous ORACLE. Pour obtenir, dans\nune application PHP , un générateur d’identiﬁants qui fonctionne sur tous les SGBD,\nil faut donc écrire une fonction (ou une méthode dans une classe) qui fait appel,selon le système utilisé, à la méthode appropriée. En ce qui concerne MySQL, si onsouhaite que l’application soit portable, on ne peut pas utiliser l’auto-incrémentationdes lignes de la table ; il faut donc se ramener aux séquences trouvées dans les autressystèmes. On y arrive aisément en créant une table spéciale, avec un seul attributauto-incrémenté. Chaque insertion dans cette table génère un nouvel identiﬁant quel’on peut alors obtenir avec la fonction last_insert_id(). Voici, sous MySQL,\nune session équivalente à celle de PostgreSQL.\n5. PostgreSQL fournit également un type non standard SERIAL qui fonctionne comme l’auto-\nincrémentation de MySQL.\n5.3 Portabilité multi-SGBD\n 237\nmysql> CREATE TABLE SequenceArtiste\n-> (id INTEGER NOT NULL AUTO_INCREMENT,\n-> PRIMARY KEY (id));\nmysql>\nmysql> insert into SequenceArtiste values();\nQuery OK, 1 row affected (0,01 sec)\nmysql> insert into SequenceArtiste values();\nQuery OK, 1 row affected (0,00 sec)\nmysql> select last_insert_id();\n+------------------+| last_insert_id() |+------------------+\n|2 |\n+------------------+\nLa classe BD, décrite dans le chapitre 3, est enrichie d’une méthode abstraite\ngenereID(), déclarée comme suit :\n// G´ en´ eration d’un identifiant\nabstract public function genereID($nomSequence);\nCette méthode est ensuite déclinée dans chaque sous-classe correspondant à\nchaque système. Voici la méthode pour MySQL.\n// G´ en´ eration d’un identifiantpublic function genereID($nomSequence){\n// Insertion d’un ligne pour obtenir l’auto-incr´ ementation$this->execRequete(\"INSERT INTO $nomSequence VALUES()\");\n// Si quelque chose s’est mal pass´ e, on a lev´ e une exception,\n// sinon on retourne l’identifiantreturn mysql_insert_id();\n}\nEt la voici pour PostgreSQL.\n// G´ en´ eration d’un identifiantpublic function genereID($nomSequence)\n{\n// Appel ` al as ´ equence\n$res = $this->execRequete(\"SELECT NextVal(’$nomSequence’) AS id\");$seq = $this->objetSuivant($res);\nreturn $seq->id;\n}\nLa gestion des séquences est le seul aspect pour lequel la programmation d’une\napplication PHP/MySQL s’écarte légèrement des techniques que l’on emploierait si\n238\n Chapitre 5. Organisation du développement\non ne visait pas une application portable. Comme on le voit avec la solution adoptée\nci-dessus, la modiﬁcation est d’une part tout à fait mineure, d’autre part invisible pour\nl’application qui se contente d’appeler le générateur quand elle en a besoin.\n5.3.3 PDO, l’interface générique d’accès aux bases relationnelles\nLa dernière chose à faire pour assurer la portabilité de l’application est d’utiliserune interface normalisée d’accès à la base de données, qui cache les détails desAPI propres à chaque système, comme le nom des fonctions, l’ordre des paramètres,le type du résultat, etc. Depuis la version 5.1 de PHP cette interface existe demanière standardisée sour le nom PHP Data Objects (PDO). PDO ne dispense pas\ndes précautions syntaxiques présentées ci-dessus, mais fournit des méthodes d’accèsstandardisées à une base de données, quel que soit le système sous-jacent.\nPDO ne présente aucune difﬁculté maintenant que vous êtes rôdés à l’interface\nPHP/MySQL. Voici un exemple similaire au script ApplClasseMySQL.php , page 119,\npour interroger la table FilmSimple .\nExemple 5.9 exemples/ApplPDO.php :Utilisation de PDO\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \">\n<head>\n<title >Interface P D O </title ><link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\" />\n</head>\n<body>\n< h 1 >Illustration de l ’interface P D O </h 1 >\n<?php\n/∗∗\n∗Exemple de programmation avec P D O\n∗/\nrequire_once (\"Connect.php\") ;\ntry {\n// O n se connecte\n$bd = new PDO( ’ mysql : host= ’ .SERVEUR. ’ ; dbname= ’ .BASE, N O M , PASSE\n);\n// O n exécute une requête\n$ r e s u l t a t = $bd −>q u e r y ( \" SELECT ∗F R O M FilmSimple \") ;\n// O n récupère les lignes\nwhile ($film = $resultat −>fetch (P D O::F E T C H _ O B J)) {\n5.3 Portabilité multi-SGBD\n 239\necho \"<b>$film −>titre </b>, paru en $film −>annee , r é a l is é \"\n. \"par $film −>prenom_realisateur $film −>nom_realisateur.<br\n/>\\n\";\n}\n// Et on ferme le curseur\n$resultats −>closeCursor () ;\n}\ncatch(Exception $e) {\necho ’ Erreur P D O : ’ . $e −>getCode . \" −− \".$ e −>getMessage ()\n.’ < b r / > ’ ;\n}\n?>\n</body>\n</html>\nOn commence donc par instancier une connexion avec la base de données. Il\ns’agit d’un objet de la classe PDO, dont le constructeur prend en entrée les paramètres\nhabituels : serveur, nom de la base, et compte de connexion. On précise également\nque l’on se connecte à MySQL. C’est le seul point à modiﬁer pour utiliser un autresystème.\nOn peut ensuite exécuter une requête d’interrogation avec la méthode query().\nElle renvoie un objet instance de PDOStatement qui sert à parcourir le résultat avec\nla méthode fetch(). On passe à cette dernière méthode le format (objet ou tableau)\ndans lequel on souhaite obtenir le résultat.\nTout est donc semblable, à quelques détails près, à ce que nous utilisons depuis\nplusieurs chapitres pour MySQL. Quand on veut protéger par un échappement lesdonnées à insérer dans une requête, on utilise la méthode quote(). Notez égale-\nment que PDO distingue les requêtes d’interrogation, exécutées avec query(),d e s\nrequêtes de mise à jour pour lesquelles on utilise exec().\nSi vous voulez créer une application portable multi-SGBD, l’apprentissage de\nPDO ne pose aucun problème. Nous y revenons de manière plus complète dans lecadre de la programmation avec le Zend Framework, chapitre 9. Pour le site W\nEB-\nSCOPE , nous continuons à utiliser la classe abstraite BD, conçue dans le même but, et\ndont la réalisation est décrite dans le chapitre 3. Rappelons que cette classe ﬁxe lesméthodes communes à tous les systèmes, et se décline en sous-classes implantant cesméthodes pour chaque système utilisé. Rien n’empêche de revoir l’implantation decette classe avec PDO, de manière transparente pour le reste de l’application. Nouspouvons donc considérer que notre application est portable d’un SGBD à un autre.\n\nArchitecture du site :\nlepattern MVC6\nCe chapitre est consacré au « motif de conception » ( design pattern )Modèle-Vue-\nContrôleur (MVC). Ce pattern est maintenant très répandu, notamment pour la\nréalisation de sites web, et mène à une organisation rigoureuse et logique du code.\nUn des objectifs est la séparation des différentes « couches » constituant une\napplication, de manière à pouvoir travailler indépendamment sur chacune. Il devrait\npar exemple toujours être possible de revoir complètement la présentation d’un sitesans toucher au code PHP , et, réciproquement, le code PHP devrait être réalisé avecle minimum de présupposés sur la présentation. La question de l’évolutivité du codeest elle aussi essentielle. Un logiciel évolue toujours, et doit donc être modiﬁablefacilement et sans dégradation des fonctions existantes (régression). Enﬁn, dans tous\nles cas, l’organisation du code doit être sufﬁsamment claire pour qu’il soit possible de\nretrouver très rapidement la partie de l’application à modiﬁer, sans devoir ouvrir desdizaines de ﬁchiers.\nCe chapitre présente le MVC dans un contexte pratique, en illustrant les diffé-\nrentes composantes par des fonctionnalités intégrées au site W\nEBSCOPE .D ef a i t ,à\nla ﬁn du chapitre nous disposerons d’un cadre de développement MVC dans lequell’ensemble du site prendra place. Pour des raisons de clarté et d’introduction à desconcepts parfois complexes, le MVC présenté ici vise davantage à la simplicité età la légèreté qu’à la richesse. L’apprentissage de solutions plus complètes destinées àdes développements à grande échelle devrait en être facilité. J’espère vous convaincreainsi de l’intérêt de cette approche pour toutes vos réalisations.\n242\n Chapitre 6. Architecture du site : le pattern MVC\n6.1 LE MOTIF DE CONCEPTION MVC\nCette introduction au MVC est volontairement courte aﬁn de dire l’essentiel sans\nvous surcharger avec toutes les subtilités conceptuelles qui accompagnent le sujet.\nJe passe ensuite directement aux aspects pratiques avec la réalisation « maison » du\nMVC que nous allons utiliser pour implanter notre site.\n6.1.1 Vue d’ensemble\nL’objectif global du MVC est de séparer les aspects traitement ,données etprésentation ,\net de déﬁnir les interactions entre ces trois aspects. En simpliﬁant, les données\nsont gérées par le modèle , la présentation par la vue, les traitements par des actions\net l’ensemble est coordonné par les contrôleurs. La ﬁgure 6.1 donne un aperçu de\nl’architecture obtenue, en nous plaçant d’emblée dans le cadre spéciﬁque d’une\napplication web.\nVue Modèlerequête HTTP\n...\nréponse HTTPContrôleur A Contrôleur B\nAction A1Contrôleur\n...frontal\nAction B1 Action A2\nFigure 6.1 — Aperçu général d’une application MVC\nLa ﬁgure montre une application constituée de plusieurs contrôleurs, chacun\nconstitué d’un ensemble d’actions. La première caratéristique de cette organisationest donc de structurer hiérarchiquement une application. Dans les cas simples, unseul contrôleur sufﬁt, contenant l’ensemble des actions qui constituent l’application.Pour de très larges applications, on peut envisager d’ajouter un niveau, les modules,\nqui regroupent plusieurs contrôleurs.\nChaque requête HTTP est prise en charge par une action dans un contrôleur. Il\nexiste un contrôleur frontal qui analyse une requête HTTP , détermine cette action et\nse charge de l’exécuter en lui passant les paramètres HTTP .\nAu niveau du déroulement d’une action, les deux autres composants, la vue et\nle modèle, entrent en jeu. Dans le schéma de la ﬁgure 6.1, l’action A\n1s’adresse au\nmodèle pour récupérer des données et peut-être déclencher des traitements spéci-ﬁques à ces données. L’action passe ensuite les informations à présenter à la vue quise charge de créer l’afﬁchage. Concrètement, cette présentation est le plus souventun document HTML qui constitue la réponse HTTP .\n6.1 Le motif de conception MVC\n 243\nIl s’agit d’un schéma général qui peut se rafﬁner de plusieurs manières, et donne\nlieu à plusieurs variantes, notamment sur les rôles respectifs des composants. Sans\nentrer dans des discussions qui dépassent le cadre de ce livre, voici quelques détailssur le modèle, la vue et le contrôleur.\n6.1.2 Le modèle\nLe modèle est responsable de la préservation de l’ étatd’une application entre deux\nrequêtes HTTP , ainsi que des fonctionnalités qui s’appliquent à cet état. Toute don-née persistante doit être gérée par la couche « modèle ». Cela concerne les données\nde session (le panier dans un site de commerce électronique par exemple) ou les\ninformations contenues dans la base de données (le catalogue des produits en vente,pour rester dans le même exemple). Cela comprend également les règles, contrainteset traitements qui s’appliquent à ces données, souvent désignées collectivement parl’expression « logique de l’application ».\n6.1.3 La vue\nLa vue est responsable de l’interface, ce qui recouvre essentiellement les fragmentsHTML assemblés pour constituer les pages du site. Elle est également responsable dela mise en forme des données (pour formater une date par exemple) et doit d’ailleurs\nse limiter à cette tâche. Il faut prendre garde à éviter d’introduire des traitements\ncomplexes dans la vue, même si la distinction est parfois difﬁcile. En principe la vuene devrait pas accéder au modèle et obtenir ses données uniquement de l’action (maisil s’agit d’une variante possible du MVC).\nLa vue est souvent implantée par un moteur de templates (que l’on peut traduire\npar « gabarit »), dont les caractéristiques, avantages et inconvénients donnent lieu\nà de nombreux débats. Nous utiliserons un de ces moteurs dans notre MVC, ce qui\nvous permettra de vous former votre propre opinion.\n6.1.4 Contrôleurs et actions\nLe rôle des contrôleurs est de récupérer les données utilisateur, de les ﬁltrer et lescontrôler, de déclencher le traitement approprié (via le modèle), et ﬁnalement dedéléguer la production du document de sortie à la vue. Comme nous l’avons indiquéprécédemment, l’utilisation de contrôleurs a également pour effet de donner unestructure hiérarchique à l’application, ce qui facilite la compréhension du code et\nl’accès rapide aux parties à modiﬁer. Indirectement, la structuration « logique » d’une\napplication MVC en contrôleurs et actions induit une organisation physique adaptée.\n6.1.5 Organisation du code et conventions\nLa ﬁgure 6.2 montre les répertoires constituant l’organisation du code de notreapplication W\nEBSCOPE .\n244\n Chapitre 6. Architecture du site : le pattern MVC\nwebscopefonctions.php\nconstantes.php\n...\nimagesindex.php\napplication\njs\ncsslibinstallationBD.class.php\nautres librairiesFormulaire.class.php\n...\nFigure 6.2 — Organisation du code\nPremière remarque importante : toutes les requêtes HTTP sont traitées par un\nunique ﬁchier index.php. Ce choix permet de rassembler dans un seul script les\ninclusions de ﬁchiers, initialisations et réglages de conﬁguration qui déterminent le\ncontexte d’exécution de l’application. Toutes les URL de l’application sont de laforme :\nhttp://serveur/webscope/index.php?ctrl= nomctrl&action=nomact[autres paramètres]\nOn indique donc, avec des paramètres HTTP (ici en mode get), le nom du\ncontrôleur nomctrl et le nom de l’action nomact. Ces paramètres sont optionnels :\npar défaut le nom du contrôleur est Index et le nom de l’action est index (notez que,\npar convention, les contrôleurs commencent par une majuscule, et pas les actions).La requête HTTP:\nhttp://serveur/webscope/index.php\ndéclenche donc l’action index du contrôleur Index. On peut même omettre l’indi-\ncation du script\nindex.php si le serveur web utilise ce script par défaut.\nREMARQUE – Il faudrait mettre en place un mécanisme pour s’assurer que toute URL\nincorrecte est redirigée vers index.php ; il faudrait aussi, pour des raisons de sécurité, placer\ntous les fichiers qui ne peuvent pas être référencés directement dans une URL (par exemple les\nclasses et bibliothèques de lib) en dehors du site web. Voir le chapitre 9 pour ces compléments.\nRevenons à l’organisation du code de la ﬁgure 6.2. Les répertoires css,images\netjscontiennent respectivement les feuilles de style CSS, les images et les scripts\nJavascript. Le répertoire installation contient les ﬁchiers permettant la mise en route\nde l’application (par exemple des scripts SQL de création de la base). Les deux\nrépertoires libetapplication sont plus importants.\n•libcontient tous les utilitaires indépendants des fonctionnalités de l’appli-\ncation (le code « structurel ») : connexion et accès aux bases de données ;\n6.2 Structure d’une application MVC : contrôleurs et actions\n 245\nproduction de formulaires ; classes génériques MVC, bibliothèques externes\npour la production de graphiques, l’accès à des serveurs LDAP , etc.\n•application contient tout le code fonctionnel de l’application : les contrôleurs\n(répertoire controleurs), les modèles (répertoire modeles ), les vues (répertoire\nvues), les fonctions et les classes, etc.\nPlacer indépendamment les bibliothèques et utilitaires permet une mise à jour\nplus facile quand de nouvelles versions sont publiées. D’une manière générale, cette\norganisation permet de localiser plus rapidement un ﬁchier ou une fonctionnalitédonnée. C’est une version un peu simpliﬁée des hiérarchies de répertoires préconiséespar les frameworks , que nous étudierons dans le chapitre 9.\nÀ cette organisation s’ajoutent des conventions d’écriture qui clariﬁent le code.\nCelles utilisées dans notre site sont conformes aux usages les plus répandus :\n1. les noms de classes et de fonctions sont constitués d’une liste\nde mots-clés, chacun commençant par une majuscule (exemple :\nAfficherListeFilms());\n2. les noms de méthodes suivent la même convention, à ceci près que la première\nlettre est une minuscule (exemple : chercheFilm());\n3. les noms de tables, d’attributs et de variables sont en minuscules ; (exemple :\ndate_de_naissance);\n4. les constantes sont en majuscules (exemple : SERVEUR);\n5. les contrôleurs s’appelent nomCtrl, et sont des classes héritant de la classe\nControleur (exemple : SaisieCtrl()) ; les actions d’un contrôleur sont les\nméthodes de la classe.\nOn distingue ainsi du premier coup d’œil, en regardant un script, les différentes\ncatégories syntaxiques. Tous ces choix initiaux facilitent considérablement le déve-\nloppement et la maintenance.\n6.2 STRUCTURE D’UNE APPLICATION MVC : CONTRÔLEURS\nET ACTIONS\nVoyons maintenant le fonctionnement des contrôleurs et la manière dont l’applica-tion détermine l’action à exécuter.\n6.2.1 Le fichier index.php\nCommençons par le script index.php , ci-dessous.\nExemple 6.1 webscope/index.php :L’unique script recevant des requêtes HTTP\n<?php\n// Indique le niveau des erreurs\nerror_reporting (E_ALL | ~E_STRICT) ;\n246\n Chapitre 6. Architecture du site : le pattern MVC\n// Zone par défaut pour les calculs de date\ndate_default_timezone_set(\"Europe/ Paris \");\n// Calcule automatiquement le chemin depuis la racine\n// jusqu ’a u répertoire courant\n$root = dirname (__FILE__) . D I R E C T O R Y _ S E P A R A T O R ;\n// O n complète la liste des chemins d’inclusion\nset_include_path( ’ . ’ .\nPATH_SEPARATOR . $ r o o t . ’ l i b ’ . DIRECTORY_SEPARATOR .\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n ’ . DIRECTORY_SEPARATOR\n.\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n / m o d e l e s ’ .\nDIRECTORY_SEPARATOR .\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n / f o n c t i o n s ’ .\nDIRECTORY_SEPARATOR .\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n / c l a s s e s ’ .\nDIRECTORY_SEPARATOR .\nPATH_SEPARATOR . g e t _ i n c l u d e _ p a t h ( )\n);\n// L a configuration\nrequire_once (\"Config .php\") ;\n// Classes de la bibliothèque\nrequire_once (\"Tableau .php\") ;\nrequire_once (\"Formulaire .php\") ;\nrequire_once (\"B D M y S Q L.php\") ;\nrequire_once (\"Template .php\") ;\n// Fonctions diverses\nrequire_once (\"NormalisationHTTP .php\") ;require_once (\"GestionErreurs .php\") ;\nrequire_once (\"GestionExceptions .php\") ;\n// Si on est en échappement automatique , on annule\n// les échappements pour que l ’ application soit indépendante\n// de magic_quote_gpc\nif(get_magic_quotes_gpc ()) {\n$_POST = NormalisationHTTP ($_POST) ;\n$_GET = NormalisationHTTP ($_GET) ;\n$_REQUEST = NormalisationHTTP ($_REQUEST) ;\n$_COOKIE = NormalisationHTTP ($_COOKIE) ;\n}\n// Indiquons si on affiche ou pas les erreurs , avec\n// la constante venant de Config.php\nini_set ( \" d i s p l a y _ e r r o r s \" , DISPLAY_ERRORS ) ;\n// Gestionnaire personnalisé d’erreurs . Voir GestionErreurs .php.\nset_error_handler(\"GestionErreurs\");\n6.2 Structure d’une application MVC : contrôleurs et actions\n 247\n// Gestionnaire personnalisé d’exceptions . Voir GestionExceptions\n// . php .\nset_exception_handler(\"GestionExceptions\") ;\n// Tout est prêt. O n charge le contrôleur frontal\nrequire_once( ’ Frontal .php ’) ;\n$frontal = n ew Frontal () ;\n// O n d e m a n d e a u contrôleur frontal de traiter la requête H T T P\ntry {\n$frontal −>execute () ;\n}\ncatch (Exception $e) {\necho \"Exception levée dans l ’ application . <br/>\"\n. \"<b>Message </b> \" . $e −>getMessage () . \"<br/>\"\n.\" < b > F i c h i e r < / b > \".$ e −>getFile ()\n. \"<b>Ligne </b> \" . $e −>getLine () . \"<br/>\" ;\n}\nLes commentaires indiquent assez clairement le rôle de chaque instruction. L’ap-\np e ld el af o n c t i o n set_include_path() est étroitement lié à l’organisation du\ncode : il permet de placer dans la liste des répertoires d’inclusion de l’interpréteur\nPHP ceux qui contiennent nos fonctions et classes.\nset_include_path( ’ . ’ .\nPATH_SEPARATOR . $ r o o t . ’ l i b ’ . DIRECTORY_SEPARATOR .\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n ’ . DIRECTORY_SEPARATOR\n.\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n / m o d e l e s ’ .\nDIRECTORY_SEPARATOR .\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n / f o n c t i o n s ’ .\nDIRECTORY_SEPARATOR .\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n / c l a s s e s ’ .\nDIRECTORY_SEPARATOR .\nPATH_SEPARATOR . g e t _ i n c l u d e _ p a t h ( )\n);\nLes constantes PATH_SEPARATOR etDIRECTORY_SEPARATOR sont déﬁnies par\nPHP et servent à ne pas dépendre du système hôte (Linux ou Mac OS X utilisent le\n« / » pour séparer les noms de répertoire, Windows le « \\»).\nOn peut ensuite charger les utilitaires nécessaires au fonctionnement de l’appli-\ncation, avec require_once(). Notez qu’on n’indique pas le chemin d’accès vers\nles contrôleurs, car ceux-ci ne sont pas systématiquement chargés. Seul le contrôleurconcerné par une requête est chargé, et c’est le contrôleur frontal qui s’en charge\navec sa méthode execute().\nLa directive magic_quotes_gpc est susceptible de changer d’une conﬁguration\nà une autre, passant de OnàOff. Ce problème a été discuté en détail page 68, et la\nsolution préconisée alors est ici appliquée : toutes les données provenant de HTTP\n248\n Chapitre 6. Architecture du site : le pattern MVC\nsont « normalisées » pour annuler l’échappement qui a éventuellement été pratiqué\nsuite au paramétrage à Ondemagic_quotes_gpc.\nOn peut ensuite développer tout le reste du site en considérant que\nmagic_quotes_gpc vaut Off. Il serait bien sûr plus facile de pouvoir changer la\nconﬁguration au moment de l’exécution mais ce n’est pas possible pour cettedirective. Il est probable qu’elle sera supprimée en PHP 6.\nNotez enﬁn qu’on utilise la fonction init_set() pour ﬁxer le paramètre\ndisplay_errors. Sa valeur est déterminée par la constante DISPLAY_ERRORS,\ndéﬁnie dans le ﬁchier\nConfig.php , qu’il faut absolument placer à Off sur un site en\nproduction.\n6.2.2 Le contrôleur frontal\nLe contrôleur frontal est une instance de la classe Frontal dont le rôle est de\n« router » la requête HTTP vers le contrôleur et l’action appropriés. Comme d’ha-bitude avec l’approche orientée-objet, on peut se contenter d’utiliser une classe sansconnaître son implantation, ou inspecter cette dernière pour se faire une idée de lamanière dont les choses sont traitées. Pour satisfaire votre curiosité, voici le code dela méthode execute() dans\nFrontal.php (ce ﬁchier se trouve dans lib).\nfunction execute ()\n{\n// D’abord , on récupère les noms du contrôleur et de l ’ action\nif(isSet( $ _ G E T[ ’controleur ’]))\n$controleur = ucfirst ($_GET [ ’ c o n t r o l e u r ’ ] ) . \" C t r l \" ;\nelse\n$controleur = \"IndexCtrl\" ;\nif( i s S e t ($_GET [ ’ a c t i o n ’ ] ) )\n$action = lcfirst( $ _ G E T[ ’action ’]);\nelse\n$action = \"index\" ;\n// Maintenant chargeons la classe\n$chemin = \" c o n t r o l e u r s \" . DIRECTORY_SEPARATOR . $ c o n t r o l e u r\n.\" . p h p \" ;\nif(file_exists ( \" a p p l i c a t i o n \" . DIRECTORY_SEPARATOR . $chemin\n)) {\nrequire_once($chemin) ;\n}else {\nthrow new Exception (\"Le contrôleur <b>$controleur </b> n ’\nexiste pas\");\n}\n// O n instancie u n objet\neval (\"\\$ctrl = new $controleur () ; \");\n// Il faut vérifier que l ’action existe\nif(!method_exists ($ctrl , $action)) {\n6.2 Structure d’une application MVC : contrôleurs et actions\n 249\nthrow new Exception (\"L ’ action <b>$action </b> n ’ existe pas\n\");\n}\n// Et pour finir il n’y a plus qu’à exécuter l ’action\ncall_user_func (array ($ctrl , $action));\n}\nEssentiellement, elle détermine le contrôleur et l’action en fonction des para-\nmètres reçus dans la requête HTTP . Conformément à nos conventions, un contrôleur\nnommé control est implanté par une classe nommée control Ctrl et se trouve\ndans le ﬁchier control Ctrl.php du répertoire application/controleurs .O nv é r i ﬁ e\ndonc que ce ﬁchier existe, faute de quoi on lève une exeption. On instancie ensuitece contrôleur avec la fonction eval(), qui permet d’évaluer une expression PHP\nconstruite dynamiquement (ce qui est le cas ici puisqu’on ne sait pas à l’avance quelest le nom de la classe à instancier). Finalement on vériﬁe que l’action demandée est\nbien implantée par une méthode dans la classe instanciée, et si oui, on l’exécute.\nCe fragment de code est un exemple de ce que l’on pourrait appeler « méta-\nprogrammation » en PHP : on crée par programmation du code PHP que l’on exé-\ncute. C’est une pratique assez courante en programmation avancée, car elle permetde résoudre élégamment des problèmes assez difﬁciles à traiter dans des languages\nmoins souples.\nEn résumé, le contrôleur frontal charge la classe du contrôleur, l’instancie et\nexécute la méthode correspondant à l’action. Voyons maintenant le contrôleur\nlui-même.\n6.2.3 Créer des contrôleurs et des actions\nCréer un contrôleur est extrêmement simple : on ajoute un ﬁchier nomCtrl.php\ndans application/controleurs ,o ùnom est le nom du contrôleur. Ce ﬁchier contient une\nclasse qui hérite de Controleur. Voici le code d’un contrôleur servant d’exemple.\nExemple 6.2 webscope/application/controleurs/TestCtrl.php :Le contrôleur test\n<?php\n/∗∗\n∗@category webscope\n∗@copyright Philippe Rigaux , 2008\n∗@license G P L\n∗@package test\n∗/\nrequire_once (\"Controleur .php\") ;\n/∗∗\n∗Controleur de test , montrant comment implanter\n∗des actions dans un contrôleur .\n∗/\n250\n Chapitre 6. Architecture du site : le pattern MVC\nclass TestCtrl extends Controleur\n{\n/∗∗\n∗Action par défaut −affichage de la liste des régions\n∗/\nfunction index ()\n{\n// Affichage d e la liste des régions\n$resultat = $this −>bd−>e xe c Re que t e ( \"SELECT ∗F R O M Region\") ;\nwhile ($region = $this −>bd−>objetSuivant ( $resultat ))\necho \"<b>$region −>nom < / b>< b r / > \" ;\n}\n}\n?>\nLe code est une classe qui sert simplement de « coquille » à une liste de méthodes\npubliques, sans paramètre, implantant les actions. Ajouter une action revient donc à\najouter une méthode. La seule action disponible ici est index, que l’on appelle avec\nl’URL :\nhttp://serveur/webscope/index.php?ctrl=test&action=index\nOu bien, plus simplement\nhttp://serveur/webscope/?ctrl=test\nen tirant parti du fait qu’index est l’action par défaut, et index.php le script par défaut.\nEn étudiant cette action, on constate que l’objet-contrôleur dispose d’une pro-\npriété $this->bd, qui permet d’exécuter des requêtes. D’où vient cet objet ? De\nla super-classe Controleur qui instancie automatiquement un objet de la classe\nBDMySQL dans son constructeur. Tous les contrôleurs, sous-classes de Controleur,\nhéritent de ce constructeur et, automatiquement, on dispose donc d’une connexionavec la base. Voici le code du constructeur de Controleur.\nfunction __construct ()\n{\n/∗\n∗L e contrôleur initialise plusieurs objets utilitaires :\n∗− une instance de B D pour accéder à la base de données\n∗− une instance du moteur de templates pour gérer la vue\n∗/\n// Initialisation de la session P H P\nsession_start () ;\n// Connexion à la base\n$this −>bd = new BDMySQL (NOM, PASSE , BASE , SERVEUR) ;\n6.3 Structure d’une application MVC : la vue\n 251\n// Instanciation du moteur de templates\n$this −> vue = n e w Template (\"application\" .\nDIRECTORY_SEPARATOR . \" v u e s \" ) ;\n// O n charge systématiquement le \"layout\" du site\n$this −>vue −>setFile (\"page\" , \" layout . tpl \") ;\n// et initialisation d u contenu et d u titre .\n$this −>vue −>contenu =\" \" ;\n$this −>vue −>titre_page = \"\";\n// Recherche de la session\n$this −>initSession ( session_id ()) ;\n// Initialisation d e la partie d u contenu\n// qui montre soit un formulaire , de connexion ,// soit un lien de déconnexion\n$this −>statutConnexion () ;\n}\nOn peut noter que le constructeur instancie également un moteur de templates\npour gérer la vue, accessible dans $this->vue, ainsi que des informations relatives\nàl as e s s i o n .N o u syr e v i e n d r o n s .\nAu sein d’une action, on programme en PHP de manière tout à fait classique. Il\nne s’agit pas vraiment de programmation orientée-objet au sens où nous l’avons vu\ndans les chapitres précédents. L’approche objet se borne ici à structurer le code, et àbénéﬁcier du mécanisme d’héritage pour initialiser des composants utiles à toutes lesactions.\nRetenez cette approche consistant à déﬁnir une super-classe pour déﬁnir un com-\nportement commun à un ensemble d’objets (ici les contrôleurs). Toutes les tâchesrépétitives d’intialisation de l’environnement, de conﬁguration, de connexion à labase, etc., sont déjà faites une fois pour toutes. Inversement, cela rend très facilel’ajout de nouvelles contraintes, communes à tous les objets, par enrichissementde la super-classe. Un simple exemple : que se passe-t-il si on écrit un contrôleuren oubliant une méthode nommée index() ? Alors le choix par défaut effectué\npar le contrôleur frontal risque d’entraîner une erreur puisque l’action par défaut,index, n’existe pas. Solution : on déﬁnit cette action par défaut dans la super-classeControleur : elle existe alors, par héritage, dans tous les contrôleurs, et elle est\nsurchargée par toute méthode index() déﬁnie au niveau des sous-classes.\n6.3 STRUCTURE D’UNE APPLICATION MVC : LA VUE\nLe code de l’action index() du contrôleur test, présenté précédemment, afﬁche\nsimplement la sortie avec la commande PHP echo. C’est contraire au principe MVC\nde séparer la production de la présentation du traitement des données. L’inconvé-nient est de se retrouver à manipuler de très longues chaînes de caractères HTMLdans le script, pratique qui mène extrêmement rapidement à un code illisible.\n252\n Chapitre 6. Architecture du site : le pattern MVC\nUne solution très simple consisterait à organiser chaque page en trois parties,\nen-tête, contenu et pied de page, l’en-tête et le pied de page étant systématiquement\nproduits par des fonctions PHP Entete() etPiedDePage(). La ﬁgure 6.3 montre\nle style d’interaction obtenu, chaque action (sur la gauche) produisant les différentesparties de la page.\nItem 1Titre\nItem n Item 2\nMySQL PHP contactMenu\nContenu de la pageCode\nPHP/MySQLentete()\nPiedDePage()Script PHP\nFonctionFonction\nFigure 6.3 — Tout le code HTML est produit avec PHP.\nCette méthode est envisageable pour de petits sites pour lesquels la conception\ngraphique est stable et peu compliquée. Elle offre l’avantage de regrouper en un seul\nendroit (nos deux fonctions) les choix de présentation, et de rendre l’applicationindépendante de tout outil de production HTML.\nPour des projets plus conséquents, il nous faut un composant\n•gérant la vue,\n•offrant une séparation claire entre les fragments HTML constituant la présen-tation des pages et le code PHP qui fournit le contenu.\nL’approche basée sur des templates , ou modèles de présentation, dans lesquels on\nindique les emplacements où le contenu produit dynamiquement doit être inséré,constitue une solution pratiquée depuis très longtemps. Elle offre plusieurs avantages,et quelques inconvénients. Pour être concret, je vais donner des exemples de lagestion de la vue à base de templates, avant de revenir sur les principes généraux\nde séparation du code HTML et du code PHP .\n6.3.1 Les templates\nLe système utilisé pour nos exemples est un moteur de templates adapté de la\nbibliothèque PHPLIB et amélioré grâce aux possibilités de PHP 5. Ce moteur esttrès représentatif des fonctionnalités des templates (dont il existe de très nombreux\nreprésentants) et s’avère simple à utiliser. Les méthodes publiques de la classe sontdonnées dans le tableau 6.1.\n6.3 Structure d’une application MVC : la vue\n 253\nTableau 6.1 — Méthodes de la classe Template\nMéthodes\n Description\n__construct (racine )\n Constructeur\nsetFile (nom,fichier )\n Charge un fichier dans une entité nommée nom.\nOn peut également passer en premier paramètre\nun tableau contenant la liste des fichiers à charger.\nsetBlock (nom,nomBloc ,nomRempla¸ cant )\n Remplace, dans le contenu de l’entité nom,l eb l o c\nnomBloc par une référence à l’entité nomRem-\npla¸ cant , et crée une nouvelle entité nomBloc .\nassign (nomCible ,nomSource )\n Place dans nomCible le contenu de nomSource\ndans lequel les références aux entités ont été rem-placées par leur contenu.\nappend (nomCible ,nomSource )\n Ajoute (par concaténation) à nomCible le contenu\ndenomSource dans lequel les références aux\nentités ont été remplacées par leur contenu.\nrender (nomCible )\n Renvoie le contenu de nomCible .\nUntemplate est un fragment de code HTML (ou tout format textuel) qui fait\nréférence à des entités. Une entité est simplement un nom qui déﬁnit une association\nentre le code PHP et la sortie HTML.\n1. dans un template , on trouve les références d’entités, entourées par des acco-\nlades ;\n2. dans le code PHP , une entité est une variable du composant Vue, à laquelle\non affecte une valeur.\nLors de l’exécution, la référence à une entité est substituée par sa valeur, qui peut\naussi bien être une simple donnée qu’un fragment HTML complexe. C’est le moteur\nde templates qui se charge de cette substitution (ou instanciation).\nCommençons par un exemple simple. Le but est de construire une page en\nassemblant d’une part un fragment HTML sans aucune trace de PHP , et d’autre partune partie PHP , sans aucune trace de HTML. Le système de templates se chargera de\nfaire le lien entre les deux. Voici tout d’abord la partie HTML (l’extension choisieici est, par convention, .tpl pour « template »).\nExemple 6.3 exemples/ExTemplate.tpl :Le ﬁchier modèle\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Exemple de template</ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n254\n Chapitre 6. Architecture du site : le pattern MVC\n<body>\n<!−− Exemple simple d’ utilisation des templates.\nNotez qu ’ i l n’y apas une trace de P H P ci −dessous .\n−−>\n<h1>{ titre_page }</ h1>\nCette page a été engendrée par le système de templates .\nElle contient des éléments statiques , c o m m e la phrase\nque vous êtes en train de lire . Mais on y tr ouve\négalement des parties dynamiques produites avec\nP H P, c o m m e le n o m de votre navigateur : < b>{ nom_navigateur }.</ b>\n<p>\nO n peut aussi afficher la date et l ’heure:\nNous sommes le < b>{ date }</ b>, il est < b>{heure}</ b>h e u r e ( s ) .\n</p>\n<p>\nPourtant la personne qui a produit le code H T M L\nne connaît rien à PHP, et la personne qui programme en PHP\nn’ a aucune idée de la mise en forme choisie .\nIntéressant n o n ?\n</p>\n</body >\n</html >\nC’est donc du HTML standard où certains éléments du texte, les références\nd’entités, désignent les parties dynamiques produites par PHP . Les références d’entités\nsont encadrées par des accolades, comme {titre_page}. Voici maintenant la partie\nPHP .\nExemple 6.4 exemples/ExTemplate.php :Le ﬁchier PHP\n<?php\n// Exemple simple d’ utilisation des templates .\n// Notez qu ’ il n’y a pas une trace de H T M L ci −dessous .\n// Inclusion du moteur de templates\nrequire (\"Template.p h p\");\n// Instanciation d’u n objet de la classe Template\n$tpl = new Template (\" . \");\n// Chargement dans l ’ entité ’ page ’ du fichier contenant le\ntemplate\n$tpl −>setFile (\" page \" , \"ExTemplate . tpl \") ;\n// O n donne une valeur aux entités référencées\n$tpl −>titre_entete = \"Les templates\" ;\n$tpl −>titre_page = \"U n exemple de templates\" ;\n$tpl −>date =date (\"d/ m /Y\");\n6.3 Structure d’une application MVC : la vue\n 255\n$tpl −>heure = date (\" H \");\n$tpl −>nom_navigateur = $_SERVER[ ’H T T P _ U S E R _ A G E N T’ ];\n// La méthode render remplace les références par leur valeur , et\nrenvoie\n// la nouvelle chaîne de caractères .\necho $tpl −>render (\"page\") ;\n?>\nLe principe est limpide : on crée un objet de la classe Template en lui indiquant\nque les ﬁchiers de modèles sont dans le répertoire courant, « . ». On commence par\ncharger le contenu du ﬁchier ExTemplate.tpl et on l’affecte à l’entité page, qui contient\ndonc des références à d’autres entités ( date, heure, etc.). Il faut alors donner une\nvaleur à ces entités avec l’opérateur d’affectation ’=’. Par exemple :\n$tpl −>date =date (\"d/ m /Y\");\n$tpl −>heure = date (\" H \");\nMaintenant on peut substituer aux références d’entité présentes dans page les\nvaleurs des entités qu’on vient de déﬁnir. Cela se fait en appelant la méthode\nrender(). Elle va remplacer {date} dans l’entité page par sa valeur, et de même\npour les autres références. Il ne reste plus qu’à afﬁcher le texte obtenu après substitu-\ntion. On obtient le résultat de la ﬁgure 6.4 qui montre qu’avec très peu d’efforts, on\na obtenu une séparation complète de PHP et de HTML.\nFigure 6.4 — Affichage du document résultat\n256\n Chapitre 6. Architecture du site : le pattern MVC\nAvant d’instancier un template, chaque entité qui y est référencée doit se voir\naffecter une valeur. Comme le montre l’exemple ci-dessus, il existe trois façons de\ncréer des entités et de leur affecter une valeur :\n1. on charge un ﬁchier avec setFile(), et on place son contenu dans une entité\ndont on fournit le nom ;\n2. on effectue une simple affectation, comme dans $vue->entite = valeur; ;\n3. on instancie un template, et on affecte le résultat à une entité ; pour cela on\npeut utiliser assign() qui remplace l’entité-cible, ou append() qui conca-\ntène la nouvelle valeur à celle déjà existant dans l’entité-cible.\n6.3.2 Combiner des templates\nUn moteur de templates serait bien faible s’il ne fournissait pas la possibilité decombiner des fragments pour créer des documents complexes. La combinaison destemplates repose sur le mécanisme de remplacement d’entités. Il sufﬁt de considérer\nque l’instanciation d’un template est une chaîne de caractères qui peut être constituer\nla valeur d’une nouvelle entité.\nPrenons un autre exemple pour montrer la combinaison de templates. On veut\nproduire un document afﬁchant une liste dont on ne connaît pas à l’avance le nombred’éléments. La ﬁgure 6.5 montre le résultat souhaité, avec 5 éléments dans la liste.\nFigure 6.5 — Template contenant une liste\nOn ne peut pas obtenir ce résultat avec un seul template, parce qu’un des frag-\nments (la première phrase) apparaît une seule fois, et l’autre partie (les éléments dela liste) plusieurs fois. La solution est de combiner deux templates. Voici le premier,le parent :\nExemple 6.5 exemples/Parent.tpl :Template à instancier une fois\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n6.3 Structure d’une application MVC : la vue\n 257\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Exemple de templates</ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<div>\nC e template est un < i>parent</ i>\nqui doit être combiné avec un autre template , < i>enfant</ i>,\nce dernier pouvant être instancié plusieurs fois .\nO n place une référence à une entité < i>enfants</ i>, ci −dessous\n,\npour inclure la liste de ces instanciations .\n<ul>\n{e n f a n t s}\n</ul>\n</div>\n</body>\n</html >\nIl contient la partie du document qui n’apparaît qu’une seule fois. La référence à\nl’entité enfants est destinée à être remplacée par la liste des éléments. Le second\ntemplate représente un seul de ces éléments : on va ensuite concaténer les instancia-\ntions.\nExemple 6.6 exemples/Enfant.tpl :Template à instancier autant de fois que nécessaire\n<li>\nCeci est le template < i>enfant</ i>, avec le numéro {numero}\n</li>\nMaintenant on peut effectuer la combinaison. Pour l’essentiel, on instancie\nautant de fois que nécessaire le template enfant, et on concatène ces instanciations\ndans une entité enfants. Au moment où on applique la méthode render(),l a\nvaleur d’enfants va se substituer à la référence vers cette entité dans parent,e tl e\ntour est joué.\nExemple 6.7 exemples/ExTemplateComb.php :Le code PHP pour combiner les templates\n<?php\n// Exemple de combinaison de templates\nrequire (\"Template.p h p\");\n// Instanciation d’u n objet de la classe Template\n$vue = new Template ( \" . \" ) ;\n// Chargement des deux templates\n$vue −>setFile (\"parent\" , \"Parent . tpl \") ;\n258\n Chapitre 6. Architecture du site : le pattern MVC\n$vue −>setFile (\" enfant \" , \"Enfant . tpl \") ;\n// Boucle pour instancier 5 enfants\nfor ( $i =0; $i < 5; $i ++) {\n$vue −>numero = $i ;\n// O n concatène l ’ instanciation de ’enfant ’ dans ’enfants ’\n$vue −>append ( \" enfants \" , \" enfant \" ) ;\n}\n// Et o n affiche le résultat\necho $vue −>render(\"parent\") ;\n?>\nLe mécanisme illustré ci-dessus peut sembler relativement complexe à première\nvue. Avec un peu de réﬂexion et d’usage, on comprend que les entités se manipulent\ncomme des variables (chaînes de caractères). On les initialise, on les concatène eton les afﬁche. Cette approche permet de modiﬁer à volonté la disposition de la page,\nsans qu’il soit nécessaire de toucher au code PHP , et inversement.\nUn défaut potentiel des templates est qu’il faut parfois en utiliser beaucoup\npour construire un document ﬁnal complexe. Si on place chaque template dans\nun ﬁchier dédié, on obtient beaucoup de ﬁchiers, ce qui n’est jamais très facile à\ngérer. L’exemple ci-dessus est peu économe en nombre de ﬁchiers puisque le template\nenfant tient sur 3 lignes.\nLe mécanisme de blocs permet de placer plusieurs templates dans un même ﬁchier.\nLe moteur de template offre une méthode, setBlock(), pour extraire un template\nd’un autre template, et le remplacer par une référence à une nouvelle entité. AvecsetBlock(), on se ramène tout simplement à la situation où les templates sont dansdes ﬁchiers séparés.\nVoici une illustration avec le même exemple que précédemment. Cette fois il n’y\na plus qu’un seul ﬁchier, avec deux templates :\nExemple 6.8 exemples/ParentEnfant.tpl :Un ﬁchier avec deux templates imbriqués\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns =\"http ://w w w.w 3. org /1999/xhtml\" xml: lang =\" fr \" >\n<head >\n<title >Exemple de templates</ title >\n<link rel =’stylesheet ’ href =\"films . css\" type =\" text / css \" />\n</head >\n<body>\n<div>\n<div>\nC e template est un < i>parent</ i>\nqui doit être combiné avec un autre template , < i>enfant</ i>,\n6.3 Structure d’une application MVC : la vue\n 259\ndirectement inséré dans le m ê m e fichier .\n<ul>\n<!−− BEGIN e n f a n t −−>\n<li>\nCeci est le template < i>enfant</ i>, avec le numéro {numero}\n</li>\n<!−− END e n f a n t −−>\n</ul>\n</div>\n</body>\n</html >\nLe bloc correspondant au template enfant est imbriqué dans le premier avec une\npaire de commentaires HTML, et une syntaxe BEGIN –ENDmarquant les limites du\nbloc. Voici maintenant le code PHP qui produit exactement le même résultat que le\nprécédent.\nExemple 6.9 exemples/ExTemplateBloc.php :Traitement d’un template avec bloc\n<?php\n// Exemple de combinaison de templates avec bloc\nrequire (\"Template.p h p\");\n// Instanciation d’u n objet de la classe Template\n$vue = new Template ( \" . \" ) ;\n// Chargement des deux templates\n$vue −>setFile (\"parent\" , \"ParentEnfant . tpl \") ;\n// O n extrait le template ’enfant ’, et on le\n// remplace par la référence à l ’entité ’enfants ’\n$vue −>setBlock (\"parent\" , \"enfant\" , \" enfants \") ;\n// Boucle pour instancier 5 enfants\nfor ( $i =0; $i < 5; $i ++) {\n$vue −>numero = $i ;\n// O n concatène l ’instanciation de ’enfant ’ dans ’enfants ’\n$vue −>append ( \" enfants \" , \" enfant \" ) ;\n}\n// Et o n affiche le résultat\necho $vue −>render(\"parent\") ;\n?>\nIl faut noter qu’après l’appel à setBlock(), on se retrouve dans la même situation\nqu’après les deux appels à setFile() dans la version précédente. Ce que l’on a\ngagné, c’est l’économie d’un ﬁchier.\n260\n Chapitre 6. Architecture du site : le pattern MVC\n6.3.3 Utilisation d’un moteur de templates comme vue MVC\nUn moteur de templates est un bon candidat pour le composant « vue » d’une archi-\ntecture MVC. Nous utilisons ce système de templates dans notre projet. Le chapitre 9montrera une autre solution avec le Zend Framework . L’important, dans tous les cas,\nest de respecter le rôle de la vue, clairement séparée des actions et du modèle.\nDans notre MVC, chaque contrôleur dispose, par héritage, d’un objet\n$this->vue, instance de la classe Template. Cet objet charge les ﬁchiers de\ntemplates à partir du répertoire application/vues .D ep l u s ,u n ee n t i t én o m m é epage\nest préchargée avec le document HTML de présentation du site. Ce document estbeaucoup trop long pour être imprimé ici (vous pouvez bien sûr le consulter dans lecode du site). Il nous sufﬁt de savoir qu’il contient deux références à des entitéstitre_page etcontenu. Chaque action doit donc construire un contenu pour ces\nentités et les affecter à la vue. À titre d’exemple, voici le contrôleur index, qui\ncontient une seule action, index, afﬁchant la page d’accueil.\nExemple 6.10 webscope/application/controleurs/IndexCtrl.php :Le contrôleur index\n<?php\n/∗∗\n∗@category webscope\n∗@copyright Philippe Rigaux , 2008\n∗@license G P L\n∗@package Index\n∗/\nrequire_once (\"Controleur .php\") ;\n/∗∗\n∗Contrôleur par défaut : Index\n∗/\nclass IndexCtrl extends Controleur\n{\n/∗∗\n∗Action par défaut\n∗/\nfunction index ()\n{\n/∗Définition du titre ∗/\n$this −>vue −>titre_page = \"Accueil\" ;\n/∗O n charge le code H T M L de la page d ’ accueil\n∗dans l ’ entité \"contenu\"\n∗/\n$this −>vue −>setFile (\"contenu\" , \"index_accueil . tpl \");\n/∗Il n’y a plus q u’à afficher . N B : l ’entité ’page ’ est\ndéfinie dans la super −classe \"Controleur\" ∗/\n6.3 Structure d’une application MVC : la vue\n 261\necho $this −>vue −>render (\"page\") ;\n}\n}\n?>\nL’action se limite à déﬁnir les deux entités : titre_page est créé par une simple\naffectation, et contenu est créé par chargement du ﬁchier template index_accueil.tpl qui\ncontient le texte de la page d’accueil (pour mieux se repérer, les vues seront nommées\nd’après le contrôleur et l’action où elles sont utilisées). Il reste à appeler render()\npour effectuer la substitution et obtenir l’afﬁchage de la page d’accueil.\nCette solution garantit la séparation de PHP et HTML, puisqu’il est impossible de\nmettre du code PHP dans un template. Bien entendu, les choses vont se compliquerquand on va considérer des pages plus riches dans lesquelles les parties dynamiquesproduites par PHP vont elles-mêmes comporter une mise en forme HTML. L’exemplequi suit, plus réaliste, nous donnera une idée de la manière de metre en œuvre\nl’assocation entre les contrôleur/actions et la vue pour une fonctionnalité réelle.\n6.3.4 Exemple complet\nNous allons créer, avec des templates , une fonctionnalité qui permet de rechercher\ndes ﬁlms pour les modiﬁer. À partir de maintenant nous nous plaçons dans le cadre\nde la réalisation du site W EBSCOPE et nous concevons toute l’application comme\nun hiérarchie de contrôleurs et d’actions. Vous pouvez ,en parallèle de votre lecture,consulter ou modiﬁer le code fourni sur notre site ou sur le serveur de SourceForge.\nLe contrôleur s’appelle saisie et la fonctionnalité de recherche est composée de\ndeux actions : form_recherche etrecherche. Vous savez maintenant où trouver\nle code correspondant : le contrôleur est une classe SaisieCtrl.php dans applica-\ntion/controleurs, et les deux actions correspondent à deux méthodes de même nom.\nLa première action se déclenche avec l’URL\nindex.php?ctrl=saisie&action=form_recherche\nou plus simplement ?ctrl=saisie&action=form_recherche quand on est déjà dans le\ncontexte de l’application webscope . Elle afﬁche un formulaire pour saisir un mot-clé,\ncomplet ou partiel, correspondant à une sous-chaîne du titre des ﬁlms recherchés(voir la ﬁgure 6.6).\nLa seconde action (ﬁgure 6.7) montre un tableau contenant, après recherche, les\nﬁlms trouvés, associés à une ancre permettant d’accéder au formulaire de mise à jour(non décrit ici). Dans notre copie d’écran, on a demandé par exemple tous les ﬁlmsdont le titre contient la lettre « w » pour trouver Sleepy Hollow ,Eyes Wide Shut, King\nof New York,e t c .\nPour chaque action nous disposons d’un template. D’une manière générale, c’est\nune bonne habitude d’essayer de conserver un template par action et de nommerles ﬁchiers de templates d’après l’action et le contrôleur. Dans notre cas les ﬁchierss’appellent respectivement\nsaisie_form_recherche.tpl etsaisie_recherche.tpl .\n262\n Chapitre 6. Architecture du site : le pattern MVC\nFigure 6.6 — Page de recherche des films\nFigure 6.7 — Le résultat d’une recherche\nVoici le premier :\nExemple 6.11 Le template saisie_form_recherche.tpl afﬁchant le formulaire de recherche\n<p>\nVous pouvez rechercher avec ce formulaire les films\nque vous souhaitez mod ifier . Entrez le titre , ou\nune partie du titre , en majuscules ou minuscules ,\net lancez la recherche .\n</p>\n6.3 Structure d’une application MVC : la vue\n 263\n<!−− Le formulaire pour saisir la requête −−>\n<center >\n<form method =’post ’ action =’? ctrl=saisie& a m p; action =recherche ’>\n<b>Titre ou partie du titre</ b>\n<input type =’text ’name =\" titre \" value =\"\" size =’30’ maxlength\n=’ 3 0’ / >\n<input type =’submit ’ name =\"submit\" value =\"Rechercher\" />\n</form >\n</center >\nRappelons que notre « layout » comprend deux références d’entités : titre_page\netcontenu (voir ce qui précède). Le but de chaque action (au moins en ce qui\nconcerne la présentation du résultat) est de créer une valeur pour ces deux entités.\nVoici l’action form_recherche.\nfunction form_recherche ()\n{\n/∗Définition du titre ∗/\n$this −>vue −>titre_page = \"Recherche des films \" ;\n/∗∗\n∗O n charge le template \"saisie_recherche\"\n∗dans l ’ entité \"contenu\"\n∗/\n$this −>vue −>setFile (\"contenu\" , \"saisie_form_recherche . tpl\");\n/∗Il n’y a plus q u’à afficher . ∗/\necho $this −>vue −>render (\"page\") ;\n}\nC’est une page statique, qui se contente de combiner deux templates en plaçant le\ncontenu du ﬁchier saisie_form_recherche.tpl dans l’entité contenu dulayout. La seconde\naction est un peu plus longue (forcément). Voyons d’abord le template :\nExemple 6.12 Le template saisie_recherche.tpl montrant le résultat de la recherche\n<p>\n<b>Voici le résultat de votre recherche . </ b> Vous\npouvez maintenant utiliser le lien \"mise à jour \"\npour accéder à un formulaire de modification des films .\n</p>\n<center >\n<table border =’4’ cellspacing =’ 5’ >\n<tr class =\"header\">\n<th>Titre</ th><th>Année</ th><th>Action</ th>\n</tr>\n<!−− Le bloc pour le template affichant une ligne −−>\n<!−− BEGIN l i g n e −−>\n264\n Chapitre 6. Architecture du site : le pattern MVC\n<tr class =’{ classe_css } ’>\n<td>{ titre_film }</ td><td>{ annee }</ td>\n<td><ah r e f =\"? ctrl=saisie& amp; action=form_modifier& amp; id={\nid_film }\">\nMise à jour</ a>\n</td>\n</tr>\n<!−− E N D ligne −−>\n</table >\n</center >\nIl s’agit de deux templates imbriqués. Le second, marqué par les commentaires\nBEGIN etEND, correspond à chaque ligne du tableau montrant les ﬁlms. À l’inté-\nrieur de ce template imbriqué on trouve les références aux entités classe_css,\ntitre_film, id_film,e t annee. Le code de l’action est donné ci-dessous : les\ncommentaires indiquent le rôle de chaque partie.\nfunction recherche ()\n{\n// Définition du titre\n$this −>vue −>titre_page = \" Résultat de la recherche\" ;\n// O n charge les templates nécessaires\n$this −>vue −>setFile (\"texte\" , \"saisie_recherche . tpl\");\n// O n extrait le bloc imbriqué \"ligne\", et o n le remplace par\n// la référence à une entité \"lignes\"\n$this −>vue −>setBlock (\"texte\" , \"ligne\" , \" lignes \");\n// Le titre a été saisi ? O n effectue la recherche\nif( i s S e t ($_POST [ ’ t i t r e ’ ] ) ) {\n$titre = htmlEntities($ _ P O S T[ ’ titre ’ ]) ;\n}\nelse {\n// Il faudrait sans doute protester?\n$titre = \"\";\n}\n// Exécution de la requête\n$ r e q u e t e = \"SELECT ∗F R O M Film W H E R E titre LIKE ’%$titre%’ \" ;\n$resultat = $this −>bd−>execRequete( $requete ) ;\n$compteur = 1;\nwhile ($film = $this −>bd−>objetSuivant ($resultat)) {\nif($compteur++ % 2 == 0) $classe = \"even\" ; else $classe =\n\"odd\" ;\n// Affectation des entités de la ligne\n$this −>vue −>classe_css = $classe ;\n$this −>vue −>titre_film = $ film −>titre ;\n$this −>vue −>id_film = $ film −>id ;\n6.3 Structure d’une application MVC : la vue\n 265\n$this −>vue −>annee = $film −>annee ;\n// O n effectue la substitution dans \"ligne\", en concaténant\n// le résultat dans l ’entité \"lignes\"\n$this −>vue −>append ( \" lignes \" , \" ligne \" ) ;\n}\n// O n a le formulaire et le tableau : on parse et on place// le résultat dans l ’entité ’contenu ’\n$this −>vue −>assign (\"contenu\" , \" texte \") ;\n/∗Il n’y a plus q u’à afficher . ∗/\necho $this −>vue −>render (\"page\") ;\n}\nNotez que l’action attend en paramètre une variable titre transmise en post.E n\nprincipe ce paramètre vient du formulaire. Une action devrait toujours vériﬁer que\nles paramètres attendus sont bien là, et ﬁltrer leur valeur (en supprimant par exemple\nles balises HTML que des personnes malicieuses pourraient y injecter). C’est ce quefait la fonction htmlEntities(), en remplaçant les caractères réservés HTML par\ndes appels d’entités. Rappelez-vous toujours qu’un script PHP peut être déclenchépar n’importe qui, et pas toujours avec de bonnes intentions.\nCes actions sont du « pur » PHP , sans aucune trace de HTML. Si on conçoit les\nchoses avec soin, on peut structurer ainsi une application MVC en fragments de code,\nchacun d’une taille raisonnable, avec une grande clarté dans l’organisation de toutes\nles parties de l’application. Avant d’étudier la dernière partie du MVC, le modèle,nous allons comme promis revenir un moment sur les avantages et inconvénients dusystème de templates pour gérer le composant Vue.\n6.3.5 Discussion\nLestemplates offrent un bon exemple de la séparation complète de la « logique » de\nl’application, codée en PHP , et de la présentation, codée en HTML. Une des forcesde ce genre de système est que toute la mise en forme HTML est écrite une seulefois, puis reprise et manipulée grâce aux fonctions PHP . On évite donc, pour lesmodiﬁcations du site, l’écueil qui consisterait à dupliquer une mise en forme autantde fois qu’il y a de pages dans le site. C’est ce que doit satisfaire tout gestionnairede contenu HTML digne de ce nom en proposant une notion de « style » ou de\n« modèle » dont la mise à jour est répercutée sur toutes les pages reposant sur ce style\nou ce modèle.\nUn problème délicat reste la nécessité de produire un nombre très important de\ntemplates si on veut gérer la totalité du site de cette manière et interdire la production\nde tout code HTML avec PHP . Cette multiplication de « petits » modèles (pourles tableaux, les lignes de tableaux, les formulaires et tous leurs types de champs,etc.) peut ﬁnir par être très lourde à gérer. Imaginez par exemple ce que peut être la\nproduction avec des templates d’un formulaire comme ceux que nous pouvons obtenir\navec la classe Formulaire , comprenant une imbrication de tableaux, de champs de\nsaisie et de valeurs par défauts fournies en PHP .\n266\n Chapitre 6. Architecture du site : le pattern MVC\nUn bon compromis est d’utiliser des modèles de page créés avec un générateur\nde documents HTML, pour la description du graphisme du style. Cela correspond\ngrosso modo à l’en-tête, au pied de page et aux tableaux HTML qui déﬁnissent l’em-\nplacement des différentes parties d’une page. On place dans ces modèles des entitésqui déﬁnissent les composants instanciés par le script PHP : tableaux, formulaires,menus dynamiques, etc. Ensuite, dans le cadre de la programmation PHP , on prendces modèles comme templates , ce qui rend le code indépendant du graphisme, et on\nutilise, pour produire le reste des éléments HTML, plus neutres du point de vue de laprésentation, les utilitaires produisant des objets HTML complexes comme Tableau\nouFormulaire.\nLe code PHP produit alors ponctuellement des composants de la page HTML,\nmais dans un cadre bien délimité et avec des utilitaires qui simpliﬁent beaucoupcette tâche. L’utilisation des feuilles de style CSS permet de gérer quand même laprésentation de ces éléments HTML. Il sufﬁt pour cela de prévoir l’ajout d’une classeCSS dans les balises HTML produites. Cette solution limite le nombre de templates\nnécessaires, tout en préservant un code très lisible.\nOn peut également s’intéresser à des systèmes de templates plus évolués que celui\nprésenté ici. Il en existe beaucoup (trop ...). Attention cependant : le choix d’un\nsystème de templates a un impact sur tout le code du site, et il n’est pas du tout\nfacile de faire marche arrière si on s’aperçoit qu’on a fait fausse route. Posez-vous lesquelques questions suivantes avant de faire un choix :\n•Le système préserve-t-il la simplicité de production du code HTML, ou faut-ilcommencer à introduire des syntaxes compliquées dans les templates pour\ndécrire des boucles, des éléments de formulaire, etc. La méthode consistantà décrire des blocs est un premier pas vers l’introduction de structures deprogrammation (boucles, tests) dans les modèles, et il est tentant d’allerau-delà. Si la personne responsable du code HTML doit se transformer enprogrammeur, on perd cependant l’idée de départ...\n•Le système est-il répandu, bien documenté, soutenu par une collectivité activeet nombreuse de programmeurs ? Est-il, au moins en partie, compatible avecles systèmes classiques ?\n•Quelles sont ses performances ? Est-il doté d’un système de cache qui évite\nd’effectuer systématiquement les opérations coûteuses de substitution et decopies de chaînes de caractères ?\nGardez en vue qu’un bon système de templates doit avant tout faciliter la répar-\ntition des tâches et rester simple et efﬁcace. Il paraît peu raisonnable de se lancer\ndans des solutions sans doute astucieuses mais complexes et non normalisées. Si\nvraiment la séparation du contenu et de la présentation est très importante pour vous,par exemple parce que vous souhaitez produire plusieurs formats différents (HTML,WML, PDF , etc.) à partir d’un même contenu, pourquoi ne pas étudier les outils baséssur XML comme le langage de transformation XSLT, introduit dans le chapitre 8 ?Ces langages sont normalisés par le W3C, on bénéﬁcie donc en les adoptant des trèsnombreux outils et environnements de développement qui leur sont consacrés.\n6.4 Structure d’une application MVC : le modèle\n 267\nNous verrons également dans le chapitre 9 une approche pour gérer la vue, celle\nduZend Framework , assez différente des systèmes de templates. Elle a le mérite\nd’utiliser directement PHP pour la mise en forme, ce qui évite d’avoir à inventer\nun nouveau pseudo-langage de programmation. En contrepartie la saisie est lourdeet le code obtenu peu plaisant à lire. Le système idéal, simple, léger, lisible et bienintégré à PHP , reste à déﬁnir.\nEn résumé, le style d’imbrication de PHP et de HTML fait partie des questions\nimportantes à soulever avant le début du développement d’un site. La réponse varieen fonction de la taille du développement et de l’équipe chargée de la réalisation,des outils disponibles, des compétences de chacun, des contraintes (le site doit-ilévoluer fréquemment ? Doit-il devenir multilingue à terme, certaines fonctionnalitéssont-elles communes à d’autre sites ?), etc. J’espère que les différentes techniquesprésentées dans ce livre vous aideront à faire vos choix en connaissance de cause.\n6.4 STRUCTURE D’UNE APPLICATION MVC : LE MODÈLE\nIl nous reste à voir le troisième composant de l’architecture MVC : le modèle. Lemodèle est constitué de l’ensemble des fonctionnalités relevant du traitement (ausens large) des données manipulées par l’application. Cette notion de traitementexclut la présentation qui, nous l’avons vu, est prise en charge par la vue. Tout ce quiconcerne la gestion des interactions avec l’utilisateur ainsi que le workﬂow (séquence\ndes opérations) relève du contrôleur. Par élimination, tout le reste peut être imputé\nau modèle. Il faut souligner qu’on y gagne de ne pas du tout se soucier, en réalisant\nle modèle, du contexte dans lequel il sera utilisé. Un modèle bien conçu et implantépeut être intégré à une application web mais doit pouvoir être réutilisé dans uneapplication client/serveur, ou un traitement batch. On peut le réaliser de manière\nstandard, sous forme de fonctions ou de classes orientées-objet, sans se soucier deHTML. Il n’y aurait pas grand-chose de plus à en dire si, très souvent, le modèlen’était pas également le composant chargé d’assurer la persistance des données,\nautrement dit leur survie indépendamment du fonctionnement de l’application.\n6.4.1 Modèle et base de données : la classe TableBD\nDans des applications web dynamiques, le modèle est aussi une couche d’échangeentre l’application et la base de données. Cette couche peut simplement consister enrequêtes SQL de recherche et de mise à jour. Elle peut être un peu plus sophistiquéeet factoriser les fonctions assurant les tâches routinières : recherche par clé, insertion,mise à jour, etc. À l’extrême, on peut mettre en œuvre un mapping objet-relationnel\n(Objet-Relational Mapping , ORM en anglais) qui propose une vue de la base de\ndonnées reposant sur des classes orientées-objet. Ces classes masquent le systèmerelationnel sous-jacent, ainsi que les requêtes SQL.\nComme d’habitude, essayons d’être simples et concret : dans ce qui suit je propose\nune couche Modèle un peu plus élaborée que la communication par SQL, et jemontre comment l’exploiter dans notre site pour des recherches (pas trop sophis-tiquées) et des mises à jour. Le chapitre 9 montre avec le Zend Framework le degréd’abstraction que l’on peut obtenir avec une couche ORM.\n268\n Chapitre 6. Architecture du site : le pattern MVC\nNous allons reprendre la classe générique IhmBD déjà présentée partiellement\ndans le chapitre 3, consacré à la programmation objet (voir page 167) et l’étendre\ndans l’optique d’un Modèle MVC aux aspects propres à la recherche et à la mise àjour de la base. Elle s’appellera maintenant TableBD. Le tableau 6.2 donne la liste\ndes méthodes génériques assurant ces fonctions (ce tableau est complémentaire decelui déjà donné page 170).\nTableau 6.2 — Les méthodes d’interaction avec la base de la classe TableBD\n.\nMéthode\n Description\nnouveau (donn´ ees )\n Création d’un nouvel objet.\nchercherParCle (cl´e)\n Recherche d’une ligne par clé primaire.\ncontrole ()\n Contrôle les valeurs avant mise à jour.\ninsertion (donn´ ees )\n Insertion d’une ligne.\nmaj(donn´ ees )\n Mise à jour d’une ligne.\nConversion des données de la base vers une instance de TableBD\nLa classe (ou plus exatement les objets instance de la classe) vont nous servir àinteragir avec une table particulière de la base de données. Le but est de pouvoirmanipuler les données grâce aux méthodes de la classe, en recherche comme eninsertion. La première étape consiste à récupérer le schéma de la table pour connaîtrela liste des attributs et leurs propriétés (type, ou contraintes de clés et autres). Il fautaussi être en mesure de stocker une ligne de la table, avant une insertion ou aprèsune recherche. Pour cela nous utilisons deux tableaux, pour le schéma, et pour lesdonnées.\nprotected $schema = array () ; // Le schéma de la table\nprotected $donnees = array () ; // Les données d ’une ligne\nLa déclaration protected assure que ces tableaux ne sont pas accessibles par une\napplication interagissant avec une instance de la classe. En revanche ils peuvent êtremodiﬁés ou redéﬁnis par des instances d’une sous-classe de TableBD. Comme nous le\nverrons, TableBD fournit des méthodes génériques qui peuvent être spécialisées par\ndes sous-classes.\nPour obtenir le schéma d’une table nous avons deux solutions : soit l’indiquer\nexplicitement, en PHP , pour chaque table, soit le récupérer automatiquement eninterrogeant le serveur de données. Notre classe BDdispose déjà d’une méthode,\nschemaTable(), qui récupère le schéma d’une table sous forme de tableau (voirpage 132). Nous allons l’utiliser. Cette méthode prend en entrée un nom de table etretourne un tableau comportant une entrée par attribut. Voici par exemple ce que\nl’on obtient pour la table Internaute .\nArray\n(\n[ email ] => Array (\n[longueur] = > 40 [type] = > string [ clePrimaire] = > 1 [\nnotNull ] = > 1\n)\n6.4 Structure d’une application MVC : le modèle\n 269\n[nom] => Array (\n[longueur] = > 30 [type] = > string [ clePrimaire] = > 0 [\nnotNull ] = > 1\n)\n[prenom] => Array (\n[longueur] = > 30 [type] = > string [ clePrimaire] = > 0[\nnotNull ] = > 1\n)\n[ mot_de_passe ] => Array (\n[longueur] = > 32] [type] = > string [ clePrimaire] = > 0 [\nnotNull ] = > 1\n)\n[ annee_naissance ] => Array (\n[ longueur ] = > 11 [ type ] = > int [ clePrimaire ] = > 0 [ notNull\n]= >0\n)\n[ region ] => Array (\n[longueur] = > 30 [type] = > string [ clePrimaire] = > 0 [\nnotNull ] = > 0\n)\n)\nCes informations nous sufﬁront pour construire la classe générique. Notez en\nparticulier que l’on connaît le ou les attributs qui constituent la clé primaire (ici,\nl’e-mail). Cette information est indispensable pour chercher des données par clé ou\neffectuer des mises à jour. Le constructeur de TableBD recherche donc le schéma de\nla table-cible et initialise le tableau donnees avec des chaînes vides.\nfunction __construct ($nom_table , $bd , $script=\"moi\")\n{\n// Initialisation des variables privées\n$this −>bd = $bd ;\n$this −>nom_table = $nom_table ;\n// Lecture du schéma de la table , et lancer d’exception si\nproblème\n$this −>schema = $bd −>schemaTable($nom_table) ;\n// O n initialise le tableau des données\nforeach ($this −>schema as $ n o m = > $options) {\n$this −>donnees [$nom] = \"\" ;\n}\n}\nLe tableau des données est un simple tableau associatif, dont les clés sont les noms\ndes attributs, et les valeurs de ceux-ci. Après l’appel au constructeur, ce tableau desdonnées est vide. On peut l’initialiser avec la méthode nouveau(), qui prend en\n270\n Chapitre 6. Architecture du site : le pattern MVC\nentrée un tableau de valeurs. On extrait de ce tableau les valeurs des attributs connus\ndans le schéma, et on ignore les autres. Comme l’indiquent les commentaires dansle code ci-dessous, il manque de nombreux contrôles, mais l’essentiel de la fonctiond’initialisation est là.\n/∗∗\n∗Méthode créant un nouvel objet à partir d ’un tableau\n∗/\npublic function nouveau ($ligne)\n{\n// O n parcourt le schéma. Si , pour un attribut donné ,\n// une valeur existe dans le tableau: o n l ’affecte\nforeach ($this −>schema as $ n o m = > $options)\n{\n/ / I l manque beaucoup de contrôles . Et s i $ligne [$nom]\n// était un tableau ?\nif(isSet($ l i g n e[$ n o m]))\n$this −>donnees[$ n o m] = $ligne [$ n o m];\n}\n}\nUne autre manière d’initialiser le tableau des données est de rechercher dans\nla base, en fonction d’une valeur de clé primaire. C’est ce que fait la méthode\nchercherParCle().\npublic function chercherParCle ($cle)\n{\n// Commençons par chercher la ligne dans la table\n$clauseWhere = $this −>accesCle ($params , \"S Q L\") ;\n// Création et exécution de la requête S Q L\n$ r e q u e t e = \"SELECT ∗FROM $ t h i s −>nom_table W H E R E $clauseWhere\n\";\n$resultat = $this −>bd−>execRequete( $requete ) ;\n$ligne = $this −>bd−>ligneSuivante( $resultat );\n// Si on n’a pas trouvé , c ’ est que la clé n’ existe pas :\n// on lève une exception\nif(!is_array ($ligne)) {\nthrow new Exception (\"TableBD : : chercherParCle . La ligne n ’\nexiste pas .\");\n}\n// Il ne reste plus q u’à créer l ’objet avec les données d u\ntableau\n$this −>nouveau( $ligne ) ;\nreturn $ligne ;\n}\nLa méthode reçoit les valeurs de la clé dans un tableau, constitue une clause\nWHERE (avec une méthode accesCle() que je vous laisse consulter dans le code\n6.4 Structure d’une application MVC : le modèle\n 271\nlui-même), et initialise enﬁn le tableau des données avec la méthode nouveau(),\nvue précédemment. Une exception est levée si la clé n’est pas trouvée dans la base.\nFinalement, comment accéder individuellement aux valeurs des attributs pour\nune ligne donnée ? On pourrait renvoyer le tableau donnees, mais ce ne serait pas\ntrès pratique à manipuler, et romprait le principe d’encapsulation qui préconise de ne\npas dévoiler la structure interne d’un objet.\nOn pourrait créer des accesseurs nommés getNom (),o ù nom est le nom de\nl’attribut dont on veut récupérer la valeur. C’est propre, mais la création un par unde ces accesseurs est fastidieuse.\nPHP fournit un moyen très pratique de résoudre le problème avec des méthodes\ndites magiques . Elles permettent de coder une seule fois les accesseurs getetset,e t\nprennent simplement en entrée le nom de l’attribut visé. Voici ces méthodes pournotre classe générique.\n/∗∗\n∗Méthode \"magique\" get : renvoie un élément du tableau\n∗de données\n∗/\npublic function __get ($ n o m)\n{\n/ / On v é r i f i e que l e nom e s t b i e n un nom d ’ a t t r i b u t du schéma\nif(!in_array ($nom, array_keys ($this −>schema) )) {\nthrow new Exception (\"$nom n ’ est pas un attribut de la\ntable $this −>nom_table\") ;\n}\n// O n renvoie la valeur du tableau\nreturn $this −>donnees [$nom ];\n}\n/∗∗\n∗Méthode \"magique\" set : affecte une valeur à un élément\n∗du tableau de données\n∗/\npublic function __set ($ n o m, $valeur)\n{\n/ / On v é r i f i e que l e nom e s t b i e n un nom d ’ a t t r i b u t du schéma\nif(!in_array ($nom, array_keys ($this −>schema) )) {\nthrow new Exception (\"$nom n ’ est pas un attribut de la\ntable $this −>nom_table\") ;\n}\n// O n affecte la valeur au tableau (des contrôles seraient\n// bienvenus ...)\n$this −>donnees [$ n o m] = $valeur ;\n}\n272\n Chapitre 6. Architecture du site : le pattern MVC\nLa méthode __get(nom )est appelée chaque fois que l’on utilise la syntaxe\n$o->nom pour lireune propriété qui n’existe pas explicitement dans la classe. Dans\nnotre cas, cette méthode va simplement chercher l’entrée nom dans le tableau\nde données. La méthode __set(nom, valeur )est appelée quand on utilise la\nmême syntaxe pour réaliser une affectation. Ces méthodes magiques masquent la\nstructure interne (que l’on peut donc modiﬁer de manière transparente) en évitant\nde reproduire le même code pour tous les accesseurs nécessaires. Il existe également\nune méthode magique __call(nom, params )qui intercepte tous les appels à une\nméthode qui n’existe pas.\nContrôles, insertion et mises à jour\nMaintenant que nous savons comment manipuler les valeurs d’un objet associé à uneligne de la table, il reste à effectuer les contrôles et les mises à jour. La méthodecontrole() vériﬁe les types de données et la longueur des données à insérer. La\ncontrainte de généricité interdit d’aller bien plus loin.\nprotected function controle ()\n{\n// On commence par v é r i f i e r les types de données\nforeach ($this −>schema as $ n o m = > $options) {\n// Contrôle selon le type de l ’ attribut\nif($options [ ’type ’ ] = = \" string\") {\n// C’est une chaîne de caractères . Vérifions sa taille\nif(strlen ($this −>donnees [$ n o m]) > $options [ ’longueur ’ ])\n{\n$this −>erreurs [] = \"La valeur pour $nom est trop longue\n\";\nreturn false ;\n}\n}\nelse if ($options [ ’type ’ ] = = \" int \") {\n// Il faut que ce soit u n entier\nif(!is_int ($this −>donnees [$nom]) ) {\n$this −> e r r e u r s [ ] = \"$nom d o i t ê t r e un e n t i e r \" ;\nreturn false ;\n}\n}\nreturn true ;\n}\n}\nLes méthodes d’insertion et de mise à jour fonctionnent toutes deux sur le même\nprincipe. On construit dynamiquement la requête SQL ( INSERT ouUPDATE), puis on\nl’exécute. L’exemple de l’insertion est donné ci-dessous. Bien entendu on exploite leschéma de la table pour connaître le nom des attributs, et on trouve les valeurs dansle tableau de données.\npublic function insertion ()\n{\n// Initialisations\n$noms = $valeurs = $virgule = \"\" ;\n6.4 Structure d’une application MVC : le modèle\n 273\n// Parcours des attributs pour créer la requête\nforeach ($this −>schema as $ n o m = > $options) {\n// Liste des noms d ’ attributs + liste des valeurs (\nattention aux ’)\n$noms .= $virgule . $ n o m;\n$valeur = $this −>bd−>prepareChaine($this −>donnees [$nom]) ;\n$valeurs .= $virgule . \" ’$valeur ’\";\n// A partir de la seconde fois , o n sépare par des virgules\n$virgule= \" ,\";\n}\n$requete = \"I N S E R T I N T O $this −>nom_table($noms) V A L U E S (\n$valeurs) \";\n$this −>bd−>execRequete ( $requete ) ;\n}\nLa fonction de mise à jour est similaire ; je vous laisse la consulter dans le code\nlui-même. Nous voici équipés avec un cadre pré-établi pour réaliser la partie Modèle\nd’une application. Outre l’intérêt de disposer de fonctionnalités prêtes à l’emploi,\nce qui peut déjà économiser du développement, cette approche a aussi le mérite de\nnormaliser les méthodes de programmation, avec gain de temps là encore quand onconsulte le code.\n6.4.2 Un exemple complet de saisie et validation de données\nMontrons pour conclure ce chapitre comment réaliser une fonctionnalité complèteMVC, incluant une partie Modèle pour communiquer avec la base de données.\nL’exemple choisi est celui de l’inscription d’un internaute sur le site. On demande de\nsaisir ses données personnelles dans un formulaire, y compris un mot de passe d’accèsau site, pour lequel on demande une double saisie. La validation de ce formulaireentraîne une insertion dans la base. La ﬁgure 6.8 montre le formulaire d’inscription.\nFigure 6.8 — Formulaire d’inscription sur le site\n274\n Chapitre 6. Architecture du site : le pattern MVC\nLe contrôleur en charge des fonctionnalités d’inscription est inscription. L’ac-\ntion par défaut ( index) afﬁche le formulaire de la ﬁgure 6.8. Voici son code.\nfunction index ()\n{\n// O n affecte le titre et on charge le contenu\n$this −>vue −>titre_page = \"Inscription\";\n$this −>vue −>setFile (\"contenu \" , \" inscription . tpl \") ;\n// O n instancie la classe TableBD sur ’Internaute ’\n$tbl_inter = n ew Internaute ($this −>bd ) ;\n// Production du formulaire en insertion\n$this −>vue −>formulaire = $tbl_inter −>formulaire(TableBD ::\nINS_BD ,\n\"inscription\", \"enregistrer\");\necho $this −>vue −>render (\"page\") ;\n}\nOn instancie un objet $tbl_inter de la classe Internaute (le ﬁchier\nInternaute.php se trouve dans application/modeles). Cette classe est une sous-classe de\nTableBD, hérite de toutes ses fonctionnalités et en redéﬁnit quelques-unes pour\ns’adapter aux spéciﬁcités de manipulation des données de la table Internaute .\nLa première particularité est le constructeur. Comme on sait sur quelle table\ns’appuie la classe, on peut passer son nom « en dur » au constructeur de TableBD,\nce qui donne le code ci-dessous.\nclass Internaute extends T a b l e B D\n{\n// Le constructeur de la classe . O n appelle\n// simplement le constructeur de la super −classe .\n// en lui passant le n o m de la table visée .\nfunction __construct($bd)\n{\n// Appel du constructeur de IhmBD\nparent :: __construct(\"Internaute\" , $bd) ;\n}\nLa seconde particularité est le formulaire de saisie. On ne peut pas se contenter\ndu formulaire générique proposé par TableBD car il faut demander deux fois le mot\nde passe à l’utilisateur aﬁn d’avoir conﬁrmation qu’il n’a pas commis d’erreur de\nsaisie. Il faut donc redéﬁnir dans Internaute la méthode Formulaire() qui vient\nremplacer (« surcharger » est le terme juste) celle héritée de TableBD. Nous avons\ndéjà vu à plusieurs reprises comment produire des formulaires de saisie, je vous laisseconsulter cette méthode dans le code.\nRappelons que dans une application de base de données, une grande partie des\nformulaires est destinée à effectuer des opérations d’insertion ou de mise à jour sur\nles tables. Bien entendu, il faut éviter d’utiliser un formulaire distinct pour chacune\n6.4 Structure d’une application MVC : le modèle\n 275\nde ces opérations et nous utilisons donc la technique détaillée dans le chapitre 2,\npage 78, pour adapter la présentation des champs en fonction du type d’opérationeffectué.\nPassons à la mise à jour. Ici encore les fonctions génériques fournies par TableBD\nne sufﬁsent pas. C’est notamment le cas de la méthode controle() qui comprend de\nnombreux contrôles complémentaires de ceux effectués dans la méthode générique.La complémentarité implique que la méthode de la super-classe doit être appelée en\nplusdes contrôles ajoutés dans la méthode spécialisée. Cela se fait en plaçant expli-\ncitement un appel parent::controle dans le code, comme montré ci-dessous :\nfunction controle ()\n{\n// Initialisation d e la liste des messages d’erreur\n$this −>erreurs = array () ;\n// O n vér ifie que les champs importants ont été s a i s i s\nif($this −>donnees [ ’email ’]==\"\")\n$this −>erreurs [] = \"Vous devez saisir votre e −mail ! \" ;\nelse if (! $this −>controleEmail($this −>donnees [ ’ email ’ ]) )\n$this −>erreurs [] = \"Votre e −mail doit être de la forme\nxxx@yyy [ . zzz ] ! \" ;\n// Contrôle sur le mot de passe\nif(isSet ($ t h i s −>donnees [ ’mot_de_passe ’ ]) ) {\nif($this −>donnees [ ’ mot_de_passe ’]==\"\"\nor $ _ P O S T[ ’ conf_passe ’]==\"\"\nor $ _ P O S T[ ’ conf_passe ’ ] != $this −>donnees [ ’mot_de_passe ’ ])\n$this −>erreurs [] .= \"Vous devez saisir un mot de passe \"\n. \" et le confirmer à l ’ identique !\" ;\n}\nif(! isSet($this −>donnees [ ’ region ’ ]) or empty ($this −>donnees [\n’ region ’ ]) )\n$this −>erreurs [] .= \"Vous devez saisir votre région !\" ;\nif($this −>donnees [ ’annee_naissance ’]==\"\")\n$this −>erreurs [] .= \"Votre année de naisance est\nincorrecte !\";\nif($this −>donnees [ ’prenom ’ ]==\" \" )\n$this −>erreurs [ ] .= \"Vous devez s a i s i r votre prénom ! \" ;\nif($this −>donnees [ ’nom ’]==\"\")\n$this −>erreurs [] .= \"Vous devez saisir votre n o m !\" ;\n// Appel aux contrôles de la méthode générique\nparent :: controle () ;\nif(count ($this −>erreurs) > 0) {\nreturn false ;\n}\nelse {\nreturn true ;\n}\n}\n276\n Chapitre 6. Architecture du site : le pattern MVC\nOn peut toujours ajouter ou rafﬁner des contrôles. Vous pouvez vous reporter\nà la section consacrée à la validation des formulaires, page 86, pour un exposé des\ndifférentes vériﬁcations nécessaires.\nUne autre méthode modiﬁée par rapport à la méthode générique est\ninsertion(). Le seul ajout est le hachage du mot de passe avec la fonction MD5,aﬁn de ne pas l’insérer en clair dans la base.\nfunction insertion ()\n{\n// O n insère le mot de passe haché\n$this −>donnees [ ’ mot_de_passe ’ ] = md5 ($this −>donnees\n[ ’mot_de_passe ’ ]) ;\n// Il ne reste plus qu’à appeler la mét hode d ’ insertion\nhéritée\nparent :: insertion () ;\n}\nPour ﬁnir, voici l’action enregistrer du contrôleur Inscription. C’est cette\naction qui est appelée quand on valide le formulaire.\nfunction enregistrer ()\n{\n// Idem que précédemment\n$this −>vue −>titre_page = \"Résultat de votre inscription\";\n$tbl_inter = n ew Internaute ($this −>bd ) ;\n// O n crée un objet à partir des données du tableau H T T P\n$tbl_inter −>nouveau($_POST) ;\n// Contrôle des variables passées en P O S T\nif( $tbl_inter −>controle () = = false ){\n$messages = $tbl_inter −>messages () ;\n// Erreur de saisie détectée : on affiche le message\n// et on réaffiche le formulaire avec les valeurs saisies\n$this −>vue −>contenu = \"<b>$messages </b> \\n\"\n. $tbl_inter −>formulaire (TableBD ::I N S _ B D,\n\"inscription\", \"enregistrer\");\n}\nelse {\n// O n va quand même v é r i f i e r que cet email n ’ est pas déjà// inséré\nif($inter = $tbl_inter −>chercheLigne($ _ P OS T)) {\n$this −>vue −>contenu = \"U n internaute avec cet email\nexiste déjà \"\n. $tbl_inter −>formulaire (TableBD ::I N S _ B D, \" inscription \" ,\n\"enregistrer\");\n}\nelse {\n$tbl_inter −>insertion () ;\n6.4 Structure d’une application MVC : le modèle\n 277\n// Message de confirmation\n$this −>vue −>contenu = \"Vous êtes bien enregistré avec\nl ’ email \"\n. \"< b>$tbl_inter −>email </b>. Bienvenue!< br /> \"\n. \"Vous pouvez maintenant vous connecter au site . \" ;\n}\n}\n// Finalement , on affiche la vue c omme d’habitude\necho $this −>vue −>render (\"page\") ;\n}\nAprès initialisation d’une instance de la classe Internaute, l’action débute par\nl’exécution de la méthode controle(). Si une erreur est détectée, un message est\nconstitué et on réafﬁche le formulaire en reprenant, pour valeurs par défaut, les saisies\nprésentes dans le tableau $_POST. Sinon, on vériﬁe que l’e-mail n’existe pas déjà, puis\non insère.\n6.4.3 Pour conclure\nCe dernier exemple a montré de manière complète l’interaction des trois composantsdu MVC. La structuration en contrôleurs et actions permet de situer facilement ledéroulement d’une suite d’actions (ici, saisie, mise à jour) et fournit une initialisationde l’environnement (comme la connexion à la base) qui épargne au programmeur les\ninstructions répétitives. La vue est en charge de la sortie HTML, et on constate que\nles actions ne contiennent plus aucune balise HTML. Le modèle, au moins dans laprise en compte de la persistance, fournit encore des fonctionnalités toutes prêtes quilimitent la taille du code et facilitent sa compréhension.\nConvaincu(e) ? Comme tout concept un peu avancé, le MVC demande un peu\nde pratique et un délai d’assimilation. Cet effort en vaut vraiment la peine, et cechapitre avait pour but de vous proposer une introduction la plus douce possible, touten montrant une implantation réaliste. Prenez le temps d’analyser soigneusement lafonctionnalité d’inscription pour bien comprendre les interactions entre les différentscomposants. Le découpage induit par le MVC est logique, cohérent, et mène à desfragments de code tout à fait maîtrisables par leur taille et leur complexité limitée.\nLe reste du site est constitué d’actions qui peuvent s’étudier isolément, indépen-\ndamment les unes des autres et indépendamment du contexte MVC. Encore unefois, récupérez le code du site, étudiez-le et modiﬁez-le. Quand vous aurez assimilé les\nprincipes, vous pourrez passer à des fonctionnalités plus poussées et à des frameworks\nde développement plus robustes.\nEn ce qui concerne la complexité du développement MVC, il faut prendre\nconscience que les objets Internaute manipulés pour l’inscription sont très simples\net correspondent à la situation élémentaire où la correspondance établie par le\nmodèle associe un objet (instance de la classe Internaute) à une seule ligne d’une\ntable ( Internaute ). C’est un cas de mapping (correspondance entre deux représenta-\ntions) trivial. Vous trouverez dans le code du site une version plus complexe d’un\n278\n Chapitre 6. Architecture du site : le pattern MVC\nmodèle représentant les ﬁlms. Un ﬁlm est modélisé comme un objet composé de\nlignes provenant de plusieurs tables : les données du ﬁlm lui-même (table Film), le\nmetteur en scène (table Artiste ) et la liste des acteurs (table Artiste également). Tout\nen gardant la même interface simple que TableBD, la classe Film gère ce mapping\nen reconstituant la description complète d’un ﬁlm comme un graphe d’objets aumoment des recherches ou des mises à jour. Les nombreux commentaires placés dansle code vous permettront de comprendre l’articulation des données.\nEnﬁn, je vous rappelle que le chapitre 9 est consacré à une introduction au Zend\nFramework qui constitue une réalisation d’une toute autre envergure et d’une toute\nautre complexité que le MVC simpliﬁé présenté ici.\nProduction du site7\nCe chapitre est consacré aux fonctionnalités du site W EBSCOPE . Elles sont dévelop-\npées selon les principes décrits dans les chapitres précédents. Le site s’appuie sur la\nbase de données déﬁnie au chapitre 4. Rappelons que vous pouvez, d’une part utiliserce site sur notre serveur, d’autre part récupérer la totalité du code, le tester ou lemodiﬁer à votre convenance. Rappelons enﬁn que ce code est conçu comme uneapplication PHP fonctionnant aussi bien avec MySQL que n’importe quel SGBDrelationnel. Le chapitre aborde successivement quatre aspects, correspondant chacunà un contrôleur.\nLe premier (contrôleur Auth) est la gestion de l’authentiﬁcation permettant d’iden-\ntiﬁer un internaute accédant au site, avant de lui accorder des droits de consultationou de mise à jour. Ces droits sont accordés pour une session d’une durée limitée,\ncomme présenté déjà page 98. Cette fonctionnalité d’authentiﬁcation couplée avecune gestion de sessions est commune à la plupart des sites web interactifs.\nLes points suivants sont plus spéciﬁques, au moins du point de vue applicatif,\nau site de ﬁltrage coopératif W\nEBSCOPE . Nous décrivons tout d’abord le contrôleur\nNotation qui permet de rechercher des ﬁlms et de leur attribuer une note, puis\nl’afﬁchage des ﬁlms (contrôleur Film) avec toutes leurs informations. Cet afﬁchage\ncomprend un forum de discussion qui permet de déposer des commentaires sur lesﬁlms et de répondre aux commentaires d’autres internautes.\nEnﬁn, la dernière partie (contrôleur Recomm) est consacrée à l’algorithme de\nprédiction qui, étant données les notes déjà attribuées par un internaute, rechercheles ﬁlms les plus susceptibles de lui plaire (contrôleur Recomm). Ce chapitre est\négalement l’occasion d’approfondir la présentation du langage SQL qui n’a été vuque superﬁciellement jusqu’à présent.\nIl existe de nombreuses améliorations possibles au code donné ci-dessous.\nQuelques-unes sont suggérées au passage. En règle générale, c’est un bon exercice dereprendre ces fonctionnalités et de chercher à les modiﬁer.\n280\n Chapitre 7. Production du site\n7.1 AUTHENTIFICATION\nDans tout site web interactif, on doit pouvoir identiﬁer les internautes avant de leur\nfournir un accès aux services du site. En ce qui nous concerne, nous avons besoin desavoir qui note les ﬁlms pour pouvoir faire des prédictions. La procédure classique,dans ce cas, est la suivante :\n•lors du premier accès au site, on propose au visiteur de s’inscrire en fournissantun identiﬁant (pour nous ce sera l’e-mail) et un mot de passe ;\n•lors des accès suivants, on lui demande de s’identiﬁer par la paire (email, mot\nde passe) .\n7.1.1 Problème et solutions\nComme déjà évoqué à la ﬁn du chapitre 1, le protocole HTTP ne conserve pasd’informations sur la communication entre un programme client et un programmeserveur. Si on s’en contentait, il faudrait demander, pour chaque accès ,u ni d e n t i ﬁ a n t\net un mot de passe, ce qui est clairement inacceptable.\nLa solution est de créer un ou plusieurs cookies pour stocker le nom et le mot de\npasse du côté du programme client. Rappelons (voir la ﬁn du chapitre 1, page 17)qu’un cookie est essentiellement une donnée transmise par le programme serveur au\nprogramme client, ce dernier étant chargé de la conserver pour une durée détermi-\nnée. Cette durée peut d’ailleurs excéder la durée d’exécution du programme client\nlui-même, ce qui implique que les cookies soient stockés dans un ﬁchier texte sur lamachine cliente.\nOn peut créer des cookies à partir d’une application PHP avec la fonction\nSetCookie(). Il faudrait donc transmettre l’e-mail et le mot de passe après les avoir\nrécupérés par l’intermédiaire d’un formulaire, et les relire à chaque requête d’un\nprogramme client. Ce processus est relativement sécurisé puisque seul le programmeserveur qui a créé un cookie peut y accéder, ce qui garantit qu’un autre serveur ne\npeut pas s’emparer de ces informations. En revanche toute personne pouvant liredes ﬁchiers sur la machine client peut alors trouver dans le ﬁchier cookies la liste des\nsites visités avec le nom et le mot de passe qui permettent d’y accéder...\nSessions temporaires\nLa solution la plus sécurisée (ou la moins perméable...) est une variante de la\nprécédente qui fait appel au système de sessions web dont les principes ont été exposés\nchapitre 2, page 98. Cette variante permet de transmettre le moins d’informationspossible au programme client. Elle repose sur l’utilisation d’une base de données ducôté serveur et peut être décrite par les étapes suivantes :\n1. quand un utilisateur fournit un e-mail et un mot de passe, on compare ces\ninformations à celles stockées dans la base, soit dans notre cas dans la tableInternaute ;\n2. si le nom et le mot de passe sont corrects, on crée une ligne dans une nouvelle\ntable SessionWeb , avec un identiﬁant de session et une durée de validité ;\n7.1 Authentification\n 281\n3. on transmet au client un cookie contenant uniquement l’identiﬁant de session ;\n4. si l’identiﬁcation est incorrecte, on refuse d’insérer une ligne dans SessionWeb ,\net on afﬁche un message – poli – en informant l’internaute ;\n5. à chaque accès du même programme client par la suite, on récupère\nl’identiﬁant de session dans le cookie, vériﬁe qu’il correspond à une session\ntoujours valide, et on connaîtra du même coup l’identité de l’internaute qui\nutilise le site.\nCe processus est un peu plus compliqué, mais il évite de faire voyager sur l’Internet\nune information sensible comme le mot de passe. Dans le pire des cas, l’identiﬁantd’une session sera intercepté, avec des conséquences limitées puisqu’il n’a qu’unevalidité temporaire.\n7.1.2 Contrôleur d’authentification et de gestion des sessions\nNous allons ajouter au schéma de la base Films une table SessionWeb dont voici la\ndescription. Comme quelques autres, la commande de création de cette table setrouve dans le script SQL\nComplFilms.sql .\nCREATE TABLE SessionWeb (id_session VARCHAR (40) NOT NULL ,\nemail VARCHAR (60) NOT NULL ,\nnom VARCHAR (30) NOT NULL ,\nprenom VARCHAR (30) NOT NULL ,\ntemps_limite DECIMAL (10 ,0) NOT NULL ,\nPRIMARY KEY (id_session) ,\nFOREIGN KEY ( e m a i l ) REFERENCES I n t e r n a u t e\n);\nChaque ligne insérée dans cette table signiﬁe que pour la session id_session,\nl’internaute identiﬁé par email à un droit d’accès au site jusqu’à temps_limite.C e\ndernier attribut est destiné à contenir une date et heure représentées par le nombrede secondes écoulées depuis le premier janvier 1970 (dit « temps UNIX »). Il existedes types spécialisés sous MySQL pour gérer les dates et les horaires, mais cettereprésentation sous forme d’un entier sufﬁt à nos besoins. Elle offre d’ailleurs le grandavantage d’être comprise aussi bien par MySQL que par PHP , ce qui facilite beaucouples traitements de dates.\nLe nom et le prénom de l’internaute ne sont pas indispensables. On pourrait les\ntrouver dans la table Internaute en utilisant l’e-mail. En les copiant dans SessionWeb\nchaque fois qu’une session est ouverte, on évite d’avoir à faire une requête SQLsupplémentaire. La duplication d’information est sans impact désagréable ici, puisqueles lignes de SessionWeb n’existent que temporairement. D’une manière générale\ncette table, ainsi que d’autres éventuellement créées et référençant l’identiﬁant desession, peut servir de stockage temporaire pour des données provenant de l’utilisa-teur pendant la session, comme par exemple le « panier » des commandes à effectuer\ndans un site de commerce électronique.\n282\n Chapitre 7. Production du site\nFonctionnalités de gestion des sessions\nLes fonctionnalités relatives aux sessions sont placées d’une part dans la super-classe\nControleur, ce qui permet d’en faire hériter tous les contrôleurs du site, d’autrepart dans le contrôleur Auth qui se charge de gérer les actions de connexion ( login)\net déconnexion (logout ). Le site W\nEBSCOPE est conçu, comme beaucoup d’autres,\navec une barre de menu où ﬁgure un formulaire de saisie du login et du mot de passe.Quand on valide ce formulaire, on est redirigé vers le contrôleur Auth qui se charge\nalors d’ouvrir une session si les informations fournies sont correctes.\nUne fois qu’une internaute a ouvert une session, le formulaire de connexion dans\nla barre de menu est remplacé par un lien permettant de se déconnecter.\nLa gestion de session s’appuie sur les fonctions PHP , qui donnent automatique-\nment un identiﬁant de session (voir page 98). Rappelons que l’identiﬁant de la\nsession est transmis du programme serveur au programme client, et réciproquement,\ntout au long de la durée de la session qui est, par défaut, déﬁnie par la duréed’exécution du programme client. La propagation de l’identiﬁant de session – dont lenom par défaut est PHPSESSID, ce qui peut se changer dans le ﬁchier de conﬁguration\nphp.ini – repose sur les cookies quand c’est possible.\nToutes les autres informations associées à une session doivent être stockées dans\nla base MySQL pour éviter de recourir à un ﬁchier temporaire. On s’assure ainsi d’unmaximum de conﬁdentialité.\nLes utilitaires de la classe Controleur\nLes méthodes suivantes de gestion des sessions se trouvent dans la classeControleur. La première prend en argument l’e-mail et le mot de passe et vériﬁeque ces informations correspondent bien à un utilisateur du site. Si c’est le cas ellerenvoie true,s i n o n false. La vériﬁcation procède en deux étapes. On recherche\nd’abord les coordonnées de l’internaute dans la table Internaute avec la variable\n$email, puis on compare les mots de passe. Si tout va bien, on crée la session dans\nla table.\nLe mot de passe stocké dans Internaute est crypté avec la fonction md5() qui\nrenvoie une chaîne de 32 caractères (voir le script d’insertion d’un internaute à la\nﬁn du chapitre précédent). Il n’y a pas d’algorithme de décryptage de cette chaîne, ce\nqui garantit que même dans le cas où une personne lirait la table contenant les motsde passe, elle ne pourrait pas sans y consacrer beaucoup d’efforts les obtenir en clair.On doit donc comparer l’attribut mot_de_passe de la table avec le cryptage de la\nvariable PHP $mot_de_passe.\nprotected function creerSession ($email , $mot_de_passe ,\n$id_session)\n{\n// Recherchons si l ’ internaute existe\n$email_propre = $this −>bd−>prepareChaine ($email) ;\n$ r e q u e t e = \"SELECT ∗F R O M Internaute W H E R E email=’\n$email_propre ’\" ;\n$res = $this −>bd−>execRequete ( $requete ) ;\n7.1 Authentification\n 283\n$internaute = $this −>bd−>objetSuivant ($res) ;\n// L’internaute existe −t−il ?\nif(is_object ($internaute)) {\n// Vérification d u m o t de passe\nif($internaute −>mot_de_passe = = md5 ($mot_de_passe)) {\n// Tout va bien . O n insère dans la table SessionWeb\n$maintenant = date (\" U \");\n$ t e m p s _ l i m i t e = $maintenant + s e l f : : DUREE_SESSION ;\n$email = $this −>bd−>prepareChaine ($email) ;\n$nom = $ t h i s −>bd−>prepareChaine($internaute −>nom ) ;\n$prenom = $this −>bd−>prepareChaine($internaute −>prenom ) ;\n$insSession = \"I N S E R T I N T O SessionWeb (id_session , email ,\nnom , \"\n. \"prenom , temps_limite) V A L U E S ( ’ $id_session ’ , \"\n. \" ’$email ’ , ’$ n o m ’ , ’$prenom ’ , ’ $temps_limite ’)\" ;\n$resultat = $this −>bd−>execRequete ($insSession);\nreturn true ;\n}\n/ / Mot de p a s s e i n c o r r e c t !\nelse return false ;\n}\nelse {\n// L’utilisateur $email est inconnu\nreturn false ;\n}\n}\nSi les deux tests successifs sont couronnés de succès, on peut créer la session. On\ndispose de toutes les informations nécessaires pour insérer une ligne dans SessionWeb\n(identiﬁant, e-mail, nom et prénom), la seule subtilité étant la spéciﬁcation de la\ndurée de validité.\nLa fonction PHP date() permet d’obtenir la date et l’horaire courants sous de\ntrès nombreux formats. En particulier la représentation « UNIX », en secondes depuis\nle premier janvier 1970, est obtenue avec le format \"U\". L’expression date(\"U\")\ndonne donc le moment où la session est créée, auquel il sufﬁt d’ajouter le nombre desecondes déﬁnissant la durée de la session, ici 1 heure=3600 secondes, déﬁnie par laconstante DUREE_SESSION de la classe Controleur.\nLa deuxième méthode vériﬁe qu’une session existante est valide. Elle prend en\nargument un objet PHP correspondant à une ligne de la table SessionWeb , et compare\nl’attribut tempsLimite à l’instant courant. Si la période de validité est dépassée, on\ndétruit la session.\nprivate function sessionValide ($session)\n{\n// Vérifions que le temps limite n’est pas dépassé\n$maintenant = date (\" U \");\nif($session −>temps_limite < $maintenant) {\n// Destruction de la session\n284\n Chapitre 7. Production du site\nsession_destroy () ;\n$ r e q u e t e = \"DELETE FROM SessionWeb \"\n. \" W H E R E id_session=’$session −>id_session ’\";\n$resultat = $this −>bd−>execRequete ( $requete ) ;\nreturn false ;\n}\nelse {\n// C’ est bon ! O n prolonge la session\n$ t e m p s _ l i m i t e = $maintenant + s e l f : : DUREE_SESSION ;\n$prolonge = \"U P D A T E SessionWeb S E T temps_limite=’\n$temps_limite ’ \"\n. \" W H E R E id_session=’$session −>id_session ’ \";\n$this −>bd−>execRequete ($prolonge) ;\n}\nreturn true ;\n}\nEnﬁn on a besoin d’un formulaire pour identiﬁer les internautes. Bien entendu, on\nutilise la classe Formulaire , et une fonction qui prend en argument le nom du script\nappelé par le formulaire, et un e-mail par défaut.\nprivate function formIdentification($url_auth , $email_defaut=\"\"\n)\n{\n/ / Demande d ’ i d e n t i f i c a t i o n\n$form = new Formulaire (\"post\" , $url_auth) ;\n$form −>debutTable () ;\n$form −>champTexte(\"Email\" , \"login_email \" , \"$email_defaut \" ,\n30, 60) ;\n$form −>champMotDePasse ( \" Passe \" , \" login_password \" , \" \" , 30) ;\n$form −> champValider (\"Identification\" , \"ident\");\n$form −>finTable () ;\nreturn $form −>formulaireHTML () ;\n}\nNous voilà prêts à créer la méthode contrôlant les accès au site.\nInitialisation des sessions\nChaque contrôleur dispose, par héritage de la classe Controleur, d’un objet\nsession initialisé dans le constructeur par un appel à la méthode initSession()\n(voir le code du constructeur dans le chapitre précédent, page 245). Cette\ninitialisation regarde si une session existe et vériﬁe qu’elle est valide. Si oui, l’objetsession est créé, représentant la ligne de SessionWeb correspondant à la session\nstockée. Sinon l’objet session reste à null et on considère que l’utilisateur n’est\npas connecté. La fonction prend en argument l’identiﬁant de session.\nprotected function initSession ($id_session)\n{\n$ r e q u e t e = \"SELECT ∗F R O M SessionWeb W H E R E id_session = ’\n$id_session ’ \" ;\n7.1 Authentification\n 285\n$resultat = $this −>bd−>execRequete ( $requete ) ;\n$this −>session = $this −>bd−>objetSuivant ( $resultat ) ;\n/∗∗\n∗O n vérifie que la session est toujours valide\n∗/\nif(is_object ($this −>session )) {\n// L a session existe . Est −elle valide ?\nif(! $this −>sessionValide ($this −>session )) {\n$this −>vue −>content = \"<b>Votre session n ’ est pas (ou\nplus) valide.<br/></b> \\ n\" ;\n$this −>session = null ;\n}\nelse {\n// L a session est valide : on place le n o m\n// de l ’utilisateur dans la vue pour pouvoir l ’afficher\n$this −>vue −>session_nom = $this −>session −>prenom . \" \"\n.$ t h i s −>session −>nom ;\n}\n}\n// Et on renvoie la session (qui peut être null )\nreturn $this −>session ;\n}\nDans chaque action d’un contrôleur on peut tester si l’objet session existe ou\npas. Si non, il faut refuser l’accès aux actions reservées aux utilisateurs connectés. On\ndispose pour cela de la méthode controleAcces() suivante, qui afﬁche un message\nde refus d’accès si l’utilisateur n’a pas ouvert de session :\nfunction controleAcces ()\n{\nif(!is_object ($this −>session )) {\n$this −>vue −>contenu = \"Vous devez être identifié \"\n. \"pour accéder à cette page<br/>\" ;\necho $this −>vue −>render (\"page\") ;\nexit ;\n}\n}\nÀ titre d’exemple voici l’action index du contrôleur Notation. On commence\npar appeler controleAcces(), et on sait ensuite, si l’action continue à se dérouler,\nque l’utilisateur est connecté. On dispose même de l’objet $this->session pour\naccéder à ses prénom, nom et e-mail si besoin est.\nfunction index ()\n{\n// Définition du titre\n$this −>vue −>titre_page = \"Recherche et notation des films \" ;\n// Contrôle de la session\n$this −>controleAcces () ;\n// Maintenant nous sommes identifiés\n286\n Chapitre 7. Production du site\n$this −>vue −>setFile (\"contenu \" , \" notation . tpl \") ;\n// Production du formulaire de recherche\n$this −>vue −>formulaire = $this −>formRecherche() ;\necho $this −>vue −>render (\"page\") ;\n}\nFinalement on dispose d’une méthode statutConnexion() qui se charge de\nplacer dans la vue les informations relatives à la session courante. Deux cas sont\npossibles :\n1. soit la session existe, et on afﬁche le nom de l’utilisateur connecté, avec un\nlien de déconnexion ;\n2. soit elle n’existe pas, et on afﬁche le formulaire de connexion.\nCette information est placée dans l’entité auth_info de la vue. Notez dans le\ncode l’exploitation des informations de l’objet $this->session\nprotected function statutConnexion ()\n{\n// S’ il n’y a pas de session : on affiche le formulaire\n// d’identification , sinon o n place u n lien de déconnexion\nif($this −>connexion () ) {\n$this −>vue −>auth_info = \"Vous êtes \" .\n$this −>session −>prenom . \" \" . $t his −>session −>nom . \" . \"\n. \" Vous pouvez vous <a href = ’? ctrl=auth& amp; action=logout ’>\"\n. \"déconnecter </a> à tout moment. \" ;\n}\nelse {\n$this −>vue −>auth_info =\n$this −>FormIdentification(\"? ctrl=auth & a m p; action=login\");\n}\n}\n7.1.3 Les actions de login et de logout\nCes deux actions font partie du contrôleur Auth. L’action login reçoit un em-ail et un\nmot de passe (qu’il faut vériﬁer) et tente de créer une session avec les utilitaires de\ngestion de session hérités de la classe Controleur.\nfunction login ()\n{\n$this −>titre_page = \"Identification\";\n/ / Si on est déjà connecté : on refuse\nif(is_object ($this −>session )) {\n$this −>vue −>contenu = \"Vous êtes déjà connecté . Déconectez −\nvous \"\n. \" au préalable avant de choisir u n autre compte.\";\n}\n7.1 Authentification\n 287\nelse if ( isSet ($ _ P O S T[ ’ login_email ’ ]) and\nisSet ($ _ P O S T[ ’ login_password ’ ]) ) {\n// U n e paire email /mot de passe existe . Est −elle correcte ?\nif($this −>creerSession ($ _ P O S T[ ’login_email ’ ] ,\n$ _ P O S T[ ’ login_password ’ ] , session_id ())) {\n// O n initialise l ’objet session avec les données qu’on\n// vient de créer\n$this −>initSession ( session_id ()) ;\n// Affichage d ’une page d ’ accueil sympathique\n$this −>vue −>setFile (\"contenu\" , \" auth_login . tpl \") ;\n}\nelse\n$this −>vue −> contenu .= \"<center> < b >Votre identification\na échoué . </b></center >\\n\" ;\n}\nelse {\n$this −>vue −>contenu = \"Vous devez fournir votre email et\nvotre mot de passe<br/>\" ;\n}\n// Rafraichissement de la partie du contenu qui montre soit// un formulaire , de connexion , soit un lien de déconnexion\n$this −>statutConnexion () ;\necho $this −>vue −>render (\"page\") ;\n}\nLa ﬁgure 7.1 montre la présentation du site juste après l’identiﬁcation d’un inter-\nnaute. Outre le message d’accueil dans la partie centrale, on peut noter que le statut\nde connexion afﬁché dans le menu à droite montre maintenant les prénom et nomde l’internaute connecté, ainsi qu’un lien qui pointe vers l’action de déconnexionlogout.\nCette dernière vériﬁe que l’internaute est bien connecté (autrement dit, que\nl’objet session existe) et effectue alors une destruction dans la table, ainsi que par\nappel à la fonction PHP session_destroy(). L’objet session est également remis\nànull et le bloc d’information dans la vue réinitialisé.\npublic function logout ()\n{\n$this −>vue −>titre_page = \"Déconnexion \" ;\n// Vérifions qu ’on est bien connecté\nif(is_object ($this −>session ))\n{\n$this −>vue −>contenu = \"Vous é t ie z i d e n t i f i é sous le nom \"\n.\" < b > { $ t h i s −>session −>prenom } { $t his −>session −>nom } < / b>\n<br/>\" ;\nsession_destroy () ;\n288\n Chapitre 7. Production du site\n$ r e q u e t e = \"DELETE FROM SessionWeb \"\n. \" W H E R E id_session =’{$this −>session −>id_session } ’\";\n$resultat = $this −>bd−>execRequete ( $requete ) ;\n$this −>session = null ;\n$this −>vue −>contenu .= \"Vous êtes maintenant déconnecté !\\n\" ;\n}\nelse\n$this −>vue −>contenu = \"Vous n’ êtes pas encore connecté !\\n\";\n// Rafraichissement de la partie d u contenu qui montre soit\n// u n formulaire de connexion , soit u n lien de déconnexion\n$this −>statutConnexion () ;\necho $this −>vue −>render (\"page\") ;\n}\nIl se peut que logout() ne soit pas appelé par un internaute qui a simplement\nquitté le site sans passer par logout, et que l’information sur la session, bien que\ndevenue invalide, reste dans la base. On peut au choix la garder à des ﬁns statistiques,\nou nettoyer régulièrement les sessions obsolètes.\nFigure 7.1 — Page d’accueil après identification d’un internaute\n7.2 Recherche, présentation, notation des films\n 289\n7.2 RECHERCHE, PRÉSENTATION, NOTATION DES FILMS\nNous en arrivons maintenant aux fonctionnalités principales du site W EBSCOPE ,à\nsavoir rechercher des ﬁlms, les noter et obtenir des recommandations. Tout ce qui suit\nfait partie du contrôleur Notation. Nous utilisons explicitement des requêtes SQL\npour simpliﬁer l’exposé, une amélioration possible étant de suivre scrupuleusementle MVC en déﬁnissant des modèles.\n7.2.1 Outil de recherche et jointures SQL\nLa recherche repose sur un formulaire, afﬁché dans la ﬁgure 7.2, qui permet d’entrerdes critères de recherche. Ces critères sont :\n•le titre du ﬁlm ;\n•le nom d’un metteur en scène ;\n•le nom d’un acteur ;\n•le genre du ﬁlm ;\n•un intervalle d’années de sortie.\nFigure 7.2 — Formulaire de recherche des films\nLes quatre premiers champs ont chacun comme valeur par défaut « Tous », et\nl’intervalle de date est ﬁxé par défaut à une période sufﬁsamment large pour englobertous les ﬁlms parus. De plus, on accepte une spéciﬁcation partielle du titre oudes noms. Si un internaute entre « ver », on s’engage à rechercher tous les ﬁlms\ncontenant cette chaîne.\nVoici le formulaire, produit avec la classe Formulaire dans le cadre d’une\nméthode privée du contrôleur Notation. On aurait pu aussi créer un template avec\n290\n Chapitre 7. Production du site\nle code HTML et y injecter la liste des genres, qui est la seule partie dynamique\nprovenant de la base.\nLes champs sont groupés par trois, et afﬁchés dans deux tableaux en mode\nhorizontal.\nprivate function formRecherche ()\n{\n// Recherche de la liste des genres\n$resultat = $this −>bd−>e xe c Re que t e ( \"SELECT code FROM Genre \" ) ;\n$genres [ \"Tous\" ] = \"Tous\" ;\nwhile ($g=$this −>bd−>objetSuivant ( $resultat )) $genres [$g −>\ncode ] = $g −>code ;\n// Création du formulaire\n$form = new Formulaire (\"P O S T\" , \" ? ctrl=notation& amp; action=\nrecherche\") ;\n$form −> d e b u t T a b l e ( F o r m u l a i r e : : HORIZONTAL) ;\n$form −> champTexte (\"Titre du film\" , \" titre \" , \"Tous\" , 20);\n$form −> champTexte (\"Metteur en scène\" , \"nom_realisateur\" ,\n\"Tous\" , 20) ;\n$form −>champTexte(\"Acteur\" , \"nom_acteur\" , \"Tous\" , 20) ;\n$form −>finTable () ;\n$form −>ajoutTexte(\"<br/>\") ;\n$form −> d e b u t T a b l e ( F o r m u l a i r e : : HORIZONTAL) ;\n$form −>champListe (\"Genre\" , \"genre\" , \"Tous\" , 3, $genres) ;\n$form −>champTexte (\"Année min. \" , \"annee_min\" , 1800, 4) ;\n$form −>champTexte (\"Année max. \" , \"annee_max\" , 2100, 4) ;\n$form −>finTable () ;\n$form −>champValider (\"Rechercher\" ,\" rechercher \") ;\nreturn $form −>formulaireHTML () ;\n}\nRequête sur une table\nDans le cas où les champs nom_realisateur ounom_acteur restent à « Tous »,\nil ne faut pas les prendre en compte. Les critères de recherche restant font tousréférence à des informations de la table Film. On peut alors se contenter d’une\nrequête SQL portant sur une seule table, et utiliser la commande LIKE pour faire\ndes recherches sur une partie des chaînes de caractères (voir Exemple 1.10, page 43).Voici la requête que l’on peut utiliser.\nSELECT titre , annee , code_pays , genre , id_realisateur\nFROM Film\nWHERE titre LIKE ’ %$titre%’\nAND annee BETWEEN ’ $annee_min ’ AND ’$annee_max ’\nAND genre LIKE ’ $genre ’\n7.2 Recherche, présentation, notation des films\n 291\nJointures\nSupposons maintenant que la variable $nom_realisateur ne soit pas égale à\n« Tous ». Il faut alors tenir compte du critère de sélection sur le nom du metteur\nen scène pour sélectionner les ﬁlms et on se retrouve face à un problème pas encoreabordé jusqu’à présent : effectuer des ordres SQL impliquant plusieurs tables.\nSQL sait très bien faire cela, à condition de disposer d’un moyen pour rap-\nprocher une ligne de la table Film dela(l’unique) ligne de la table Artiste qui\ncontient les informations sur le metteur en scène. Ce moyen existe : c’est l’attribut\nid_realisateur deFilm qui correspond à la clé de la table Artiste ,id. Rapprocher\nles ﬁlms de leur metteur en scène consiste donc, pour une ligne dans Film, à prendre\nla valeur de id_realisateur et à rechercher dans Artiste la ligne portant cet id.\nVoici comment on l’exprime avec SQL.\nSELECT titre , annee , code_pays , genre , id_realisateur\nFROM Film , Artiste\nWHERE titre LIKE ’%$ t i t r e% ’\nAND nom LIKE ’ %$nom_realisateur %’\nAND annee BETWEEN $annee_min AND $annee_max\nAND genre LIKE ’$genre ’\nAND id_realisateur = Artiste .id\nCe type d’opération, joignant plusieurs tables, est désigné par le terme de jointure .\nLa syntaxe reste identique, avec une succession de clauses SELECT-FROM-WHERE,\nmais le FROM fait maintenant référence aux deux tables qui nous intéressent, et le\ncritère de rapprochement de lignes venant de ces deux tables est indiqué par l’égalité\nid_realisateur = id dans la clause WHERE.\nLes attributs auxquels on peut faire référence, aussi bien dans la clause WHERE\nque dans la clause SELECT, sont ceux de la table Film et de la table Artiste .D a n sc e\npremier exemple, tous les attributs ont des noms différents et qu’il n’y a donc aucuneambiguïté à utiliser l’attribut nomouannee sans dire de quelle table il s’agit. MySQL\nsait s’y retrouver.\nPrenons maintenant le cas où la variable $nom_realisateur est égale à « Tous »,\ntandis qu’un critère de sélection des acteurs a été spéciﬁé. Le cas est un peu plus\ncomplexe car pour rapprocher la table Film de la table Artiste , il faut impliquer\négalement la table Role qui sert d’intermédiaire (voir chapitre 4, page 195).\nVoici la requête SQL effectuant la jointure.\nSELECT Film. titre , annee , code_pays , genre , id_realisateur\nFROM Film , Artiste , Role\nWHERE Film . titre LIKE ’%$ t i t r e% ’\nAND nom LIKE ’%$nom_acteur %’\nAND annee BETWEEN ’ $annee_min ’ AND ’$annee_max ’\nAND genre LIKE ’ $genre ’\nAND id_acteur = Artiste . id\nAND R o l e . id_film = Film . id\n292\n Chapitre 7. Production du site\nComme dans le cas de la jointure entre Film etArtiste pour rechercher le metteur\nen scène, la jointure entre ces trois tables se fonde sur les attributs communs qui\nsont :\n1. les attributs idetid_film dans Film etRole;\n2. les attributs idetid_acteur dans, respectivement, Acteur etRole.\nIl y a ambiguïté sur idpuisque MySQL ne peut pas déterminer, quand on utilise\ncet attribut, si on fait référence à Film ou à Artiste . Pour lever cette ambiguïté, on\npréﬁxe donc le nom de l’attribut par le nom de la table d’où il provient.\nDans le cas le plus général, l’utilisateur entre une valeur pour le metteur en scène\net une pour le nom de l’acteur. En indiquant par exemple « itch » dans le champnom_realisateur et « ewa » dans le champ nom_acteur, on devrait obtenir (au\nmoins) le ﬁlm Vertigo , dirigé par Alfred H itchcock, et joué par James St ewart.\nIl faut donc à la fois faire la jointure Film-Artiste pour le metteur en scène, et\nFilm-Role-Artiste pour les acteurs. On recherche en fait, simultanément, deux lignes\ndans la table Artiste , l’une correspondant au metteur en scène, l’autre à l’acteur. Tout\nse passe comme si on effectuait une recherche d’une part dans une table contenant\ntous les acteurs, d’autre part dans une table contenant tous les metteurs en scène.\nC’est exactement ainsi que la requête SQL doit être construite. On utilise deux\nfois la table Artiste dans la clause FROM, et on la renomme une fois en Acteur, l’autre\nfois en MES avec la commande SQL AS. Ensuite on utilise le nom approprié pour\nlever les ambiguïtés quand c’est nécessaire.\nSELECT Film. titre , annee , code_pays , genre , id_realisateur\nFROM Film , Artiste AS Acteur , Artiste ASMES , Role\nWHERE Film . titre LIKE ’%$ t i t r e%’\nAND Acteur .nom LIKE ’%$nom_acteur %’\nAND MES . nom LIKE ’ %$nom_realisateur %’\nAND annee BETWEEN ’ $annee_min ’ AND ’ $annee_max ’\nAND genre LIKE ’ $genre ’\nAND id_acteur = Acteur. id\nAND id_realisateur = M E S.id\nAND R o l e . id_film = Film . id\nCette requête est d’un niveau de complexité respectable, même si on peut aller\nplus loin. Une manière de bien l’interpréter est de raisonner de la manière suivante.\nL’exécution d’une requête SQL consiste à examiner toutes les combinaisons\npossibles de lignes provenant de toutes les tables de la clause FROM.O np e u ta l o r s\nconsidérer chaque nom de table dans le FROM comme une variable qui pointe sur une\ndes lignes de la table. Dans l’exemple ci-dessus, on a donc deux variables, Acteur et\nMESqui pointent sur deux lignes de la table Artiste , et deux autres, Film etRole qui\npointent respectivement sur des lignes des tables Film etRole.\nÉtant données les lignes référencées par ces variables, la clause SELECT renvoie\nun résultat si tous les critères de la clause WHERE sont vrais simultanément. Le résultat\nest lui-même construit en prenant un ensemble d’attributs parmi ces lignes.\n7.2 Recherche, présentation, notation des films\n 293\nNous reviendrons plus systématiquement sur les possibilités du langage SQL dans\nle chapitre 10. Voici, pour conclure cette section, la méthode creerRequetes() qui\ninitialise, en fonction des saisies de l’internaute, la requête à exécuter.\nCette méthode est un peu particulière. Il ne s’agit pas vraiment d’une méthode au\nsens habituel de la programmation objet, puisqu’elle ne travaille pas dans le contexte\nd’un objet et se contente de faire de la manipulation syntaxique pour produire une\nchaîne de caractères contenant une requête SQL. Dans ce cas on peut la déclarercomme une méthode statique . Une méthode statique (ou méthode de classe) ne\ns’exécute pas dans le contexte d’un objet ; on ne peut donc pas y faire référenceà$this. On ne peut pas non plus appeler une méthode statique avec la syntaxe\n«$this-> ». L’appel se fait donc en préﬁxant le nom de la méthode par le nom de\nsa classe :\nNomClasse ::nomM´ ethode\nLes méthodes statiques sont souvent utilisées pour fournir des services généraux\nà une clase, comme compter le nombre d’objets instanciés depuis le début del’exécution. On pourrait placer creerRequetes() comme une méthode statique\ndu contrôleur Notation. Ici, il faut bien réﬂéchir à ce qu’est un contrôleur : un\nconteneur d’actions déclenchées par des requêtes HTTP . Si on commence à placerdes méthodes fonctionnelles, autres que des actions, dans un contrôleur, on ne pourrapas les utiliser ailleurs. Nous aurons besoin de creerRequetes() dans d’autres\ncontrôleurs. Il ne reste donc plus qu’à créer une classe spéciﬁquement dédiée auxfonctions utilitaires qui ne sont ni des actions, ni des méthodes d’un modèle. Voustrouverez dans le répertoire application/classes une classe Util qui ne contient que\ndes méthodes statiques tenant lieu d’utilitaires pour l’application. On y trouve parexemple des fonctions cherchant des lignes dans la table Artiste , par clé, par prénom\net nom, et quelques autres que nous présenterons ensuite. On y trouve donc laméthode creerRequetes().\nstatic function creerRequetes ($tab_criteres , $bd)\n{\n// O n décode les critères en les préparant pour\n// la requête S Q L. Quelques tests seraient bienvenus .\nif($tab_criteres [ ’ titre ’] = = \"T o u s\") $titre = ’ %’;\nelse $ t i t r e = $bd −>prepareChaine( $tab_criteres [ ’ titre ’ ]) ;\nif($tab_criteres [ ’genre ’] = = \"Tous\") $genre = ’ %’;\nelse $genre = $bd −>prepareChaine( $tab_criteres [ ’ genre ’ ]) ;\nif( $tab_criteres [ ’ nom_realisateur ’ ] = = \"Tous\")\n$nom_realisateur = ’ %’ ;\nelse $nom_realisateur =\n$bd−>prepareChaine( $tab_criteres [ ’ nom_realisateur ’ ]) ;\nif( $tab_criteres [ ’ nom_acteur ’ ] == \"Tous\") $nom_acteur = ’%’ ;\nelse $nom_acteur =\n$bd−>prepareChaine ( $tab_criteres [ ’ nom_acteur ’ ]) ;\n294\n Chapitre 7. Production du site\n$annee_min = $tab_criteres [ ’annee_min ’ ];\n$annee_max = $tab_criteres [ ’annee_max ’ ];\n// Maintenant on construit la requête\nif($nom_realisateur = = \" % \" and $nom_acteur = = \" % \")\n{\n// Une requête sur la table Film suffit\n$ r e q u e t e = \"SELECT ∗F R O M Film \"\n. \" W H E R E titre L I K E ’ %$titre%’ \"\n. \"AND a n n e e BETWEEN ’ $ a n n e e _ m i n ’ AND ’ $ a n n e e _ m a x ’ \"\n. \"AND g e n r e L I K E ’ $ g e n r e ’ \" ;\n}\nelse if ($nom_acteur == \"%\")\n{\n// Il faut une jointure Film −Artiste\n$ r e q u e t e = \"SELECT Film . ∗\"\n. \" F R O M Film , Artiste \". \" W H E R E titre L I K E ’ %$titre%’ \". \" A N D n o m LIKE ’%$nom_realisateur%’ \". \"AND a n n e e BETWEEN ’ $ a n n e e _ m i n ’ AND ’ $ a n n e e _ m a x ’ \"\n. \"AND g e n r e L I K E ’ $ g e n r e ’ \"\n. \" A N D id_realisateur = Artiste . id \";\n}\nelse if ($nom_realisateur = = \" % \")\n{\n// Il faut une jointure Film −Artiste −Role\n$ r e q u e t e = \"SELECT Film . ∗\"\n. \" F R O M Film , Artiste , Role \". \"W H E R E Film . titre LIKE ’%$titre%’ \". \"A N D nom LIKE ’%$nom_acteur%’ \"\n. \"AND a n n e e BETWEEN ’ $ a n n e e _ m i n ’ AND ’ $ a n n e e _ m a x ’ \"\n. \"AND g e n r e L I K E ’ $ g e n r e ’ \". \" A N D id_acteur = Artiste . id \"\n. \" A N D Role. id_film = Film . id \" ;\n}\nelse\n{\n// O n construit la requête la plus générale\n$ r e q u e t e = \"SELECT Film . ∗\"\n. \" F R O M Film , Artiste A S Acteur , Artiste A S M E S, Role \". \"W H E R E Film . titre LIKE ’%$titre%’ \"\n. \"A N D Acteur .nom LIKE ’%$nom_acteur%’ \". \" A N D M E S.n o m LIKE ’%$nom_realisateur%’ \"\n. \"AND a n n e e BETWEEN ’ $ a n n e e _ m i n ’ AND ’ $ a n n e e _ m a x ’ \"\n. \"AND g e n r e L I K E ’ $ g e n r e ’ \". \" A N D id_acteur = Acteur. id \". \" A N D id_realisateur = M E S.id \"\n. \" A N D Role. id_film = Film . id_film \" ;\n}\nreturn $requete ;\n}\n7.2 Recherche, présentation, notation des films\n 295\nLe regroupement de méthodes statiques dans une classe dédiée est très proche\nde la notion de bibliothèque de fonctions. La différence tient d’une part à la\nstructuration du code, plus forte en programmation objet (concrètement, on trouvefacilement d’où vient une méthode statique puisqu’elle est toujours accolée au nomde sa classe), et d’autre part à la présence des propriétés (variables) statiques alorscommunes à toutes les méthodes statiques d’une classe.\n7.2.2 Notation des films\nAu moment de l’exécution d’une recherche, une des requêtes précédentes – cellecorrespondant à la demande de l’utilisateur – est créée par creerRequetes().O n\nl’exécute alors, et on présente les ﬁlms obtenus dans un tableau, lui-même inclus dansun formulaire. Ce tableau comprend deux colonnes (ﬁgure 7.3).\nFigure 7.3 — Formulaire de notation des films\n1. La première colonne contient une présentation des ﬁlms, avec le titre, le\ngenre, l’année, etc. Le titre est une ancre vers le contrôleur Film qui donne\nun afﬁchage complet d’un ﬁlm, incluant son afﬁche et son résumé. L’URLassociée à cette ancre est\n?ctrl=ﬁlm&amp;action=index&amp;id_ﬁlm={id_ﬁlm}\n2. La deuxième colonne est un champ de type liste, proposant les notes, avec\ncomme valeur par défaut la note déjà attribuée par l’internaute à un ﬁlm, sielle existe. Si la note n’existe pas, elle est considérée comme valant 0 ce quicorrespond à l’intitulé « Non noté » dans le tableau $liste_notes.D ep l u s ,\non place dans cette colonne un champ caché, pour chaque ligne, contenantle titre du ﬁlm.\n296\n Chapitre 7. Production du site\nLa recherche est implantée comme une action MVC combinant de manière\nclassique un code PHP accédant à la base, et une vue déﬁnie par un template .V o i c i\ntout d’abord la vue.\nExemple 7.1 La vue pour l’afﬁchage des ﬁlms à noter\n<p>\nVoici les films sélectionnés ({ max_films } au maximum) .\nVous pouvez attribuer ou changer les notations .< br/>\n</p>\n<center >\n<form method =’post ’ action =’? ctrl=notation & a m p; action =noter ’\nname =’Form ’> <table border =’ 2’ >\n<tr class =’header ’>< th>Description du film</ th><th>Note</ th>< /tr>\n<!−− BEGIN f i l m −−>\n<tr bgcolor =’Silver ’ >\n<!−− Champ caché avec l ’ identifiant du film −−>\n<input type =’hidden ’ name =\" id [] \" value =\"{ id_film }\"/>\n<!−− Ancre pour voir la description d u film −−>\n<td><ah r e f =’? ctrl=film& a m p; action =index & a m p; id_film={id_film } ’>{\ntitre }</ a>,\n{ genre } , { pays } , {annee } , Réal . par { realisateur }</ td>\n<!−− Champ select pour attribuer une note −−>\n<td>{ liste_notes }</ td>\n</tr>\n<!−− END f i l m −−>\n</table >\n<input type=’submit ’ name =\" valider \" value=\"Valider vos notations\"/>\n</form >\n</center >\nUne ligne du tableau d’afﬁchage est représentée par une template imbriqué nommé\nfilm. On instancie ce template autant de fois qu’on trouve de ﬁlms dans le résultat\nde la requête basée sur les critères saisis par l’utilisateur. Voici l’action du contrôleurNotation.\nfunction recherche ()\n{\n// Contrôle de la session\n$this −>controleAcces () ;\n// Définition du titre et de la vue\n$this −>vue −>titre_page = \" Résultat de la recherche\" ;\n$this −>vue −>setFile (\"contenu\" , \"notation_recherche . tpl \") ;\n7.2 Recherche, présentation, notation des films\n 297\n// Extraction du template ’ film ’, remplacement par l ’ entité\n// ’films ’\n$this −>vue −>setBlock(\"contenu\" , \"film\" , \" films \");\n// Création d e la liste des notes\n$notes = array (\"0\"= >\"N o n noté\" , \"1\"= >’ ∗’, \" 2 \" = >’ ∗∗’,\n\"3\"= >’ ∗∗∗ ’, \" 4 \" = >’ ∗∗∗∗ ’, \" 5 \" = >’ ∗∗∗∗∗ ’);\n// Création de la requête e n fonction des critères passés a u\n// script\n$requete = Util :: creerRequetes ($ _ P O S T, $this −>bd ) ;\n$resultat = $this −>bd−>execRequete ( $requete ) ;\n$nb_films=1;\nwhile ($film = $this −>bd−>objetSuivant ( $resultat )) {\n// Recherche du metteur en scène\n$mes = Util :: chercheArtisteAvecID ($film −>id_realisateur ,\n$this −>bd ) ;\n// Placement des informations dans la vue\n$this −>vue −>id_film = $ film −>id ;\n$this −>vue −>genre = $film −>genre ;\n$this −>vue −>titre = $film −>titre ;\n$this −>vue −>annee = $film −>annee ;\n$this −>vue −>pays = $film −>code_pays ;\n$this −>vue −>realisateur = $ m e s −>prenom . \" \" . $mes −>nom ;\n// Recherche de la notation de l ’utilisateur courant pour\n// l ’ utiliser// c omme valeur par défaut dans le champ de formulaire de\n// type liste\n$notation = Util :: chercheNotation ($this −>session −>email ,\n$film −>id , $this −>bd ) ;\nif(is_object ($notation)) {\n$note_defaut = $notation −>note ;\n}\nelse {\n$note_defaut = 0;\n}\n// L a liste des notes est u n champ <select > créé par une\n// méthode statique de la vue.\n$this −>vue −>liste_notes =\nTemplate :: champSelect(\" notes [ $film −>id ] \" , $notes ,\n$note_defaut) ;\n// Instanciation du template ’film ’, ajout dans l ’entité\n// ’films ’\n$this −>vue −>append(\" films \" , \"film\");\nif($nb_films+ + > = self ::M A X _ F I L M S) break ;\n}\n298\n Chapitre 7. Production du site\n// Finalement on affiche la vue c omme d’habitude\n$this −>vue −>max_films = self ::M A X _ F I L M S;\necho $this −>vue −>render (\"page\") ;\n}\nOn effectue une boucle classique sur le résultat de la requête. Chaque passage\ndans la boucle correspond à une ligne dans le tableau, avec la description du ﬁlm et\nl’afﬁchage d’une liste de notes. Pour cette dernière, on se retrouve face au problèmeclassique d’engendrer un champ <select> avec une liste d’options, qui constitue\nune imbrication très dense de valeurs dynamiques (les codes des options) et detextes statiques (les balises HTML). La solution adoptée ici est de s’appuyer sur unefonction utilitaire, implantée comme une méthode statique de la classe Template,\nqui produit le texte HTML à partir d’un tableau PHP .\nstatic function champSelect ($nom, $liste , $defaut , $taille =1)\n{\n$options = \"\" ;\nforeach ($liste as $val = > $libelle) {\n// Attention aux problèmes d’affichage\n$val = htmlSpecialChars($val) ;\n$defaut = htmlSpecialChars($defaut) ;\nif($val != $defaut) {\n$options .= \"<option value=\\\"$val\\\">$libelle </option> \\n\" ;\n}\nelse {\n$options .= \"<option value=\\\"$val\\\" selected =’1’>\n$libelle </option> \\ n\";\n}\n}\nreturn \"<select name=’$ n o m ’ size =’ $taille ’>\" . $options . \" </\nselect > \\ n\" ;\n}\nLe script associé à ce formulaire reçoit donc deux tableaux PHP : d’abord$id,\ncontenant la liste des identiﬁants de ﬁlm ayant reçu une notation, et $notes,\ncontenant les notes elles-mêmes. Si l’on constate que la note a changé pour un ﬁlm,on exécute un UPDATE, et si la note n’existe pas on exécute un INSERT. C’est l’action\nnoter qui se charge de cette prise en compte des notations.\nfunction noter ()\n{\n$this −>controleAcces () ;\n// Définition du titre et de la vue\n$this −>vue −>titre_page = \"Résultat de la notation\";\n$this −>vue −>setFile (\"contenu\" , \"notation_noter . tpl \") ;\n// Boucle sur tous les films notés\nforeach ($_POST [ ’ i d ’ ] a s $id ) {\n$note = $_POST[ ’ notes ’ ][ $id ];\n$notation = Util :: chercheNotation ($this −>session −>email ,\n7.3 Affichage des films et forum de discussion\n 299\n$id , $this −>bd ) ;\n// O n met à jour si la note a changé\nif(!is_object ($notation) & & $note != 0) {\n$requete = \"I N S E R T I N T O Notation (id_film , email , note) \"\n. \" VALUES ( ’ $ i d ’ , ’ { $ t h i s −>session −>email } ’ , ’ $note ’) \" ;\n$this −>bd−>execRequete ( $requete ) ;\n}\nelse if (is_object ($notation) & & $note != $notation −>note )\n{\n$requete = \"U P D A T E Notation SET note=’$note ’ \"\n.\" W H E R E e m a i l = ’ { $ t h i s −>session −>email } ’ A N D id_film =\n’$ i d ’\";\n$this −>bd−>execRequete ( $requete ) ;\n}\n}\n// Production du formulaire de recherche\n$this −>vue −>formulaire = $this −>formRecherche() ;\necho $this −>vue −>render (\"page\") ;\n}\n7.3 AFFICHAGE DES FILMS ET FORUM DE DISCUSSION\nLe contrôleur Film afﬁche toutes les informations connues sur un ﬁlm, et propose\nun forum de discussion (une liste de messages permettant de le commenter). La\nprésentation d’un ﬁlm (voir l’exemple de la ﬁgure 7.4) est une mise en forme HTMLdes informations extraites de la base viaPHP . Il s’agit d’un nouvel exemple de\nproduction d’une page par templates.\nfunction index ()\n{\n// Définition du titre\n$this −>vue −>titre_page = \"Affichage des films \" ;\n// Contrôle de la session\n$this −>controleAcces () ;\n// O n devrait avoir reçu un identifiant\nif(! isSet($ _ R E Q U E S T[ ’ id_film ’ ])) {\n$this −>vue −> contenu = \"Je n e peux pas afficher cette page:\n\"\n. \" il m e faut u n identifiant de film\" ;\necho $this −>vue −>render (\"page\") ;\nexit ;\n}\n// O n recherche le film avec l ’id\n$film = Util :: chercheFilm($ _ R E Q U E S T[ ’ id_ film ’ ] , $this −>bd ) ;\n300\n Chapitre 7. Production du site\n// Si on a trouvé le film , on y va !\nif(is_object ($film)) {\n$this −>vue −>setFile (\"contenu\" , \"film . tpl \");\n// Extraction du bloc des acteurs\n$this −>vue −>setBlock(\"contenu\" , \"acteur\" , \" acteurs \");\n$this −>vue −>setBlock(\"contenu\" , \"message\" , \"messages\") ;\n// Il suffit de placer dans la v u e les informations\n// nécessaires à l ’affichage du film\n$this −>vue −>id_film = $ film −>id ;\n$this −>vue −>titre = $film −>titre ;\n$this −>vue −>genre = $film −>genre ;\n$this −>vue −>pays = $film −>code_pays ;\n$this −>vue −>annee = $film −>annee ;\n$this −>vue −>resume = $film −>resume ;\n$this −>vue −>affiche = \" ./ affiches /\" . md5 ($film −>titre) .\n\".gif\";\n// La moyenne des notes\n$this −>vue −>moyenne = Util :: moyenneFilm ($film −>id , $this −>\nbd) ;\n// O n prend le réalisateur\n$mes = Util :: chercheArtisteAvecId ($ film −>id_realisateur ,\n$this −>bd ) ;\n$this −>vue −>realisateur_prenom = $mes −>prenom ;\n$this −>vue −>realisateur_nom = $mes −>nom ;\n// Les acteurs\n$ r e q u e t e = \"SELECT nom , prenom , nom_role FROM A r t i s t e a ,\nRole r \"\n. \" W H E R E a. id = r . id_acteur A N D r . id_film=’$ film −>id ’ \" ;\n$resultat = $this −>bd−>execRequete ( $requete ) ;\nwhile ($acteur = $this −>bd−>objetSuivant ( $resultat )) {\n$this −>vue −>acteur_nom = $acteur −>nom ;\n$this −>vue −>acteur_prenom = $acteur −>prenom ;\n$this −>vue −>acteur_role = $acteur −>nom_role ;\n$this −>vue −> append(\"acteurs\" , \"acteur\");\n}\n// Les messages sur le film\n$this −>vue −>messages = $this −>afficheMess ($ film −>id , 0) ;\necho $this −>vue −>render (\"page\") ;\n}\n}\nLa seule nouveauté notable est la gestion d’un forum de discussion. Cette idée\nsimple se rencontre couramment : il s’agit d’offrir aux internautes un moyen de\ndéposer des commentaires ou des appréciations, sous la forme d’un message stocké\n7.3 Affichage des films et forum de discussion\n 301\ndans la base MySQL. De plus, aﬁn de rendre possible une véritable discussion, on\ndonne la possibilité de répondre à des messages déjà entrés.\nFigure 7.4 — Présentation d’un film\nLes messages constituent donc une hiérarchie, un message étant ﬁls d’un autre s’il\nlui répond. La table stockant les messages doit contenir l’identiﬁant du ﬁlm, l’e-mailde l’internaute qui a saisi le message, l’identiﬁant éventuel du message dont il est leﬁls, et bien entendu le sujet, le texte et la date de création du commentaire. Voici lescript de création de la table, qui se trouve dans le ﬁchier\nComplFilms.sql .\nCREATE TABLE Message ( id INT NOT NULL ,\nid_pere INT DEFAULT 0,\nid_film INTEGER (50) NOT NULL ,\nsujet VARCHAR (30) NOT NULL ,\ntexte T E X T NOT NULL ,\ndate_creation INT ,\nemail_createur VARCHAR (40) NOT NULL ,\nPRIMARY KEY (id),\nFOREIGN KEY (email_createur) R E F E R E N C E S\nInternaute);\nLes messages de plus haut niveau (ceux qui ne constituent pas une réponse)\nauront un id_pere nul, comme l’indique la clause DEFAULT.\nLa saisie des messages s’effectue dans un formulaire produit par l’action message\ndu contrôleur Film. Cette action s’attend à recevoir le titre du ﬁlm, et éventuelle-\nment l’identiﬁant du message auquel on répond. Dans ce dernier cas on n’afﬁche pasle sujet qui reprend celui du message-père, et qui est inclus dans un champ caché.\nfunction message()\n{\n// Définition du titre\n$this −>vue −>titre_page = \"Ajout d ’un message\" ;\n302\n Chapitre 7. Production du site\n// Contrôle de la session\n$this −>controleAcces () ;\n// Vérification des valeurs passées au script\nif(empty ($ _ R E Q U E S T[ ’ id_film ’ ])) {\n$this −>vue −>contenu = \"<b>Il manque des informations ?!\n</b>\\n\" ;\n}\nelse {\n// Ce message est −il le fils d ’un autre message ?\nif(! isSet ($ _ R E Q U E S T[ ’ id_pere ’ ]) ) {\n$id_pere = \"\" ;\n}\nelse {\n$id_pere = $ _ R E Q U E S T[ ’ id_pere ’ ];\n}\n// Création du formulaire\n$f = new Formulaire(\"post\" , \"? ctrl=film& a m p; action=inserer \");\n// Champs cachés : email , titre du film , id du message père\n$f−> champCache (\"email_createur\" , $this −>session −>email ) ;\n$f−> champCache (\"id_film\" , $ _ R E Q U E S T[ ’ id_film ’ ]) ;\n$f−> champCache (\"id_pere\" , $id_pere) ;\n// Tableau en mode vertical\n$f−>debutTable () ;\n// S’il s’agit d’u n e réponse: o n n’affiche pas le sujet\nif($id_pere = = \"\" or $id_pere = = 0) {\n$f−>champTexte (\" Sujet \" , \" sujet \" , \" \" , 30) ;\n}\nelse {\n$f−>ajoutTexte (\"<h3>Réponse au message <i>\"\n. $_REQUEST [ ’ s u j e t ’ ] . \" </ i > </h3>\\n \" ) ;\n$f−>champCache ( \" s u j e t \" , $_REQUEST [ ’ s u j e t ’ ] ) ;\n}\n$f−>champFenetre (\"Message\" , \" texte \" , \"\" , 4, 50) ;\n$f−>finTable () ;\n$f−>champValider (\"Enregistrer le message\" , \"valider\");\n// Affichage du formulaire\n$this −>vue −>formulaire = $f −>formulaireHTML () ;\n$this −>vue −>id_film = $ _ R E Q U E S T[ ’ id_film ’ ];\n$this −>vue −>email_createur = $this −>session −>email ;\n$this −>vue −>id_pere = $id_pere ;\n$this −>vue −>setFile (\"contenu\" , \"film_message . tpl \") ;\n}\necho $this −>vue −>render (\"page\") ;\n}\n7.3 Affichage des films et forum de discussion\n 303\nNous ne donnons pas le code d’insertion des messages similaire à ceux déjà vus\npour les ﬁlms ou les internautes. Vous pouvez le trouver dans le code de FilmCtrl.php .E n\nrevanche, il est plus intéressant d’examiner l’afﬁchage des messages, qui doit se faire\nde manière hiérarchique, avec pour chaque message l’ensemble de ses descendants, lenombre de niveaux n’étant pas limité. Comme souvent avec ce type de structure, unefonction récursive permet de résoudre le problème de manière élégante et concise.\nLa méthode afficheMess() est chargée d’afﬁcher, pour un ﬁlm, la liste des\nréponses à un message dont l’identiﬁant est passé en paramètre. Pour chacun deces messages, on crée une ancre permettant de lui répondre, et, plus important,on appelle à nouveau (récursivement) la fonction AfficheMess() en lui passant\nl’identiﬁant du message courant pour afﬁcher tous ses ﬁls. La récursion s’arrête quandon ne trouve plus de ﬁls.\nLe code présente une subtilité pour la gestion de la vue. Ce que l’on doit afﬁcher\nici, c’est un arbre dont chaque nœud correspond à un message et constitue la racinedu sous-arbre correspondant à l’ensemble de ses descendants. Pour l’assemblage ﬁnalavec le moteur de templates, on doit associer un nom d’entité à chaque nœud. C’estle rôle de la variable nom_groupe ci-dessous qui identiﬁe de manière unique le nœud\ncorrespondant à un message et à ses descendants par la chaîne groupid ,o ù id\nest l’identiﬁant du message. La fonction affichemess() renvoie la représentation\nHTML du nœud courant, ce qui correspond donc à une instanciation de bas vers lehaut de l’ensemble des nœuds constituant l’arborescence.\nprivate function afficheMess ($id_ film , $id_pere)\n{\n// Recherche des messages fils du père courant\n$ r e q u e t e = \"SELECT ∗F R O M Message \"\n. \" W H E R E id_film=’$id_film ’ A N D i d_pere=’$id_pere ’\" ;\n// O n crée une entité nom_groupe pour placer la présentation\n// des réponses au message id_pere\n$nom_groupe = \" gr oupe\" . $i d_pere ;\n$this −>vue −>setVar ($nom_groupe , \" \" ) ;\n// Affiche des messages dans une liste , avec appels récursifs\n$resultat = $this −>bd−>execRequete ( $requete ) ;\nwhile ($message = $this −>bd−>objetSuivant ( $resultat )) {\n// Appel récursif pour obtenir la mise en forme des// réponses\n$this −>vue −>reponses = $this −>afficheMess ($id_ film ,\n$message −>id ) ;\n// O n place les informations dans la vue\n$this −>vue −>texte_message = $message −>texte ;\n$this −>vue −>id_pere = $message −>id ;\n$this −>vue −>sujet = $message −>sujet ;\n// Attention à bien coder le texte placé dans une U R L\n$this −>vue −>sujet_code = urlEncode($message −>sujet ) ;\n$this −>vue −>email_createur = $message −>email_createur ;\n304\n Chapitre 7. Production du site\n// Décodage de la date Unix\n$idate = getDate($message −>date_creation);\n// Mise en forme de la date décod\n$this −>vue −>date_message =\n$idate [ ’mday ’ ] . \" / \" . $idate [ ’m o n’ ] . \" / \" . $idate [ ’ year ’\n];\n$this −>vue −>heure_message = $idate [ ’ hours ’ ] . \" heures \" .\n$idate [ ’minutes ’ ];\nif($id_pere != 0)\n$this −>vue −>prefixe= \"R E : \" ;\nelse\n$this −>vue −>prefixe = \"\" ;\n// Création de la présentation du message courant , et\n// concaténation dans l ’ entité $nom_groupe\n$this −>vue −>append($nom_groupe , \" message \" ) ;\n}\n// O n renvoie les messages du niveau courant , avec toutes\n// leurs réponses\nreturn $this −>vue −>getVar ($nom_groupe) ;\n}\nAu moment de l’appel initial à cette fonction, on lui donne l’identiﬁant 0, ce\nqui revient à afﬁcher au premier niveau tous les messages qui ne constituent pas des\nréponses. Ensuite, à chaque appel à afficheMess(), on ouvre une nouvelle balise\n<ul>. Ces balises seront imbriquées dans le document HTML produit, qui donnera\ndonc bien une présentation hiérarchique des messages.\nOn peut remarquer ici le traitement des dates. Elles sont stockées dans la base\nsous la forme d’un « timestamp » Unix, qui se décode très facilement avec la fonction\ngetDate(). Cette dernière renvoie un tableau (voir page 496) avec tous les élémentsconstituant la date et l’heure. Il reste à les mettre en forme selon le format souhaité.\n// Décodage de la date Unix\n$idate = getDate($message −>date_creation);\n// Mise en forme de la date décodée\n$date_affiche =\n$date [ ’mday ’ ] . \" / \" . $idate [ ’m o n’ ] . \" / \" . $idate [ ’year ’ ];\n$heure_affiche = $idate [ ’hours ’ ] . \"heures \" . $idate [ ’minutes ’ ];\n7.4 RECOMMANDATIONS\nNous abordons maintenant le module de prédiction qui constitue l’aspect le plusoriginal du site. D’une manière générale, la recommandation de certains produitsen fonction des goûts supposés d’un visiteur intéresse de nombreux domaines, dontbien entendu le commerce électronique. Les résultats obtenus sont toutefois assezaléatoires, en partie parce que les informations utilisables sont souvent, en qualitécomme en quantité, insufﬁsantes.\n7.4 Recommandations\n 305\nL’idée de base se décrit simplement. Au départ, on sait que telle personne a aimé\ntel ﬁlm, ce qui constitue la base de données dont un tout petit échantillon est donné\nci-dessous.\nPersonne\n Films\nPierre\n Van Gogh, Sacrifice, La guerre des étoiles\nAnne\n Van Gogh, La guerre des étoiles, Sacrifice\nJacques\n Batman, La guerre des étoiles\nPhileas\n Batman, La guerre des étoiles, Rambo\nMarie\n Sacrifice, Le septième sceau\nMaintenant, sachant que Claire aime Van Gogh (le ﬁlm !), que peut-on en déduire\nsur les autres ﬁlms qu’elle peut aimer ? Tous ceux qui aiment Van Gogh aiment aussi\nSacriﬁce, donc ce dernier ﬁlm est probablement un bon choix. On peut aller unpeu plus loin et supposer que Le septième sceau devrait également être recommandé,\npuisque Pierre aime Van Gogh etSacriﬁce, et que Marie aime Sacriﬁce etLe septième\nsceau .\nLa guerre des étoiles semble plaire à tout le monde ; c’est aussi une bonne recom-\nmandation, bien qu’on ne puisse pas en apprendre grand-chose sur les goûts spé-\nciﬁques d’une personne. Enﬁn, il y a trop peu d’informations sur ceux qui aiment\nRambo pour pouvoir en déduire des prédictions ﬁables.\nLes techniques de ﬁltrage coopératif (collaborative ﬁltering en anglais) reposent\nsur des algorithmes qui tentent de prédire les goûts de personnes en fonctions deleurs votes (qui aime quoi), ainsi que de toutes les informations recueillies surces personnes (profession, âge, sexe, etc). Ces algorithmes étant potentiellementcomplexes, nous nous limiterons à une approche assez simple. Un des intérêts dece type d’application est de faire appel intensivement à un aspect important de SQL,les requêtes agrégat , que nous n’avons pas vu jusqu’à présent.\n7.4.1 Algorithmes de prédiction\nIl existe essentiellement deux approches pour calculer des prédictions.\nApproche par classification\nOn cherche à déterminer des groupes (ou classes) d’utilisateurs partageant les mêmesgoûts, et à rattacher l’utilisateur pour lequel on souhaite réaliser des prédictions àl’un de ces groupes. De même, on regroupe les ﬁlms en groupes/classes.\nEn réorganisant par exemple le tableau précédent avec les personnes en ligne,\nles ﬁlms en colonnes, un ’O’ dans les cellules quand la personne a aimé le ﬁlm,on peut mettre en valeur trois groupes de ﬁlms (disons, « Action », « Classique », et« Autres »), et deux groupes d’utilisateurs.\n306\n Chapitre 7. Production du site\nBatman Rambo\n Van Gogh Sacrifice Le septième sceau\n La guerre des étoiles\nPierre\n OO\n O\nAnne\n OO\n O\nMarie\n OO\nJacques\n O\n O\nPhileas\n OO\n O\n O\nIl y a une assez forte similarité entre Jacques et Phileas, et toute personne qui\nse verrait affecter à leur groupe devrait se voir proposer un des ﬁlms du groupe\n« Action ». C’est vrai aussi, quoique à un moindre degré, entre le premier groupede personnes et les classiques. Les informations sont plus clairsemées, et le degré deconﬁance que l’on peut attendre d’une prédiction est donc plus faible. Enﬁn, en cequi concerne la guerre des étoiles , il ne semble pas y avoir d’afﬁnité particulière avec\nl’un ou l’autre des groupes d’utilisateurs.\nLes algorithmes qui suivent cette approche emploient des calculs de distance ou\nde similarité assez complexes, et tiennent compte des attributs caractérisant chaquepersonne ou chaque ﬁlm. De plus la détermination des groupes est coûteuse en tempsd’exécution, même si, une fois les groupes déterminés, il est assez facile d’établir uneprédiction.\nApproche par corrélation\nL’algorithme utilisé pour notre site effectue un calcul de corrélation entre l’internautequi demande une prédiction et ceux qui ont déjà voté. La corrélation établit le degré\nde proximité entre deux internautes en se basant sur leurs votes, indépendamment\nde leurs attributs (âge, sexe, région, etc).\nL’idée de départ est que pour prédire la note qu’un internaute asur un ﬁlm f,o n\npeut en première approche effectuer la moyenne des notes des autres internautes surf. En notant par n\na,fla note de asurf, on obtient :\nna,f=1\nNN/summationdisplay\ni=1ni,f (7.1)\nCette méthode assez grossière ne tient pas compte de deux facteurs. D’une part\nchaque internaute a une manière propre de noter les ﬁlms, qui peut être plutôtpositive ou plutôt négative. La note attribuée à un ﬁlm par un internaute ane devrait\ndonc pas être considérée dans l’absolu, mais par rapport à la note moyenne m\nadonnée\npar cet internaute. Si, par exemple, adonne en moyenne une note de 3,5, alors une\nnote de 3 attribuée à un ﬁlm exprime un jugement légèrement négatif, comparable àune note de 2,5 pour un internaute bdont la moyenne est de 3.\nD’autre part il faut tenir compte de la corrélation c\na,b( o ud e g r éd ep r o x i m i t é )\nentre deux internautes aetbpour estimer dans quelle mesure la note de bdoit inﬂuer\nsur la prédiction concernant a. On obtient ﬁnalement une formule améliorée, qui\neffectue la moyenne des notes pondérée par le coefﬁcient de corrélation :\nna,f=ma+1\nCN/summationdisplay\ni=1ca,i(ni,f−mi) (7.2)\n7.4 Recommandations\n 307\nCest la somme des corrélations. Elle permet de normaliser le résultat. Il reste\nà déterminer comment calculer la corrélation entre deux utilisateurs aetb.I lya\nplusieurs formules possibles. Celle que nous utilisons se base sur tous les ﬁlms pour\nlesquels aetbont tous les deux voté. Ils sont désignés par jdans la formule ci-dessous.\nca,b=/summationtext\nj(na,j−ma)(nb,j−mb)\n/radicalBig\n/summationtext\nj(na,j−ma)2/summationtext\nj(nb,j−mb)2(7.3)\nOn peut vériﬁer que si deux internautes ont voté exactement de la même manière,\nle coefﬁcient de corrélation obtenu est égal à 1. Si, d’un autre côté, l’un des inter-\nnautes vote de manière totalement « neutre », c’est-à-dire avec une note toujours\négale à sa moyenne, on ne peut rien déduire et la corrélation est nulle. On peut noterégalement que la corrélation entre deux internautes est d’autant plus pertinente quele nombre de ﬁlms qu’ils ont tous les deux notés est important.\nIl y a beaucoup d’améliorations possibles – et souhaitables. Elles visent à résoudre\n(partiellement) les deux problèmes de base du ﬁltrage coopératif : l’absence d’infor-mation et le fait que certains ﬁlms sont peu représentatifs (comme La guerre des étoiles\ndans l’exemple ci-dessus).\n7.4.2 Agrégation de données avec SQL\nToutes les requêtes vues jusqu’à présent pouvaient être interprétées comme une suited’opérations effectuées ligne à ligne. De même leur résultat était toujours constituéde valeurs issues de lignes individuelles. Les fonctionnalités d’agrégation de SQL\npermettent d’exprimer des conditions sur des groupes de lignes, et de constituer le\nrésultat en appliquant une fonction d’agrégation sur ce groupe. L’exemple le plussimple consiste à calculer le nombre de lignes dans une table.\nSELECT COUNT (∗)\nFROM Film\nLa fonction COUNT() compte le nombre de lignes. Ici, le groupe de lignes est\nconstitué de la table elle-même. Il est bien entendu possible d’utiliser la clauseWHERE pour sélectionner la partie de la table sur laquelle on applique la fonction\nd’agrégation.\nSELECT COUNT (∗)\nFROM Film\nWHERE genre = ’ Western ’\nAND annee > 1990\nLa fonction COUNT(), comme les autres fonctions d’agrégation, s’applique à tout\nou partie des attributs de la table. On peut donc écrire également.\nSELECT COUNT (id_realisateur)\nFROM Film\nWHERE genre = ’ Western ’\nAND annee > 1990\n308\n Chapitre 7. Production du site\nLa différence entre les deux requêtes qui précèdent est subtile : COUNT (expr )\ncompte en fait le nombre de lignes telles que la valeur de expr n’est pas à NULL.\nSi on utilise ’*’, comme dans le premier cas, on est sûr de compter toutes les lignes\npuisqu’il y a toujours au moins un attribut qui n’est pas à NULL dans une ligne (par\nexemple l’attribut titre est déclaré à NOT NULL : voir chapitre 4). En revanche la\ndeuxième requête ne comptera pas les lignes où id_realisateur est à NULL.\nIl n’est pas possible, sauf avec la clause GROUP BY qui est présentée plus loin, d’uti-\nliser simultanément des noms d’attributs et des fonctions d’agrégation. La requêtesuivante est donc incorrecte :\nSELECT titre , COUNT (id_realisateur)\nFROM Film\nWHERE genre = ’ Western ’\nAND annee > 1990\nOn demande en fait alors à MySQL deux choses contradictoires. D’une part il\nfaut afﬁcher tous les titres des westerns parus après 1990, d’autre part donner lenombre des réalisateurs de ces westerns. Il n’y a pas de représentation possible decette information sous forme d’une table avec des lignes, des colonnes, et une seulevaleur par cellule, et SQL, qui ne sait produire que des tables, rejette cette requête.La liste des fonctions d’agrégation est donnée dans la table 7.1.\nTableau 7.1 — Les fonctions d’agrégation de MySQL\nFonction\n Description\nCOUNT (expression )\n Compte le nombre de lignes.\nAVG (expression )\n Calcule la moyenne de expression .\nMIN (expression )\n Calcule la valeur minimale de expression .\nMAX (expression )\n Calcule la valeur maximale de expression .\nSUM (expression )\n Calcule la somme de expression .\nSTD(expression )\n Calcule l’écart-type de expression .\nLes requêtes dont nous avons besoin pour nos prédictions calculent des moyennes.\nLa moyenne des notes pour l’internaute fogg@foo.fr est obtenue par :\nSELECT AVG( note )\nF R O M Notation\nW H E R E email = ’ fogg@foo . fr ’\nSymétriquement, la moyenne des notes pour un ﬁlm –par exemple, Vertigo –e s t\nobtenue par :\nSELECT AVG (note)\nFROM Notation\nWHERE titre = ’Vertigo ’\n7.4 Recommandations\n 309\nLa clause GROUP BY\nDans les requêtes précédentes, on applique la fonction d’agrégation à l’ensemble du\nrésultat d’une requête (donc potentiellement à l’ensemble de la table elle-même).Une fonctionnalité complémentaire consiste à partitionner ce résultat en groupes,\npour appliquer la ou les fonction(s) d’agrégat à chaque groupe. On construit lesgroupes en associant les lignes partageant la même valeur pour un ou plusieurs\nattributs.\nLa requête suivante afﬁche les internautes avec leur note moyenne :\nSELECT email , AVG (note)\nFROM Notation\nGROUP BY email\nOn constitue ici un groupe pour chaque internaute (clause GROUP BY email).\nPuis on afﬁche ce groupe sous la forme d’une ligne, dans laquelle les attributs peuvent\nêtre de deux types :\n1. ceux dont la valeur est constante pour l’ensemble du groupe, soit précisément\nles attributs du GROUP BY, ici l’attribut email ;\n2. le résultat d’une fonction d’agrégation appliquée au groupe : ici AVG(note).\nBien entendu, il est possible d’exprimer des ordres SQL comprenant une clause\nWHERE et d’appliquer un GROUP BY au résultat. D’autre part, il n’est pas nécessaire de\nfaire ﬁgurer tous les attributs du GROUP BY dans la clause SELECT. Enﬁn, le ASpermet\nde donner un nom aux attributs résultant d’une agrégation.\nVoici un exemple assez complet donnant la liste des ﬁlms avec le nom et le\nprénom de leur metteur en scène, et la moyenne des notes obtenues, la note minimaleet la note maximale.\nSELECT f . titre , n o m, prenom, AVG (note) AS moyenne ,\nMIN (note) AS noteMin , MAX (note) AS noteMax\nFROM Film AS f , Notation ASn, Artiste AS a\nWHERE f. titre = n. titre\nAND f . id_realisateur = a.id\nGROUP BY f . titre , n o m, prenom\nL’interprétation est la suivante : (1) on exécute d’abord la requête SELECT ...\nFROM ... WHERE, puis (2) on prend le résultat et on le partitionne, enﬁn (3) oncalcule le résultat des fonctions pour chaque groupe.\n7.4.3 Recommandations de films\nDeux méthodes de recommandations sont proposées, toutes deux implantées dans lecontrôleur Recomm. L’internaute peut choisir le nombre de ﬁlms à afﬁcher (10 par\ndéfaut) et appuyer sur un des boutons correspondant aux deux choix proposés (voirﬁgure 7.5). L’action proposer associée au formulaire effectue quelques tests initiaux\npour vériﬁer qu’un calcul de proposition est bien possible, et se contente d’appelerla fonction appropriée. L’afﬁchage des ﬁlms, standard, n’est pas montré dans le codeci-dessous. Il ﬁgure bien sûr dans les ﬁchiers du site.\n310\n Chapitre 7. Production du site\nFigure 7.5 — Formulaire d’accès aux prédictions\nfunction proposer ()\n{\n// D’abord on récupère les choix de l ’ ut ilisateur\n// Il faudrait vérifier q u’ ils existent bien ...\n$nb_films = $ _ P O S T[ ’ nb_films ’ ];\n$liste_triee = isSet ($ _ P O S T[ ’ films_tries ’]) ;\nif($nb_films < = 0 or $nb_films > 30) {\n$this −>vue −>contenu =\n\"C e script attend une variable nb_films comprise entre 1\net 30\\n\" ;\n}\nelse {\n// O n vérifie que l ’internaute a noté suffisamment de films\n$nb_notes = Util :: NombreNotes( $this −>session −>email , $this\n−>bd ) ;\n// Message d’avertissement s ’ il n’y a pas assez de films\nif( $ n b _ n o t e s < s e l f : : MIN_NOTES and ! $ l i s t e _ t r i e e ) {\n$this −>vue −>avertissement =\n\"Vous n ’ avez pas noté assez de films ($nb_notes) \"\n. \"pour que nous puissions établir une prédiction !\\n\" ;\n$liste_triee = true ;\n}\nelse {\n$this −>vue −>avertissement = \"\" ;\n}\n$this −>vue −>nb_notes = $nb_notes ;\n// Calcul de la liste des meilleurs films\n7.4 Recommandations\n 311\nif($liste_triee) {\n$films = $this −>listeTriee ($nb_films) ;\n$this −>vue −>nb_films = $nb_films ;\n$this −>vue −>setFile (\"contenu\" , \"recomm_liste_triee . tpl \");\n}\nelse {\n// Calcul des prédictions\n$this −>vue −>ma_moyenne =\nUtil :: moyenneInternaute($this −>session −>email , $this\n−>bd ) ;\n$films = $this −>prediction ( $this −>session −>email ,\n$nb_films , $this −>bd ) ;\n$this −>vue −>setFile (\"contenu\", \"recomm_liste_predite . tpl \") ;\n}\n// Ensuite o n affiche la liste des films −− Voir le code\n}\nLes deux méthodes listeTriee() etprediction() correspondent respective-\nment aux deux types de propositions possibles. Elles sont toutes deux implantées\ncomme des méthodes privées du contrôleur Recomm et données plus bas.\nListe des films les plus populaires\nLa méthode listeTriee() s’appuie sur les fonctionnalités d’agrégation de SQL\npour construire la liste des ﬁlms avec leur note moyenne. Le résultat est placé dans\nun tableau associatif, la clé étant l’identiﬁant du ﬁlm et la valeur la note moyenne\npour ce ﬁlm.\nIl ne reste plus qu’à trier sur la note, en ordre décroissant et à afﬁcher les 10, 20\nou 30 premiers ﬁlms de la liste triée. PHP fournit de nombreuses fonctions de tride tableau (voir annexe C), dont asort() etarsort() pour trier sur les valeurs,\netksort() oukrsort() pour trier sur les clés un tableau associatif, respective-\nment en ordre croissant et en ordre décroissant. C’est arsort() qui nous intéresse\nici.\nFinalement, on afﬁche la liste des ﬁlms (voir ﬁgure 7.6), en associant le titre à\nune ancre menant au contrôleur Film pour la présentation détaillée et le forum de\ndiscussion.\nprivate function listeTriee ($nbFilms)\n{\n$films = array () ;\n// Recherche des films et de leur note moyenne\n$ c l a s s e m e n t = \"SELECT i d _ film , A V G (note) A S note\n\" . \" F R O M Notation G R O U P B Y id_film\" ;\n$resultat = $this −>bd−>execRequete ( $classement) ;\n312\n Chapitre 7. Production du site\n// O n crée un tableau associatif des films , avec leur note\n// moyenne\n$i=1;\nwhile ($film = $this −>bd−>objetSuivant ( $resultat )) {\n$films [$ film −>id_film ] = $ film −>note ;\nif( $i++ >= $nbFilms) break ;\n}\n// Tri du tableau par ordre décroissant sur note moyenne\narsort ($films);\nreturn $films ;\n}\nFigure 7.6 — Liste des films les plus appréciés\nCalcul des prédictions\nLe calcul des prédictions est nettement plus complexe que le tri des ﬁlms sur leur\nnote moyenne. La méthode prediction() fait elle-même appel à quelques autres\nfonctions implantées comme des méthodes statiques de la classe Util.\n1.MoyenneInternaute( email ) calcule la note moyenne de l’internaute identiﬁé\nparemail.\n2.ChercheNotation (email, id_film ), déjà rencontrée, recherche la notation\nd’un internaute sur un ﬁlm.\n3.CalculCorrelation (email1, email2 ), calcule le coefﬁcient de corrélation\nentre deux internautes.\n4.CalculPrediction (email, id_film, tableauCorrelation ), prédit la note\nd’un ﬁlm pour un internaute, étant donné le tableau des corrélations entre cetinternaute et tous les autres.\nNous ne donnerons pas les deux premières fonctions ci-dessus qui se contentent\nd’exécuter une requête SQL (une agrégation pour MoyenneInternaute())e t\n7.4 Recommandations\n 313\nrenvoient le résultat. Elles se trouvent dans classes/Util.php . Les deux autres fonctions\nse chargent de calculer respectivement les formules (7.3) et (7.2), page 306. Aﬁn de\ncalculer une prédiction, on procède en deux étapes :\n1. d’abord on calcule le coefﬁcient de corrélation entre l’internaute pour lequel\non s’apprête à faire la prédiction et tous les autres : on stocke ces valeurs dansun tableau associatif $tabCorr indexé par le nom des internautes ;\n2. puis on prend chaque ﬁlm non noté par l’internaute, on applique la fonction\ncalculant la prédiction, et on afﬁche le résultat.\nLe calcul des prédictions pour un ensemble de ﬁlms est implanté par la méthode\nprivée prediction() du contrôleur Recomm, donnée ci-dessous.\nprivate function prediction ($email , $nb_films)\n{\n$films = array () ;\n// Calcul des corrélations avec les autres internautes\n$reqInternautes = \"S E L E C T i . ∗F R O M Internaute i , Notation n \"\n. \" W H E R E n.e m a i l = i.e m a i l A N D i.e m a i l ! = ’$ e m a i l’ \"\n. \" GROUP BY i . e m a i l HAVING COUNT( ∗)>1 0 \" ;\n$listeInter = $this −>bd−>execRequete ( $reqInternautes ) ;\n$tab_corr = array () ;\nwhile ($internaute = $this −>bd−>objetSuivant ( $listeInter ))\n$tab_corr [ $internaute −>email ] =\nUtil :: calculCorrelation ($email , $internaute −>email ,\n$this −>bd ) ;\n// Recherche des films , en ordre aléatoire\n$ r e q u e t e = \"SELECT ∗F R O M Film O R D E R BY R A N D() \" ;\n$resultat = $this −>bd−>execRequete ( $requete ) ;\n$i=1;\nwhile ($film = $this −>bd−>objetSuivant ( $resultat )) {\n// O n vérifie que ce film n’ est pas noté par l ’ internaute\n$notation = Util :: chercheNotation ($email , $film −>id , $this\n−>bd ) ;\nif(! $notation) {\n// Calcul de la prédiction pour ce film\n$prediction = Util :: calculPrediction ($email , $film −>id ,\n$tab_corr , $this −>bd ) ;\n$prediction = round ($prediction ∗100) / 100;\n$films [$ film −>id ] = $prediction ;\nif($i+ + > = $nb_films) break ;\n}\n}\n// O n renvoie le tableau des prédictions\nreturn $films ;\n}\n314\n Chapitre 7. Production du site\nOn constate qu’il faut manipuler beaucoup d’informations pour arriver au résultat,\nce qui risque de soulever des problèmes de performance pour une base de données\nvolumineuse. En particulier, le tableau des corrélations contient autant d’élémentsqu’il y a d’internautes dans la base, et le passage de ce tableau en paramètre de lafonction CalculPrediction() peut être assez pénalisant. Un passage par référence\néviterait cela.\nUne fois qu’une application est stabilisée, et dans la mesure où elle est conçue\nde manière véritablement modulaire, il est relativement facile de remettre en cause\nquelques fonctions pour améliorer les performances. Ici une optimisation simple\nconsisterait à ne pas recalculer systématiquement et en temps réel les corrélationsentre internautes, mais à le faire périodiquement – par exemple une fois par jour – enstockant le résultat dans une table MySQL. Au lieu de passer le tableau $tabCorr\nen paramètre de la fonction CalculPrediction(), cette dernière pourrait alors\nchercher les corrélations dans la table.\nLa méthode statique Util::calculCorrelation() calcule et renvoie le coefﬁ-\ncient de corrélation entre deux internautes, selon la formule (7.3). Elle effectue doncune boucle sur tous les ﬁlms, prend ceux qui ont été notés par les deux internautes,et calcule les composants de la formule.\nstatic function calculCorrelation ($email1 , $email2 , $bd)\n{\n$somme_numerateur = 0.;\n$somme_denom1 = 0 . ;\n$somme_denom2 = 0 . ;\n$moyenne1 = self :: moyenneInternaute ($email1 , $bd) ;$moyenne2 = self :: moyenneInternaute ($email2 , $bd) ;\n$ r e q u e t e = \"SELECT ∗F R O M Film\" ;\n$listeFilms = $ b d −>execRequete ( $requete ) ;\nwhile ($film = $bd −>objetSuivant ( $listeFilms ))\n{\n$notation1 = self :: chercheNotation ($email1 , $film −>titre ,\n$bd) ;\n$notation2 = self :: chercheNotation ($email2 , $film −>titre ,\n$bd) ;\nif($notation1 and $notation2)\n{\n$somme_numerateur += ( $notation1 −>note −$moyenne1)\n∗($notation2 −>note −$moyenne2) ;\n$somme_denom1 += pow( $notation1 −>note −$moyenne1 ,2) ;\n$somme_denom2 += pow( $notation2 −>note −$moyenne2 ,2) ;\n}\n}\n$somme_denominateur = sqrt ($somme_denom1 ∗$somme_denom2) ;\nif($somme_denominateur != 0)\n$corr = abs($somme_numerateur) / $somme_denominateur ;\nelse\n$corr = 0;\n7.4 Recommandations\n 315\nreturn $corr ;\n}\nLes fonctions pow(), sqrt() etabs() font partie du riche ensemble\nde fonctions de PHP (voir annexe C). Finalement la méthode statique\nUtil::calculPrediction() applique la formule (7.2) pour calculer la prédiction\nsur un ﬁlm comme la moyenne des notations des autres internautes sur ce ﬁlm,pondérées par les coefﬁcients de corrélation.\nstatic function calculPrediction ($email , $id_film , $tab_corr ,\n$bd)\n{\n// Calcul de la moyenne des notes de l ’ internaute courant\n$ma_moyenne = self :: moyenneInternaute($email , $bd) ;\n// Boucle sur toutes les autres notations du m ê m e film\n$ r e q _ n o t a t i o n s = \"SELECT ∗F R O M Notation W H E R E id_film = ’\n$id_film ’\" ;\n$liste_notations = $bd −>execRequete ($req_notations) ;\n// Application de la formule de corrélation\n$somme_corr = 0.;\n$somme_ponderee = 0.;\nwhile ($notation = $bd −>objetSuivant ($liste_notations)) {\n$moyenne = self :: moyenneInternaute($notation −>email , $bd) ;\n$somme_corr + = ( float ) $tab_corr [\"$notation −>email \" ] ;\n$somme_ponderee += ( float ) $tab_corr [ \" $notation −>email \" ] ∗\n($notation −>note −$moyenne) ;\n}\nif($somme_corr != 0.)\nreturn $ma_moyenne + ($somme_ponderee / $somme_corr) ;\nelse\nreturn $ma_moyenne;\n}\nOn peut remarquer dans cette fonction que les variables $sommeCorr\net$sommePonderee sont explicitement manipulées comme des réels, avec la\ncommande de conversion (float) placée devant une expression. Comme PHP est\nlibre de convertir une variable en fonction du type qui lui semble le plus approprié, il\nvaut mieux prendre la précaution de donner explicitement ce type s’il est important.\n\nXML8\nCe chapitre propose une introduction à XML et présente quelques utilisations pos-\nsibles de ce langage dans le cadre d’un site web basé sur MySQL et PHP . L’intérêt deXML dans un tel contexte consiste essentiellement à faciliter l’échange de données,\naussi bien pour exporter des données de la base MySQL et les transmettre sur le\nréseau, que pour récupérer des données et les insérer dans la base. Nous verrons\ncomment représenter une base de données relationnelle en XML et comment utiliserles fonctions PHP pour extraire des données de cette représentation.\nUne autre possibilité d’utilisation de XML est la publication de données. Un\ndes atouts de XML est de rendre la représentation de l’information indépendantedes applications qui la manipulent. Dans notre cas, cela signiﬁe qu’un documentXML produit par un site web MySQL/PHP n’est pas réduit à être afﬁché dans unnavigateur, à la différence des documents HTML construits jusqu’à présent. On\npeut, après une phase de transformation, proposer les informations de ce document\nau format HTML, mais aussi PDF pour une lecture ou impression de qualité, SVGpour des graphiques, ou enﬁn RSS. En d’autres termes on sépare le contenu de laprésentation, ce qui rejoint en partie les objectifs des solutions de templates présentées\ndans le chapitre 5.\nNotre présentation de XML est bien entendu illustrée dans le cadre du site\nW\nEBSCOPE , les fonctionnalités étant rassemblées dans le contrôleur XML dont la\npage d’accueil est reprise ﬁgure 8.1. On peut, à l’aide d’un formulaire semblable àcelui utilisé pour la notation (voir page 295), rechercher des ﬁlms et en obtenirune représentation sous forme de document XML, indépendante donc de MySQL,PHP ou HTML. On peut également appliquer une transformation XSLT à ce mêmedocument pour le mettre au format HTML (selon le même principe, on pourraitobtenir de nombreux autres formats). Enﬁn il est possible d’effectuer l’opérationinverse, à savoir transmettre au serveur un ﬁchier contenant un document XML\n318\n Chapitre 8. XML\nreprésentant des ﬁlms, un script PHP se chargeant alors d’extraire les données du\ndocument pour les insérer dans la base MySQL.\nFigure 8.1 —I m p o r te te x p o r td ed o n n é e sX M Ld a n sl eW EBSCOPE\n8.1 INTRODUCTION À XML\nXML (pour eXtensible Markup Language ) est un langage (ou « méta-langage », lan-\ngage pour déﬁnir d’autres langages) qui permet de structurer de l’information. Ilutilise, comme HTML (et la comparaison s’arrête là), des balises pour « marquer » les\ndifférentes parties d’un contenu, ce qui permet aux applications qui utilisent celui-cide s’y retrouver. Voici un exemple de contenu :\nLe film Gladiator, produit aux ´Etats-Unis et r´ ealis´ e par Ridley\nScott, est paru en l’an 2000.\nIl s’agit d’un texte simple et non structuré dont aucune application automatisée ne\npeut extraire avec pertinence les informations. Voici maintenant une représentationpossible du même contenu en XML :\nExemple 8.1 Gladiator.xml :Un contenu structuré avec XML\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!-- Document XML --><Film>\n<titre>Gladiator</titre>\n<annee>2000</annee>\n8.1 Introduction à XML\n 319\n<code_pays>USA</code_pays>\n<genre>Drame</genre><Realisateur\nnom=\"Scott\"\nprenom=\"Ridley\"\nannee_naissance=\"1937\"/>\n</Film>\nCette fois, des balises ouvrantes et fermantes séparent les différentes parties\nde ce contenu (titre, année de parution, pays producteur, etc.). Il devient alors\n(relativement) facile d’analyser et d’exploiter ce contenu, sous réserve bien entendu\nque la signiﬁcation de ces balises soit connue.\n8.1.1 Pourquoi XML ?\nOù est la nouveauté ? Une tendance naturelle des programmes informatiques est de\nreprésenter l’information qu’ils manipulent selon un format qui leur est propre. Lesinformations sur le ﬁlm Gladiator seront par exemple stockées selon un certain format\ndans MySQL, et dans un autre format si on les édite avec un traitement de textecomme Word. L’inconvénient est que l’on a souvent besoin de manipuler la même\ninformation avec des applications différentes, et que le fait que ces applications uti-\nlisent un format propriétaire empêche de passer de l’une à l’autre. Il n’y a pas moyend’éditer avec Word un ﬁlm stocké dans une base de données, et inversement, pasmoyen d’interroger un document Word avec SQL. Le premier intérêt de XML est defavoriser l’interopérabilité des applications en permettant l’échange des informations.\nBien, mais on pourrait très bien répondre que le jour où on a besoin d’échanger\ndes informations entre une application Aet une application B, il sufﬁt de réaliser un\npetit module d’export/import en choisissant la représentation la plus simple possible.Par exemple on peut exporter une table MySQL dans un ﬁchier texte, avec une\nligne de ﬁchier par ligne de la table, et un séparateur de champ prédéﬁni comme le\npoint-virgule ou la tabulation. À court terme, une telle solution paraît plus rapide etsimple à mettre en œuvre qu’une mise en forme XML. À long terme cependant,la multiplication de ces formats d’échange est difﬁcile à gérer et à faire évoluer.En choisissant dès le départ une représentation XML, on dispose d’un langage destructuration beaucoup plus puissant qu’un format à base de sauts de lignes et deséparateurs arbitraires, et on bénéﬁcie d’un grand nombre d’outils d’analyse et detraitement qui vont considérablement simpliﬁer la réalisation et la maintenance.Ces outils (éditeurs, analyseurs, interfaces de programmation) constituent le second\navantage de XML : plus besoin d’inventer un format spécial, et de développer à partir\nde rien les fonctions qui vont avec.\nEn résumé, XML fournit des règles de représentation de l’information qui sont\n« neutres » au regard des différentes applications susceptibles de traiter cette infor-mation. Il facilite donc l’échange de données, la transformation de ces données, eten général l’exploitation dans des contextes divers d’un même document.\n320\n Chapitre 8. XML\n8.1.2 XML et HTML\nXML et HTML ont un ancêtre commun, le langage SGML. Il est tout à fait impropre\nde présenter XML comme un « super » HTML. Voici deux particularités de HTML\nqui contrastent avec les caractéristiques de XML décrites ci-dessus :\n•HTML est lié à une utilisation spéciﬁque : la mise en forme, dans un naviga-\nteur, de documents transmis par des serveurs web ;\n•le vocabulaire de balises de HTML est ﬁxé et principalement constitué dedirectives de mises en forme du document (sauts de ligne, paragraphes,\ntableaux, etc.) ; il est donc tout à fait impropre à structurer le contenu d’un\ndocument quelconque.\nIl serait plus juste de décrire HTML comme une spécialisation, un « dialecte »\nde XML, spéciﬁquement dédié à la visualisation de documents sur le Web. Mêmecette interprétation reste cependant partiellement inexacte : les règles syntaxiquesde balisage dans HTML sont en effet beaucoup moins strictes que pour XML. Enparticulier, il n’y a pas systématiquement de balise fermante associée à une baliseouvrante, les attributs n’ont pas toujours de valeur, cette valeur n’est pas nécessai-rement encadrée par des apostrophes, etc. Ces différences sont regrettables car elleempêchent de traiter un document HTML avec les outils standard XML.\nUne tendance récente est le développement de « dialectes » XML (autrement\ndit d’un vocabulaire de noms de balises et de règles de structuration de ces balises)\nadaptés à la représentation des données pour des domaines d’application particuliers.\nOn peut citer le langage SMIL pour les données multimédia, le langage SVG pourles données graphiques, le langage WML pour les téléphones mobiles, le langageXSL-FO pour les documents imprimables, enﬁn XHTML, reformulation de HTMLconforme à la syntaxe XML que nous utilisons depuis le début de ce livre. Tousces dialectes, déﬁnis par le World Wide Web Consortium , sont conformes aux règles\nsyntaxiques XML, présentées ci-dessous, et les documents sont donc manipulablesavec les interfaces de programmation standard XML.\n8.1.3 Syntaxe de XML\nLes documents XML sont la plupart du temps créés, stockés et surtout échangés sousune forme sérialisée qui « marque » la structure par des balises mêlées au contenu\ntextuel. Ce marquage obéit à des règles syntaxiques, la principale étant que le paren-\nthésage déﬁni par les balises doit être imbriqué : si une balise <b>est ouverte entre\ndeux balises <a>et</a>, elle doit également être fermée par </b> entre ces deux\nbalises. Cette contrainte introduit une hiérarchie entre les éléments déﬁnis par les\nbalises. Dans l’exemple 8.1, page 318, l’élément <titre> Gladiator</titre>\nest un sous-élément de l’élément déﬁni par la balise <Film>. Ce dernier, qui englobe\ntout le document (sauf la première ligne), est appelé l’élément racine.\nOn peut noter que le nom des balises, ainsi que l’ordre d’imbrication de ces balises,\nsont totalement libres : il n’existe pas en XML de règles prédéﬁnies. Cela permet àchacun de déﬁnir son propre langage pour décrire ses données.\n8.1 Introduction à XML\n 321\nUn document XML est une chaîne de caractères qui doit toujours débuter par une\ndéclaration XML :\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\nCette première ligne indique que la chaîne contient des informations codées avec\nla version 1.0 de XML, et que le jeu de caractères utilisé est conforme à la norme\nISO-8859-1 déﬁnie par l’Organisation Internationale de Standardisation (ISO) pourles langues latines d’Europe de l’Ouest. Cette norme est adaptée à l’usage du françaispuisqu’elle permet les lettres accentuées commme le « ´ e».\nÉléments\nLes éléments constituent les principaux composants d’un document XML. Chaqueélément se compose d’une balise ouvrante <nom>,d es o ncontenu et d’une balise\nfermante </nom>. Contrairement à HTML, les majuscules et minuscules sont dif-\nférenciées dans les noms d’élément. Tout document XML comprend un et un seulélément racine qui déﬁnit le contenu même du document.\nUn élément a un nom, mais il n’a pas de « valeur ». Plus subtilement, on parle\ndecontenu d’un élément pour désigner la combinaison arbitrairement complexe de\ncommentaires, d’autres éléments, de références à des entités et de données caractèresqui peuvent se trouver entre la balise ouvrante et la balise fermante.\nLa présence des balises ouvrantes et fermantes est obligatoire pour chaque élé-\nment. En revanche, le contenu d’un élément peut être vide. Il existe alors uneconvention qui permet d’abréger la notation en utilisant une seule balise de laforme <nom/>. Dans notre document, l’élément Realisateur est vide, ce qui ne\nl’empêche pas d’avoir des attributs.\nLes noms de balise utilisés dans un document XML sont libres et peuvent\ncomprendre des lettres de l’alphabet, des chiffres, et les caractères « - » et « _ ».Néanmoins il ne doivent pas contenir d’espaces ou commencer par un chiffre.\nAttributs\nDans le document Gladiator.xml l’élément Realisateur a trois attributs. Les attri-\nbuts d’un élément apparaissent toujours dans la balise ouvrante, sous la formenom=\"valeur\" ounom=’valeur’,o ù nom est le nom de l’attribut et valeur est sa\nvaleur. Les noms d’attributs suivent les mêmes règles que les noms d’éléments. Si un\nélément a plusieurs attributs, ceux-ci sont séparés par des espaces.\nUn élément ne peut pas avoir deux attributs avec le même nom. De plus,\ncontrairement à HTML, il est bon de noter que\n•un attribut doit toujours avoir une valeur ;\n•la valeur doit être comprise entre des apostrophes simples (’10’) ou doubles\n(\"10\") ; la valeur elle-même peut contenir des apostrophes simples si elle est\nencadrée par des apostrophes doubles, et réciproquement.\n322\n Chapitre 8. XML\nInstructions de traitement\nLesinstructions de traitement (en anglais processing instructions ) sont conçues pour\nintégrer des instructions propres à un processeur particulier dans un document XML.\nAinsi l’instruction suivante indique à un processeur XSLT l’adresse du ﬁchier quicontient le programme (ici, prog.xslt) pour la transformation du document :\n<?xml-stylesheet href=\"prog.xslt\" type=\"text/xslt\"?>\nLe traitement d’une instruction dépend du cycle de vie du document XML et des\napplications qui le traitent. Par exemple l’instruction précédente peut être traitée par\nle serveur web qui publie le document, par le navigateur web qui l’afﬁche ou pas du\ntout dans le cas où il est chargé dans un éditeur de texte standard.\nSections CDATA\nIl peut arriver que l’on souhaite placer dans un document du texte qui ne doit pasêtre analysé par le parseur. C’est le cas par exemple :\n1. quand on veut inclure (à des ﬁns de documentation par exemple) du code de\nprogrammation qui contient des caractères réservés dans XML : les ’ <’e t’ & ’\nabondent dans du code C ou C++ ;\n2. quand le document XML est consacré lui-même à XML, avec des exemples de\nbalises que l’on souhaite reproduire littéralement.\nLe document XML suivant n’est pas bien formé par rapport à la syntaxe XML :\nExemple 8.2 ProgrErr.xml :Une ligne de code C dans un document XML\n<?xml version=’1.0’?>\n<PROGRAMME>if ((i < 5) && (j > 6)) printf(\"error\");\n</PROGRAMME>\nUne analyse syntaxique du ﬁchier ProgrErr.xml détecterait plusieurs erreurs liées à la\nprésence des caractères ’<’, ’>’ et ’&’ dans le contenu de l’élément <PROGRAMME>.\nLessections littérales CDATA permettent d’éviter ce problème en déﬁnissant des\nzones non analysées par le parseur XML. Une section CDATA est une portion de texte\nentourée par les balises <![CDATA[ et]]>. Ainsi, il est possible d’inclure cette ligne\nde code dans une section CDATA pour éviter une erreur syntaxique provoquée par les\ncaractères réservés :\nExemple 8.3 Progr1.xml :Une ligne de C dans une section CDATA\n<?xml version=’1.0’?>\n<PROGRAMME><![CDATA[if ((i < 5) && (j > 6)) printf(\"error\");]]>\n</PROGRAMME>\n8.2 Export de données XML\n 323\n8.2 EXPORT DE DONNÉES XML\nPassons maintenant à la pratique en commençant par la mise en forme d’une base\nde données relationelle en XML. Commençons par discuter des principes avant demontrer comment réaliser un module PHP qui permet « d’exporter » tout ou partiede notre base de ﬁlms.\n8.2.1 Comment passer d’une base MySQL à XML\nLes règles de transformation d’une base relationnelle en XML ne vont pas forcément\nde soi. Il y a plusieurs choix à faire, dont certains sont naturels et d’autres plus ou\nmoins arbitraires.\nÉléments ou attributs ?\nLa première solution, immédiate, consiste à conserver la structure « plate » de la baserelationnelle, et à transcrire chaque table par un élément ayant le nom de la table\nou un dérivé (par exemple <Films> ). Cet élément contient lui-même un élément\npour chaque ligne, ayant pour nom un autre dérivé du nom de la table (par exemple\n«Film », sans « s »), enﬁn chaque attribut de la table est représenté par un élément,\nconstituant ainsi un troisième niveau dans l’arbre.\nIl existe (au moins) une autre possibilité. Au lieu de représenter les attributs de\nla table par des éléments, on peut les représenter par des attributs XML de l’élémentreprésentant la ligne. Voici ce que cela donnerait pour la table Film,a v e cd e u xﬁ l m s .\nExemple 8.4 FilmAttrs.xml :Représentation de Film avec des attributs\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<Films>\n<Film\ntitre=\"Sleepy Hollow\"\nannee=\"1999\"\ncode_pays=\"USA\"genre=\"Fantastique\"id_realisateur=\"13\"/>\n<Film\ntitre=\"Eyes Wide Shut\"annee=\"1999\"\ncode_pays=\"USA\"\ngenre=\"Thriller\"id_realisateur=\"101\"/>\n</Films>\nCette méthode présente quelques avantages. Tout d’abord elle est assez proche,\nconceptuellement, de la représentation relationnelle. Chaque ligne d’une table\ndevient un élément XML, chaque attribut de la ligne devient un attribut XMLde l’élément. La structure est plus ﬁdèlement retranscrite, et notamment le fait\n324\n Chapitre 8. XML\nqu’une ligne d’une table forme un tout, manipulé solidairement par les langages.\nEn SQL par exemple, on n’accède jamais à un attribut sans être d’abord passépar la ligne de la table.\nTechniquement, l’absence d’ordre (signiﬁcatif) sur les attributs XML correspond à\nl’absence d’ordre signiﬁcatif sur les colonnes d’une table. Du point de vue du typage,l’utilisation des attributs permet également d’être plus précis et plus proche de la\nreprésentation relationnelle :\n•on ne peut pas avoir deux fois le même attribut pour un élément, de même\nqu’on ne peut pas avoir deux colonnes avec le même nom dans une table (cen’est pas le cas si on représente les colonnes par des éléments XML) ;\n•on peut indiquer, dans une DTD, la liste des valeurs que peut prendre unattribut, ce qui renforce un peu les contrôles sur le document.\nEnﬁn, l’utilisation des attributs aboutit à un document moins volumineux.\nComme pour beaucoup d’autres problèmes sans solution tranchée, le choixdépend en fait beaucoup de l’application et de l’utilisation qui est faite desinformations.\nReprésentation des associations entre tables\nPassons maintenant à la représentation XML des liens entre les tables. En relation-nel, les liens sont déﬁnis par une correspondance entre la clé primaire dans une table,et une clé étrangère dans une autre table. En d’autres termes, la condition nécessaire\net sufﬁsante pour qu’il soit possible de reconstituer l’information est l’existence d’un\ncritère de rapprochement. Il est tout à fait possible d’appliquer le même principe enXML. Voici par exemple un document où ﬁgurent des éléments de nom Film et de\nnom Artiste. Ces éléments sont indépendants les uns des autres (ici cela signiﬁe\nque des informations apparentées ne sont pas liées dans la structure arborescente dudocument), mais on a conservé le critère de rapprochement.\nExemple 8.5 FilmArtiste.xml :Des ﬁlms et des artistes\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<Films>\n<!-- Les films -->\n<Film\ntitre=\"Eyes Wide Shut\"\nannee=\"1999\"\ncode_pays=\"USA\"genre=\"Thriller\"id_realisateur=\"101\"/>\n<Film\ntitre=\"Sleepy Hollow\"annee=\"1999\"\ncode_pays=\"USA\"\ngenre=\"Fantastique\"id_realisateur=\"13\"/>\n8.2 Export de données XML\n 325\n<!-- Les artistes -->\n<Artiste\nid=\"101\"\nnom=\"Kubrick\"prenom=\"Stanley\"\nannee_naissance=\"1928\"/>\n<Artiste\nid=\"13\"\nnom=\"Burton\"\nprenom=\"Tim\"\nannee_naissance=\"1958\"/>\n</Films>\nMaintenant, comme dans le cas du relationnel, il est possible de déterminer\npar calcul, la correspondance entre un ﬁlm et son metteur en scène en se servant\nde l’identiﬁant de l’artiste présent dans l’élément <Film>. Cette représentation\nn’est cependant pas naturelle en XML et mène à quelques difﬁcultés. Elle n’estpas naturelle parce que le metteur en scène fait partie de la description d’un ﬁlm,\net qu’il est inutile de le représenter séparément. Elle présente des difﬁcultés parce\nque l’exploitation du document pour reconstituer toute l’information va être compli-quée.\nLa bonne représentation dans ce cas consiste à représenter les attributs d’un ﬁlm\navec des éléments, et à imbriquer un élément supplémentaire de type Artiste.O n\npeut du même coup s’épargner la peine de conserver l’identiﬁant de l’artiste puisquela correspondance est maintenant représentée par la structure, pas par un lien denavigation basé sur des valeurs communes. Voici ce que cela donne.\nExemple 8.6 FilmImbrique.xml :Représentation avec imbrication\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<Films>\n<Film>\n<titre>Sleepy Hollow</titre>\n<annee>1999</annee><code_pays>USA</code_pays>\n<genre>Fantastique</genre>\n<Realisateur\nnom=\"Burton\"\nprenom=\"Tim\"\nannee_naissance=\"1958\"/>\n</Film><Film>\n<titre>Eyes Wide Shut</titre><annee>1999</annee><code_pays>USA</code_pays>\n<genre>Thriller</genre>\n<Realisateur\nnom=\"Kubrick\"\n326\n Chapitre 8. XML\nprenom=\"Stanley\"\nannee_naissance=\"1928\"/>\n</Film>\n</Films>\nCette représentation est bien meilleure. Il est maintenant possible, pour un\nélément Film, d’accéder directement au metteur en scène, au prix d’une duplication\ndes informations sur ce dernier, autant de fois qu’il y a de ﬁlms. On a perdu la symétrie\ndu schéma relationnel : le chemin d’accès privilégié à l’information est le ﬁlm. Si onvoulait chercher dans le document tous les ﬁlms réalisés par un metteur en scène, onse trouverait face à une recherche un peu plus compliquée à effectuer.\nDans ce cas, une solution plus logique consiste sans doute à placer le metteur en\nscène comme élément de plus haut niveau, et à imbriquer dans cet élément tous lesﬁlms qu’il a réalisés. Voilà ce que cela donne, avec Clint Eastwood :\nExemple 8.7 ArtisteFilm.xml :Changement de l’ordre d’imbrication\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<Films>\n<Realisateur>\n<nom>Eastwood</nom>\n<prenom>Clint</prenom>\n<annee_naissance>1930</annee_naissance>\n<Film\ntitre=\"Les pleins pouvoirs\"annee=\"1997\"\ncode_pays=\"USA\"genre=\"Policier\"/>\n<Film\ntitre=\"Impitoyable\"annee=\"1992\"code_pays=\"USA\"\ngenre=\"Western\"/>\n</Realisateur>\n</Films>\nLe progrès le plus notable ici est qu’on évite toute duplication. C’est possible\nparce que l’association est de type un à plusieurs (voir chapitre 4).\nEn revanche, dans le cas d’associations plusieurs à plusieurs , l’imbrication ne va\npas de soi. Prenons par exemple l’association entre les ﬁlms et les acteurs. Pour un\nﬁlm il peut y avoir plusieurs acteurs et réciproquement. Dans le schéma relationnelo nac r é éu n et a b l ei n t e r m é d i a i r eRole pour représenter cette association.\nIl n’est pas évident de choisir l’ordre d’imbrication des éléments. Tout dépend de\nl’ordre de navigation employé dans l’application. Si on suppose par exemple que lesaccès se feront par les ﬁlms, on peut choisir l’imbrication représentée dans l’exemplesuivant :\n8.2 Export de données XML\n 327\nExemple 8.8 FilmActeur.xml :Les ﬁlms, et les acteurs imbriqués\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<Films>\n<Film>\n<titre>Pi` ege de cristal</titre>\n<annee>1988</annee><code_pays>USA</code_pays>\n<genre>Action</genre>\n<Acteur>\n<prenom>Bruce</prenom>\n<nom>Willis</nom>\n<annee_naissance>1955</annee_naissance><nom_role>McClane</nom_role>\n</Acteur>\n</Film>\n<Film>\n<titre>Pulp fiction</titre>\n<annee>1994</annee><code_pays>USA</code_pays>\n<genre>Action</genre>\n<Acteur>\n<prenom>John</prenom>\n<nom>Travolta</nom><annee_naissance>1954</annee_naissance>\n<nom_role>Vincent Vega</nom_role>\n</Acteur>\n<Acteur>\n<prenom>Bruce</prenom>\n<nom>Willis</nom>\n<annee_naissance>1955</annee_naissance><nom_role>Butch Coolidge</nom_role>\n</Acteur>\n</Film>\n</Films>\nIl est très facile, à partir d’un ﬁlm, d’accéder aux acteurs du ﬁlm. En revanche, si on\ncherche, pour un acteur, tous les ﬁlms qu’il a joués, c’est plus difﬁcile. En introduisant\nune hiérarchie Film/Acteur, on a donc privilégié un chemin d’accès aux données. Lareprésentation inverse est également possible :\nExemple 8.9 ActeurFilm.xml :les acteurs, et les ﬁlms imbriqués\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<Acteurs>\n<Acteur>\n<prenom>Bruce</prenom>\n328\n Chapitre 8. XML\n<nom>Willis</nom>\n<annee_naissance>1955</annee_naissance>\n<Film>\n<titre>Pi` ege de cristal</titre>\n<annee>1988</annee><code_pays>USA</code_pays>\n<genre>Action</genre>\n<nom_role>McClane</nom_role>\n</Film>\n<Film>\n<titre>Pulp fiction</titre><annee>1994</annee>\n<code_pays>USA</code_pays>\n<genre>Action</genre><nom_role>Butch Coolidge</nom_role>\n</Film>\n</Acteur>\n</Acteurs>\nCette fois, en supposant que le point d’accès est toujours un acteur, on a toutes les\ninformations relatives à cet acteur dans le même sous-arbre, ce qui va permettre d’y\naccéder efﬁcacement et simplement. On voit en revanche que si on souhaite prendrecomme point d’accès un ﬁlm, les informations utiles sont réparties un peu partoutdans l’arbre, et que leur reconstitution sera plus difﬁcile.\nLa base de données que nous utilisons dans nos exemples est très simple. Il est clair\nque pour des bases réalistes présentant quelques dizaines de tables, la conception d’unschéma XML d’exportation doit faire des compromis entre l’imbrication des donnéeset la conservation des correspondances clé primaire/clé étrangère sous forme de liende navigation dans le document XML. Tout dépend alors des besoins de l’application,de la partie de la base qu’il faut exporter, et des chemins d’accès privilégiés auxinformations qui seront utilisés dans l’exploitation du document.\n8.2.2 Application avec PHP\nLa transformation d’une table MySQL en document XML est extrêmement simple\npuisqu’il sufﬁt de créer une chaîne de caractères au format approprié. Une approche\ndirecte mais fastidieuse consiste à agir au cas par cas en engendrant « à la main »les balises ouvrante et fermante et leur contenu. Comme toujours il faut essayerd’être le plus générique possible : la fonction présentée ci-dessous prend un tableauassociatif contenant une liste (nom, valeur ) et crée une chaîne XML. Cette chaîne\nest un élément dont le nom est passé en paramètre (si la chaîne vide est passéepour le nom, seul le contenu de l’élément, sans les balises ouvrante et fermante, estrenvoyé).\n8.2 Export de données XML\n 329\nREMARQUE – Il faut, comme en HTML, être attentif à éviter d’introduire des caractères\nréservés comme <,>,’,\"ou&dans les contenus XML. Le traitement par la fonction\nhtmlSpecialChars() qui remplace ces caractères en appels d’entités convient parfaite-\nment.\nL’élément créé est précédé de tabulations aﬁn de faciliter une mise en forme claire\ndu document ﬁnal, comme nous le montrerons plus loin. Enﬁn la représentation\ndu tableau peut, au choix, reposer sur des attributs ou des éléments. Voici le codede la fonction, qui est techniquement une méthode statique de la classe utilitaire\nEchangeXML.\nstatic function tableauVersXML ($tableau= array () ,\n$nom_element= \" l i g n e \" , $ n b _ t a b =0 , $ f o r m a t = s e l f : : ELEMENTS)\n{\n// Création d ’une chaîne avec le nombre $nb_tab de\n// tabulations\n$tabs=\"\" ;\nfor ( $i =0; $i < $nb_tab ; $i++) $tabs .= \"\\t \" ;\n$ ch ai n e_ X ML = $attrs = \"\";\n// Mise en forme en fonction du format demandé\nif( $ f o r m a t == s e l f : : ELEMENTS) {\n// O n crée simplement un élément X M L pour chaque attribut\n// de la table , et on concatène les éléments\nforeach ( $ t a b l e a u a s $nom => $va l ) {\n// O n retire les retours à la ligne d u résumé\nif($nom == \"resume\") $val = str_replace (\"\\n\" , \"\\n\\t \" ,\n$val) ;\n// O n place l ’identifiant c o m m e u n attribut\nif($ n o m = =\"id\") $attrs .=\" $ n o m=’$val ’ \";\n// Pour tous les autres o n crée u n élément\nif($ n o m != \"id_realisateur\" and $ n o m!=\"id\" and ! empty (\n$val)) {\n$chaine_XML = $chaine_XML . $tabs\n. \" < $ n o m>\" . htmlSpecialChars($val) . \" </$ n o m> \\n\" ;\n}\n}\n// La chaîne obtenue est le contenu de l ’élément\n$nom_element\nif(!empty ($nom_element) ) {\n$chaine_XML = \"$tabs<$nom_element $attrs > \\\nn$chaine_XML$tabs </$nom_element>\\n\" ;\n}\n}\nelse {\n// O n crée un seul élément avec des attributs X M L\nif(is_array ($tableau)) {\nforeach ( $ t a b l e a u a s $nom => $va l ) {\n$chaine_XML .= \" $ n o m=\\\"\" . htmlSpecialChars($val) . \"\n\\\" \" ;\n330\n Chapitre 8. XML\n}\n}\n$chaine_XML = \" $tabs <$nom_element $chaine_XML/>\\n\" ;\n}\nreturn $chaine_XML;\n}\nLes commentaires indiquent les étapes de cette conversion vers XML, qui ne pré-\nsente aucune difﬁculté conceptuelle. Maintenant il devient très facile de transformer\nune base en document XML. Notre outil d’export (voir la copie d’écran page 318)\noffre un formulaire permettant à l’utilisateur de saisir des critères de recherche pourdes ﬁlms de la base. À partir de ces critères une requête est créée (on réemploiebien entendu la fonction Util::creerRequetes() déjà utilisée pour rechercher\nles ﬁlms à noter), exécutée, et chaque ﬁlm est mis sous la forme d’un élément XMLauquel on ajoute le metteur en scène et les acteurs. Voici le script complet de l’actionexport dans le contrôleur XML:\nfunction export ()\n{\n// Pour créer u n fichier par film\n$multi_files= false ;\n// Création de la requête S Q L en fonction des critères\n$requete = Util :: creerRequetes ($ _ P O S T, $this −>bd ) ;\n$resultat = $this −>bd−>execRequete ( $requete ) ;\n// O n parcourt les films et on les transforme en X M L\n$document = \" \" ;\n$nbFilms = 0;\nwhile ($film = $this −>bd−>ligneSuivante ( $resultat )) {\n// Mise en forme d u film\n$film_XML = EchangeXML : : tableauVersXML ( $ film , \"\") ;\n// Mise en forme du metteur en scène\n$mes = Util :: chercheArtisteAvecID($ film [ ’ id_realisateur ’ ] ,\n$this −>bd , FORMAT_TABLEAU) ;\n$film_XML .= EchangeXML : : tableauVersXML ($mes , \" r e a l i s a t e u r \" ,\n1 , EchangeXML : : ELEMENTS) ;\n// Ajout des acteurs et de leur rôle\n$ r e q _ a c t e u r s = \"SELECT id , prenom , nom , a n n e e _ n a i s s a n c e ,\nnom_role \"\n. \" F R O M Artiste A, Role R \". \" W H E R E A. id = R. id_acteur A N D R. id_film =’{$ film [ ’ id ’]} ’ \" ;\n$res_acteurs = $this −>bd−>execRequete($req_acteurs);\nwhile ($role = $this −>bd−>ligneSuivante($res_acteurs)) {\n$film_XML .= EchangeXML : : tableauVersXML ( $role , \" Acteur \" ,\n1 , EchangeXML : : ELEMENTS) ;\n8.2 Export de données XML\n 331\n}\n// O n place le contenu dans la balise <Film>\n$document .= \" <Film>\\n\" . $ film_XML . \"\\n </Film>\\n\" ;\n$nbFilms++;\n}\n// O n envoie l ’e n −t ê t e HTTP, e t l e p r o l o g u e d u d o c u m e n t XML\nHeader ( \"Content −type : text /xml\") ;\necho \"<?xml version=\\\"1.0\\\" encoding=\\\"iso −8859 −1\\\"?>\\n\\n\" ;\n// M i s e e n forme selon le choix de l ’utilisateur\nif($_POST [ ’ f o r m a t ’ ] == \"XML\" ) {\n// O n sort le X M L brut\necho \"<Films >\\n$document </ Films >\\n\" ; ;\n}\nelse {\n// O n applique une transformation X S L T. Il suffit d’ajouter\n// une instruction pour que le navigateur en tienne compte\n// et applique la transformation Film. xsl\necho \"< ? x m l −stylesheet href = ’./ xsl /Film. xsl ’ type=’text / xsl\n’?>\\n\"\n. \"<Films >\\n$document </ Films >\\n\" ; ;\n}\n}\nQuand le format choisi est XML, le document renvoyé est déclaré de type MIME\ntext/xml pour qu’il soit afﬁché sous une forme présentable dans le navigateur.\nEn jouant sur le type MIME on pourrait également forcer le téléchargement du\ndocument sur la machine du client application/force-download). Si on choisit\nle format HTML, le même document est transmis, mais avec une instruction de\ntraitement qui demande au navigateur d’appliquer une transformation XSLT. Nous yrevenons en ﬁn de chapitre, page 348.\nVous pouvez directement utiliser ce script sur notre site pour récupérer un ou\nplusieurs ﬁlms en XML. Voici par exemple le résultat obtenu pour Kill Bill.\nExemple 8.10 KillBill.xml :Exemple de document produit par le script précédent\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<Films>\n<Film>\n<titre>Kill Bill</titre>\n<annee>2003</annee><code_pays>USA</code_pays>\n<genre>Drame</genre>\n<resume>Au cours d’une c´ er´ emonie de mariage en plein d´ esert, un commandofait irruption dans la chapelle et tire sur les convives. Laiss´ ee pour\nmorte, la Mari´ ee enceinte retrouve ses esprits apr` es un coma de quatre ans.\nCelle qui a auparavant exerc´ e les fonctions de tueuse ` a gages au sein duD´ etachement International des Vip` eres Assassines n’a alors plus qu’une\n332\n Chapitre 8. XML\nseule id´ ee en t^ ete : venger la mort de ses proches en ´ eliminant tous les\nmembres de l’organisation criminelle, dont leur chef Bill qu’elle ser´ eserve pour la fin.</resume>\n<Realisateur\nnom=\"Tarantino\"prenom=\"Quentin\"annee_naissance=\"1963\" />\n<Acteur\nprenom=\"Uma\"nom=\"Thurman\"\nannee_naissance=\"1970\"\nnom_role=\"La mari´ ee, alias &quot;Black Mamba&quot;\" />\n<Acteur\nprenom=\"Lucy\"\nnom=\"Liu\"\nannee_naissance=\"1968\"nom_role=\"O-Ren Ishii\" />\n<Acteur\nprenom=\"David\"nom=\"Carradine\"annee_naissance=\"1936\"\nnom_role=\"Bill\" />\n<Acteur\nprenom=\"Michael\"nom=\"Madsen\"\nannee_naissance=\"1958\"nom_role=\"Budd / Sidewinder\" />\n<Acteur\nprenom=\"Daryl\"nom=\"Hannah\"annee_naissance=\"1960\"\nnom_role=\"Elle Driver\" />\n</Film>\n</Films>\n8.3 IMPORT DE DONNÉES XML DANS MySQL\nL’opération inverse, l’import d’un document XML dans une base de données MySQL,\nest un peu plus difﬁcile. Au lieu de s’appuyer sur SQL pour récupérer les données dans\nla base, il faut utiliser un parseur de documents XML qui va analyser la structure du\ndocument et permettre d’accéder à ses différents composants.\nLes parseurs XML s’appuient sur deux modèles possibles de traitement d’un\ndocument, connus respectivement sous les acronymes SAX (Simple API for XML)\net DOM ( Document Object Model). Le modèle de traitement de SAX consiste à\nparcourir le document linéairement, et à déclencher des fonctions à chaque foisqu’une des catégories syntaxiques (balises ouvrantes, fermantes, texte, instructionsde traitement, etc.) constituant un document XML est rencontrée.\n8.3 Import de données XML dans MySQL\n 333\nLe modèle DOM s’appuie sur une représentation arborescente. Chaque nœud de\nl’arbre est un objet, doté de méthodes propres au type du nœud, et de pointeurs vers le\nou les sous-arbres, le père du nœud, les attributs, etc. On utilise plutôt DOM pour lesapplications qui doivent disposer en mémoire de l’ensemble de la représentation d’undocument, comme par exemple un éditeur XML, un processeur de transformationsXSLT, le langage de requête XQuery, etc. DOM est connu pour être gourmand enmémoire et parfois lent, et il est préférable d’éviter d’y recourir quand c’est possible.Pour en savoir plus sur DOM, vous pouvez consulter la recommandation du W3C,disponible sur le site http://www.w3c.org/dom.\nPHP propose de plus une interface de manipulation de données XML, dite\nSimpleXML, qui fournit quelques fonctions très simples pour accéder au contenud’un document. L’arborescence XML est représentée par SimpleXML comme une\nimbrication de tableaux PHP , accompagnée de quelques fonctions pour rechercher\ndes éléments ou des attributs. SimpleXML peut être vue comme une version très\nbasique de DOM (PHP fournit d’ailleurs une conversion depuis un objet DOM vers\nun objet SimpleXML).\nLa présentation qui suit montre successivement comment traiter un document\nXML avec SimpleXML, puis SAX, à chaque fois dans l’optique d’extraire des donnéesdu document pour les insérer dans MySQL. L’annexe C, page 500 récapitule lesfonctions utilisées.\n8.3.1 SimpleXML\nLe fonctionnement de SimpleXML est comparable à celui d’une fonction commemysql_fetch_object() : on crée un objet PHP (instance de la classe prédéﬁnie\nSimpleXMLElement) contenant une représentation de la source de données externe.Dans le cas de mysql_fetch_object(), la source de données est une ligne d’une\ntable relationnelle, ce qui se représente simplement par une liste d’attributs de l’objet.Dans le cas de SimpleXML, l’objet créé a une structure nettement plus complexe. Elles’appuie sur une représentation arborescente constituée d’une hiérarchie d’élémentsdotée d’un unique élément racine. Voici les règles de construction qui aident àcomprendre la représentation :\n•l’objet instancié par SimpleXML correspond à l’élément racine du document ;\n•les attributs publics de cet objet sont les éléments-ﬁls de l’élément racine ; eux-mêmes sont des objets PHP de la classe SimpleXMLElement, ou un tableau\nd’objets s’il y a plusieurs occurrences d’un élément de même nom ;\n•les attributs sont stockés dans une propriété privée de l’objet, accessible grâceàl am é t h o d e attributes().\nCes règles s’appliquent, récursivement, aux éléments-ﬁls de l’élément racine\net à tous ses descendants. Prenons le cas du document XML\nKillBill.xml , page 331.\nAprès analyse par SimpleXML, on obtiendra un objet référençant l’élémentracine (correspondant à la balise <Films> du document). Les propriétés\nde cet objet sont les ﬁls de l’élément racine, soit titre, annee, code_pays,\ngenre, resume, id_realisateur, Realisateur etActeur. Ce dernier est\n334\n Chapitre 8. XML\nun tableau indicé d’objets puisqu’on trouve plusieurs occurrences de l’élément\n<Acteur> . Voici un exemple de code SimpleXML extrayant des informations\nde cette structure.\nExemple 8.11 exemples/ExSimpleXML.php :Application de l’API SimpleXML\n<?xml version=\" 1.0 \" encoding=\" iso −8959 −1\"?>\n<!DOCTYPE h t m l PUBLIC \" −/ /W3C / / DTD XHTML 1 . 0 S t r i c t / / EN \"\n\"http ://w w w.w 3. org /T R/xhtml1/D T D/xhtml1 −strict .dtd\">\n<html xmlns=\"http ://w w w.w 3. org /1999/xhtml\" xml: lang=\" fr \" >\n<head>\n<title >Création d’u n formulaire </title >\n<link rel=’ stylesheet ’ href=\"films . css\" type=\"text / css\"/>\n</head>\n<body>\n<?php\n// Application des fonctions SimpleXML\n/ / Analyse du document KillBill . xml\n$doc = SimpleXML_load_ file (\" KillBill .xml\") ;\n// Accès à un élément : le titre\necho \" Film : \" . $doc −>Film[0] −>titre . \"<br>\";\n// Accès aux attributs de l ’ élément <Realisateur >\n$attr_real = $doc −>Film −>Realisateur −>attributes ();\necho \"Réalisé par \" . $attr_real [ ’prenom ’] . \" \" . $attr_real [ ’\nnom ’ ] ;\n// Affichage de la liste des acteurs\necho \"<p>Avec: <ol>\\n\" ;\n// Boucle sur l ’ensemble des acteurs\nforeach ($doc −>Film −>Acteur as $acteur) {\n// O n prend les attributs d u noeud courant\n$attributs = $acteur −>attributes ();\n// O n les affiche\necho \"<li >\" . $attributs [ ’prenom ’] . \" \" . $attributs [ ’n o m’]\n.\"d a n sl er ô l ed e\"\n. utf8_decode($attributs [ ’nom_role ’]) . \"</li >\";\n}\necho \"< /o l> \";\n?>\n</body></html>\nOn accède donc aux éléments du document XML par une simple navigation\ndans une hiérarchie d’objets PHP . La variable $doc représentant l’élément\nracine, on obtient le titre avec $doc->Film->titre, le réalisateur avec\n8.3 Import de données XML dans MySQL\n 335\n$doc->Film->Realisateur, et les acteurs avec $doc->Film->Acteur. Pour ce\ndernier on effectue une boucle avec for each.L am é t h o d e attributes() renvoie\nun tableau associatif contenant les attributs d’un élément. Noter que SimpleXML\ntraite les chaînes de caractères en les codant en UTF-8, ce qui oblige parfois à les\ntransférer en ISO-8859-1 quand elles contiennent des caractères accentués.\nEn résumé, SimpleXML offre une interface simple et pratique, quoique limitée,\nà un document XML de petite taille. Pour une exploitation généralisable à de grosdocuments, il reste préférable de recourir à l’API SAX, présentée ci-dessous.\n8.3.2 L’API SAX\nLes fonctions proposées par PHP s’appuient sur le parseur expat développé par James\nClark (voir le site http://www.jclark.com ). Elles sont disponibles systématiquement\ndans le cas d’une conﬁguration de PHP avec Apache, ou peuvent être incluses avecl’option --with-xml sinon. L’analyse d’un document XML s’effectue en trois phases :\n1. on initialise un parseur avec la fonction xml_parser_create() ;\n2. on indique au parseur les fonctions à associer aux différents types de marquage\nrencontrés dans le document ;\n3. enﬁn on lance l’analyse avec la fonction xml_parse().\nLa seconde étape doit être adaptée à chaque type de document traité. Pour\nêtre concret voici un premier exemple d’un module d’analyse de documents XML,s’appliquant à n’importe quel document.\nExemple 8.12 exemples/SAX.php :Un exemple simple de traitement d’un document XML\n<?php\n/∗∗ Analyse avec le parseur S A X d ’un document X M L.\n∗La fonction renvoie un tableau associatif contenant toutes\nles\n∗informations trouvées\n∗/\n$tab_elements = array () ;\n$element_courant = \"\" ;\n/∗∗\n∗Fonction déclenchée sur une balise ouvrante\n∗/\nfunction debutElement ($parser , $ n o m, $attrs)\n{\nglobal $element_courant ;\n$element_courant = $nom;\n$tab_elements [ $element_courant ] = \"\" ;\necho \" balise ouvrante de $nom\\n\" ;\n}\n336\n Chapitre 8. XML\n/∗∗\n∗Fonction déclenchée sur une balise fermante\n∗/\nfunction finElement ($parser , $ n o m)\n{\necho \" balise fermante de $nom\\n\" ;\n}\n/∗∗\n∗Fonction déclenchée sur du texte\n∗/\nfunction donneesCaracteres ($parser , $chaine)\n{\nglobal $tab_elements , $element_courant ;\nif(trim ($chaine) != \"\")\n$tab_elements [ $element_courant ] = $chaine ;\n}\n/∗∗\n∗Cette fonction prend u n n o m de fichier contenant\n∗u n document X M L et en extrait des informations\n∗/\nfunction parseFilm ($nom_fichier)\n{\nglobal $tab_elements ;\nif(! ($f = fopen ($nom_fichier , \"r \"))) {\necho \"Impossible d ’ ouvrir le fichier $nom_fichier!!\\n\" ;\nreturn 0;\n}\n$parseur = xml_parser_create () ;\n// Déclencheurs pour les éléments\nxml_set_element_handler ($parseur , \"debutElement\" , \"finElement\"\n);\n// Déclencheurs pour les noeuds texte\nxml_set_character_data_handler ($parseur , \"donneesCaracteres\") ;\n// Lecture du document\n$document = fread ($f , 100000) ;\nxml_parse ( $parseur , $document , feof ($f));\nxml_parser_free ($parseur);\nreturn $tab_elements ;\n}\n\n8.3 Import de données XML dans MySQL\n 337\nLa fonction la plus importante est xml_parse()1. Elle prend en argument le\nparseur, le nom d’un ﬁchier contenant un document XML à analyser, et un Booléen\nindiquant si le document est passé en totalité ou par fragments. L’analyse se résume àafﬁcher au fur et à mesure les balises ouvrante et fermante rencontrées, et à stockerdans un tableau associatif le contenu des éléments.\nAprès la création du parseur, on utilise xml_set_element_handler() pour\nindiquer les fonctions qui doivent être déclenchées quand le parseur rencontreles balises ouvrante et fermante des éléments, soit ici debutElement() et\nfinElement(). La fonction associée à une balise ouvrante doit accepter trois\nparamètres :\n1. le parseur ;\n2. le nom de l’élément rencontré ;\n3. un tableau associatif contenant la liste des attributs XML contenus dans la\nbalise ouvrante.\nQuand on écrit cette fonction, on doit donc implanter l’action appropriée en\ntenant compte du nom de l’élément et des attributs. Dans notre cas, on afﬁche un\nmessage et on mémorise dans une variable globale le nom de l’élément rencontré.\nfunction debutElement ($parser , $ n o m, $attrs)\n{\nglobal $element_courant ;\n$element_courant = $nom;\necho \" balise ouvrante de $nom\\n\" ;\n}\nL’inconvénient de cette fonction est que l’on ne peut pas étendre la liste des para-\nmètres ou renvoyer une valeur. Le seul moyen de communiquer avec l’application est\ndonc d’utiliser une variable globale (voir page 437) ce qui n’est pas très satisfaisant :\nnous verrons plus loin comment faire mieux avec la programmation objet.\nLa fonction déclenchée sur la balise fermante n’a pas de troisième argument (il\nn’y a pas d’attributs dans ces balises). Notre implantation se contente d’afﬁcher un\nmessage rendant compte de l’événement rencontré.\nfunction finElement ($parser , $ n o m)\n{\necho \" balise fermante de $nom\\n\" ;\n}\nLe troisième type d’événement pris en compte dans ce module est la\nrencontre d’un nœud de texte. La fonction déclenchée est déclarée avecxml_set_character_data_handler(). La voici :\n1. La liste complète des fonctions de cette API est donnée dans l’annexe C, page 500.\n338\n Chapitre 8. XML\nfunction donneesCaracteres ($parser , $chaine)\n{\nglobal $tab_elements , $element_courant ;\nif(trim ($chaine) != \"\")\n$tab_elements [ $element_courant ] .= $chaine ;\n}\nOn reçoit en argument la chaîne de caractères constituant le contenu du nœud de\ntexte. De tels nœuds sont très souvent constitués uniquement d’espaces ou de retours\nà la ligne, quand il servent uniquement à la mise en forme du document. On élimineici ces espaces avec la fonction PHP trim() et on vériﬁe que la chaîne obtenue n’est\npas vide. On sait alors qu’on a affaire au contenu d’un élément.\nLa fonction ne permet pas de savoir de quel élément il s’agit (rappelons que\nles éléments et le texte constituent des nœuds distincts dans l’arborescence d’undocument XML, et sont donc traités séparément par le parseur). La seule solutionest de s’appuyer sur une variable globale, $element_courant qui stocke le nom du\ndernier élément rencontré (voir la fonction debutElement()). On utilise ce nom\npour mémoriser le contenu dans le tableau $tab_elements, lui aussi déclaré comme\nune variable globale.\nCe style de programmation, assez laborieux, est imposé par l’absence d’informa-\ntion sur le contexte quand une fonction est déclenchée. On ne sait pas à quelleprofondeur on est dans l’arbre, quels sont les éléments rencontrés auparavant ouceux qui qui vont être rencontrés après, etc. Cette limitation est le prix à payer pourl’efﬁcacité du modèle d’analyse : le parseur se contente de parcourir le document uneseule fois, détectant le marquage au fur et à mesure et déclenchant les fonctions\nappropriées.\nLe code ci-dessous montre comment faire appel au module, en l’appliquant au\ndocument\nGladiator.xml (voir page 318).\nExemple 8.13 exemples/ExSAX.php :Exemple d’application du parseur\n<?php\n// Application des fonctions SAX\nrequire (\"SAX.php\");\nHeader (\"Content-type: text/plain\");\n// Analyse du document\n$film = ParseFilm (\"Gladiator.xml\");\n// Affichage des donn´ ees extraites\nwhile ( list ($nom, $val) = each ($film))\necho \"Nom : $nom Valeur : $val\\n\";\n?>\n\n8.3 Import de données XML dans MySQL\n 339\nOn obtient alors le résultat suivant (noter que les noms d’éléments sont mis en\nmajuscules par le parseur, option par défaut qui peut être modiﬁée) :\nExemple 8.14 ResultatSAX.txt :Résultat de l’application du parseur\nbalise ouvrante de FILM\nbalise ouvrante de TITRE\nbalise fermante de TITREbalise ouvrante de ANNEE\nbalise fermante de ANNEE\nbalise ouvrante de CODEPAYSbalise fermante de CODEPAYSbalise ouvrante de GENRE\nbalise fermante de GENRE\nbalise ouvrante de REALISATEURbalise fermante de REALISATEUR\nbalise fermante de FILM\nNom : TITRE Valeur : GladiatorNom : ANNEE Valeur : 2000Nom : CODEPAYS Valeur : USA\nNom : GENRE Valeur : Drame\nL’approche très simple employée ici se généralise difﬁcilement à des documents\nXML plus complexes comprenant des imbrications d’éléments, comme par exemple\nun ﬁlm avec son réalisateur et la liste de ses acteurs. Le fait de devoir mémoriserdans des variables globales le positionnement du parseur dans le document rend\nrapidement la programmation assez laborieuse.\nHeureusement, une fonctionnalité très intéressante du parseur XML/PHP permet\nune intégration forte avec la programmation orientée-objet. Nous montrons dans ce\nqui suit comment utiliser cette fonctionnalité. C’est également l’occasion de revenir\nsur les notions de spécialisation et d’héritage de la programmation objet, présentées\ndans le chapitre 3.\n8.3.3 Une classe de traitement de documents XML\nLa fonction xml_set_object() permet d’associer un parseur XML et un objet, avec\ndeux effets liés :\n•les « déclencheurs » seront pris parmi les méthodes de l’objet (ou, plus préci-sément, de la classe dont l’objet est une instance) ;\n•ces déclencheurs ont accès aux variables d’état de l’objet, ce qui évite d’avoirrecours aux variables globales.\nOn peut donc développer des classes, dédiées chacune à un type de document\nparticulier (par exemple nos ﬁlms), avec un style de programmation beaucoup plusélégant que celui employé précédemment. Chaque classe fournit, sous forme deméthodes, des fonctionnalités de création du parseur, de gestion des erreurs, de déﬁ-nition des déclencheurs, de lancement de l’analyse, etc. Aﬁn d’essayer d’être –encore\n340\n Chapitre 8. XML\nune fois– le plus général possible, nous allons distinguer dans ces fonctionnalités\ncelles, génériques, qui sont identiques pour tous les types de document de celles qui\nsont spéciﬁques à un type de document donné. Il serait dommage de dupliquer les\npremières autant de fois qu’il y a de types de documents, avec les inconvénients\névidents en termes de maintenance et de modiﬁcation qui en découlent. Il estdonc souhaitable de recourir à la spécialisation objet qui permet de « factoriser »les fonctions génériques et de les rendre disponibles pour chaque classe traitant d’untype de document particulier.\nLe principe consiste à créer une (super-)classe qui regroupe les fonctions géné-\nriques au traitement d’un document par SAX, et à créer, par spécialisation, unesous-classe de cette super-classe qui peut réutiliser ses fonctionnalités (héritage),\nles redéﬁnir (surcharge), et lui en ajouter d’autres (extension). Voici le code de la\nsuper-classe. Nous en décrivons plus bas les principales méthodes.\nExemple 8.15 webscope/lib/SAX.php :Une classe générique de traitement d’un document\nXML\n<?php\n/∗∗\n∗Classe générique d ’appel aux fonctions S A X d ’analyse de\n∗documents X M L.\n∗ Cette classe doit être sous −typée pour chaque type de\n∗ document\n∗A u niveau de la super −classe o n se contente d’instancier le\n∗ parseur ,\n∗ de gérer les messages d ’erreur , et d ’ afficher au fur et à\n∗ mesure\n∗ le contenu du document analysé .\n∗/\nclass S A X\n{\nprivate $parseur ;\nprotected $donnees ; // Données caractères rencontrées en cours\nd’analyse\nprotected $erreur_rencontree , $message ; // Indicateur et\nmessage d ’ erreur\n// Constructeur de la classe\nfunction __construct ($codage)\n{\n// O n instancie le parseur\n$this −>parseur = xml_parser_create ($codage) ;\n// O n indique que les déclencheurs sont des méthodes de la\n// classe\nxml_set_object ($this −>parseur , &$this ) ;\n// T o u s les n o m s d’éléments et d’attributs seront traduits en\n// majuscules\n8.3 Import de données XML dans MySQL\n 341\nxml_parser_set_option ($this −> p a r s e u r , XML_OPTION_CASE_FOLDING ,\ntrue );\nxml_set_element_handler ($this −>parseur , \"debutElement \" , \"\nfinElement\") ;\nxml_set_character_data_handler ($this −>parseur , \"\ndonneesCaracteres\") ;\n$this −>erreur_rencontree = 0;\n}\n// Méthode générique de traitement des débuts d ’ éléments\nprotected function debutElement ($parseur , $ n o m, $attrs)\n{\n// O n recherche si une méthode nommée \"debut {NomElement}\"\nexiste\nif(method_exists ( $this , \"debut$nom\" ) ) {\ncall_user_func (array ( $this , \"debut$nom\" ) , $parseur , $nom ,\n$attrs);\n}\nelse if (get_class ($this) = = \"s a x\") {\necho \"Début d ’ élément : &lt ; \" . $nom . \"&gt ;\\n\" ;\n}\n// Effacement des données caractères\n$this −>donnees = \"\" ;\n}\n// Méthode générique de traitement des fins d ’ élément\nprotected function finElement ($parseur , $ n o m)\n{\n// O n recherche si une méthode nommée \" fin {NomElement}\"\n// existe\nif(method_exists ( $this , \"fin$nom\" )) {\ncall_user_func (array ($this , \"fin$nom\") , $parseur , $ n o m) ;\n}\nelse if (get_class ($this) = = \"s a x\") {\necho \"Fin d ’ élément : &lt ;/ \" . $nom . \"&gt ;\\n\" ;\n}\n}\n// Pour les données , on stocke simplement au fur et à mesure// dans la propriété $this −>donnees\nprotected function donneesCaracteres ($parseur , $chaine)\n{\n// O n ne prend pas les chaînes vides ou ne contenant que des// blancs\nif(!empty ($chaine)) $this −>donnees .= $chaine ;\n}\n342\n Chapitre 8. XML\n// Méthode pour analyser le document\npublic function parse( $fichier )\n{\n// Ouverture du fichier\nif(! ( $ f= fopen ($fichier , \"r\"))) {\ntrigger_error (\"Impossible d ’ ouvrir le fichier $fichier\\ n\" ,\nE_USER_ERROR) ;\nreturn ;\n}\n// Analyse du contenu du document\nwhile ($data = fread ($f , 4096)) {\nif(!xml_parse ($this −>parseur , $data , feof ($f))) {\n$this −>erreur (\"Erreur rencontrée ligne \"\n.xml_error_string (xml_get_error_code ($this −>parseur))\n. \" % de $fichier : \"\n. xml_get_current_line_number($this −>parseur));\nreturn ;\n}\n}\nfclose ($f);\n}\n// Destructeur de la classe\nfunction __destruct ()\n{\nxml_parser_free ($this −>parseur);\n}\n// Fonction retournant le message d’erreur\npublic function messageErreur ($message)\n{\nreturn $this −>message ;\n}\n// Fonction indiquant si une erreur est survenue\npublic function erreurRencontree () {\nreturn $this −>erreur_rencontree ;\n}\n// Fonction traitant une erreur\nfunction erreur ($message)\n{\ntrigger_error ($message , E _ U S E R _ E R R O R) ;\n}\n}\n?>\nLa classe comprend trois méthodes, __construct() (le constructeur), parse()\net__destruct() (le destructeur), qui correspondent respectivement aux trois\nphases de l’analyse d’un document : création du parseur, ouverture du ﬁchier et\n8.3 Import de données XML dans MySQL\n 343\nanalyse du document, enﬁn destruction du parseur. Ces trois méthodes sont valables\nquel que soit le document et seront donc reprises par héritage dans toutes les sous-classes. Outre la création du parseur, la principale caractéristique du constructeurest l’appel à la fonction xml_set_object() qui indique que le parseur est intégré\nà l’objet courant ($this) et que les déclencheurs sont des méthodes de cet objet.\nLa méthode parse() est implantée de manière un peu plus robuste que celle de\nnotre premier exemple. En particulier :\n1. le ﬁchier est analysé par tranche de 4 096 octets pour éviter de charger en\nmémoire un document trop volumineux ; la fonction xml_parse() prend en\ntroisième argument un indicateur de ﬁn de ﬁchier (ici retourné par la fonctionfeof()) qui indique qu’on a atteint la dernière tranche du document ;\n2. une gestion d’erreurs est mise en place, en testant le code retour de\nxml_parse(), et en appelant le cas échéant des fonctions décrivant l’erreur :\nune description détaillée de toutes ces fonctions XML/PHP est donnée dans\nl’annexe C.\nEn plus de ces trois méthodes, la classe SAX propose une implantation « par\ndéfaut » des déclencheurs associés aux balises ouvrantes, fermantes et aux nœuds de\ntexte (ou données caractères). Dans une implantation plus complète, la classe devrait\négalement gérer les instructions de traitement, entités externes et autres catégoriessyntaxiques XML.\nQue font ces méthodes ? Le principe est de regarder, pour un élément dont le\nnom NomEl´ ement est transmis en paramètre, si la classe comprend une méthode\ndebutNomEl´ ement ,u n em é t h o d e finNomEl´ ement , ou les deux. Si une telle\nméthode existe, elle est appelée. Sinon il y a deux possibilités :\n1. soit l’objet $this est une instance de la super-classe SAX ,e to na f ﬁ c h eu n\nmessage indiquant qu’une balise ouvrante ou fermante selon le cas a étérencontrée ;\n2. soit l’objet est une instance d’une sous-classe, et dans ce cas l’absence d’une\nméthode pour l’élément indique que ce dernier doit être ignoré.\nEn d’autres termes, un objet de la classe SAX peut être utilisé comme notre\npremier module, page 335, pour afﬁcher le marquage du document au fur et àmesure qu’il est rencontré. Un objet d’une sous-classe de SAX en revanche doit\nexplicitement fournir des méthodes de traitement des éléments, sinon il ne se passerien.\nLes méthodes debutElement() etfinElement() s’appuient sur les fonctions\nPHP suivantes :\n•method_exists() qui teste si une méthode est déﬁnie pour un objet,\n•call_user_func() qui permet de déclencher l’exécution d’une méthode\npour un objet2,\n2. En PHP , on désigne une fonction par son nom, et une méthode par un tableau contenant une\npaire (objet, nom de la méthode).\n344\n Chapitre 8. XML\n•enﬁn get_class() qui renvoie, en minuscules, le nom de la classe dont\nl’objet courant est une instance.\nV o i c il am i s ee nœ u v r ed ec e sf o n c t i o n sd a n sl am é t h o d e debutElement() :\nprotected function debutElement ($parseur , $ n o m, $attrs)\n{\n// O n recherche si une méthode nommée \"debut {NomElement}\"\nexiste\nif(method_exists ( $this , \"debut$nom\" ) ) {\ncall_user_func (array ( $this , \"debut$nom\" ) , $parseur , $nom ,\n$attrs);\n}\nelse if (get_class ($this) = = \"s a x\") {\necho \"Début d ’ élément : &lt ; \" . $nom . \"&gt ;\\n\" ;\n}\n// Effacement des données caractères\n$this −>donnees = \"\" ;\n}\nPour bien comprendre l’intérêt de cette conception qui peut sembler compliquée\nau premier abord, il sufﬁt de constater que la création d’un analyseur pour un type\ndonné de document se résume maintenant à créer une sous-classe de SAX et à placer\ndans cette sous-classe des méthodes debutNom etfinNom spéciﬁques aux noms\nd’éléments du type de document. Voici la classe SAXFilm , sous-classe de SAX (noter\nle mot-clé extends), qui permet d’analyser nos documents contenant des ﬁlms (voir\nl’exemple du document KillBill.xml , page 331).\nExemple 8.16 webscope/application/classes/SAXFilm.php :Spécialisation de la classe pour traiter\ndes ﬁlms\n<?php\n/∗∗\n∗ Classe d’analyse avec le parseur S A X d’un document X M L\n∗ représentant u n film avec ses acteurs .\n∗/\nrequire_once (\"S A X.php\") ;\nclass S A X F i l m extends S A X\n{\n// Déclaration des variables stockant le résultat de l ’analyse\n// private $films , $nb_films , $i_acteur;\n// Constructeur\nfunction SAXFilm ($codage)\n{\n// O n appelle le constructeur de la super −classe\nparent :: __construct($codage) ;\n8.3 Import de données XML dans MySQL\n 345\n// O n initialise les variables d e la s o u s −classe\n$this −>films = array () ;\n$this −>nb_films = 0;\n$this −>i_acteur = 0;\n}\n// O n définit les déclencheurs pour les différents éléments de\nFILM\nprotected function finTITRE ($parseur , $ n o m)\n{$ t h i s −>films [ $this −>nb_films ][ ’ titre ’ ] = $this −>donnees ; }\np r o t e c t e d funct ion finANNEE ( $parseur , $nom)\n{$ t h i s −>films [ $this −>nb_films ][ ’annee ’ ] = $this −>donnees ; }\nprotected function f i n C O D E _ P A Y S ($parseur , $ n o m)\n{$ t h i s −>films [ $this −>nb_films ][ ’code_pays ’ ] = $this −>donnees ; }\nprotected function finGENRE ($parseur , $ n o m)\n{$ t h i s −>films [ $this −>nb_films ][ ’genre ’ ] = $this −>donnees ; }\nprotected function f i n R E S U M E ($parseur , $ n o m)\n{$ t h i s −>films [ $this −>nb_films ][ ’resume ’ ] = $this −>donnees ; }\n// Pour le metteur en scène\np r o t e c t e d func t ion debutREALISATEUR ( $parseur , $nom , $ a t t r )\n{\n$this −>films [ $this −>nb_films ][ ’ nom_realisateur ’ ]\n= $attr [ ’ N O M’ ];\n$this −>films [ $this −>nb_films ][ ’ prenom_realisateur ’ ]\n= $attr [ ’ P R E N O M’ ];\n$this −>films [ $this −>nb_films ][ ’ annee_realisateur ’ ]\n= $ a t t r [ ’ ANNEE_NAISSANCE ’ ] ;\n}\n// Pour u n acteur\nprotected function d e b u t A C T E U R ($parseur , $ n o m, $attr)\n{\n$this −>films [ $this −>nb_films ][ ’n o m’ ][ $this −>i_acteur ]\n= $attr [ ’ N O M’ ];\n$this −>films [ $this −>nb_films ][ ’prenom ’ ][ $this −>i_acteur ]\n= $attr [ ’ P R E N O M’ ];\n$this −>films [ $this −>nb_films ][ ’annee_naissance ’ ][ $this −>\ni_acteur ]\n= $ a t t r [ ’ ANNEE_NAISSANCE ’ ] ;\n$this −>films [ $this −>nb_films ][ ’nom_role ’ ][ $this −>i_acteur ]\n= $ a t t r [ ’ NOM_ROLE ’ ] ;\n$this −>i_acteur ++;\n}\n// A u début d ’un élément F I L M: on incrémente le compteur de\n// films ,\n// o n initialise le c ompte u r des acteurs et les tableaux\nprotected function debutFILM ( $parseur , $nom)\n{\n$this −>nb_films++;\n346\n Chapitre 8. XML\n$this −>films [ $this −>nb_films ] = array () ;\n$this −>films [ $this −>nb_films ][ ’n o m’ ] = array () ;\n$this −>films [ $this −>nb_films ][ ’prenom ’ ] = array () ;\n$this −>films [ $this −>nb_films ][ ’ annee_naissance ’ ] = array () ;\n$this −>films [ $this −>nb_films ][ ’nom_role ’ ] = array () ;\n$this −>i_acteur = 0;\n}\n/∗ ∗∗∗∗∗∗∗∗∗∗ Partie publique ∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗ /\n// Récupération d’un film\npublic function getNbFilm ()\n{r e t u r n $ t h i s −>nb_films ; }\npublic function getFilm ($id_film)\n{\nif($id_film > 0 and $id_film < = $this −>nb_films)\nreturn $this −>films [ $id_film ];\nelse\n{\n// Mais non , cet id n ’ existe pas !!!\ntrigger_error (\"Index incorrect pour accéder à un film :\n$id_film\");\nreturn array () ;\n}\n}\n}\nCette sous-classe comprend essentiellement des méthodes pour traiter les élé-\nments spéciﬁques d’un document <Film> : tout ce qui relève de la création et\nde l’utilisation du parseur est hérité de la classe SAX , et donc automatiquement\ndisponible pour les objets de la classe SAXFilm .\nDans le cas des éléments titre, annee, code_pays, etc., la chaîne à extraire est\nle contenu de l’élément, autrement dit le nœud de type texte situé sous l’élément\ndans l’arborescence. On récupère cette chaîne en déclenchant une fonction quandon rencontre la balise fermante. On sait alors que la chaîne est mémorisée dansl’attribut $this->donnees, et on la stocke dans le tableau des ﬁlms.\nDans le cas des éléments Realisateur ouActeur, les chaînes de caractères à\nextraire sont les attributs de l’élément. On déclenche cette fois une fonction sur labalise ouvrante qui se charge de recopier le tableau des attributs dans $tab_film.\nAu moment de l’analyse du document, l’existence de ces méthodes sera détectée\npardebutElement() oufinElement(), héritées de la classe SAX ; elles seront\ndonc automatiquement invoquées au moment approprié.\nUne dernière remarque : le constructeur de la classe SAXFilm initialise les\ndonnées qui sont propres aux ﬁlms. Il faut également appeler le constructeur dela super-classe SAX puisque ce dernier a en charge la création du parseur. Cet\n8.3 Import de données XML dans MySQL\n 347\nappel du constructeur des parents dans la hiérarchie de spécialisation n’est pas\nautomatique en PHP .\nVoici pour ﬁnir le script associé au formulaire qui permet de transmettre un\ndocument XML pour l’insérer dans la base MySQL. La création d’un objet $filmXML,\ninstance de la classe SAXFilm , permet d’analyser de manière complètement transpa-\nrente le contenu du document et de récupérer les valeurs décrivant un ﬁlm3. Pour\nle contrôle des données et l’insertion dans la base, on fait appel aux fonctions dumodèle implantées dans\nFilm.php par extension de la classe TableBD.\nfunction import ()\n{\n// Définition du titre\n$this −>vue −>titre_page = \"Import de données X M L \";\n// Contrôle de la session\n$this −>controleAcces () ;\n// Création du parseur pour les films\n$film_XML = new SAXFilm( \"ISO −8859 −1\") ;\n// Analyse du document\nif(! isSet ($_FILES [ ’ fichierXML ’ ]) ) {\n$this −>vue −>contenu = \" Il faut indiquer un fichier X M L <br\n/>\" ;\necho $this −>vue −>render (\"page\") ;\nreturn ;\n}\nelse {\n$film_XML −>parse ($_FILES [ ’ fichierXML ’ ] [ ’tmp_name ’ ]) ;\n}\n// O n insère , si aucune erreur n ’ est survenue\nif(! $film_XML −>erreurRencontree()) {\n$film = $ film_XML −>getFilm(1) ;\n// O n instancie le modèle \"Film\" (voir le contrôleur Saisie\n)\n$tbl_film = n e w Film ($this −>bd ) ;\n// O n crée un objet à partir des données du tableau H T T P\n$tbl_film −>nouveau($film) ;\n// Contrôle des valeurs reçues\n$message = $tbl_film −>controle () ;\n// Vérification des valeurs récupérées dans le document\nif($message) {\n3. Ce code fonctionne également pour un document contenant plusieurs ﬁlms, mais pour simpliﬁer\nnous ne traitons que le premier ﬁlm rencontré.\n348\n Chapitre 8. XML\n// Il y a un problème . Affichage du formulaire de saisie\n// avec les valeurs du tableau\n$this −>vue −>contenu = \"Problème : $message<br/>\"\n. $tbl_film −>formulaire (TableBD ::I N S _ B D,\n\" saisie \" , \"inserer\");\n}\nelse {\n// Insertion , avec la fonction du modèle\n$tbl_film −>insertion () ;\n// O n affiche ce q u’o n vient d’insérer\n$this −>vue −>id_film = $ tbl_film −>id ;\n$this −>vue −>titre = $tbl_film −>titre ;\n$this −>vue −>annee = $tbl_film −>annee ;\n$this −>vue −>realisateur = $tbl_film −>nomRealisateur () ;\n$this −>vue −>fichier_xml = $_FILES [ ’ fichierXML ’ ] [ ’name ’ ] ;\n$this −>vue −>setFile (\"contenu\" , \"xml_import . tpl \") ;\n}\n}\necho $this −>vue −>render (\"page\") ;\n}\nEn résumé, nous avons vu dans cette section comment écrire un module d’analyse\nde documents XML simple mais limité, puis comment utiliser des aspects avancés\nde la programmation orientée-objet pour obtenir des outils beaucoup plus puis-\nsants, comprenant une bonne partie de code réutilisable en toutes circonstances.\nOn peut noter que cette programmation permet notamment d’éviter le recoursaux variables globales, qui mène rapidement à des scripts difﬁcilement compréhen-sibles.\n8.4 MISE EN FORME DE DOCUMENTS AVEC XSLT\nPour conclure cette présentation des possibilités d’utilisation de documents XML enassociation avec MySQL/PHP , nous montrons comment transformer un documentobtenu par export d’une base MySQL en un format quelconque avec le langage detransformation XSLT. La motivation est la même que celle déjà explorée avec les\ntemplates : on voudrait pouvoir séparer complètement le traitement du contenu ,i c i\nobtenu par de la programmation PHP/MySQL, et la présentation de ce contenu. Dans\nle cas des templates on utilisait des « modèles » HTML comprenant des « entités » et\non remplaçait ensuite, par programmation, ces entités par des chaînes de caractères\nPHP construites dynamiquement.\nLa technique XML/XSLT est comparable, avec deux différences notables :\n•les modèles de templates sont remplacés par des règles et autres instructions\nXSLT ;\n•au lieu de placer le contenu dans une chaîne de caractères, on le représente demanière structurée dans un document XML.\n8.4 Mise en forme de documents avec XSLT\n 349\nContrairement aux systèmes de templates , des solutions ad hoc dépendantes de\nla bonne volonté d’un petit groupe de programmeurs, XSLT est un langage ofﬁ-\nciellement promu et déﬁni par le World Wide Web Consortium , conçu pour offrir\ntoute la puissance nécessaire à la publication de contenus complexes, et offrantincontestablement de solides garanties de pérennité. De plus, pour un même typede document XML, il est possible de déﬁnir plusieurs programmes XSLT, chacuncorrespondant à un format de sortie différent. XSLT est une solution à considérer sion construit un site publiant un même contenu à destination de plusieurs médias.\nEn contrepartie, XSLT est un langage complexe à apprendre et à maîtriser, et\nqu’avant de s’engager dans une solution technique comprenant des langages aussidifférents que HTML, PHP , SQL, XML, XSLT, etc., il faut réﬂéchir sérieusement àses avantages et inconvénients.\nLa présentation qui suit a essentiellement pour objectif de vous permettre d’ap-\nprécier les caractéristiques d’une telle solution, à charge pour vous ensuite de fairevos choix en connaissance de cause. Il exclu de se lancer ici dans une présentationdu langage XSLT. Les quelques exemples présentés se veulent sufﬁsamment intuitifspour saisir les principes de base.\n8.4.1 Quelques mots sur XSLT\nUn programme XSLT est un document XML, constitué d’un élément racine\n<xsl:stylesheet>, comprenant lui-même d’autres éléments parmi lesquels ceux\nqui correspondent à des instructions XSLT sont tous préﬁxés par « xsl: ». Les\nprincipaux éléments XSLT sont les règles ,d en o m <xsl:template> .\nUnprogramme XSLT s’applique à un document source XML en entrée et produit\nundocument résultat (qui est lui aussi du XML). La production du document résultat\ns’appuie sur les règles du programme. Intuitivement, le processeur XSLT commence\npar parcourir le document source, lequel est considéré comme une arborescence denœuds. Pour chaque nœud, le processeur regarde si une des règles du programmeXSLT s’applique au nœud. Si c’est le cas, un fragment du document résultat décritdans la règle va être produit. L’assemblage de tous les fragments produits au cours del’exécution d’un programme constitue le document résultat complet.\nNous allons présenter un programme XSLT qui s’applique aux documents XML\ne x p o r t é sd el ab a s e Films (voir par exemple\nKillBill.xml , page 331) et les transforme en\nun document HTML. Voici le programme XSLT « principal », avec une seule règle.\nExemple 8.17 La règle XSLT pour la production d’une page HTML\n<?xml version =\" 1.0 \" encoding=\"ISO −8859 −1\"?>\n<xsl:stylesheet version =\" 1.0 \"\nxmlns:xsl=\" http: //w w w.w 3. org /1999/X S L/ Transform\">\n<xsl:include href=\"Film . xsl \" />\n<xsl:output method=\" html \"\nencoding=\"ISO −8859 −1\" />\n350\n Chapitre 8. XML\n<xsl:template match=\"/\">\n<!−− Entête de la page −−>\n<html>\n<head>\n<title>Page produite avec X S L T </ title>\n<link rel=\"stylesheet\" href=\"films . css\" type=\"text / css\"/>\n</ head>\n<body>\n<center><h1>Résultat de la mise en forme X SLT</h1></ center>\nVoici la liste des films , mis au format H T M L.\n<!−− Mise en forme du document X M L −−>\n<xsl:apply −templates />\n</ body>\n</ html>\n</ xsl:template></ xsl:stylesheet>\nCe programme est bien un document XML, avec un élément racine\n<xsl:stylesheet>, contenant deux instructions <xsl:include>\net<xsl:output> sur lesquelles nous reviendrons plus tard, et une règle\n<xsl:template> . Le principe d’un tel programme est d’exécuter les instructions\nXSLT et de les remplacer par le résultat de cette exécution qui doit être un fragment\nXML bien formé. Quand toutes les instructions ont été traitées, il reste un\ndocument XML résultat sans traces d’instructions XSLT. Ici le « dialecte » choisipour la sortie est du (X)HTML.\nL’attribut match de la règle indique les nœuds du document source pour lesquels\nelle va être déclenchée. La valeur de cet attribut doit être une expression d’unautre langage, XPath, qui permet d’exprimer des chemins dans une arborescenceXML. L’expression « / » indique en l’occurrence que la règle s’applique à la racine\ndu document XML. Quand le processeur va rencontrer ce nœud (il s’agit du premier\nrencontré), la règle est déclenchée et produit la version intermédiaire suivante dudocument résultat.\nExemple 8.18 Regle1.xml :Résultat intermédiaire après application de la première règle\n<html>\n<head>\n<title>Page produite avec XSLT</title>\n<link rel=\"stylesheet\" href=\"films.css\" type=\"text/css\"/>\n</head>\n<body>\n<center><h1>Mise en forme XSLT</h1></center>\n8.4 Mise en forme de documents avec XSLT\n 351\nVoici la liste des films, mis au format HTML.\n<!-- Mise en forme du document XML -->\n<xsl:apply-templates/>\n</body>\n</html>\nCe document est déjàun document XML bien formé, mais pas encore un docu-\nment HTML. Il contient encore une instruction XSLT, <xsl:apply-templates>,\nce qui indique que le traitement n’est pas ﬁni. Le processeur XSLT va donc continuer\nà parcourir le document source, en cherchant les règles qui s’appliquent à ses nœudset en déclenchant les règles appropriées.\nDans notre premier programme nous avions une instruction <xsl:include> .\nComme son nom l’indique, elle inclut un autre programme XSLT,\nFilm.xsl , qui contient\nune unique autre règle.\nExemple 8.19 La règle XSLT pour la présentation d’un ﬁlm\n<?xml version =\" 1.0 \" encoding=\" iso −8859 −1\"?>\n<xsl:stylesheet version =\" 1.0 \"\nxmlns:xsl=\" http: //w w w.w 3. org /1999/X S L/ Transform\">\n<xsl:output method=\"html\" indent=\"yes\"/>\n<xsl:template match=\"Film\">\n<h1 > <i> <xsl:value −of select=\"titre\"/> </i> </h 1 >\n<!−− Genre , pays , et année du film −−>\n<xsl:value −of select=\"genre\"/>,\n<i> <xsl:value −of select=\"code_pays\" /> </ i>,\n<xsl:value −of select=\"annee\"/>.\n<!−− Auteur du film −−>\nMis en scène par\n<b > <xsl:value −of\nselect=\"concat( realisateur /prenom , ’ ’ , realisateur\n/n o m)\" />\n</b>\n<h3>Acteurs</h3>\n<xsl:for −each select=\"Acteur\">\n<b > <xsl:value −of select=\"concat(prenom , ’ ’ ,n o m)\" /> </b>\n:\n<xsl:value −of select=\"nom_role\"/> <br/>\n</ xsl:for −each>\n<!−− Résumé du film −−>\n<h3>Résumé</ h3>\n352\n Chapitre 8. XML\n<xsl:value −of select=\"resume\" />\n</ xsl:template>\n</ xsl:stylesheet>\nL’attribut match indique que cette seconde règle se déclenche sur un nœud\n<Film>. Ce déclenchement produit un fragment qui constitue une représentation\nHTML des différentes données constituant le ﬁlm rencontré. La page HTML résultat\ncontiendra, s’il y a trois ﬁlms, les trois fragments successivement produits par exécu-tion de cette règle. Les données sont extraites du document source avec l’instruction\n<xsl:value-of> . Par exemple :\n•<xsl:value-of select=\"titre\"> insère dans le résultat le contenu de\nl’élément <titre> , ﬁls de l’élément <Film> ;\n•<xsl:value-of select=\"Realisateur/@nom\" >insère dans le résultat\nla valeur de l’attribut nom de l’élément <Realisateur> , ﬁls de l’élément\n<Film> ;\nOn peut noter que XSLT permet également d’effectuer des boucles sur un\nensemble d’éléments, ici les acteurs, avec l’instruction <for-each>. À chaque\nfois que le processeur évalue une de ces instructions, elle est remplacée par lefragment XML produit. Quand toutes les instructions ont été traitées, on obtient un\ndocument HTML.\nVoici par exemple ce que donne l’exécution de cette seconde règle, à partir du\ndocument intermédiaire\nRegle1.xml , page 350, appliqué au document source KillBill.xml\npage 331. On constate que le xsl:apply-templates est remplacé par le fragment\nXHTML produit :\nExemple 8.20 Regle2.xml :Après application de la deuxième règle\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"/>\n<title>Page produite avec XSLT</title><link rel=\"stylesheet\" href=\"films.css\" type=\"text/css\"/></head>\n<body>\n<center><h1>R´ esultat de la mise en forme XSLT</h1></center>\nVoici la liste des films, mis au format HTML.\n<h1><i>Kill Bill</i></h1>Drame, <i>USA</i>, 2003.\nMis en sc` ene par <b>Quentin Tarantino</b>.\n<h3>Acteurs</h3>\n<b>Uma Thurman</b>: La mari´ ee, alias \"Black Mamba\"<br/><b>Lucy Liu</b>: O-Ren Ishii<br/><b>David Carradine</b>: Bill<br/>\n8.4 Mise en forme de documents avec XSLT\n 353\n<b>Michael Madsen</b>: Budd / Sidewinder<br/>\n<b>Daryl Hannah</b>: Elle Driver<br/>\n<h3>R´ esum´ e</h3>\nAu cours d’une c´ er´ emonie de mariage en plein d´ esert, ...\n</body>\n</html>\nLa transformation est terminée, et ce document HTML est prêt à être afﬁché dans\nn’importe quel navigateur. En résumé, XSLT est un langage qui permet de produire un\ndocument XML par assemblage de fragments contenus dans des règles, et en incluantdans ces fragments des parties extraites d’un document source. Voyons maintenant\ncomment appliquer une telle transformation avec PHP .\n8.4.2 Application d’un programme XSLT avec PHP\nOn peut envisager deux possibilités pour effectuer la transformation XSLT : côté\nserveur ou côté client. Pour le côté serveur, PHP fournit une interface fonctionnelleavec le processeur XSLT Comme pour SAX, cette interface permet de créer un pro-cesseur, et d’appliquer un programme XSLT à un document source. Le programme, ledocument source et le document résultat peuvent être soit des chaînes de caractères,soit des ﬁchiers.\nCe processeur n’est pas toujours installé, et la transformation côté client est\nplus facile à metre en œuvre. Elle consiste à transmettre le document XML et leprogramme XSLT au navigateur et à laisser ce dernier effectuer la transformation.Ce n’est possible qu’avec un navigateur doté d’un processeur XSLT, comme lesversions raisonnablement récentes de Firefox, Safari ou Internet Explorer. Il sufﬁt\nalors d’ajouter une instruction de traitement\n<?xml-stylesheet href=’programme ’ type=’text/xsl’?>\ndans le prologue du document XML pour indiquer au processeur XSLT le programmeà appliquer.\n// O n envoie l ’en −tête H T T P , et le prologue d u document X M L\nHeader ( \"Content −type : text /xml\") ;\necho \"<?xml version=\\\"1.0\\\" encoding=\\\"iso −8859 −1\\\"?>\\n\\n\" ;\n// M i s e e n forme selon le choix de l ’utilisateur\nif($_POST [ ’ f o r m a t ’ ] == \"XML\" ) {\n// O n sort le X M L brut\necho \"<Films >\\n$document </ Films >\\n\" ;\n}\nelse {\n// O n applique une transformation X S L T. Il suffit d’ajouter\n// une instruction pour que le navigateur en tienne compte// et applique la transformation Film. xsl\n354\n Chapitre 8. XML\necho \"< ? x m l −stylesheet href = ’./ xsl /Film. xsl ’ type=’text / xsl\n’?>\\n\"\n. \"<Films >\\n$document </ Films >\\n\" ; ;\n}\nOn voit que l’instruction de traitement est placée entre le prologue et le corps du\ndocument quand on a demandé un export en HTML. Dans ce cas, le document XML\netle programme XSLT sont transmis au navigateur qui effectue la transformation\net afﬁche directement le résultat comme le montre la ﬁgure 8.2. On utilise PHP\nuniquement pour la production du document XML, et la mise en forme (ici HTML)\nest obtenue avec XSLT. Il serait très facile de créer de nouveaux programmes XSLTapplicables au même document pour produire, par exemple une version pour destéléphones mobiles, une version VoiceXML (sortie vocale), une version RSS, etc.Notez que les personnes qui réalisent ces programmes XSLT n’ont aucun besoin deconnaître ni la structure de la base (ou même son existence), ni PHP , ni l’architecturedu site.\nFigure 8.2 — Résultat de la transformation XSLT\nL’intérêt de recourir à cette solution est essentiellement de pouvoir choisir dyna-\nmiquement entre plusieurs programmes XSLT au moment de la publication desdonnées. Cela peut permettre de personnaliser la présentation en fonction du navi-gateur, du média (ordinateur, téléphone, PDA, ...), ou des souhaits d’un utilisateur\nparticulier. Imaginons par exemple un site qui gère un catalogue de produits (disons,\ndes livres), et plusieurs fournisseurs, disposant chacun de leur propre site web, etsouhaitant y publier avec leurs propres normes graphiques une partie de ce catalogue.La programmation MySQL/PHP permet facilement d’extraire les données de labase, au format XML, et il reste à créer autant de programmes XSLT qu’il y a deprésentations possibles.\nTROISIÈME PARTIE\nCompléments\n\nIntroduction\nauZend Framework9\nCe chapitre est une introduction au Zend Framework (abrégé en ZF), un ensemble de\ncomposants logiciels développé en Open Source (sous licence Free BSD) à l’initiative\nde la société Zend qui distribue l’interpréteur PHP et commercialise de nombreux\noutils pour la réalisation d’applications web professionnelles.\nLe ZF est un ensemble extrêmement riche de classes orientées-objet dont l’ambi-\ntion est de fournir un support au développement d’applications PHP complexes, danstous les domaines. Nous allons nous intéresser essentiellement ici à la réalisationd’applications basées sur MySQL, en revisitant notamment le pattern MVC décrit\ndans le chapitre 6, tel qu’il est implanté dans le ZF .\nLe ZF est un projet relativement récent (2005) qui se développe à grande échelle.\nComme tous les outils de ce type (par exemple le framework STRUTS pour Java),\nsa prise en main peut s’avérer délicate car on est submergé de concepts qui peuventparaître barbares au néophyte. Si vous avez bien assimilé le MVC « léger » présentéprécédemment et les principes de la programmation objet, l’introduction qui suitdoit vous éviter la phase la plus pénible de l’apprentissage. L’effort en vaut la peinecar, pour des projets importants, l’utilisation d’un framework facilite bien les choses.\nLe choix de présenter le ZF ne doit d’ailleurs pas s’interpréter comme un jugement\nde valeur. Il existe d’autres frameworks très recommandables (pour n’en citer qu’un,Symphony semble très apprécié), mais vous devez à l’issue de la lecture être capable\nde vous débrouiller pour explorer d’autres pistes.\nREMARQUE – J’ai pris pour point de départ de cette introduction quelques documents\ntrouvés sur le Web. Je remercie les auteurs, parmi lesquels Julien Pauli, qui a déposé quelques\nprécieux tutoriaux sur le site Developpez.com.\nLe chapitre s’appuie sur la présentation d’une application, appelée ZS COPE , qui\nutilise ponctuellement la base MySQL sur les ﬁlms, développée dans les chapitres\n358\n Chapitre 9. Introduction au Zend Framework\nprécédents, et propose quelques fonctionnalités implantées avec le ZF . Vous pouvez\nen récupérer le code sur le site du livre.\n9.1 MISE EN ROUTE\nLa première chose à faire est d’installer le ZF et notre application. Une fois que celafonctionne, lisez la ﬁn de cette section qui présente l’organisation du code et lesconventions d’écriture du ZF . Ce n’est pas évident, surtout au début, et il vaut mieuxcomprendre d’emblée comment cela fonctionne.\n9.1.1 Installation d’une application ZF\nLa tâche la plus simple est d’installer le Zend Framework. Allez sur le sitehttp://framework.zend.com/ et récupérez l’archive contenant l’ensemble des\ncomposants. La version courante au moment où ces lignes sont écrites est la 1.6, etnous pouvons nous contenter de la version minimale, sans les utilitaires JavaScriptDojo.\nDécompressez l’archive. On obtient un répertoire ZendFramework-1.6 contenant\nun sous-répertoire library . Ce sous-répertoire contient lui-même un répertoire Zend\nqui est la racine de l’ensemble des classes du framework. Copiez ZendFramework-\n1.6sur votre disque, à un endroit accessible au serveur web. Vous pouvez aussi le\nrenommer. Dans notre cas, il s’agit de ZF, placé dans /usr/local/share .\nREMARQUE – Le ZF est très flexible et tout ou presque tout (noms de répertoires,\norganisation des répertoires, etc.) est paramétrable. Nous allons être assez directif pour éviter\nde nous embrouiller avec une longue liste d’options. Une fois que vous aurez compris les\nprincipes, vous pourrez vous lancer dans les variantes si vous le souhaitez.\nMaintenant, récupérez l’archive du ZS COPE , sur notre site. Décompressez-le et\nplacez le répertoire racine zscope dans htdocs . Une autre possibilité est de récupérer\nle code sur le site CVS de http://webscope.cvs.sourceforge.net pour pouvoir faire des\nmodiﬁcations et améliorer le ZS COPE . Un déﬁ possible, si plusieurs lecteurs sont\nintéressés, est de refondre le W EBSCOPE développé avec notre MVC personnel, en\nune nouvelle version entièrement basée sur le Zend Framework. Si vous êtes tentés,\nallez voir sur le site de SourceForge l’état des choses au moment où vous lisez ce livre.\nAprès cette installation initiale, il n’est pas encore possible d’accéder à ZS COPE\navec l’URL http://localhost/zscope , car le ZF s’appuie sur un principe de redirection et\nde réécriture des requêtes HTPP dont il faut au préalable s’assurer le bon fonction-\nnement.\n9.1 Mise en route\n 359\n9.1.2 Redirection des requêtes avec le ZF\nL’application ZS COPE contient deux sous-répertoires :\n1. un répertoire application , avec tout le code d’une application MVC, à savoir\nles contrôleurs, les modèles et les vues ; voir plus loin pour des détails ;\n2. un répertoire www destiné à contenir la partie publique de l’application,\nautrement dit tous les ﬁchiers qui peuvent être directement référencés par une\nURL, et seulement ceux-là.\nL’idée est que tous les ﬁchiers qui peuvent être directement envoyés à un navi-\ngateur (images, PDF , CSS, Javascript, etc.) sont dans www.L ec o d ed el ’ a p p l i c a t i o n\nelle-même n’est pas dans www mais dans application , aﬁn d’interdire qu’on puisse\naccéder avec un navigateur à ce code, pour limiter les risques de fuite.\nLe seul ﬁchier PHP qui se trouve dans www estindex.php . C’est lui qui charge les\nparties de l’application nécessaires à la satisfaction d’une requête HTTP , et toutes\nces requêtes lui sont adressées sans exception. Voilà pour les principes. Leur mise en\nœuvre suppose un peu de conﬁguration.\nConfiguration d’un hôte virtuel\nÀ la base, le site est accessible à l’URL http://localhost/zscope/www (au besoin rem-\nplacez localhost par le nom de votre machine). On peut s’en contenter sur un site de\ntest, mais rien n’empêche de tenter d’accéder à http://localhost/zscope/application ,c e\nque l’on veut éviter.\nLe serveur Apache permet la déﬁnition d’ hôtes virtuels qui correspondent à un site\nparticulier, sur une machine particulière. On peut avoir plusieurs hôtes virtuels pourun même serveur web, ce qui mène à engendrer (virtuellement) plusieurs espaces denoms correspondant à la même adresse IP .\nPour déﬁnir un hôte virtuel, éditez le ﬁchier\nhttpd.conf et ajoutez le bloc d’instruc-\ntions suivant :\nNameVirtualHost *:80\n<VirtualHost *:80>\nServerName zscope.local\nDocumentRoot /Applications/MAMP/htdocs/zscope/www\n</VirtualHost>\nIl faut de plus associer le nom zscope.local à l’IP 127.0.0.1 de la machine locale\n(si vous travaillez sur la machine locale). Pour cela on ajoute la ligne suivante dans\n/etc/hosts (sur Linux ou Mac OS) ou c:/windows/system32/drivers/etc/hosts\n(Windows). Maintenant, redémarrez Apache, et vous devriez pouvoir accéder au site\nZSCOPE àl ’ U R L http://zscope.local . Toute l’arboresscence du site externe à www,e t\nen particulier application , est devenue invisible et inaccessible.\n360\n Chapitre 9. Introduction au Zend Framework\nTout rediriger vers index.php\nLa seconde partie de la conﬁguration consiste à effectuer une réécriture des requêtes\nHTTP pour les rediriger systématiquement vers le ﬁchier index.php . On utilise pour cela\nle module mod_rewrite d’Apache, et des instructions placées dans un ﬁchier .htaccess .\nVériﬁez que le module mod_rewrite est bien actif pour votre serveur Apache en\ncherchant la ligne suivante dans httpd.conf , sinon ajoutez-la.\nLoadModule rewrite_module modules/mod_rewrite.so\nEnsuite, vous pouvez vous appuyer sur le ﬁchier .htaccess présent dans www.V o i c i\nson contenu :\n#R ´e´ ecriture des requ^ etes\nRewriteEngine On\nRewriteCond %{REQUEST_URI} !\\.(js|ico|gif|jpg|png|css)$RewriteRule .* index.php\nUn ﬁchier .htaccess contient des instructions à destination du serveur Apache,\npropres aux ﬁchiers contenus dans le répertoire courant. Ici, on demande à ce que\ntoutes les URL autres que celles référençant des ﬁchiers à transmettre directement aunavigateur (images, Javascript, CSS, PDF , etc.) soient redirigées vers\nindex.php . Essayez\npar exemple d’accéder à l’adresse http://zscope.local/essai.php. Si votre conﬁguration\nfonctionne, le serveur vous redirigera vers index.php .\nCela supprime en grande partie les messages 404 Not Found renvoyés par le\nserveur quand une URL ne correspond pas à une ressource existante. Ce message nepeut plus apparaître que pour les URL non redirigées, comme par exemple un ﬁchier\nimage qui n’existe pas.\nSi tout va bien, vous devriez cette fois accéder à la page d’accueil et voir l’afﬁchage\nde la ﬁgure 9.1. Comme vous le voyez, il s’agit du W\nEBSCOPE ,d a n su né t a te m b r y o n -\nnaire, puisqu’aucune fonction n’est réalisée. Les contrôleurs et actions existants sontde simples illustrations des composants du ZF .\nREMARQUE – Si l’application ZS COPE n’est pas à la racine de votre serveur web (par exemple\nsi vous y accédez avec http://localhost/zscope ), vous devez définir le paramètre base_url\ndans le fichier application/config.ini (sur le même exemple, le paramètre doit être zscope ).\nSinon, les images et feuilles de style CSS ne seront pas trouvées.\n9.1.3 Organisation et conventions\nMaintenant, jetons un coup d’œil à l’ensemble de l’organisation du site, résumée dans\nla ﬁgure 9.2. Elle suit les règles par défaut du Zend Framework. Bien que cela puissesembler inutilement compliqué de prime abord, il faut se souvenir qu’on chercheà gérer des applications larges et complexes. Le découpage très prononcé en unehiérarchie de répertoires assez profonde a l’avantage de faciliter la localisation desdifférentes parties d’une application.\n9.1 Mise en route\n 361\nFigure 9.1 — Page d’accueil du ZS COPE\nmodels\nwww js\ncssimages\nindex.phpcontrollers\nviews helpers\nscripts\nzscopeapplicationIndexController.php, InscriptionController.php, ...Internaute.php, Film.php, Role.php\nconfig.iniBaseURL.php\nindex\ninscriptionindex.phtmlindex.phtml, ...\nlayout.phtml\n...\nFigure 9.2 — Organisation (minimale) du code pour une application Zend\nVous pouvez déjà remarquer qu’il s’agit d’une extension de la structuration adop-\ntée pour notre MVC simpliﬁé utilisé pour la réalisation du W EBSCOPE1.U n e\n1. Il serait plus juste d’admettre que notre MVC est une simpliﬁcation radicale du ZF .\n362\n Chapitre 9. Introduction au Zend Framework\ndifférence est le répertoire www qui ne contient que les ﬁchiers qui peuvent être\nréférencés par une URL dans un navigateur. Tout le reste se trouve dans application .\nComme dans notre MVC, ce dernier contient trois sous-répertoires correspondant\nrespectivement aux contrôleurs, aux modèles et aux vues. Il contient également unﬁchier de conﬁguration,\nconfig.ini .\nLes ﬁchiers des contrôleurs Zend sont nommés NomController,o ù Nom repré-\nsente le nom du contrôleur, commençant par une majuscule. Ici, nous avons lescontrôleurs index, inscription, etc., correspondant aux ﬁchiers\nIndexController.php ,\nInscriptionController.php , etc. Comme dans notre MVC, un contrôleur est une classe\nconstituée d’ actions, méthodes dont le nom se termine par Action. Nous y revenons\npage 373.\nLes modèles sont des classes PHP . Les classes représentant des données persis-\ntantes sont construites selon une mapping objet-relationnel proposé par le ZF qui\npermet de naviguer dans la base sans effectuer de requêtes SQL. Voir page 379.\nEnﬁn, le répertoire views contient les vues. Sa structuration est un peu plus\ncompliquée. Les fragments de pages HTML sont dans le sous-répertoire scripts,e t\non trouve encore un sous-répertoire pour chaque contrôleur. Les ﬁchiers de vues onttendance à proliférer, d’où une structuration en répertoires. Les ﬁchiers ont pourextension\n.phtml car il s’agit d’un mélange de PHP et de HTML. Notez également\ndans scripts la présence du ﬁchier layout.phtml , qui contient la mise en forme graphique\ndu site.\nDans ce qui suit, référez-vous au schéma de la ﬁgure 9.2 pour retrouver les ﬁchiers\ndécrits.\n9.1.4 Routage des requêtes dans une application Zend\nUne requête HTTP adressée à l’application a le format suivant :\nhttp://zscope.local/ ctrl/action[params]\nIci,ctrl etaction représentent respectivement le nom du contrôleur et le\nnom de l’action, et leur valeur par défaut est index. La forme de la requête est\nétrange puisqu’on semble faire référence à un sous-répertoire ctrl de la racine du\nsite web, et même à un sous-répertoire action. Ces répertoires, comme nous l’avons\nvu, n’existent pas, mais le mécanisme de redirection renvoie la requête vers index.php .\nÀ ce moment-là un processus de routage implanté par le Zend Framework analyse\nla requête et détermine le contrôleur et l’action demandés. La méthode implantant\nl’action du contrôleur ctrl est alors exécutée.\nSi, par exemple, on appelle http://zscope.local/model/simpletbl ,l am é t h o d e\nsimpletblAction() du contrôleur ModelController sera exécutée par le script index.php .\nCette réécriture permet de normaliser l’adressage des fonctionnalités d’une appli-\ncation Zend. Les paramètres passés à un action peuvent l’être soit sous la forme\nstandard ?nom=valeur, soit à nouveau sous la forme /nom/valeur.\n9.1 Mise en route\n 363\nIl est temps d’inspecter le ﬁchier index.php , nommé bootstrap ﬁle ,o uﬁchier d’amor-\nçage, qui se charge d’initialiser l’application et de déclencher le processus de rou-\ntage.\nExemple 9.1 zscope/www/index.php :Leﬁchier d’amorçage de l’application ZScope\n<?php\n// O n affiche toutes les erreurs\nerror_reporting (E_ALL | ~E_STRICT) ;\n// O n recherche le chemin d’accès à ZScope\n$root = dirname (dirname (__FILE__)) . D I R E C T O R Y _ S E P A R A T O R ;\n// O n ajoute le chemin d’accès au Z F\nset_include_path( dirname ( $ r o o t ) . DIRECTORY_SEPARATOR . ’ ZF ’\n. DIRECTORY_SEPARATOR . PATH_ SEPARATOR . g e t _ i n c l u d e _ p a t h ( )\n);\n// Ajout des chemins d’accès aux composants de l ’ application\nset_include_path( ’ . ’ .\nPATH_SEPARATOR . $ r o o t . ’ a p p l i c a t i o n ’ . DIRECTORY_SEPARATOR .\n’ m o d e l s ’ . DIRECTORY_SEPARATOR .\nPATH_SEPARATOR . g e t _ i n c l u d e _ p a t h ( )\n);\n// O n utilise toujours le loader automatique\nrequire_once ’Zend/ Loader .php ’ ;\nZend_Loader :: registerAutoload() ;\n// O n lit le fichier de configuration\n$config = new Zend_Config_Ini (\" . . / application / config . ini \" , \"\nstaging\");\nini_set ( ’display_errors ’ , $config −>app −>display_errors);\ndate_default_timezone_set($config −>app −>default_timezone);\n// Connexion à la base de données\n$db = Zend_Db :: factory ($config −>db ) ;\n// Cette connexion est à u t i l i s e r pour le Modèle\nZend_Db_Table :: setDefaultAdapter($db) ;\n// O n ajoute la configuration et la connexion\n// au registre de l ’application\n$registry = Zend_Regi stry :: getInstance () ;\n$registry −>set ( ’ config ’ , $config) ;\n$registry −>set ( ’db ’ , $db) ;\n// Initialisation et exécution d’u n contrôleur frontal\ntry {\n$front = Zend_Controller_Front :: getInstance () ;\n// $front −>throwExceptions(true);\n$front −>setControllerDirectory( ’ ../ application / controllers ’);\n364\n Chapitre 9. Introduction au Zend Framework\n// Utilisation du layout pour l ’ affichage\nZend_Layout : : startMvc () ;\n// C’est parti !\n$front −>dispatch () ;\n}\ncatch (Zend_Exception $e) {\necho \"Erreur dans l ’initialisation d u site.<br/>\"\n. \"<b>Message : </b> \" . $e −>getMessage ()\n.\"i n\".$ e −>getFile () . \"à la ligne \" . $e −>getLine () . \"<br\n/>\" ;\n}\nInitialement, on n’y comprend rien, même si les commentaires disent assez\nclairement le rôle des différentes initialisations effectuées. Regardons dans le détail.\nUn point important est l’ajout de répertoires dans la liste des chemins\nd’inclusion de PHP , aﬁn d’accéder d’une part aux classes du Zend Framework,\nd’autre part aux classes de l’application elles-mêmes. On utilise le loader du ZF\npour charger automatiquement les classes sans avoir besoin d’effectuer denombreux appels à require_once(). Le chargement automatique s’appuie sur une\nconvention largement suivie dans les bibliothèques PHP , consistant à établir unecorrespondance entre le nom d’une classe et le ﬁchier qui contient sa déﬁnition. Laclasse Zend_Db_Adapter par exemple se trouve dans le ﬁchier\nZend/Db/Adapter.php .\nComme nous avons placé /usr/local/share/ZF/library dans nos chemins d’inclusion, et\nquelibrary contient le répertoire Zend qui est la racine de tous les composants Zend,\nleloader trouve le ﬁchier contenant la classe et la charge automatiquement dès\nqu’on en a besoin. Plus besoin d’inclusions explicites.\nQuand l’environnement est initialisé, on peut effectuer le routage de la requête\nHTTP reçue. Il consiste essentiellement à analyser l’URL de la requête pour déter-miner le contrôleur et l’action demandées, à charger la classe correspondant aucontrôleur puis à réaliser l’action. Comme dans notre MVC, un contrôleur spécial, lefrontal , se charge du routage. C’est un « singleton » (on ne peut instancier qu’un seul\nobjet de la classe) et sa méthode principale est dispatch() qui distribue les requêtes\naux contrôleurs.\n// Initialisation et exécution d’u n contrôleur frontal\n$front = Zend_Controller_Front :: getInstance () ;\n$front −>throwExceptions ( true );\n$front −>setControllerDirectory( ’ ../ application / controllers ’);\n// Utilisation du layout pour l ’ affichage\nZend_Layout : : startMvc () ;\n// C’est parti !\n$front −>dispatch () ;\n9.1 Mise en route\n 365\nPar défaut, le ZF ne lève pas d’exception, mais sur un site de test comme le nôtre\nil est préférable, au moins initialement, d’afﬁcher les exceptions avec la commande\nthrowExceptions(true) .\nIl reste des parties du ﬁchier index.php non encore commentées : la lecture du ﬁchier\nde conﬁguration, la connexion à la base de données, leur placement dans le registre,et l’appel à startMvc(). Elles sont traitées dans les sections qui suivent.\n9.1.5 Configuration\nToute application a besoin de ﬁchiers de conﬁguration dans lesquels on place desinformations dépendantes d’un contexte particulier d’exécution, comme les para-m è t r e sd ec o n n e x i o nàl ab a s ed ed o n n é e s .\nUne solution simple est d’utiliser des tableaux PHP auxquels on peut directement\naccéder dans un script. Le Zend Framework propose une option plus puissante, baséesur la syntaxe des ﬁchiers INI (comme le\nphp.ini ). Cette option présente l’avantage\nd’un mécanisme d’héritage et de replacement de valeurs très pratique pour conﬁgurerdes environnements proches les uns des autres.\nVoici le ﬁchier config.ini, que nous avons choisi de placer dans application\n(évidemment pas dans www !).\nExemple 9.2 zscope/application/config.ini :Le ﬁchier de conﬁguration\n[ production ]\n#\n# Site configuration#\napp .name = \"ZScope\"app. base_url =app. display_errors = 0\napp . admin_mail = philippe . rigaux@dauphine . fr\napp. default_timezone = Europe/ Parisapp . cookie . lifetime = 3\ndb . adapter = Pdo_Mysqldb . params . host = localhostdb . params .dbname = Films\ndb . params . username = adminFilms\ndb . params . password = mdpAdmin\n[ staging : production ]\napp. display_errors = 1\nLe contenu du ﬁchier est libre, mais sa structure doit obéir à quelques\nrègles. Tout d’abord, il est décomposé en sections . Ici, nous en avons deux,\nproduction etstaging, cette dernière déﬁnissant l’environnement de test de\nl’application. La syntaxe [staging: production] indique que staging hérite de\n366\n Chapitre 9. Introduction au Zend Framework\nproduction. En d’autres termes, toutes les valeurs non redéﬁnies dans staging\nsont identiques à celles de production. Les autres sont redéﬁnies. Ainsi, la valeur\ndedisplay_errors est à 1 pour staging et à 0 pour production : on afﬁche les\nerreurs dans un environnement de test, pas dans un environnement de production.\nEnsuite, les valeurs du ﬁchier de conﬁguration sont organisées hiérarchiquement,\nendomaines. Nous avons ici deux domaines principaux, appetdb, et vous êtes libres\nde déﬁnir vos domaines comme vous l’entendez. Un domaine peut lui-même avoir\ndes sous-domaines, comme dbqui dispose d’un sous-domaine params.\nLe ZF charge un ﬁchier de conﬁguration dans un objet comme suit (ce qui\nmériterait d’être accompagnée d’un test en cas d’échec) :\n$config = new Zend_Config_Ini (\" . . / application / config . ini \" , \"\nstaging\");\nOn indique la section que l’on veut charger. Il sufﬁt de changer staging en\nproduction pour passer de l’environnement de test à celui de production.\nLa structure de l’objet reﬂète la structuration en domaines de la conﬁguration. Il\nexiste donc un objet config->app pour le domaine app, un objet $config->db\npour le domaine db, un objet $config->db->params pour le domaine db.params,\netc. On accède à une valeur comme à une propriété d’un objet, par exemple$config->app->display_errors pour le choix d’afﬁcher ou non les erreurs.\n9.1.6 Connexion à la base de données\nLe Zend Framework propose une couche d’abstraction pour accéder de manière trans-parente aux bases de données relationnelles, quel que soit le serveur. Une connexionest une instance de Zend_Db_Adapter créée par une « factory » (« usine » instan-\nciant des objets en fonction du contexte). Il faut lui passer en paramètres deuxinformations :\n1. le nom de l’adaptateur à utiliser (il existe un adaptateur pour quasiment tous\nles SGBD) ;\n2. les paramètres usuels de connexion.\nLa méthode la plus simple consiste à déﬁnir ces paramètres dans le ﬁchier de\nconﬁguration (voir page 365) dans le domaine db. Une fois le ﬁchier de conﬁguration\nchargé, il sufﬁt de passer l’objet $config->db àl afactory pour obtenir la connexion\n// Connexion à la base de données\n$db = Zend_Db :: factory ($config −>db ) ;\n// Cette connexion est à u t i l i s e r pour le Modèle\nZend_Db_Table :: setDefaultAdapter($db) ;\nCette connexion peut être utilisée de manière classique pour effectuer des\nrequêtes SQL. Elle peut également servir de support pour les composants du Zend\nFramework qui établissent une correspondance entre le Modèle et la base. L’appel à\n9.1 Mise en route\n 367\nsetDefaultAdapter() indique que la connexion est utilisée par défaut dans ce\ncadre. Voir page 379 pour des exemples de recours à cette connexion.\nDétail potentiellement important : la véritable connexion à la base ne s’effectue\nqu’avec la première requête effectuée, et c’est à ce moment-là qu’on risque de\ns’apercevoir que la connexion échoue à cause d’un problème de mot de passe ouautre. Il est possible d’appeler la méthode getConnection() sur l’objet $db pour\nforcer la connexion et vériﬁer qu’elle s’exécute correctement.\n9.1.7 Le registre\nLebootstrap ﬁle stocke les objets $config et$dbdans le registre de l’application Zend.\nIl s’agit d’un espace global dans lequel on peut placer des informations utiles partoutdans l’application, ce qui évite d’avoir à les passer systématiquement en paramètre.C’est une solution plus propre que l’utilisation des variables globales. Ici, on placel’objet dans une entrée du registre nommée config. Nous verrons un peu plus loin\ncomment accéder à ces entrées.\n$registry = Zend_Regi stry :: getInstance () ;\n$registry −>set ( ’ config ’ , $config) ;\n9.1.8 Contrôleurs, actions et vues\nRegardons ce qui se passe quand on accède simplement à l’URL http://zmax.local .\nLe frontal détermine tout d’abord que ni le contrôleur, ne l’action ne sont spé-\nciﬁés. Il prend donc ceux par défaut : Index pour le contrôleur et index pour\nl’action. Le contrôleur est implanté par une classe nommée IndexController\ndans le répertoire application/controllers , et chaque méthode de cette classe est une\naction nommée nomAction. Voici le code, très basique, de notre contrôleur par\ndéfaut;\nExemple 9.3 zscope/application/controllers/IndexController.php :le contrôleur Index.\n<?php\nclass IndexController extends Zend_Controller_Action\n{\n/∗∗\n∗L’ action par défaut . Elle affiche juste la page\n∗d’accueil .\n∗/\nfunction indexAction ()\n{\n$this −>view −>titre_page = \"Page d ’accueil\";\n}\n/∗∗\n368\n Chapitre 9. Introduction au Zend Framework\n∗Quelques informations sur la configuration\n∗/\nfunction configAction()\n{\n$this −>view −>titre_page = \"Contenu du fichier de\nconfiguration\";\n// O n prend la configuration dans le registre , on la met dans\n// la vue\n$registry = Zend_Regi stry :: getInstance () ;\n$this −>view −>config = $registry −>get( ’ config ’) ;;\n}\n}\nOn remarque d’abord que tout contrôleur est une sous-classe de\nZend_Controller_Action. Un contrôleur hérite donc des propriétés de cette\nsuper-classe, notamment de $this->view qui est le composant Vue avec lequel\nnous pouvons produire le document résultat. On peut placer des informations dansla vue avec une affectation $this->view->nom = valeur.\nOn peut se demander d’où vient le fragment HTML qui constitue la page d’ac-\ncueil du site ZS\nCOPE , produite par cette action. Dans le Zend Framework, beaucoup\nde décisions s’appuient sur des conventions de nommage et d’emplacement, ce quiévite de se répéter. La convention pour les vues est la suivante : Le fragment (ouscript) associé à une action nommée act du contrôleur ctrl se trouve dans le\nrépertoire views/scripts/ctrl, et se nomme act.phtml. Ici, l’action index se conclut\ndonc automatiquement par l’exécution du script\nviews/scripts/index/index.phtml .\nVous pouvez consulter ce ﬁchier. Il contient le code HTML qui s’afﬁche dans la\nzone principale de la page d’accueil de ZS COPE . Tout le reste de la page, incluant\nle logo, le menu, les différents tableaux imbriqués spéciﬁant le positionnement desdifférentes parties et notamment de la zone principale d’afﬁchage, relève du layout.\nLa gestion de ce dernier sera présentée page 376.\nPrenons un autre exemple avec l’action configAction() du contrôleur Index\n(voir ci-dessus). Le code est très simple : on récupère dans le registre l’objet deconﬁguration et on l’affecte à la vue.\nLa vue, un script PHP un peu spécial, est alors exécutée. Au sein de ce script\non dispose de l’objet $config que l’on vient d’affecter, ainsi que de la chaîne de\ncaractères titre_page.\nExemple 9.4 zscope/application/views/scripts/index/config.phtml :Le script Vue de l’action config\ndu contrôleur Index\nVoici quelques informations extraites du fichier de configuration\n< h 4>Informations générales sur l ’application </h 4>\n9.2 Accès à la base de données\n 369\n<ol>\n<li > N o m de l ’ application : <?php echo $this −>config −>app −>name ;\n?></li >\n<li >Affichage des erreurs : <?php echo $this −>config −>app −>\ndisplay_errors ; ?></li >\n<li >Administrateur : <?php echo $this −>config −>app −>admin_mail ;\n?></li >\n</ol >\n<h4>Connexion à la base de données </h4>\n<ol>\n<li >Pilote P D O: <?php echo $this −>config −>db−>adapter ; ?></li >\n<li >Serveur : <?php echo $this −>config −>db−>params −>host ; ?></ li\n>\n<li >Base: <?php echo $this −>config −>db−>params −>dbname ; ?></ li\n>\n<li >Login : <?php echo $this −>config −>db−>params −>username ;\n?></li >\n</ol >\nOn programme dans la vue comme dans n’importe quel script PHP , avec la\nparticularité que les données « dynamiques » sont disponibles dans l’objet $this\nparce qu’elles ont été placées là par l’action associée à la vue. Le script-vue ne sert\nqu’à mettre en forme ces données, pas à les créer ou les modiﬁer. Nous reviendronssur la gestion de la vue dans le Zend Framework page 376.\nLe moment est probablement venu pour vous de faire une pause. Parcourez\nl’arborescence des ﬁchiers, et modiﬁez ceux qui interviennent dans l’exécution del’action index du contrôleur Index. Il s’agit de\ncontrollers/IndexControlller.php etviews/s-\ncript/index/index.phtml . Clariﬁez les interactions entre ces compoants (contrôleur, action\net vue : nous n’avons pas encore vu le modèle). La suite revient plus longuement sur\nles composants Zend relatifs au MVC et aux bases de données.\n9.2 ACCÈS À LA BASE DE DONNÉES\nLe contrôleur bdde l’application ZS COPE montre comment utiliser la connexion à\nla base, instance de Zend_Db_Adapter, pour accéder classiquement à une base de\ndonnées par des requêtes SQL. Sur ce point, le ZF s’appuie très largement sur PDO\n(voir page 238) qui propose déjà tout ce qui est nécessaire à un accès normalisé auxbases relationnelles. Ce qui suit n’est donc qu’une introduction assez rapide, que vouspouvez compléter avec la documentation PDO en ligne.\n370\n Chapitre 9. Introduction au Zend Framework\n9.2.1 Interrogation\nLa méthode query() prend une requête et retourne une instance de\nZend_Db_Statement qui permet de parcourir le résultat. Le mécanisme est\ntotalement standard et conforme à ce que nous utilisons depuis le début du livre.\nVoici l’action queryfetch() qui interroge la table Film.\nfunction queryfetchAction ()\n{\n// O n récupère la connexion dans le registre\n$bd = Zend_Registry :: getInstance () −>get( ’db ’) ;\n// Exécution de la requête\n$result =\n$bd−>q u e r y ( \"SELECT id , t i t r e , annee FROM Film WHERE annee\n> 1980\" ) ;\n// Itération sur les films\n$this −>view −>films = array () ;\nwhile ($film = $result −>fetch (Zend_Db::F E T C H _ O B J)) {\n$this −>view −>films [] = $film ;\n}\n}\nEssentiellement, on interroge la base, puis on itère sur le résultat en plaçant\nchaque objet dans un tableau de $this->view. Le paramètre de la méthode\nfetch() indique le format dans lequel on souhaite récupérer chaque ligne. Comme\nd’habitude, au lieu d’ OBJ, on peut utiliser ASSOC pour des tableaux associatifs, NUM\npour des tableaux indicés, et quelques autres options moins utiles. Le script de vue\nparcourt ce tableau et crée le document HTML de présentation. Notez la méthodeescape() de la vue qui s’assure que les caractères perturbant le document HTML\nsont neutralisés.\nExemple 9.5 zscope/application/views/scripts/bd/queryfetch.phtml :La vue afﬁchant la liste des ﬁlms\nVoici la liste des films trouvés dans la base .\n<ol>\n<?php foreach ($this −>films as $film) { ?>\n<li ><?php echo $this −>escape($film −>titre) ; ?>< /li>\n<?php } ?>\n</ol >\nEn général, on utilise des requêtes contenant des paramètres venant de formu-\nlaires ou autres, qu’il faut prendre garde d’échapper pour éviter les caractères posantproblème. Les méthodes quoteInto() etquote() effectuent cet échappement en\ntenant compte des règles propres au serveur auquel on est connecté. Ces régles\n9.2 Accès à la base de données\n 371\nvarient d’un SGBD à un autre. Pour MySQL, nous savons qu’il faut placer une barre\noblique inversée devant les « ’ », pour ORACLE il faut les doubler, etc. Voici unexemple avec quoteInto().\nfunction quoteAction ()\n{\n// O n récupère la connexion dans le registre\n$bd = Zend_Registry :: getInstance () −>get( ’db ’) ;\n// L e titre d u film cherché\n$titre = \"Jeanne d’A r c\";\n$this −>view −>titre = $titre ;\n// Préparation de la requête\n$requete = $bd −>quoteInto(\" SELECT ∗F R O M Film W H E R E titre =?\" ,\n$titre);\n$result = $ b d −>query($requete) ;\n// Itération sur les films\n$this −>view −>films = array () ;\nwhile ($film = $result −>fetch (Zend_Db::F E T C H _ O B J)) {\n$this −>view −>films [] = $film ;\n}\n}\nIl existe tout un catalogue de méthodes fetch pour récupérer, au choix, toutes\nles lignes d’un résultat, ou bien sa première ligne, ou bien la première colonne de sapremière ligne, etc. Voici l’action fetch qui vous donnera une idée de l’utilisation\nde ces méthodes. La documentation de Zend sur le composant Zend_Db détaille la\nliste de toutes les possibilités.\n/∗∗\n∗Quelques méthodes fetch ∗∗∗ def Zmax_Db_Adapter\n∗/\nfunction fetchAction ()\n{\n// O n récupère la connexion dans le registre\n$bd = Zend_Registry :: getInstance () −>get( ’db ’) ;\n// Tous les films contenant u n ’v’,\n$ r e q u e t e = \"SELECT t i t r e , annee , g e n r e FROM Film WHERE t i t r e\nLIKE ’%v%’\" ;\n$this −>view −>requete = $requete ;\n// Attention , on veut toujours récupérer des objets\n$bd−>setFetchMode(Zend_Db ::FETCH_OBJ) ;\n/ / Fetch : comme un t a b l e au d ’ o b j e t s\n$this −>view −>films = $bd −>fetchAll($requete) ;\n// O n prend une seule ligne , la première du résultat\n$this −>view −>film = $bd −>fetchRow($requete) ;\n372\n Chapitre 9. Introduction au Zend Framework\n// O n prend une valeur dans une ligne\n$this −>view −>t i t r e = $bd −>fetchOne($requete) ;\n}\nAvec ces méthodes fetch, l’exécution de la requête et la récupération du résultat\ns’effectuent en un seul appel. Il est souvent pratique de pouvoir récupérer facilement\nune ligne ou une valeur spéciﬁque dans la base de données.\n9.2.2 Insertion et mise à jour\nLes modiﬁcations de la base, que ce soit insertion ou mises à jour, bénéﬁcient\négalement de méthodes génériques. Ces méthodes effectuent automatiquement les\néchappements nécessaires pour s’assurer que les modiﬁcations s’exécutent sans pro-blème. Voici l’action insert illustrant une insertion.\n/∗∗\n∗Comment i n s é r e r dans une t a b l e\n∗/\nfunction insertAction()\n{\n// O n récupère la connexion dans le registre\n$bd = Zend_Registry :: getInstance () −>get( ’db ’) ;\n// O n veut insérer l ’Espagne. O n commence par supprimer\n// si elle existe déjà.\n$bd−>q u e r y ( \"DELETE FROM P a y s WHERE code = ’ ES ’ \" ) ;\n// Maintenant on définit le tableau des données à insérer\n$espagne = array ( \" c o d e \"= >\" E S \" ,\" n o m \"= >\" E s p a g n e \" ,\" l a n g u e\n\" = > \"Espagnol \") ;\n// O n insère et on récupère le nombre de lignes insérées\n$this −>view −>nb_lignes = $bd −>insert (\"Pays\" , $espagne) ;\n}\nPour être complet, voici le code d’une mise à jour.\nfunction updateAction()\n{\n// O n récupère la connexion dans le registre\n$bd = Zend_Registry :: getInstance () −>get( ’db ’) ;\n// Tableau des colonnes à modifier\n$update_val = array (\"langue\" = > \"Anglais U S\") ;\n// Clause where pour la modification\n$where [] = \"code=’U S’ \" ;\n$nb_rows = $bd −>update(\"Pays\" , $update_val , $where) ;\n}\n9.3 Le MVC du Zend Framework\n 373\n9.3 LE MVC DU ZEND FRAMEWORK\nNous avons déjà vu l’essentiel de l’organisation du Zend Framework pour les contrô-\nleurs et les actions2. Voici quelques compléments d’utilisation courante. Le code\ndécrit dans cette section appartient au contrôleur MvcController.php .\n9.3.1 L’objet request\nLes paramètres reçus par une action sont placés dans un objet request que l’on\nobtient avec la méthode getRequest() d’un contrôleur. De nombreuses méthodes\napplicables à cet objet servent à récupérer les informations relatives à la requête\nHTTP qui a déclenché l’action. En voici une liste non exhaustive.\n1.getControllerName()\n2.getActionName()\n3.getMethod()\n4.getQuery($key=null, $defaut=null)\n5.getPost($key=null, $defaut=null)\n6.getCookie($key=null, $defaut=null)\n7.getParam($key=null, $defaut=null)\nÀ chaque fois si $key estnull, on obtient un tableau donnant toutes les\ninformations disponibles (par exemples, tous les cookies ). L’exemple qui suit montre\ncomment récupérer tous les paramètres passés à une action. Notez également querequest sert à obtenir le nom du contrôleur et de l’action courante.\nfunction requestAction ()\n{\n// Récupérons la requête\n$request = $this −>getRequest () ;\n// O n obtient le n o m du contrôleur et de l ’action\n$this −>view −>nom_controleur = $request −>getControllerName () ;\n$this −>view −>nom_action = $request −>getActionName() ;\n// Prenons les paramètres H T T P\n$params = $request −>getParams() ;\n$this −>view −>liste_params = \"\";\nforeach ($params as $ n o m = > $valeur)\n$this −>view −>liste_params .= \" ($ n o m = $valeur) \" ;\n}\nAu lieu de parler de paramètres HTTP , il serait plus judicieux de parler de\nparamètres en général, transmis à une méthode dans une classe orienté-objet. Ilest possible en effet, avec le Zend Framework, de déclencher une action à partir\n2. Un troisième niveau dans la hiérarchie, les modules , est possible.\n374\n Chapitre 9. Introduction au Zend Framework\nd’une autre action (avec un forward()) en lui passant un objet request créé de\ntoutes pièces sans passer par HTTP . Le mécanisme d’encapsulation obtenu par la\nprogrammation objet a pour effet de fournir des applications et des composants quine sont plus liés à un environnement d’exécution particulier.\n9.3.2 L’objet response\nLe complément de l’objet request est l’objet response qui encapsule les méthodes\ngérant la production du résultat (ceux qui ont déjà programmé en Java/Servet/JSP\nne seront pas dépaysés). L’objet response est utile par exemple quand on produit un\nrésultat non HTML, auquel cas il faut modiﬁer les entêtes de la réponse HTTP , sans\nrecourir au composant Vue.\nL’exemple suivant montre comment renvoyer un document en texte brut.\nfunction responseAction ()\n{\n// N e pas utiliser la vue\n$this −>getHelper ( ’ ViewRenderer ’ ) −>setNoRender() ;\n// Modifier l ’en −tête H T T P donnant le type du document\n// renvoyé\n$this −>getResponse () −>setHeader( ’Content −type ’ , ’ text / plain ’)\n;\n$reponse = \"Je suis une réponse en texte pur\" ;\n$this −>getResponse () −>setBody($reponse) ;\n}\n9.3.3 Gérer les exceptions\nPour conclure cet aperçu des techiques de programmation MVC avec le Zend Fra-mework, revenons sur la gestion des exceptions. Pour l’instant, nous avons demandéau contrôleur frontal de lever des exceptions avec l’instruction suivante placée dansle ﬁchier\nindex.php .\n$front −>throwExceptions ( true );\nCe n’est pas vraiment une bonne méthode car une exception sera redirigée vers\nle bloc catch du ﬁchier index.php qui va devoir tout gérer. La gestion par défaut des\nexceptions consiste à déclencher une action error d’un contrôleur ErrorController.php .\nCe contrôleur existe dans ZS COPE . Commentez l’appel throwException()\ndans index.php , et déclenchez une exception pour voir ce qui se passe. Vous pouvez tout\nsimplement déclencher l’action exception du contrôleur mvc, dont voici le code.\nfunction exceptionAction ()\n{\nthrow new Zend_Exception (\" J ’ envoie une exception \") ;\n}\n9.3 Le MVC du Zend Framework\n 375\nCette action lève une exception, dirigée vers le contrôleur Error. La requête\ncréée pour cette redirection contient un paramètre error_handler qui analyse\nl’exception levée. Cette dernière peut de deux types :\n1. soit une erreur déclenchée par le Zend Framework lui-même, par exemple un\ncontrôleur ou une action qui n’existe pas ;\n2. soit une exception levée par l’application.\nVoici le code complet de l’action error du contrôleur Error pour l’application\nZSCOPE . On produit un message indiquant de manière complète l’endroit où l’ex-\nception a été levée, ainsi que le message associé.\nfunction errorAction ()\n{\n$this −>titre_page = \"U n e exception a été rencontrée\" ;\n// O n récupère le gestionnaire d’exception\n$eh = $this −>_getParam( ’ error_handler ’);\nif(is_object ($eh)) {\n$errmess = $script = $line = \"\" ;\n$context = \" Erreur \" ;\n// Vérifions le type d’exception rencontrée\nswitch ($eh −>type ) {\ncase Zend_Controller_Plugin_ErrorHandler ::\nEXCEPTION_NO_CONTROLLER :\ncase Zend_Controller_Plugin_ErrorHandler ::\nEXCEPTION_NO_ACTION :\n$context = \" Erreur Zend M V C \" ;\n$errmess = \"Contrôleur ou action inconnue\" ;\nbreak ;\ncase Z e n d _ C o n t r o l l e r _ P l u g i n _ E r r o r H a n d l e r : : EXCEPTION_OTHER :\ndefault :\n$exception = $eh −>exception ;\n$script = $exception −>getFile () ;\n$line = $exception −>getLine () ;\n$errmess = $exception −>getMessage () ;\n$context = get_class ($exception) ;\nbreak ;\n}\n// O n crée le message\n$this −>view −>message =\n\"($context) Script $script ligne $line : $errmess \" ;\n}\nelse {\n$this −>view −>message = \"Erreur interne\" ;\n}\n}\n376\n Chapitre 9. Introduction au Zend Framework\nCette action devrait encore être améliorée pour tenir compte du contexte. Dans\nune application en production il faudrait afﬁcher un message neutre sur l’indisponi-\nbilité de l’application, et envoyer un em-ail à l’administrateur du site avec le messageprécis de l’erreur rencontrée.\n9.4 LA VUE DANS LE ZEND FRAMEWORK\nCette section revient sur le système de vues proposé par le Zend Framework.\n9.4.1 Les vues sont des scripts PHP\nUn script de vue a pour objectif de produire un document. La solution proposée parZend pour gérer les vues dans l’architecture MVC a le mérite de la simplicité. Le\nlangage de templates est PHP lui-même ; la seule particularité est que la vue dispose\nd’un ensemble de données à afﬁcher qui lui ont été affectées par l’action associée.\nL’exemple suivant est la vue\nfetch.phtml associée à l’action fetch du contrôleur\nBd, présenté un peu plus haut. Cette vue a reçu trois types de données : un tableaud’objets (des ﬁlms), un objet (un ﬁlm) et une chaîne de caractères (un titre).\nExemple 9.6 zscope/application/views/scripts/bd/fetch.phtml :l av u ed el ’ a c t i o nfetch\nVoici quelques exemples de méthodes <tt>fetch </tt>\npour la requête\n\"<i ><?php echo $this −>escape($this −>requete) ; ?></i>\" .\n<h2>Méthode <tt>fetchAll </tt ></h2>\n<ol>\n<?php foreach ($this −>films as $film) { ?>\n<li ><?php echo $this −>escape($film −>titre) ; ?>< /li>\n<?php } ?>\n</ol >\n<h2>Méthode <tt >fetchRow </ tt ></h2>\nO n ne trouve qu ’une ligne avec le film\n<i ><?php echo $this −>escape($this −>film −>titre)\n.\"p a r ue n\" .$ t h i s −>film −>annee ; ?></i >.\n<h2>Méthode <tt >fetchOne </ tt ></h2>\nO n ne prend que la première valeur de la première ligne .\nIci le titre <i>< ?p h p echo $this −>escape($this −>titre );?></i >.\nLa vue agit comme un script PHP , avec toute la puissance potentielle du langage.\nD’un côté, cela résout très simplement le problème des boucles ou des tests dans\n9.4 La vue dans le Zend Framework\n 377\ndes templates, qui mène à des langages de templates parfois inutilement compliqués.\nD’un autre côté, on se retrouve avec des scripts qui ouvrent et ferment sans cesse lesbalises PHP , ce qui peut devenir lassant et donne un résultat moins facile à lire.\nAttention également à ne pas utiliser un script-vue pour faire de la programma-\ntion PHP . C’est possible avec cette approche, et il faut bien garder en tête que la vuene doit implanter aucune intelligence, aucune logique. Elle doit juste produire undocument.\nZend permet le remplacement de son système de vues par un autre, basé par\nexemple sur des templates. Il faut implanter l’interface Zend_View_Interface.U n\nexemple est donné dans la documentation pour les templates Smarty.\n9.4.2 Le layout\nQuand on développe un site, toutes les pages ont une présentation commune,désignée par le terme de layout. Si le système de vues Zend se limitait à un script\npour chaque action, cela rendrait assez difﬁcile, ou peu élégant, la gestion de ce layout\ncommun. On pourrait produire des ent-êtes et des pieds de page, mais cette solutionlaborieuse rend plus difﬁcile la conception du layout comme un document HTML\nhomogène et bien formé.\nC’est ici qu’intervient l’instruction startMvc() placée dans\nindex.php , que nous\nn’avions pas encore commentée. Le layout implante la charte graphique du site. C’est\nun document nommé layout.phtml , situé dans views/scripts, qui consiste essentiellement\nen un document HTML, avec quelques instructions comme celle-ci :\n<?php echo $this->escape($this->titre_page); ?>\nTout se passe comme si le layout était un script PHP standard dans lequel on\npeut insérer des instructions echo. Les données disponibles pour l’afﬁchage sont les\npropriétés d’un objet $this qui constitue le contexte du layout.L e layout contient\négalement une instruction assez spéciale.\n<?php echo $this->layout()->content; ?>\nDe quoi s’agit-il ? Le système de vues proposé par défaut par le ZF fonctionne\nà deux niveaux. Quand une action s’exécute, le document résultat, obtenu parexécution du template associé à l’action, est placé dans une entité content. Cette\nentité peut alors, dans un second temps, être insérée à l’endroit approprié dans lelayout qui constitue le second niveau.\nPour prendre l’exemple de notre action index dans le contrôleur Index,l e\ntemplate\nindex.phtml est tout d’abord exécuté, et donne pour résultat un fragment\nHTML. Ce fragment est affecté à l’entité content dulayout.L e layout lui-même\nest ﬁnalement afﬁché.\nREMARQUE – C’est l’instruction startMvc() placée dans le boostrap file qui établit cette\nréalisation à deux niveaux de la vue. On peut omettre cette instruction et se contenter d’un\ns e u ln i v e a u( e s s a y e z ...) ,m a i si ld e v i e n ta l o r sa s s e zd i f f i c i l ed ’ o r g a n i s e ra v e cl o g i q u el e sf i c h i e r s\nconstituant la vue.\n378\n Chapitre 9. Introduction au Zend Framework\nOn peut gérer le layout au niveau de chaque action, soit pour modiﬁer le docu-\nment utilisé avec l’instruction\n// Utiliser autre.phtml c o m m e layout\n$this −>_helper −>layout () −>setLayout( ’ autre ’) ;\nsoit en n’utilisant plus du tout le layout, par exemple pour produire un document\nnon écrit en HTML.\n// N e pas utiliser le layout\n$this −>_helper −>layout () −>disableLayout () ;\n9.4.3 Créer des Helpers\nLa notion de Helper (assistant en français) correspond à une manière détournée\nd’enrichir une classe orientée-objet sans recourir à l’héritage. Nous allons prendre\nle cas d’un helper pour la vue. Le point de départ est le suivant : si on veut enrichir la\nvue avec des méthodes utiles pour tout le site, comme la mise en forme d’une date,ou d’un montant monétaire, la solution naturelle est de créer une sous-classe MaVue\ndeZend_View et d’y placer ces méthodes.\nPour éviter cette démarche un peu lourde, le Zend Framework permet d’implanter\nles méthodes ajoutées sous forme de helper dont le nom et la syntaxe particulière\nmènent à les traiter comme des méthodes de la Zend_View. Voici un exemple simple.\nOn veut pouvoir disposer, dans chaque vue, de l’URL de base du site. Cette URLest vide si le site est directement dans la racine htdocs du site web, sinon elle doit\ncontenir le chemin d’accès entre htdocs et la racine du site.\nPour constituer correctement les URL placées dans une vue, il faut les préﬁxer par\nl’URL de base. Il serait dangereux de la placer « en dur » dans les vues, sous peine\nd’avoir à changer beaucoup de choses si l’organisation du serveur évolue. On doit\ndonc disposer de cette URL de base dans les scripts de vue.\nPour cela, on place dans le répertoire views/helpers le code suivant :\nExemple 9.7 zscope/application/views/helpers/BaseURL.php :la méthode ajoutée à la vue pour\nobtenir l’URL de base du site.\n<?php\n/∗∗\n∗\n∗Exemple d ’un ’ helper ’ pour la vue , donnant la\n∗base de l ’application .\n∗\n∗/\nclass Zend_View_Helper_BaseUrl\n{\n/∗∗\n∗O n prend simplement l ’U R L de base dans la configuration\n∗\n∗/\n9.5 Le composant Modèle du Zend Framework\n 379\nfunction baseUrl()\n{\n$registry = Zend_Regi stry :: getInstance () ;\n$config = $registry −>get( ’ config ’) ;;\nreturn $config −>app −>base_url ;\n}\n}\nIl s’agit s’une classe dont le nom est préﬁxé par Zend_View_Helper. La partie\nvariable du nom de la classe indique le nom de la méthode étendant la Zend_View,\nsoit, ici, baseUrl().\nOn peut utiliser cette méthode comme si elle appartenait à la vue. Voici par\nexemple comment on insère dans le layout le logo du site en préﬁxant par l’URL de\nbase le chemin d’accès au répertoire images :\n<img src =\" <?php echo $this −>BaseUrl() ;? >/ images / logo .png\"\nborder =\"0\" alt=\"Webscope\" title =\"Accueil\"\n/>\nLa vue Zend est déjà pré-équipée avec de nombreux helpers servant, par exemple,\nà faciliter la production de formulaires. Je vous renvoie à la documentation pour plus\nde détails à ce sujet.\n9.5 LE COMPOSANT MODÈLE DU ZEND FRAMEWORK\nLa technique dite Object-Relational Mapping (ORM) associe une couche orientée-\nobjet à une base relationnelle sous-jacente. Elle est très importante pour réaliser leModèle d’une application, puisque la plupart des objets du modèles sont persistantset doivent être sauvegardés dans la base de données.\n9.5.1 L’ORM du Zend Framework\nZend propose un ORM pour établir la correspondance entre la base et le code PHP .Cet ORM est moins puissant (du moins à l’heure où ces lignes sont écrites) qued’autres comme Ruby On Rails ouHibernate , mais il gagne en simplicité et peut-\nêtre en performances. Cela constitue une manière élégante de cacher la structurerelationnelle et de s’épargner dans de nombreux cas (mais pas tous) l’expression de\nrequêtes SQL répétitives.\nL’ORM du ZF ne s’appuie pas sur de longs documents de conﬁguration XML. Il se\ncontente de réclamer quelques déﬁnitions légères dans des classes dédiées, et fournitensuite des mécanismes sympathiques de parcours dans la base de données en suivantles liens déﬁnis par les clés primaires et étrangères. Toutes les classes ORM d’uneapplication doivent hériter de l’une des trois classes abstraites suivantes.\n1.Zmax_Db_Table_Abstract assure la correspondance avec les tables de la\nbase ;\n380\n Chapitre 9. Introduction au Zend Framework\n2.Zmax_Db_Rowset_Abstract eassure la correspondance avec les ensembles\nde lignes (autrement dit, les résultats de requêtes) ;\n3.Zmax_Db_Row_Abstract assure la correspondance avec les lignes d’une table\nou d’un résultat de requête.\nComme leur nom l’indique, ces classes sont abstraites ;o nn ep e u td o n cp a s\nles instancier directement. Il faut fournir une classe concrète, héritant de\nZmax_Db_Table_Abstract, pour chaque table intervenant dans le modèle ORMde l’application.\n9.5.2 Le modèle ORM de l’application\nLe premier exemple est la classe Artiste, assez simple à déﬁnir puisqu’elle n’a\npas de clé étrangère la liant à une autre table dans notre modèle de données. Lacorrespondance est déﬁnie dans un ﬁchier\nArtiste.php situé dans application/models .\nExemple 9.8 zscope/application/models/Artiste.php :Le modèle de la table Artiste\n<?php\nclass Artiste extends Zend_Db_Table_Abstract\n{\nprotected $_name = ’ Artiste ’ ;\nprotected $_primary = ’ id ’ ;\n// Pas d’auto −incrémentation\nprotected $_sequence = false ;\n}\nCet exemple représente la correspondance minimale d’une classe sous-typant\nZmax_Db_Table_Abstract. Les propriétés suivantes doivent être déﬁnies :\n1.$_name est le nom de la table ;\n2.$_primary est le nom de la clé primaire (un tableau s’il y a plusieurs attri-\nbuts) ;\n3.$_sequence est à true (par défaut) si la clé est auto-incrémentée ; rappelons\nque pour des raisons de portabilité aucune de nos clés n’est auto-incrémentée,\nmais vous pouvez omettre cette propriété et lui laisser sa valeur par défaut sivous choisissez l’auto-incrémentation.\nLa clé primaire peut être obtenue directement de la base si elle n’est pas précisée\n(comme nous l’avons fait dans la classe TableBD implantant le modèle de notre\nMVC light). La faire ﬁgurer explicitement facilite la compréhension de la classe\nORM.\nVoyons maintenant un exemple pour la table Film, dans laquelle ﬁgurent deux\nclés étrangères, l’une vers la table Artiste (le metteur en scène) et l’autre pour le pays.\nPour simpliﬁer, nous ne donnons la correspondance ORM que pour la première.\n9.5 Le composant Modèle du Zend Framework\n 381\nExemple 9.9 zscope/application/models/Film.php :le modèle de la table Film\n<?php\nclass Film extends Zend_Db_Table_Abstract\n{\nprotected $_name = ’Film ’ ;\nprotected $_primary = ’ id ’ ;\n// Pas d’auto −incrémentation de la clé\nprotected $_sequence = false ;\n// Référence à la table Artiste\nprotected $_referenceMap = array (\n\"Realisateur\" = > array ( // L e \"rôle\" de l ’association\n\"columns\" = > ’ id_realisateur ’ , // L a clé étrangère\n\"refTableClass\" = > \"Artiste\" , // L a classe O R M de la\ntable référencée\n\"refColumns\" = > \"id\", // L a clé étrangère référencée\n)\n);\n}\nLe tableau $_referenceMap contient un élément pour chaque table référencée\npar une clé étrangère. Au niveau de l’ORM, on ne donne pas la référence à des tables ,\nmais aux classes ORM qui les encapsulent. Ici, on fait référence à la classe Film\ndéﬁnie précédemment. Le but est bien d’avoir un modèle d’objets se référençant les\nuns les autres, en dissimulant les accès à la base de données.\nChaque élément de $_referenceMap est lui-même un tableau donnant l’infor-\nmation déﬁnissant le lien entre les deux tables sous-jacentes. Elle doit permettre lareconstitution de la jointure pour calculer le lien entre les lignes des deux tables. Onretrouve e toutes les informations de la clause FOREIGN KEY en SQL.\nComme $_referenceMap est un tableau associatif, on donne un nom à l’as-\nsociation qui n’est pas nécessairement le nom de la table référencée, mais désigne\nplutôt le rôle de cette dernière dans l’association. Ici, l’entité référencée dans la table\nArtiste est le réalisateur du ﬁlm, et ce rôle apparaît explicitement comme nom de\nl’association. On peut trouver plusieurs clés étrangères vers la même table, qu’il fautdistinguer par un nom spéciﬁque.\nLe dernier exemple que nous donnerons montre la correspondance pour une\nassociation plusieurs à plusieurs. C’est la table Role qui établit cette association entre\nles ﬁlms et leurs acteurs dans la base de données. Au niveau des classes ORM, nousavons besoin d’une classe Role déﬁnie comme suit :\nExemple 9.10 zscope/application/models/Role.php :le modèle de la table Role\n<?php\nclass Role extends Zend_Db_Table_Abstract\n382\n Chapitre 9. Introduction au Zend Framework\n{\nprotected $_name = ’Role ’ ;\nprotected $_primary = array ( ’ id_film ’ , ’id_acteur ’);\n// Pas d’auto −incrémentation\nprotected $_sequence = false ;\n// Référence a u film et à l ’ artiste\nprotected $_referenceMap = array (\n\"Film\" => array (\n\"columns\" = > ’ id_film ’ , // N o m de la clé étrangère\n\"refTableClass\" = > \"Film\" , // Classe de la table\nréférencée\n\"refColumns\" = > \"id\" // Clé primaire référencée\n),\n\"Artiste\" = > array (\n\"columns\" = > ’ id_acteur ’ , // N o m de la clé étrangère\n\"refTableClass\" = > \"Artiste\" , // Classe de la table\nréférencée\n\"refColumns\" = > \"id\" // Clé primaire référencée\n),\n);\n}\nOn met en œuvre les mêmes principes que précédemment avec le tableau\n$_referenceMap, qui contient cette fois deux entrées.\nUne nouvelle application doit non seulement déﬁnir le schéma relationnel avec\nSQL, mais également le modèle des classes ORM. Il ne semble pas exister à l’heure\nactuelle d’outil pour engendrer automatiquement les classes à partir des tables, maiscela viendra sûrement. Soulignons que les classes ORM héritent d’un ensemble defonctionnalités pour gérer les échanges avec la base de données, mais qu’elles consti-\ntuent aussi une place de choix pour implanter la « logique métier » de l’application.\nDans notre cas cette logique est limitée car notre application est essentiellementorientée vers l’exploitation d’une base de données, sans traitement complexe. Engénéral, le modèle comprend des méthodes déterminant le comportement fonction-nel, « métier », des objets, en plus de leur caractère persistant.\nDernière remarque avant de passer à l’exploitation des fonctionnalités de persis-\ntance : ces classes sont des classes concrètes qui peuvent être instanciées en objetsqui communiquent avec les tables de la base. Elles ont donc besoin d’une connexion.\nCelle-ci n’apparaît pas ici, car elle est déﬁnie une fois pour toutes par l’appel à\nsetDefaultAdapter() dans le ﬁchier\nindex.php .\n9.5 Le composant Modèle du Zend Framework\n 383\n9.5.3 Manipulation des données avec les classes ORM\nLes méthodes suivantes sont héritées par les classes ORM :\n1.find() recherche des lignes en fonction d’une ou plusieurs valeurs de clés\nprimaires et retourne un ensemble de lignes, instance de Zend_Db_Rowset ;\n2.fetchRow() ramène une seule ligne, instance de Zend_Db_Row ;\n3.fetchAll() effectue une recherche générale (il est possible de déﬁnir une\nclause where au préalable) et renvoie un ensemble de lignes ;\n4.info() renvoie un tableau PHP donnant les informations connues sur le\nschéma de la table ;\n5.createRow() crée une ligne ;\n6.insert() insère une ligne dans la base ;\n7.update() effectue une mise à jour.\nRegardons quelques exemples, tous extraits du contrôleur Model de ZS COPE .L e\npremier cherche un ﬁlm d’identiﬁant 1.\nfunction simpletbleAction ()\n{\n$tbl_film = n e w Film () ;\n$this −>view −>film = $tbl_film −>find (1) −>current () ;\n}\nD’abord, on instancie la classe ORM, et on obtient un objet qui fournit une\ninterface orientée-objet avec le contenu de la table relationnelle. Ensuite, on appelle\nla méthode find() qui prend en entrée une valeur de clé primaire (ou un tableau de\nvaleurs) et retourne un rowset que l’on peut parcourir par itération avec des méthodes\ncomme next(), previous() etcurrent(). L’exemple ci-dessus n’est d’ailleurs pas\ntrès robuste car il ne teste pas ce qui se passerait si aucune ligne n’était ramenée.\nQuand une ligne instance de Zmax_Db_Row_Abstract est obtenue, on accède\nà ses propriétés de manière naturelle avec la syntaxe $obj->nom. L’aspect le plus\nintéressant des classes ORM est cependant la possibilité de « naviguer » vers leslignes de la base associées à la ligne courante. L’exemple suivant montre comment,\ndepuis un artiste (pour simpliﬁer, on a mis « en dur » son identiﬁant), on obtient tous\nles ﬁlms mis en scène par cet artiste.\nfunction dependentAction ()\n{\n// O n prend Quentin Tarantino (d ’ identifiant 37)\n$tbl_artiste = n e w Artiste();\n$artiste = $tbl_artiste −>find (37) −>current () ;\n// Maintenant cherchons les films mis en scène\n$films = $artiste −>findFilm () ;\n// Equiv à $artiste −>findDependentRowset (\"Film\");\n// Et on stocke dans la vue\n384\n Chapitre 9. Introduction au Zend Framework\n$this −>view −>artiste = $artiste ;\n$this −>view −>films = $films ;\n}\nIl y a là comme un (petit) tour de magie. La méthode findFilm() n’existe\np a sd a n sl ac l a s s e Artiste.php. L’appel est intercepté grâce à la méthode magique\n__call(), et l’ORM comprend que nous faisons référence à l’association liant un\nﬁlm et son metteur en scène. Ce lien est d’ailleurs déﬁni dans Film.php,p a sd a n s\nArtiste. L’ORM de Zend est assez souple pour reconstituer l’information en allantconsulter la déﬁnition de la classe distante. Une autre syntaxe possible est\n$artiste->$comp->findDependentRowset(\"Film\") .\nCet appel renvoie un ensemble de lignes, que l’on peut ensuite parcourir avec une\nboucle foreach, comme le montre la vue associée à cette action.\nExemple 9.11 zscope/application/views/scripts/model/dependent.phtml :la vue associée à l’action\ndependent\nNous avons trouvé le metteur en scène\n<b>\n<?php echo $this −>artiste −>prenom . \" \" . $t his −>artiste −>nom ; ? >\n</b>\n<p>\nVoici la liste des films q u’il a réalisés :\n</p>\n<ol>\n<?php foreach($this −>films as $film) : ?>\n<li >Films : <?php echo $film −>titre ; ?></li >\n<?php endforeach ; ?>\n</ol >\nBien entendu, une association peut être parcourue dans les deux sens, comme le\nmontre l’exemple suivant où, pour un ﬁlm donné, on cherche son réalisateur.\nfunction referenceAction ()\n{\n// O n prend un film (Vertigo)\n$tbl_film = n e w Film() ;\n$film = $tbl_film −>find (1) −>current () ;\n// O n cherche le \"parent\"\n$artiste = $film −>findParentArtiste () ;\n// ou bien : findParentRow (\" Artiste \");\n// Puis on le place dans la vue\n$this −>view −>film = $ film ;\n$this −>view −>realisateur = $artiste ;\n}\n9.6 Pour conclure . . .\n 385\nFinalement, le dernier exemple montre comment suivre les associations plusieurs\nà plusieurs. La syntaxe de l’appel est\nﬁnd<classeDistante>Via<classeInterm´ ediaire> ,\noù classeInterm´ ediaire est la classe qui implante l’association, et\nclasseDistante la classe située à l’autre bout de l’association impliquant l’objet\ncourant. Concrètement, voici comment à partir d’un ﬁlm on obtient tous ses acteurs.\nfunction manytomanyAction ()\n{\n$tbl_film = n e w Film() ;\n// O n prend le film 6 1 (c’est ’Kill Bill ’)\n$film = $tbl_film −>find (61) −>current () ;\n// Chercher tous les acteurs en passant par Role\n// Equiv à $film −>findManyToManyRowset (\" Artiste \", \"Role \") ;\n$acteurs = $film −>findArtisteViaRole () ;\n// O n place dans la vue\n$this −>view −>film = $ film ;\n$this −>view −>acteurs = $acteurs ;\n}\nEn résumé, le modèle ORM évite dans beaucoup de cas l’alternance entre la\nprogrammation PHP et la programmation SQL et mène à un code plus concis et plus\nlisible. La navigation d’une ligne à l’autre en suivant des associations correspond àune grande part des requêtes SQL, et l’ORM vient donc harmoniser en « tout objet »ces mécanismes.\n9.6 POUR CONCLURE . . .\nNous arrêtons là ce premier tour d’horizon des possibilités du Zend Framework .I l\nmontre quelques aspects essentiels, et reste malgré tout limité à une petite partie descomposants proposés par le ZF , qui ambitionne de couvrir à peu près tous les aspectsenvisageables de la programmation d’applications PHP .\nL’apprentissage d’un framework suppose un certain investissement en temps et en\nefforts de compréhension. Ces efforts sont particulièrement justiﬁés pour des projetsconséquents impliquant des équipes de plusieurs personnes. La documentation du ZFest bien faite et on trouve de plus en plus de tutoriaux sur le Web qui permettent decomprendre en profondeur tel ou tel aspect. J’espère que l’introduction qui précède\nvous aura mis le pied à l’étrier pour continuer dans de bonnes conditions.\n\nRécapitulatif SQL10\nNous présentons, dans ce chapitre, un récapitulatif des commandes SQL découvertes\nau fur et à mesure dans les chapitres précédents, ainsi que de nombreux compléments\nsur la syntaxe du langage. Depuis sa version 4.1, MySQL propose une version de SQL\ntrès complète et conforme à la norme SQL ANSI.\nBien entendu, nous prenons comme exemple la base de données Films qui devrait\nmaintenant vous être familière. Pour faciliter l’apprentissage et éviter de trop mani-puler des identiﬁants abstraits, les exemples sont construits sur une base où les ﬁlmssont identiﬁés par leur titre. Celui-ci sert donc également de clé étrangère. Vouspouvez vous entraîner à SQL directement sur notre site, avec une fonction ajoutée ausite de démonstration W\nEBSCOPE qui permet d’exprimer directement des requêtes\nSQL sur la base de données.\nAu cours de ce chapitre, nous illustrerons nos exemples avec l’échantillon de\nla base Films présenté dans la ﬁgure 10.1. Notez que cette base est incomplète. Il\nn’y a pas d’acteur par exemple pour Kagemusha,e tl ’ a n n é ed en a i s s a n c ed eJ a c q u e s\nDutronc manque. Ces absences serviront à illustrer certains aspects de SQL. Nousavons également supprimé certains attributs pour plus de clarté.\n388\n Chapitre 10. Récapitulatif SQL\ntitre\n année\n id_realisateur\n genre\nImpitoyable\n 1992\n 20\n Western\nVan Gogh\n 1990\n 29\n Drame\nKagemusha\n 1980\n 68\n Drame\nLes pleins pouvoirs\n 1997\n 20\n Policier\nFilm\nid\n nom\n prénom\n année_naissance\n20\n Eastwood\n Clint\n 1930\n21\n Hackman\n Gene\n 1930\n29\n Pialat\n Maurice\n 1925\n30\n Dutronc\n Jacques\n68\n Kurosawa\n Akira\n 1910\nArtiste\ntitre\n id_acteur\n nom_rôle\nImpitoyable\n 20\n William Munny\nImpitoyable\n 21\n Little Bill Dagget\nVan Gogh\n 30\n Van Gogh\nLes pleins pouvoirs\n 21\n Le président\nRôle\nFigure 10.1 — Un échantillon de la base Films\n10.1 SÉLECTIONS\nLes requêtes les plus simples –et les plus courantes– sont celles qui recherchent, dans\nune table, des lignes satisfaisant un ou plusieurs critères de sélection. Par exemple,on recherche les titres des ﬁlms du genre « Drame ».\nmysql> SELECT titre\n-> FROM Film\n-> WHERE genre = ’Drame’;\n+---------------------+| titre |\n+---------------------+| Van Gogh |\n| Kagemusha |\n+---------------------+2 rows in set (0.02 sec)\nLa structure de base d’une requête SQL comprend trois clauses SELECT, FROM et\nWHERE.\n•FROM indique la (ou les) tables dans lesquelles on trouve les attributs utiles à\nla requête. Un attribut peut être« utile » de deux manières (non exclusives) :\n(1) on souhaite afﬁcher son contenu viaSELECT, (2) on souhaite qu’il ait une\nvaleur particulière (une constante ou la valeur d’un autre attribut) viaWHERE.\n•SELECT indique la liste des attributs constituant le résultat.\n10.1 Sélections\n 389\n•WHERE indique les conditions que doivent satisfaire les lignes de la table pour\nfaire partie du résultat.\nLa clause WHERE est optionnelle : toutes les lignes de la tables sont sélectionnées\nsi elle est omise. Voici donc la plus simple des requêtes : elle afﬁche toute la table.\nmysql> SELECT * FROM Film;\n+---------------------+-------+-------------- --+----------+\n| titre | annee | id_realisateur | genre |\n+---------------------+-------+-------------- --+----------+\n| Impitoyable | 1992 | 20 | Western |\n| Van Gogh | 1990 | 29 | Drame |\n| Kagemusha | 1980 | 68 | Drame |\n| Les pleins pouvoirs | 1997 | 20 | Policier |\n+---------------------+-------+-------------- --+----------+\nUn des problèmes rencontrés quand on commence à utiliser SQL (et même\nbeaucoup plus tard ...) est de bien comprendre ce que signiﬁe une requête, quelle que\nsoit sa complexité. Quand il n’y a qu’une table – comme par exemple pour la requêtesélectionnant les ﬁlms dont le genre est « Drame » – l’interprétation est simple : on\nparcourt les lignes de la table Film. Pour chaque ligne, si l’attribut genre a pour valeur\n« Drame », on place l’attribut titre dans le résultat. Même si cette interprétation\npeut paraître élémentaire, elle devient très utile quand on a plusieurs tables dans le\nFROM. Une remarque en passant : il s’agit d’une manière d’expliquer la requête, ce qui\nne signiﬁe pas du tout que MySQL l’exécute de cette façon.\nREMARQUE – Rappelons que, sous Unix, MySQL distingue majuscules et minuscules dans\nle nom des tables.\n10.1.1 Renommage, fonctions et constantes\nLe résultat d’une requête SQL est toujours une table. On peut considérer en première\napproche que le calcul consiste à « découper », horizontalement et verticalement, latable indiquée dans le FROM. On peut aussi :\n•renommer les attributs ;\n•appliquer des fonctions aux attributs de chaque ligne ;\n•introduire des constantes.\nFonctions MySQL\nLes fonctions applicables aux valeurs des attributs sont par exemple les opérationsarithmétiques ( +, *, ...) pour les attributs numériques, les manipulations de chaînes\nde caractères (concaténation, sous-chaînes, mise en majuscules, ...). MySQL propose\nun ensemble très riche de fonctions (voir annexe B). Nous proposons quelques\nexemples ci-dessous.\n•Donner la longueur des titres des ﬁlms.\n390\n Chapitre 10. Récapitulatif SQL\nmysql> SELECT LENGTH(titre) FROM Film;\n+---------------+| LENGTH(titre) |+---------------+\n|1 1|\n|8 |\n|9 |\n|1 9|\n+---------------+\n4 rows in set (0.00 sec)\nPour faciliter l’analyse syntaxique d’une requête, MySQL interdit tout blanc\nentre le nom de la fonction et la parenthèse ouvrante.\n•Donner les 3 premières lettres du titre, concaténées avec l’année.\nmysql> SELECT CONCAT(SUBSTRING(titre,1,3),annee) FROM Film;\n+------------------------------------+\n| CONCAT(SUBSTRING(titre,1,3),annee) |\n+------------------------------------+| Imp1992 |\n| Van1990 |\n| Kag1980 |\n| Les1997 |\n+------------------------------------+\nLa norme SQL préconise « ||» pour exprimer la concaténation, mais MySQL\na choisi d’utiliser ce symbole pour le « ou » logique.\n•Donner le nom des artistes et leur âge (arrondi grosièrement).\nmysql> SELECT nom, YEAR(SYSDATE()) - annee_naissance FROM Artiste;+----------+-----------------------------------+| nom | YEAR(SYSDATE()) - annee_naissance |\n+----------+-----------------------------------+\n| Eastwood | 74 |\n| Hackman | 74 |\n| Pialat | 79 |\n| Dutronc | NULL |\n| Kurosawa | 94 |\n+----------+-----------------------------------+\nLes fonctions de manipulation de date constituent (avec celles consacrées\naux chaînes de caractères) une large partie des fonctions MySQL. SYSDATE()\ndonne la date courante, au format standard AAAA-MM-JJ HH:MM:SS,e t\nYEAR() renvoie l’année.\n•Finalement, on peut utiliser SQL pour exécuter des fonctions, sans sélection-\nner des lignes dans une table. Dans ce cas, le FROM est inutile (il s’agit d’une\nspéciﬁcité de MySQL). La requête suivante ajoute 3 mois à la date courante,\nàl ’ a i d ed el af o n c t i o n DATE_ADD().\n10.1 Sélections\n 391\nmysql> select DATE_ADD(NOW(), INTERVAL 3 MONTH);\n+-----------------------------------+| DATE_ADD(NOW(), INTERVAL 3 MONTH) |+-----------------------------------+\n| 2005-02-23 18:43:01 |\n+-----------------------------------+\nRenommage\nLes noms des attributs sont par défaut ceux indiqués dans la clause SELECT,\nmême en présence d’expressions complexes. L’expression YEAR(SYSDATE()) -\nannee_naissance peut donc tenir lieu de nom d’attribut pour le résultat, ce qui est\npeu pratique. Pour renommer les attributs, on utilise le mot-clé AS. Ce mot-clé est\noptionnel pour MySQL.\nmysql> SELECT nom, YEAR(SYSDATE()) - annee_naissance AS age FROM Artiste;+----------+------+\n| nom | age |+----------+------+\n| Eastwood | 70 |\n| Hackman | 70 || Pialat | 75 || Dutronc | NULL |\n| Kurosawa | 90 |\n+----------+------+\nOn remarque que le calcul, appliqué à un NULL, donne un NULL. Nous revien-\ndrons sur la gestion des NULL plus loin.\nConstantes\nOn peut combiner, dans la clause SELECT, les noms des attributs de la table du FROM\navec des constantes, ou littéraux , dont la valeur sera donc identique sur chaque ligne\ndu résultat. Voici deux exemples, le second créant une ancre HTML à partir du\ncontenu de la table.\nmysql> SELECT ’Cette ligne correspond au film ’, titre FROM Film;\n+---------------------------------+---------- -----------+\n| Cette ligne correspond au film | titre |\n+---------------------------------+---------- -----------+\n| Cette ligne correspond au film | Impitoyable || Cette ligne correspond au film | Van Gogh |\n| Cette ligne correspond au film | Kagemusha |\n| Cette ligne correspond au film | Les pleins pouvoirs |+---------------------------------+---------- -----------+\n392\n Chapitre 10. Récapitulatif SQL\nmysql> SELECT CONCAT(’<a href=\"Acteur.php?nom=’,\n-> nom, ’\">Nom</a>’) AS AncreActeur FROM Artiste;\n+-------------------------------------------+\n| AncreActeur |\n+-------------------------------------------+| <a href=\"Acteur.php?nom=Eastwood\">Nom</a> || <a href=\"Acteur.php?nom=Hackman\">Nom</a> |\n| <a href=\"Acteur.php?nom=Pialat\">Nom</a> |\n| <a href=\"Acteur.php?nom=Dutronc\">Nom</a> || <a href=\"Acteur.php?nom=Kurosawa\">Nom</a> |\n+-------------------------------------------+\nOn peut introduire des apostrophes doubles (\") dans une chaîne de caractères\nencadrée par des guillemets simples.\n10.1.2 La clause DISTINCT\nL’utilisation des clés permet d’éviter les doublons dans les tables stockées, mais il\npeuvent apparaître dans le résultat d’une requête. La clause DISTINCT, placée après\nleSELECT, permet de supprimer ces doublons. Voici deux exemples, avec et sans\nDISTINCT.\nmysql> SELECT annee_naissance FROM Artiste;\n+-----------------+\n| annee_naissance |\n+-----------------+| 1930 |\n| 1930 |\n| 1925 |\n| NULL |\n| 1910 |\n+-----------------+\nmysql> SELECT DISTINCT annee_naissance FROM Artiste;\n+-----------------+\n| annee_naissance |\n+-----------------+| NULL |\n| 1910 |\n| 1925 |\n| 1930 |\n+-----------------+\nOn trouve deux fois la valeur 1930 dans le premier résultat, et une seule fois dans\nle second. Il est également intéressant de constater que le second résultat est présenté\nen ordre croissant. De fait, la clause DISTINCT implique un tri préalable des lignes\ndu résultat qui rassemble les doublons et permet de les éliminer facilement. Uneconséquence, dont il faut savoir tenir compte, est que l’élimination des doublons\npeut être une opération coûteuse si le résultat est de taille importante.\n10.1 Sélections\n 393\n10.1.3 La clause ORDER BY\nIl est possible de trier le résultat d’une requête avec la clause ORDER BY suivie de la\nliste des attributs servant de critères au tri, même si ces derniers n’apparaissent pas\ndans le SELECT. Par défaut, le tri se fait en ordre croissant. On peut ajouter le mot-clé\nDESC après la liste des attributs pour demander un tri en ordre décroissant.\nmysql> SELECT titre, genre FROM Film ORDER BY genre, annee;\n+---------------------+----------+\n| titre | genre |\n+---------------------+----------+\n| Kagemusha | Drame |\n| Van Gogh | Drame |\n| Les pleins pouvoirs | Policier |\n| Impitoyable | Western |\n+---------------------+----------+\nLe tri sur le le résultat d’une fonction nécessite d’appliquer la fonction dans la\nclause SELECT, et de donner un nom à l’attribut obtenu avec AS.\nmysql> SELECT nom, YEAR(SYSDATE()) - annee_naissance AS age\n-> FROM Artiste-> ORDER BY age;\n+----------+------+\n| nom | age |+----------+------+\n| Dutronc | NULL |\n| Eastwood | 70 || Hackman | 70 |\n| Pialat | 75 |\n| Kurosawa | 90 |+----------+------+\nOn peut trier aléatoirement le résultat d’une requête avec ORDER BY RAND(),\nRAND() étant la fonction qui engendre des nombres aléatoirement.\nLa clause ORDER BY, optionnelle, est toujours la dernière dans un ordre SQL.\n10.1.4 La clause WHERE\nDans la clause WHERE, on spéciﬁe une condition portant sur les attributs des tables du\nFROM. On utilise pour cela de manière standard le AND,l e OR,l e NOTet les parenthèses\npour changer l’ordre de priorité des opérateurs booléens.\n394\n Chapitre 10. Récapitulatif SQL\nmysql> SELECT titre, annee\n-> FROM Film\n-> WHERE genre = ’Policier’-> AND (annee > 1990 AND annee <= 1999) ;\n+---------------------+-------+| titre | annee |\n+---------------------+-------+\n| Les pleins pouvoirs | 1997 |\n+---------------------+-------+\nLes opérateurs de comparaison sont <,<=,>,>=,=,e t<> pour exprimer la\ndifférence (!= est également possible). Pour obtenir une recherche par intervalle, on\npeut également utiliser le mot-clé BETWEEN. La requête précédente est équivalente à :\nSELECT titre, annee\nFROM Film\nWHERE genre = ’Policier’\nAND annee BETWEEN 1990 AND 1999\nVoici une requête avec ORetNOT: on recherche les ﬁlms qui ne sont ni des drames,\nni des policiers.\nmysql> SELECT * FROM Film\n-> WHERE NOT (genre =’Drame’ OR genre=’Policier’);\n+-------------+-------+----------------+ ---------+\n| titre | annee | id_realisateur | genre |+-------------+-------+----------------+ ---------+\n| Impitoyable | 1992 | 20 | Western |\n+-------------+-------+----------------+ ---------+\nLeOR, qui permet d’accepter plusieurs valeurs pour un attribut, peut s’exprimer\nplus simplement en rassemblant ces valeurs dans un ensemble, et en indiquant avec\nINque cet attribut doit en faire partie.\nmysql> SELECT * FROM Film\n-> WHERE genre NOT IN (’Drame’,’Policier’);\n+-------------+-------+----------------+ ---------+\n| titre | annee | id_realisateur | genre |\n+-------------+-------+----------------+ ---------+\n| Impitoyable | 1992 | 20 | Western |\n+-------------+-------+----------------+ ---------+\nOn peut effectuer des comparaisons non seulement entre un attribut et une\nconstante, comme dans les exemples ci-dessus, mais également entre deux attributs.\nVoici la requête qui sélectionne tous les ﬁlms dans lesquels un rôle et le titre du ﬁlmsont identiques.\n10.1 Sélections\n 395\nmysql> SELECT *\n-> FROM Role\n-> Where titre=nom_role;\n+----------+-----------+----------+\n| titre | id_acteur | nom_role |\n+----------+-----------+----------+| Van Gogh | 30 | Van Gogh |\n+----------+-----------+----------+\nChaînes de caractères\nLes comparaisons de chaînes de caractères soulèvent quelques problèmes délicats.\n1. Attention aux différences entre chaînes de longueur ﬁxe et chaînes de lon-\ngueur variable. Les premières sont complétées par des blancs (’ ’), pas les\nsecondes.\n2. Si les chaînes de caractères sont de type BINARY VARCHAR ouBLOB,M y S Q L\ndistingue majuscules et minuscules, et ’IMPITOYABLE’ est considéré comme\ndifférent de ’Impitoyable’. C’est d’ailleurs le comportement par défaut d’autresSGBD, comme ORACLE.\nIl est préférable d’utiliser toujours des chaînes de longueur variable, de type\nVARCHAR ouTEXT. Les opérateurs de comparaison donnent alors les résultats attendus\nintuitivement.\nLes recherches sur chaînes de caractères demandent des fonctionnalités plus éten-\ndues que celles sur les numériques. MySQL fournit des options pour les recherchespar motif ( pattern matching ) à l’aide de la clause LIKE, conformes à la norme SQL\nANSI :\n1. le caractère « _ » désigne n’importe quel caractère ;\n2. le caractère « %’ » désigne n’importe quelle chaîne de caractères.\nPar exemple, voici la requête cherchant tous les artistes dont la deuxième lettre\ndu nom est un ’a’.\nmysql> SELECT * FROM Artiste WHERE nom LIKE ’_a%’;\n+----+----------+--------+-----------------+\n| id | nom | prenom | annee_naissance |\n+----+----------+--------+-----------------+| 20 | Eastwood | Clint | 1930 |\n| 21 | Hackman | Gene | 1930 |\n+----+----------+--------+-----------------+\n396\n Chapitre 10. Récapitulatif SQL\nQuels sont les titres de ﬁlm qui ne contiennent pas le caractère blanc ?\nmysql> SELECT * FROM Film WHERE titre NOT LIKE ’% %’;\n+-------------+-------+----------------+ ---------+\n| titre | annee | id_realisateur | genre |+-------------+-------+----------------+ ---------+\n| Impitoyable | 1992 | 20 | Western |\n| Kagemusha | 1980 | 68 | Drame |\n+-------------+-------+----------------+ ---------+\n10.1.5 Dates\nTous les SGBD proposaient bien avant la normalisation leur propre format de date,\net la norme n’est de ce fait pas suivie par tous. MySQL est assez proche de la normeSQL ANSI, en raison de son apparition relativement tardive.\nUne date est spéciﬁée par une chaîne de caractères au format ’AAAA-MM-JJ’,\npar exemple ’2004-03-01’ pour le premier mars 2004. Les zéros sont nécessaires\naﬁn que le mois et le quantième du jour comprennent systématiquement deuxchiffres, mais le tiret est optionnel. On peut compléter une date avec l’horaire auformat ’HH:MM:SS’, ce qui correspond à une valeur du type DATETIME.M y S Q L\nfait son possible pour interpréter correctement la chaîne de caractères proposée, etconvertit une DATE enDATETIME ou inversement, selon les besoins.\nOn peut effectuer des sélections sur les dates à l’aide des comparateurs usuels. Sur\nla table Message de la base Film, voici comment sélectionner les messages du 3 avril\n2004.\nSELECT * FROM Message WHERE date_creation = ’2004-04-03’\nL’attribut date_creation,d et y p e DATETIME, est converti en DATE (par suppres-\nsion de l’horaire) pour être comparé à ’2004-04-03’.\nMySQL propose de nombreuses fonctions permettant de calculer des écarts de\ndates, d’ajouter des mois ou des années à des dates, etc : voir l’annexe B.\n10.1.6 Valeurs nulles\nLa valeur de certains attributs peut être inconnue ; on parle alors de valeur nulle ,\ndésignée par le mot-clé NULL. Il est très important de comprendre que la « valeur\nnulle » n’est pas une valeur mais une absence de valeur, et que l’on ne peut lui\nappliquer aucune des opérations ou comparaisons usuelles. En conséquence,\n•toute opération ou fonction appliquée à NULL donne pour résultat NULL ;\n•toute comparaison avec NULL donne un résultat qui n’est ni vrai, ni faux mais\nune troisième valeur booléenne, UNKNOWN.\n10.1 Sélections\n 397\nLa présence de NULL peut produire des effets surprenants. Par exemple, la requête\nsuivante\nSELECT *\nFROM Artiste\nWHERE annee_naissance <= 1950 OR annee_naissance >= 1950\ndevrait en principe ramener tous les artistes. En fait, ’Dutronc’ ne ﬁgurera pas dans\nle résultat car annee_naissance est à NULL, et la comparaison a pour résultat\nUNKNOWN.\nAutre piège : NULL est un mot-clé, pas une constante. Une comparaison comme\nannee_naissance = NULL ne sera pas correctement interprétée par MySQL.\nmysql> select * from Artiste WHERE annee_naissance = NULL;\nEmpty set (0.00 sec)\nLe test correct de l’absence de valeur dans une colonne est xIS NULL, l’inverse\nétant IS NOT NULL).\nmysql> select * from Artiste WHERE annee_naissance IS NULL;+----+---------+---------+-----------------+\n| id | nom | prenom | annee_naissance |\n+----+---------+---------+-----------------+| 30 | Dutronc | Jacques | NULL |\n+----+---------+---------+-----------------+\nDès que l’on commence à exprimer des clauses WHERE compliquées, la présence\ndeNULL dans la table devient difﬁcile à manipuler. Il existe, dans la norme SQL\nANSI, des règles très précises pour la prise en compte des NULL, basées les valeurs\nsuivantes pour TRUE, FALSE etUNKNOWN :TRUE vaut 1, FALSE 0e tUNKNOWN 1/2. Les\nconnecteurs logiques donnent alors les résultats suivants :\n1.xANDy=min(x,y)\n2.xORy=max( x,y)\n3.NOTx=1−x\nLes conditions exprimées dans une clause WHERE sont évaluées pour chaque ligne,\net ne sont conservées dans le résultat que les lignes pour lesquelles cette évaluation\ndonne TRUE. Reprenons la requête déjà vue ci-dessus.\nSELECT *\nFROM ArtisteWHERE annee_naissance <= 1950 OR annee_naissance >= 1950\nLa ligne « Jacques Dutronc » n’a pas de valeur pour annee_naissance. Les deux\ncomparaisons du WHERE ont pour valeur 1/2, et le ORa pour valeur max( 1/2,1/2)=\n1/2, ce qui explique que la ligne ne fasse pas partie du résultat.\n398\n Chapitre 10. Récapitulatif SQL\nEn résumé, le NULL est une source de problèmes : dans la mesure du possible il faut\nl’éviter au moment où on déﬁnit la table en spéciﬁant la contrainte NOT NULL ou en\nimposant une valeur par défaut. Si la valeur par défaut n’est pas ﬁxée à la création\nde la table, on peut en donner une au moment de l’exécution de la requête avec lafonction IFNULL() qui remplace une valeur NULL par son deuxième argument.\nmysql> SELECT IFNULL(annee_naissance, ’Pas de date de naissance !?’)\n-> FROM Artiste;\n+--------------------------------------------- -----------+\n| IFNULL(annee_naissance, ’Pas de date de naissance !?’) |\n+--------------------------------------------- -----------+\n| 1930 |\n| 1930 |\n| 1925 |\n| Pas de date de naissance !? |\n| 1910 |\n+--------------------------------------------- -----------+\n10.1.7 Clauses spécifiques à MySQL\nLa clause LIMIT peut être placée à la ﬁn de toute requête SQL, et indique le nombre\nmaximal de lignes dans le résultat.\nmysql> SELECT *\n-> FROM Film\n-> LIMIT 3;\n+-------------+-------+----------------+ ---------+\n| titre | annee | id_realisateur | genre |+-------------+-------+----------------+ ---------+\n| Impitoyable | 1992 | 20 | Western |\n| Van Gogh | 1990 | 29 | Drame |\n| Kagemusha | 1980 | 68 | Drame |\n+-------------+-------+----------------+ ---------+\nSi on utilise deux chiffres comme, par exemple, LIMIT 1,3, le premier indique le\nnuméro de la ligne à partir de laquelle la limite s’applique, les lignes étant numérotées\nà partir de 0.\nmysql> SELECT *\n-> FROM Film\n-> LIMIT 1,3;\n+---------------------+-------+--------------- -+----------+\n| titre | annee | id_realisateur | genre |\n+---------------------+-------+--------------- -+----------+\n| Van Gogh | 1990 | 29 | Drame |\n| Kagemusha | 1980 | 68 | Drame |\n| Les pleins pouvoirs | 1997 | 20 | Policier |\n+---------------------+-------+--------------- -+----------+\n10.2 Jointures\n 399\nAu lieu d’afﬁcher à l’écran, on peut placer le résultat d’un ordre SELECT dans un\nﬁchier :\nSELECT *\nINTO OUTFILE ’./svfilm.txt’\nFROM Film\nIl faut disposer du privilège file pour utiliser INTO OUTFILE. On obtient alors\ntous les droits d’accès du serveur mysqld .\nPar défaut, le ﬁchier est créé dans le répertoire contenant les bases de données.\nOn peut indiquer explicitement le chemin d’accès, à condition que le programme\nclient mysql ait le droit d’écriture.\nLes lignes de la table sont écrites en séparant chaque valeur par une tabulation,\nce qui permet de recharger le ﬁchier par la suite avec la commande LOAD DATA\n(voir la section présentant cette commande, page 29). On peut indiquer, après lenom du ﬁchier, les options de séparation des lignes et des attributs, avec une syntaxe\nidentique à celle utilisée pour LOAD DATA : voir annexe B.\n10.2 JOINTURES\nLa jointure est une des opérations les plus utiles (et l’une des plus courantes)\npuisqu’elle permet d’exprimer des requêtes portant sur des données réparties dansplusieurs tables. La syntaxe pour exprimer des jointures avec SQL est une extension\ndirecte de celle étudiée précédemment dans le cas des sélections simples : on donne\nla liste des tables concernées dans la clause FROM, et on exprime les critères de\nrapprochement entre ces tables dans la clause WHERE.\n10.2.1 Interprétation d’une jointure\nPrenons l’exemple de la requête donnant le titre des ﬁlms avec le nom et le prénomde leur metteur en scène.\nmysql> SELECT titre, prenom, nom\n-> FROM Film, Artiste\n-> WHERE id_realisateur = id;\n+---------------------+---------+----------+\n| titre | prenom | nom |\n+---------------------+---------+----------+\n| Impitoyable | Clint | Eastwood |\n| Les pleins pouvoirs | Clint | Eastwood |\n| Van Gogh | Maurice | Pialat |\n| Kagemusha | Akira | Kurosawa |\n+---------------------+---------+----------+\nPour bien comprendre ce que signiﬁe une jointure, ce qui est parfois difﬁcile\nquand on commence à utiliser SQL, on peut généraliser l’interprétation donnée\n400\n Chapitre 10. Récapitulatif SQL\ndans le cas d’une seule table. La clause FROM, dans les deux cas, déﬁnit un « espace\nde recherche » qui, quand il y a une seule table, correspond à toutes les lignes de\ncelle-ci. Quand il y a deux tables, cet espace de recherche est constitué de toutes lescombinaisons possibles des lignes des deux tables.\nLa ﬁgure 10.2 montre toutes ces combinaisons sous la forme d’une table, compre-\nnant 4 ×5=20 lignes construites à partir des 4 lignes de Film et des cinq lignes de\nArtiste . Appelons-la FilmXArtiste : elle peut être obtenue avec la requête.\nSELECT titre, prenom, nom\nFROM Film, Artiste\nDans cette table, beaucoup de lignes ne nous intéressent pas, comme celles qui\nassocient Pialat et Impitoyable ,o uVan Gogh et Kurosawa. En fait on ne veut garder\nque celles pour lesquelles l’attribut id_realisateur est égal à l’attribut id,s o i t4\nlignes.\ntitre\n annee\n id_real.\n genre\n id\n nom\n prenom\n annee_naiss.\nImpitoyable\n 1992\n 20\n Western\n 20\n Eastwood\n Clint\n 1930\nImpitoyable\n 1992\n 20\n Western\n 21\n Hackman\n Gene\n 1930\nImpitoyable\n 1992\n 20\n Western\n 29\n Pialat\n Maurice\n 1925\nImpitoyable\n 1992\n 20\n Western\n 30\n Dutronc\n Jacques\nImpitoyable\n 1992\n 20\n Western\n 68\n Kurosawa\n Akira\n 1910\nVan Gogh\n 1990\n 29\n Drame\n 20\n Eastwood\n Clint\n 1930\nVan Gogh\n 1990\n 29\n Drame\n 21\n Hackman\n Gene\n 1930\nVan Gogh\n 1990\n 29\n Drame\n 29\n Pialat\n Maurice\n 1925\nVan Gogh\n 1990\n 29\n Drame\n 30\n Dutronc\n Jacques\nVan Gogh\n 1990\n 29\n Drame\n 68\n Kurosawa\n Akira\n 1910\nKagemusha\n 1980\n 68\n Drame\n 20\n Eastwood\n Clint\n 1930\nKagemusha\n 1980\n 68\n Drame\n 21\n Hackman\n Gene\n 1930\nKagemusha\n 1980\n 68\n Drame\n 29\n Pialat\n Maurice\n 1925\nKagemusha\n 1980\n 68\n Drame\n 30\n Dutronc\n Jacques\nKagemusha\n 1980\n 68\n Drame\n 68\n Kurosawa\n Akira\n 1910\nLes pleins pouvoirs\n 1997\n 20\n Policier\n 20\n Eastwood\n Clint\n 1930\nLes pleins pouvoirs\n 1997\n 20\n Policier\n 21\n Hackman\n Gene\n 1930\nLes pleins pouvoirs\n 1997\n 20\n Policier\n 29\n Pialat\n Maurice\n 1925\nLes pleins pouvoirs\n 1997\n 20\n Policier\n 30\n Dutronc\n Jacques\nLes pleins pouvoirs\n 1997\n 20\n Policier\n 68\n Kurosawa\n Akira\n 1910\nFigure 10.2 —T a b l e FilmXArtiste , définie par la clause FROM Film, Artiste .\nLa jointure est simplement une sélection sur cette table FilmXArtiste , que l’on\npourrait exprimer de la manière suivante si cette table existait.\nSELECT titre, prenom, nomFROM FilmXArtiste\nWHERE id_realisateur = id\n10.2 Jointures\n 401\nL’interprétation d’une jointure est donc une généralisation de l’interprétation\nd’un ordre SQL portant sur une seule table. On parcourt toutes les lignes déﬁnies par\nla clause FROM, et on leur applique la condition exprimée dans le WHERE. Finalement,\non ne garde que les attributs spéciﬁés dans la clause SELECT. C’est vrai quel que soit\nle nombre de tables utilisées dans le FROM.\nUne remarque importante pour ﬁnir : la jointure est une opération qui consiste\nà reconstituer une association entre entités (voir chapitre 4), dans notre exemple\nl’association entre un ﬁlm et son metteur en scène. Comme nous avons vu que cette\nassociation était représentée dans un schéma relationnel par le mécanisme de clésprimaires et clés étrangères, la plupart des jointures s’expriment par une égalité entrela clé primaire d’une table et la clé étrangère correspondante dans l’autre table. C’estle cas dans l’exemple ci-dessus, où id_realisateur est la clé étrangère, dans Film,\ncorrespondant à la clé primaire iddans Artiste .\n10.2.2 Gestion des ambiguïtés\nDans l’exemple précédent, il n’y a pas d’ambiguïté sur les noms des attributs : titre\netid_realisateur viennent de la table Film, tandis que nom, prenom etid\nviennent de la table Artiste. Il peut arriver (il arrive de fait fréquemment) qu’un\nmême nom d’attribut soit partagé par plusieurs tables impliquées dans une jointure.Dans ce cas, on résout l’ambiguïté en préﬁxant l’attribut par le nom de sa table.\nExemple : afﬁcher, pour chaque ﬁlm, les rôles du ﬁlm.\nmysql> SELECT Film.titre, nom_role\n-> FROM Film, Role\n-> WHERE Film.titre = Role.titre;\n+---------------------+--------------------+\n| titre | nom_role |\n+---------------------+--------------------+\n| Impitoyable | William Munny |\n| Impitoyable | Little Bill Dagget |\n| Van Gogh | Van Gogh |\n| Les pleins pouvoirs | Le pr´ esident |\n+---------------------+--------------------+\nIl n’y a pas ici de problème pour nom_role qui désigne sans ambiguïté possible un\nattribut de la table Role. Si, en revanche, on ne préﬁxe pas titre par la table dont il\nprovient, MySQL ne sait pas évaluer la requête.\nmysql> SELECT titre, nom_role\n-> FROM Film, Role\n-> WHERE titre = titre;\nERROR 1052: Column: ’titre’ in field list is ambiguous\nComme il peut être fastidieux de répéter intégralement le nom d’une table, on\npeut lui associer un synonyme et utiliser ce synonyme en tant que préﬁxe. La requête\nprécédente devient par exemple :\n402\n Chapitre 10. Récapitulatif SQL\nSELECT f.titre, nom_role\nFROM Film AS f, Role AS rWHERE f.titre = r.titre\nPour obtenir le nom de l’acteur qui a joué le rôle, il faut effectuer une jointure\nsupplémentaire avec la table Artiste .\nmysql> SELECT f.titre, prenom, nom, nom_role\n-> FROM Film AS f, Role AS r, Artiste-> WHERE f.titre = r.titre\n-> AND id_acteur = id;\n+---------------------+---------+----------+---- ----------------+\n| titre | prenom | nom | nom_role |\n+---------------------+---------+----------+---- ----------------+\n| Impitoyable | Clint | Eastwood | William Munny |\n| Impitoyable | Gene | Hackman | Little Bill Dagget || Van Gogh | Jacques | Dutronc | Van Gogh |\n| Les pleins pouvoirs | Gene | Hackman | Le pr´ esident |+---------------------+---------+----------+---- ----------------+\nOn a une jointure entre Film etRole, une autre entre Role etArtiste . En ajoutant\nune jointure entre Artiste etFilm, on obtient les metteurs en scène qui ont joué dans\nleur propre ﬁlm.\nmysql> SELECT f.titre, prenom, nom, nom_role\n-> FROM Film AS f, Role AS r, Artiste-> WHERE f.titre = r.titre-> AND id_acteur = id\n-> AND id = id_realisateur;\n+-------------+--------+----------+----- ----------+\n| titre | prenom | nom | nom_role |+-------------+--------+----------+----- ----------+\n| Impitoyable | Clint | Eastwood | William Munny |\n+-------------+--------+----------+----- ----------+\nIl n’y a pas d’ambiguïté sur les noms d’attributs, à part pour titre, donc il est\ninutile en l’occurrence d’employer des synonymes. Il existe en revanche une situation\noù l’utilisation des synonymes est indispensable : celle ou l’on souhaite effectuer une\njointure d’une table avec elle-même.\nConsidérons la requête suivante : Donner les paires d’artistes qui sont nés la même\nannée . Ici toutes les informations nécessaires sont dans la seule table Artiste,\nmais on construit une ligne dans le résultat avec deux lignes de la table. Tout se\npasse comme si on devait faire la jointure entre deux versions distinctes de la\ntable Artiste. On résout le problème en utilisant deux synonymes distincts (nous\nomettons le mot-clé ASqui est optionnel).\n10.2 Jointures\n 403\nmysql> SELECT a1.nom, a2.nom\n-> FROM Artiste a1, Artiste a2\n-> WHERE a1.annee_naissance = a2.annee_naissance;\n+----------+----------+\n| nom | nom |\n+----------+----------+| Eastwood | Eastwood |\n| Hackman | Eastwood |\n| Eastwood | Hackman || Hackman | Hackman |\n| Pialat | Pialat |\n| Kurosawa | Kurosawa |+----------+----------+\nLe résultat obtenu est techniquement correct, mais cela ne nous intéresse pas\nde savoir qu’un artiste est né la même année que lui-même, ou d’avoir les paires\n[Hackman, Eastwood], puis [Eastwood, Hackman]. Pour éliminer les lignes inutiles,il sufﬁt d’enrichir un peu la clause WHERE.\nmysql> SELECT a1.nom, a2.nom\n-> FROM Artiste a1, Artiste a2\n-> WHERE a1.annee_naissance = a2.annee_naissance\n-> AND a1.id < a2.id;\n+----------+---------+\n| nom | nom |+----------+---------+\n| Eastwood | Hackman |\n+----------+---------+\nOn peut imaginer que a1eta2sont deux « curseurs » qui parcourent indépendam-\nment la table Artiste et permettent de constituer des couples de lignes auxquelles\non applique la condition de jointure.\nSi on recherche maintenant les ﬁlms avec leur metteur en scène, ainsi que les\nacteurs qui y ont joué un rôle, on obtient la requête suivante.\nmysql> SELECT f.titre, MES.nom AS nom_realisateur,\n-> Acteur.nom AS nom_acteur, nom_role\n-> FROM Film AS f, Role AS r, Artiste MES, Artiste Acteur-> WHERE f.titre = r.titre-> AND id_acteur = Acteur.id\n-> AND MES.id = id_realisateur;\n+---------------------+-----------------+---- --------+------- -------------+\n| titre | nom_realisateur | nom_acteur | nom_role |\n+---------------------+-----------------+---- --------+------- -------------+\n| Impitoyable | Eastwood | Eastwood | William Munny |\n| Impitoyable | Eastwood | Hackman | Little Bill Dagget || Van Gogh | Pialat | Dutronc | Van Gogh |\n| Les pleins pouvoirs | Eastwood | Hackman | Le pr´ esident |+---------------------+-----------------+---- --------+------- -------------+\n404\n Chapitre 10. Récapitulatif SQL\nLe module de recherche du site Films (voir page 289) est basé sur des jointures et\ndes sélections assez complexes, combinant les fonctionnalités vues jusqu’à présent.\n10.2.3 Jointures externes\nQuand on effectue la jointure entre Film etRole pour obtenir les rôles d’un ﬁlm, rien\nn’apparaît pour le ﬁlm Kagemusha.\nmysql> SELECT f.titre, nom_role\n-> FROM Film AS f, Role AS r\n-> WHERE f.titre = r.titre;\n+---------------------+---------------------+| titre | nom_role |\n+---------------------+---------------------+| Impitoyable | William Munny |\n| Impitoyable | Little Bill Dagget |\n| Van Gogh | Van Gogh |\n| Les pleins pouvoirs | Le pr´ esident |\n+---------------------+---------------------+\nEn effet, pour ce ﬁlm, aucun rôle n’a été inséré dans la base de données. Pour\néviter cet effet parfois indésirable, on peut effectuer une jointure externe .C et y p ed e\njointure prend une table comme table directrice, conventionnellement considérée\ncomme la table de gauche, et utilise la table de droite comme table optionnelle. Si,pour une ligne de la table de gauche, on trouve une ligne satisfaisant le critère dejointure dans la table de droite, alors la jointure s’effectue normalement. Sinon lesattributs provenant de la table de droite sont afﬁchés à NULL.\nLa clause de jointure externe est LEFT OUTER JOIN et le critère de jointure doit\nêtre précédé du mot-clé ON. Voici la jointure externe entre Film etRole. Le mot-clé\nOUTER est en optionnel.\nmysql> SELECT Film.titre, nom_role\n-> FROM Film LEFT JOIN Role ON Film.titre=Role.titre;\n+---------------------+---------------------+\n| titre | nom_role |\n+---------------------+---------------------+\n| Impitoyable | William Munny |\n| Impitoyable | Little Bill Dagget || Van Gogh | Van Gogh |\n| Kagemusha | NULL |\n| Les pleins pouvoirs | Le pr´ esident |+---------------------+---------------------+\nComme il est fréquent que la jointure porte sur des attributs portant le même\nnom dans les deux tables, MySQL (qui suit en cela la norme SQL ANSI bien mieux\nque la plupart des autres SGBD) propose une jointure dit « naturelle » qui s’effectue,implicitement, en testant l’égalité de tous les attributs communs aux deux tables.Dans l’exemple ci-dessous, la jointure se fait donc sur titre.\n10.3 Opérations ensemblistes\n 405\nmysql> SELECT Film.titre, nom_role\n-> FROM Film NATURAL LEFT JOIN Role;\n+---------------------+---------------------+\n| titre | nom_role |\n+---------------------+---------------------+| Impitoyable | William Munny || Impitoyable | Little Bill Dagget |\n| Van Gogh | Van Gogh |\n| Kagemusha | NULL |\n| Les pleins pouvoirs | Le pr´ esident |+---------------------+---------------------+\nOn peut combiner la jointure externe avec des jointures normales, des sélections,\ndes tris, etc.\nmysql> SELECT f.titre, prenom, nom, nom_role\n-> FROM Film AS f LEFT OUTER JOIN Role AS r ON f.titre=r.titre,\n-> Artiste\n-> WHERE annee < 1995-> AND id = id_acteur-> ORDER BY annee;\n+-------------+---------+----------+--------- ------------+\n| titre | prenom | nom | nom_role |\n+-------------+---------+----------+--------- ------------+\n| Van Gogh | Jacques | Dutronc | Van Gogh |\n| Impitoyable | Clint | Eastwood | William Munny || Impitoyable | Gene | Hackman | Little Bill Dagget |+-------------+---------+----------+--------- ------------+\nEncore une fois le principe est toujours le suivant : la clause FROM déﬁnit l’espace\nde recherche (un ensemble de lignes obtenues par combinaison des tables apparais-\nsant dans le FROM), le WHERE sélectionne des lignes, et le SELECT des colonnes.\n10.3 OPÉRATIONS ENSEMBLISTES\nLa norme SQL ANSI comprend des opérations qui considèrent les tables commedes ensembles, et effectuent des intersections, des unions ou des différences avec lesmot-clé UNION, INTERSECT ouEXCEPT. Chaque opérateur s’applique à deux tables\nde schéma identique (même nombre d’attributs, mêmes noms, mêmes types). Troisexemples sufﬁront pour illustrer ces opérations.\n1. Donnez toutes les années dans la base.\nSELECT annee FROM Film\nUNION\nSELECT annee_naissance AS annee FROM Artiste\n406\n Chapitre 10. Récapitulatif SQL\n2. Donnez les noms de rôles qui sont aussi des titres de ﬁlms.\nSELECT nom_role AS nom FROM Role\nINTERSECT\nSELECT titre AS nom FROM Film\n3. Quels sont les noms de rôles qui ne sont pas des titres de ﬁlms ?\nSELECT nom_role AS nom FROM Role\nEXCEPT\nSELECT titre AS nom FROM Film\nL’opérateur INTERSECT s’exprime facilement avec une jointure. Le EXCEPT est\nimportant en principe car il permet d’exprimer des négations, à savoir toutes les\nrequêtes où on effectue une recherche en prenant des lignes qui n’ont pas telle ou\ntelle propriété : les acteurs qui n’ont pas de rôle oul e sﬁ l m sp o u rl e s q u e l so nn ec o n n a î t\npas les acteurs. On peut également exprimer des négations avec les clauses NOT IN et\nNOT EXISTS.\n10.4 REQUÊTES IMBRIQUÉES\nToutes les requêtes qui suivent ne peuvent s’exprimer qu’à partir de la version 4.1 deMySQL.\nQu’est-ce qu’une requête imbriquée ? Jusqu’à présent, les conditions exprimées\ndans la clause WHERE consistaient en comparaisons d’attributs avec des valeurs\nscalaires, avec une exception : le mot-clé INpermet de tester l’appartenance de la\nvaleur d’un attribut à un ensemble. La requête suivante donne tous les rôles des ﬁlmsde Clint Eastwood qui sont dans la base.\nmysql> SELECT * FROM Role\n-> WHERE titre IN (’Impitoyable’,’Les pleins pouvoirs’);\n+---------------------+-----------+-------- ------------+\n| titre | id_acteur | nom_role |\n+---------------------+-----------+-------- ------------+\n| Impitoyable | 20 | William Munny |\n| Impitoyable | 21 | Little Bill Dagget |\n| Les pleins pouvoirs | 21 | Le pr´ esident |+---------------------+-----------+-------- ------------+\nLes requêtes imbriquées sont une généralisation de cette construction : au lieu\nd’utiliser un ensemble de valeurs donné « en dur », on le construit dynamiquement\navec une sous-requête. Dans une situation plus réaliste, on ne connaîtrait pas ap r i o r i\nles titres de tous les ﬁlms de Clint Eastwood. On construit donc la liste des ﬁlms avecune sous-requête.\nSELECT * FROM Role\nWHERE titre IN (SELECT titre FROM Film, Artiste\nWHERE Film.id_realisateur=Artiste.idAND nom=’Eastwood’)\n10.4 Requêtes imbriquées\n 407\nLe mot-clé INexprime la condition d’appartenance detitre à la table formée par\nla requête imbriquée. Le principe général des requêtes imbriquées est d’exprimer des\nconditions sur des tables calculées par des requêtes. Ces conditions sont les suivantes :\n1.EXISTS R : renvoie TRUE siRn’est pas vide, FALSE sinon.\n2.tIN R oùtest une ligne dont le type (le nombre et le type des attributs) est\ncelui de R: renvoie TRUE sitappartient à R,FALSE sinon.\n3.vc m p ANY R,o ù cmpest un comparateur SQL ( <,>,=, etc.) : renvoie TRUE\nsi la comparaison avec au moins une des lignes de la table Rrenvoie TRUE.\n4.vc m p ALL R,o ù cmpest un comparateur SQL ( <,>,=, etc.) : renvoie TRUE\nsi la comparaison avec toutes les lignes de la table Rrenvoie TRUE.\nToutes ces expressions peuvent être préﬁxées par NOT pour obtenir la négation.\nLa richesse des expressions possibles permet d’effectuer une même interrogation enchoisissant parmi plusieurs syntaxes. En général, tout ce qui n’est pas basé sur unenégation NOT IN ouNOT EXISTS peut s’exprimer sans requête imbriquée. Voici\nmaintenant quelques exemples.\n10.4.1 Exemples de requêtes imbriquées\nReprenons la requête donnant les rôles des ﬁlms de Clint Eastwood. On peut l’expri-mer avec une requête imbriquée, et la comparaison = ANY qui est synonyme de IN.\nSELECT * FROM Role\nWHERE titre = ANY (SELECT titre FROM Film, Artiste\nWHERE Film.id_realisateur=Artiste.id\nAND nom=’Eastwood’)\nIl est très important de noter que cette requête (et donc celle avec IN)e s t\néquivalente1à la jointure suivante :\nmysql> SELECT r.*\n-> FROM Role r, Film f, Artiste a\n-> WHERE r.titre = f.titre-> AND a.id= f.id_realisateur\n-> AND nom=’Eastwood’;\n+---------------------+----------+----------- -----------+\n| titre | id_acteur | nom_role |\n+---------------------+----------+------__--- -----------+\n| Impitoyable | 20 | William Munny |\n| Impitoyable | 21 | Little Bill Dagget || Les pleins pouvoirs | 21 | Le pr´ esident |\n+---------------------+----------+----------- -----------+\n1. Deux requêtes sont équivalentes si elles donnent toujours le même résultat, quelle que soit la\nbase.\n408\n Chapitre 10. Récapitulatif SQL\nNotez la syntaxe table.* qui représente tous les attributs de la table table.O n\npeut considérer que la jointure est moins naturelle, et que la requête imbriquée\nest plus proche de la manière dont la recherche est conçue : on ne s’intéresse pasdirectement aux ﬁlms de Clint Eastwood, mais seulement aux rôles. Il n’en reste pasmoins que toutes deux donnent le même résultat. Autre exemple : donner les ﬁlms\npour lesquels on connaît au moins un des rôles . On peut utiliser une requête imbriquée.\nSELECT * FROM Film\nWHERE titre IN (SELECT titre FROM Role)\nOn va donc parcourir les ﬁlms, et pour chacun, on afﬁchera son titre si et\nseulement si ce titre apparaît dans au moins une des lignes de la table Role.O np e u t\nlà aussi utiliser une jointure.\nSELECT DISTINCT Film.*\nFROM Film, RoleWHERE Film.titre = Role.titre\nIl y a une différence un peu subtile : avec la jointure on afﬁchera autant de fois un\ntitre qu’il y a de rôles. Le mot-clé DISTINCT permet de se ramener à un résultat\néquivalent à celui de la requête imbriquée.\nOn peut exprimer la condition d’appartenance sur des lignes comprenant plu-\nsieurs attributs, comme le montre la requête suivante : on recherche tous les ﬁlms dumême genre qu’Impitoyable , et sont parus la même année.\nSELECT *\nFROM Film\nWHERE (annee, genre) = (SELECT annee, genre\nFROM Film f\nWHERE titre=’Impitoyable’)\nLe nombre et le type des attributs (ici deux attributs) doit correspondre exacte-\nment dans la requête principale et la requête imbriquée.\nBien entendu la requête ci-dessus s’exprime avec une jointure. Ce n’est pas le cas\nen revanche de celle ci-dessous, qui sélectionne l’artiste avec la date de naissance la\nplus ancienne.\nSELECT prenom, nom\nFROM ArtisteWHERE annee_naissance <= ALL (SELECT annee_naissance FROM Artiste\nWHERE annee_naissance IS NOT NULL)\nAND annee_naissance IS NOT NULL;\n+---------+----------+\n| prenom | nom |+---------+----------+\n| Akira | Kurosawa |\n+---------+----------+\n10.4 Requêtes imbriquées\n 409\nLeALL exprime une comparaison qui vaut pour toutes les lignes ramenées par\nla requête imbriquée. Attention aux valeurs à NULL dans ce genre de situation :\ntoute comparaison avec une de ces valeurs renvoie UNKNOWN et cela peut entraîner\nl’échec du ALL. Il n’existe pas d’expression avec jointure qui puisse exprimer ce genre\nde condition. En revanche, le ALL peut s’exprimer avec la négation, selon la règle\nd’équivalence que quand quelque chose est toujours vrai, il n’est jamais faux ! Nous\nverrons un exemple plus loin.\n10.4.2 Requêtes corrélées\nLes exemples de requêtes imbriquées donnés précédemment pouvaient être évaluésindépendamment de la requête principale, ce qui permet au système (s’il le jugenécessaire) d’exécuter la requête en deux phases. La clause EXISTS fournit encore\nun nouveau moyen d’exprimer les requêtes vues précédemment, en basant la sous-requête sur une ou plusieurs valeurs issues de la requête principale. On parle alors derequêtes corrélées .\nReprenons une dernière fois la requête donnant les rôles des ﬁlms de Clint\nEastwood. Elle s’exprime avec EXISTS de la manière suivante :\nSELECT * FROM Role\nWHERE EXISTS (SELECT titre FROM Film, Artiste\nWHERE Film.id_realisateur=Artiste.idAND Film.titre=Role.titreAND nom=’Eastwood’)\n+---------------------+----------+----------- -----------+\n| titre | id_acteur| nom_role |\n+---------------------+----------+----------- -----------+\n| Impitoyable | 20 | William Munny || Impitoyable | 21 | Little Bill Dagget || Les pleins pouvoirs | 21 | Le pr´ esident |\n+---------------------+----------+----------- -----------+\nOn obtient donc une nouvelle technique d’expression, qui permet d’aborder le\ncritère de recherche sous une troisième perspective : on conserve un rôle si, pour ce\nrôle, le ﬁlm a été dirigé par Clint Eastwood. Notez la jointure entre la table Role\nréférencée dans la requête principale et la table Film de la requête imbriquée. C’est\ncette comparaison « à distance » entre deux tables référencées par des clauses FROM\ndifférentes qui explique le terme de corrélation .\nSupposons que l’on veuille trouver tous les metteurs en scène ayant dirigé Gene\nHackman. La requête peut s’exprimer avec EXIST de la manière suivante :\nSELECT * FROM Artiste a1\nWHERE EXISTS (SELECT *\nFROM Film f, Role r, Artiste a2WHERE f.titre = r.titreAND r.id_acteur = a2.id\n410\n Chapitre 10. Récapitulatif SQL\nAND nom = ’Hackman’\nAND f.id_realisateur = a1. id)\n+----+----------+--------+-----------------+\n| id | nom | prenom | annee_naissance |\n+----+----------+--------+-----------------+| 20 | Eastwood | Clint | 1930 |\n+----+----------+--------+-----------------+\nEn langage naturel, le raisonnement est le suivant : on prend tous les artistes\n(requête principale) tels que, parmi les ﬁlms qu’ils ont dirigés (requête secondaire),\non trouve un rôle joué par Gene Hackman.\nREMARQUE – dans une sous-requête associée à la clause EXISTS , peu importent les\nattributs du SELECT puisque la condition se résume à : cette requête ramène-t-elle au moins\nune ligne ou non ? On peut donc systématiquement utiliser SELECT * .\nLa requête équivalente avec INs’appuie sur un raisonnement légèrement modiﬁé :\non prend tous les artistes dont l’identiﬁant fait partie de l’ensemble des identiﬁantsdes metteurs en scène d’un ﬁlm avec Gene Hackman.\nSELECT * FROM Artiste a1\nWHERE id IN (SELECT id_realisateur\nFROM Film f, Role r, Artiste a2\nWHERE f.titre = r.titre\nAND r.id_acteur = a2.idAND nom = ’Hackman’)\nLa solution classique d’une jointure « à plat » reste valable, en utilisant DISTINCT\npour éliminer les doublons :\nSELECT DISTINCT a1.*FROM Artiste a1, Film f, Role r, Artiste a2WHERE f.titre = r.titre\nAND r.id_acteur = a2.id\nAND a2.nom = ’Hackman’AND f.id_realisateur = a1. id\nEnﬁn, rien n’empêche d’utiliser plusieurs niveaux d’imbrication !\nSELECT * FROM Artiste a1WHERE EXISTS\n(SELECT * FROM Film f\nWHERE f.id_realisateur = a1. idAND EXISTS (SELECT * FROM Role r\nWHERE f.titre = r.titreAND EXISTS (SELECT * FROM Artiste a2\nWHERE r.id_acteur = a2.idAND nom = ’Hackman’)))\n10.4 Requêtes imbriquées\n 411\nJe laisse le lecteur déchiffrer cette dernière requête (elle fonctionne !) et se\nconvaincre que l’argument de lisibilité des requêtes imbriquées atteint rapidement\nses limites. De plus ce genre d’expression sera probablement plus difﬁcile à traiterpour le système.\nEn résumé, une jointure entre les tables RetSde la forme :\nSELECT R.*\nFROM R, S\nWHERE R.a = S.b\npeut s’écrire de manière équivalente avec une requête imbriquée :\nSELECT *FROM RWHERE R.a IN (SELECT S.b FROM S)\nou bien encore sous forme de requête corrélée :\nSELECT *FROM RWHERE EXISTS (SELECT S.b FROM S WHERE S.b = R.a)\nLe choix de la forme est matière de goût ou de lisibilité, ces deux critères relevant\nde considérations essentiellement subjectives.\n10.4.3 Requêtes avec négation\nLes requêtes imbriquées sont en revanche irremplaçables pour exprimer des négations.\nOn utilise alors NOT IN ou (de manière équivalente) NOT EXISTS. Voici un premier\nexemple avec la requête : donner les ﬁlms pour lesquels on ne connaît aucun rôle .\nSELECT * FROM FilmWHERE titre NOT IN (SELECT titre FROM Role);\nOn obtient le résultat suivant :\n+-----------+-------+----------------+-------+\n| titre | annee | id_realisateur | genre |\n+-----------+-------+----------------+-------+| Kagemusha | 1980 | 68 | Drame |\n+-----------+-------+----------------+-------+\nLa négation est aussi un moyen d’exprimer des requêtes courantes comme celle\nrecherchant le (ou les) ﬁlms le(s) plus ancien(s) de la base. En SQL, on utilisera\ntypiquement une sous-requête pour prendre l’année minimale parmi les années deproduction des ﬁlms, laquelle servira à sélectionner un ou plusieurs ﬁlms.\n412\n Chapitre 10. Récapitulatif SQL\nSELECT *\nFROM FilmWHERE annee = (SELECT MIN(annee) FROM Film)\nIl existe en fait beaucoup de manières d’exprimer la même chose avec un SQL\n« complet ». Tout d’abord cette requête peut en fait s’exprimer sans la fonction MIN(),\navec la négation : si fest le ﬁlm le plus ancien, c’est en effet qu’il n’existe pas de\nﬁlm strictement plus ancien que f. On utilise alors habituellement une requête dite\n« corrélée » dans laquelle la sous-requête est basée sur une ou plusieurs valeurs issues\ndes tables de la requête principale.\nSELECT *\nFROM Film f1WHERE NOT EXISTS (SELECT annee FROM Film f2\nWHERE f1.annee > f2.annee)\nLef1.annee dans la requête imbriquée appartient à la table référencée dans le\nFROM de la requête principale. Autre manière d’exprimer la même chose : si un ﬁlm\nest le plus ancien, tous les autres sont plus récents. On peut utiliser le mot-clé ALL, qui\nindique que la comparaison est vraie avec tousles éléments de l’ensemble constitué\npar la sous-requête.\nSELECT *\nFROM Film\nWHERE annee <= ALL (SELECT annee FROM Film)\nOn préfère en général NOT EXISTS àALL, mais les deux sont équivalents, puisque\nquand une propriété est vraie pour tous les éléments d’un ensemble, il n’existe pas\nd’élément pour lequel elle est fausse. Dernier exemple de négation : quels artistes ne\nsont pas metteur en scène ? Les deux formulations ci-dessous sont équivalentes, l’unes’appuyant sur NOT IN et l’autre sur NOT EXISTS.\nSELECT *\nFROM ArtisteWHERE id NOT IN (SELECT id_realisateur FROM Film)\nSELECT *\nFROM ArtisteWHERE NOT EXISTS (SELECT * FROM Film WHERE Artiste.id = Film.id_realisateur)\nDans les deux cas, on trouve le résultat suivant :\n+----+---------+---------+-----------------+| id | nom | prenom | annee_naissance |+----+---------+---------+-----------------+\n| 21 | Hackman | Gene | 1930 |\n| 30 | Dutronc | Jacques | NULL |\n+----+---------+---------+-----------------+\n10.5 Agrégation\n 413\n10.5 AGRÉGATION\nL’agrégation de données avec SQL a été expliquée de manière détaillée au moment\nde la présentation des algorithmes de prédiction, page 307, et nous n’y revenons que\nde manière assez brève. La syntaxe SQL fournit donc :\n1. le moyen de partitionner une table en groupes selon certains critères ;\n2. le moyen d’exprimer des conditions sur ces groupes ;\n3. des fonctions d’agrégation.\nIl existe un groupe par défaut : c’est la table toute entière. Sans même déﬁnir de\ngroupe, on peut utiliser les fonctions d’agrégation.\nmysql> SELECT COUNT(*), COUNT(nom), COUNT(annee_naissance)\n-> FROM Artiste;\n+----------+------------+--------------- ---------+\n| COUNT(*) | COUNT(nom) | COUNT(annee_naissance) |\n+----------+------------+--------------- ---------+\n|5 | 5 | 4 |\n+----------+------------+--------------- ---------+\nOn obtient 4 pour le nombre d’années, et 5 pour les autres valeurs. En effet\nl’attribut annee_naissance estNULL pour Jacques Dutronc, et n’est pas pris\nen compte par la fonction d’agrégation. Pour compter toutes les lignes, on doit\nutiliser COUNT(*), ou un attribut déclaré comme NOT NULL : c’est le cas pour\nCOUNT(nom). On peut aussi compter le nombre de valeurs distinctes dans un groupe\navec COUNT(DISTINCT expression ).\n10.5.1 La clause GROUP BY\nPour bien analyser ce qui se passe pendant une requête avec GROUP BY,i lf a u t\ndécomposer l’exécution de la requête en deux étapes. Prenons l’exemple des ﬁlms,\ngroupés par genre.\nSELECT genre, COUNT(*), MAX(annee)\nFROM FilmGROUP BY genre\nDans une première étape, MySQL va constituer les groupes. On peut les représen-\nter avec un tableau, comprenant pour chaque ligne des valeurs du (ou des) attribut(s)\nde classement (ici genre), associé(s) à toutes les lignes correspondant à cette valeur.\nLe groupe associé au genre « Drame » est constitué de deux ﬁlms : ce tableau\nn’est donc pas une table relationnelle, dans laquelle chaque cellule ne peut contenirqu’une seule valeur.\nPour se ramener à une table relationnelle, on transforme durant la deuxième étape\nchaque groupe de lignes en une valeur par application d’une fonction d’agrégation.\n414\n Chapitre 10. Récapitulatif SQL\ngenre\n titre, année ,id_realisateur\nWestern\n Impitoyable, 1992, 20\nDrame\n Van Gogh, 1990, 29\nKagemusha, 1980, 68\nPolicier\n Les pleins pouvoirs, 1997, 20\nLes ﬁlms groupés par genre\nLa fonction COUNT() compte le nombre de lignes dans chaque groupe, MAX() donne\nla valeur maximale d’un attribut parmi l’ensemble des lignes du groupe, etc. Nous\nrappelons la liste des fonctions d’agrégation dans le tableau 10.1.\nTableau 10.1 — Les fonctions d’agrégation de MySQL\nFonction\n Description\nCOUNT (expression )\nCompte le nombre de lignes.\nAVG (expression )\n Calcule la moyenne de expression .\nMIN (expression )\n Calcule la valeur minimale de expression .\nMAX (expression )\n Calcule la valeur maximale de expression .\nSUM (expression )\n Calcule la somme de expression .\nSTD(expression )\n Calcule l’écart-type de expression .\nmysql> SELECT genre, COUNT(*), MAX(annee)\n-> FROM Film\n-> GROUP BY genre;\n+----------+----------+------------+\n| genre | COUNT(*) | MAX(annee) |\n+----------+----------+------------+| Policier | 1 | 1997 || Drame | 2 | 1990 |\n| Western | 1 | 1992 |\n+----------+----------+------------+\nDans la norme SQL ANSI, l’utilisation de fonctions d’agrégation pour les attri-\nbuts qui n’apparaissent pas dans le GROUP BY estobligatoire . Une requête comme :\nSELECT genre, titre, COUNT(*), MAX(annee)FROM FilmGROUP BY genre\ndevrait être rejetée parce que le groupe associé à ’Drame’ contient deux titres\ndifférents, et qu’il n’y a pas de raison d’afﬁcher l’un plutôt que l’autre. MySQL estplus conciliant, et afﬁche une des valeurs trouvées :\nmysql> SELECT genre, titre, COUNT(*), MAX(annee)\n-> FROM Film\n-> GROUP BY genre;\n10.5 Agrégation\n 415\n+----------+---------------------+----------+ ------------+\n| genre | titre | COUNT(*) | MAX(annee) |\n+----------+---------------------+----------+ ------------+\n| Drame | Van Gogh | 2 | 1990 |\n| Policier | Les pleins pouvoirs | 1 | 1997 |\n| Western | Impitoyable | 1 | 1992 |+----------+---------------------+----------+ ------------+\nOn a donc associé « Van Gogh » à « Drame », en oubliant ’Kagemusha’. Outre\nque cela ne présente pas beaucoup de signiﬁcation, cette requête serait refusée par\ntout autre SGBD relationnel.\n10.5.2 La clause HAVING\nFinalement, on peut faire porter des conditions sur les groupes – ou plus précisémentsur le résultat de fonctions d’agrégation appliquées à des groupes – avec la clauseHAVING.L ac l a u s e WHERE ne peut exprimer des conditions que sur les lignes prises\nune à une. Par exemple, on peut sélectionner les genres pour lesquels on connaît aumoins deux ﬁlms.\nmysql> SELECT genre, MAX(annee)\n-> FROM Film\n-> GROUP BY genre\n-> HAVING COUNT(*) >= 2;\n+-------+------------+\n| genre | MAX(annee) |\n+-------+------------+| Drame | 1990 |\n+-------+------------+\nLa condition porte ici sur une propriété de l’ensemble des lignes du groupe, pas de\nchaque ligne prise individuellement. La clause HAVING est donc toujours exprimée\nsur le résultat de fonctions d’agrégation.\nPour conclure, voici une requête sélectionnant les metteurs en scène pour lesquels\non ne connaît pas plus de deux ﬁlms, avec le nombre de ﬁlms, et un tri sur le nom du\nmetteur en scène.\nmysql> SELECT nom AS nom_realisateur, COUNT(f.titre) AS nbFilms\n-> FROM Film f, Artiste a\n-> WHERE a.id= f.id_realisateur-> GROUP BY nom\n-> HAVING COUNT(*) <= 2\n-> ORDER BY nom;\n+-----------------+---------+| nom_realisateur | nbFilms |\n+-----------------+---------+\n| Eastwood | 2 || Kurosawa | 1 |\n| Pialat | 1 |\n+-----------------+---------+\n416\n Chapitre 10. Récapitulatif SQL\n10.6 MISES À JOUR\nLes commandes de mise à jour (insertion, destruction, modiﬁcation) sont considéra-\nblement plus simples que les requêtes.\n10.6.1 Insertion\nL’insertion s’effectue avec la commande INSERT, avec trois variantes. Dans la pre-\nmière, on indique la liste des valeurs à insérer, sans donner explicitement le nom\ndes attributs. MySQL suppose alors qu’il y a autant de valeurs que d’attributs, et quel’ordre des valeurs correspond à celui des attributs dans la table. On peut indiquerNULL pour les valeurs inconnues.\nINSERT INTO Film\nVALUES (’Vertigo’, 1958, NULL, ’Suspense’);\nSi on veut insérer dans une partie seulement des attributs, il faut donner la liste\nexplicitement.\nINSERT INTO Film (titre, annee)VALUES (’Vertigo’, 1958);\nIl est d’ailleurs préférable de toujours donner la liste des attributs. La description\nd’une table peut changer, par ajout d’attribut, et l’ordre INSERT qui fonctionnait un\njour ne fonctionnera plus le lendemain.\nEnﬁn, avec la troisième forme de INSERT, il est possible d’insérer dans une table\nle résultat d’une requête. Dans ce cas la partie VALUES est remplacée par la requête\nelle-même.\nPar exemple on peut créer une table ExtraitFilm avec le titre du ﬁlm, l’année, et\nle nom du metteur en scène, puis copier les informations de la base dans cette table\navec les commandes combinées INSERT ... SELECT.\nmysql> CREATE TABLE ExtraitFilm (titre VARCHAR(50) NOT NULL,\n-> annee INTEGER,\n-> nom_realisateur VARCHAR(30));\nQuery OK, 0 rows affected (0.00 sec)\nmysql> INSERT INTO ExtraitFilm\n-> SELECT titre, annee, nom\n-> FROM Film, Artiste\n-> WHERE id_realisateur=id;\nQuery OK, 4 rows affected (0.01 sec)\nRecords: 4 Duplicates: 0 Warnings: 0\n10.6 Mises à jour\n 417\nmysql> SELECT * FROM ExtraitFilm;\n+-----------------------------+------------ -------+\n| titre | annee | nom_realisateur |\n+---------------------+-------+------------ -------+\n| Impitoyable | 1992 | Eastwood |\n| Les pleins pouvoirs | 1997 | Eastwood |\n| Van Gogh | 1990 | Pialat |\n| Kagemusha | 1980 | Kurosawa |\n+---------------------+-------+------------ -------+\n10.6.2 Destruction\nLa destruction s’effectue avec la clause DELETE dont la syntaxe est :\nDELETE FROM table\nWHERE condition\ntable étant bien entendu le nom de la table, et condition est toute condition, ou\nliste de conditions, valide pour une clause WHERE. En d’autres termes, si l’on effectue,\navant la destruction, la requête\nSELECT * FROM table\nWHERE condition\non obtient l’ensemble des lignes qui seront détruites par DELETE. Procéder de cette\nmanière est un des moyens de s’assurer que l’on va bien détruire ce que l’on souhaite.\n10.6.3 Modification\nLa modiﬁcation s’effectue avec la clause UPDATE. La syntaxe est proche de celle du\nDELETE :\nUPDATE table SET A1=v1,A2=v2, ... An=vn\nWHERE condition\nComme précédemment, table dénote la table, les Aisont les attributs, les viles\nnouvelles valeurs et condition est toute condition valide pour la clause WHERE.\n\nRécapitulatif PHP11\nCe chapitre présente la syntaxe du langage PHP . Il est destiné à servir de référence,\net non de tutoriel permettant d’apprendre le langage. Les exemples de code PHP nemanquent pas dans les chapitres qui précèdent, aussi nous restons assez concis dansceux qui sont présentés ici.\nPHP s’appuie sur toutes les structures et concepts d’un langage de\nprogrammation de haut niveau, ainsi – à partir de la version 5 – que surles principales structures de la programmation orientée-objet. Il présente\ncependant la particularité d’avoir été conçu spéciﬁquement pour être intégré\navec HTML.\nL’intérêt de PHP réside également dans le très vaste ensemble de fonctions qui\naccompagnent le langage et fournissent une nombre impressionnant de fonctionna-lités prêtes à l’emploi. L’annexe C donne une sélection de ces fonctions.\n11.1 GÉNÉRALITÉS\nTout code PHP doit être inclus dans une balise <?php ... ?>. Des balises\n« courtes » <?>sont acceptées dans certaines conﬁgurations, mais elles ne sont pas\nrecommandées.\nComme en C, le séparateur d’instructions est le point-virgule « ; ». Noter qu’une\ninstruction « vide », marquée par un point-virgule est acceptée. La syntaxe suivanteest donc correcte, bien que le second « ; » ne serve à rien.\necho \"Ceci est une instruction\"; ;\n420\n Chapitre 11. Récapitulatif PHP\n11.1.1 Commentaires\nIl existe trois manières d’inclure des commentaires au sein du code PHP :\n1. comme en C, entre les signes « /* » et « */ » ;\n2. comme en C++, en commençant une ligne par « // » :\n3. comme en shellUnix, avec « # ».\nLes commentaires C++ ou Unix s’appliquent uniquement au texte qui suit sur\nla même ligne. La première méthode est donc la plus économique puisqu’on peut\nplacer un texte de longueur arbitraire entre les deux symboles délimiteurs. Attention\ncependant à ne pas imbriquer des commentaires ! La deuxième ligne dans l’exempleci-dessous fait partie du commentaire.\n/* Je veux mettre un commentaire ..\n/* Je crois commencer un deuxi` eme commentaire !\n*/ Je crois fermer le deuxi` eme ...\n*/ Je crois fermer le premier, mais PHP ne comprend plus rien.\nOn peut mixer les styles de commentaires dans un même script.\n11.1.2 Variables et littéraux\nLes variables sont des symboles qui de référencent des valeurs. Comme leur nom l’in-\ndique, les variables peuvent référencer des valeurs différentes au cours de l’exécution\nd’un script, ce qui les distingue des littéraux ( ’0’, ’1.233’, ’Ceci est une chaîne’) qui\nreprésentent directement une valeur immuable.\nREMARQUE – PHP distingue les majuscules et minuscules dans le nom des variables :\n$mavariable et$maVariable désignent donc deux variables différentes. En revanche,\nles noms de fonctions sont insensibles à la casse.\nUn nom de variable commence toujours par un ’$’, suivi d’au moins un carac-\ntère non-numérique (le ’_’ est autorisé), puis de n’importe quelle combinaison de\nchiffres et de caractères. Il est recommandé de se ﬁxer une norme pour nommer lesvariables, et d’utiliser pour chacune un nom qui soit explicite de l’utilisation de cettevariable.\nTypes\nLe type de la valeur associée à une variable peut lui-même changer, contrairement àdes langages typés comme le C. Au cours de la vie d’un script, une variable peut doncréférencer un entier, puis une chaîne, puis un objet. L’interpréteur se charge de gérerl’espace mémoire nécessaire pour stocker la valeur référencée par une variable, ce quireprésente un trèsgrand confort d’utilisation par rapport au C qui doit explicitement\nallouer et désallouer la mémoire.\n11.1 Généralités\n 421\nDéclaration\nIl n’y a pas de déclaration de variable en PHP ! L’interpréteur crée automatiquement\nune variable dès qu’un nouveau symbole préﬁxé par ’$’ apparaît dans un script. L’ins-truction ci-dessous affecte la valeur 1 à la variable $maVariable, si elle n’existait\npas avant.\n$maVariable = 1;\nQue se passe-t-il quand on utilise la valeur d’une variable qui n’a pas encore\nété déﬁnie ? Et bien PHP rencontre un nouveau symbole préﬁxé par ’$’ et instanciedonc une nouvelle variable avec comme valeur initiale la chaîne vide ou 0, selon lecontexte. Le code suivant, où on a fait une faute de frappe dans le nom de la variable,afﬁchera ainsi un blanc.\necho \"$maVaraible\";\nPHP passe silencieusement sur ce genre d’erreur, sauf si on a déﬁni un niveau\nd’erreur sufﬁsamment restrictif (voir page 222). Il est fortement recommandé, aumoins en phase de développement, d’adopter un niveau E_ALL pour détecter ce genre\nd’anomalies. La fonction isSet() est également très utile pour savoir si une variable\na été déjà déﬁnie ou non.\nVariable de variable\nLe nom d’une variable peut lui-même être une variable. Le code ci-dessous affectela valeur 10 à la variable $mavar, dont le nom est lui-même la valeur de la variable\n$v1. Cette construction assez exotique a une utilité douteuse.\n$v1 = \"mavar\";\n$$v1 = 10;\n11.1.3 Constantes\nUne constante est un symbole associé à une valeur mais, à la différence des variables,\nce symbole ne peut jamais être modiﬁé. Une constante peut être vue comme un\nlittéral désigné de manière symbolique, ce qui est préférable pour la clarté du code etson évolutivité. Les constantes sont déﬁnies par la commande define.\ndefine(\"PI\", 3.14116);\ndefine (\"MON_SERVEUR\", \"www.lamsade.dauphine.fr\");\nPar convention (mais ce n’est pas obligatoire) les constantes sont en majuscules.\nUne bonne pratique est de ne jamais utiliser de valeur « en dur » dans un script, mais\nde déﬁnir une constante. Deux avantages :\n1. le code est plus lisible ;\n2. si on veut changer la valeur, on peut le faire en un seul endroit.\n422\n Chapitre 11. Récapitulatif PHP\n11.2 TYPES\nPHP distingue les types scalaires (entiers, ﬂottants, chaînes) et les types agrégats\n(tableaux et classes). Les valeurs de types scalaires ne peuvent pas se décomposer,\ncontrairement à celles des types agrégats.\n11.2.1 Types numériques et booléens\nIls comprennent les entiers et les ﬂottants, ces derniers ayant une partie décimale\nséparée de la partie entière par un « . ».\n$i = 1; // Entier en notation d´ ecimale\n$i = 011; // Notation octale (9 en d´ ecimal)\n$i = 0x11;// Notation hexad´ ecimale (17 en d´ ecimal)$f = 3.14116 // Flottant\n$f = 0.3e-3 // Notation exponentielle (soit 0,0003)\nPHP n’a pas de type booléen explicite. Comme en C, la valeur faux est le 0, la\nchaîne vide ou la chaîne \"0\", et toute autre valeur est vraie, y compris un nombre\nnégatif par exemple. Les constantes TRUE etFALSE sont prédéﬁnies et peuvent être\nutilisées dans les structures de contrôle.\n11.2.2 Chaînes de caractères\nLes chaînes de caractères peuvent êtres encadrées par des apostrophes simples (’) ou\ndoubles (\"). Les premières peuvent contenir des apostrophes doubles, et réciproque-ment. Les deux types de chaînes ne sont cependant pas équivalents.\nApostrophes simples\nOn ne peut y inclure ni variables, ni caractères d’échappement (comme ’\\n’). En\nrevanche les sauts de lignes sont acceptés. Si on veut inclure un (’) dans une tellechaîne, il faut le préﬁxer par ’ \\’. Exemple :\n’C\\’est une cha^ ıne avec apostrophes simples\net un saut de ligne.’\nApostrophes doubles\nContrairement aux précédentes, ces chaînes peuvent inclure des noms devariables qui seront remplacées par leur valeur à l’exécution. Dans l’exempleci-dessous, on obtiendra la phrase Le réalisateur de Vertigo est Hitchcock.C e\nmécanisme est extrêmement utile dans un langage orienté vers la production\nde texte.\n$nom = \"Hitchcock\";\necho \"Le r´ ealisateur de Vertigo est $nom.\";\n11.2 Types\n 423\nOn peut aussi utiliser les caractères d’échappements donnés ci-dessous.\nCaractère\n Description\n\\n\n Saut de ligne\n\\r\n Retour chariot\n\\t\n Tabulation\n\\\\\n Le signe ’ \\’\n\\$\n Le signe ’ $’\n\\\"\n Une apostrophe double\n\\0nn\n Une chaîne en octal\n\\xnn\n Une chaîne en héxadécimal\nQuand on veut insérer dans une chaîne de caractères un élément d’un tableau\nou une propriété d’un objet, on peut les encadrer par des accolades ({}) pour que\nl’interpréteur puisse les distinguer.\necho \"Le second ´ el´ ement du tableau ’tab’: {$tab[2]}\";\necho \"La propri´ et´ e ’val’ de l’objet ’o’: {$o->val}\";\nPHP tolère l’absence des accolades pour les objets.\n11.2.3 Tableaux\nUn tableau est une suite de valeurs référencées par une unique variable. PHP gère\ndynamiquement la taille des tableaux, ce qui permet d’ajouter ou de supprimer à\nvolonté des valeurs sans se soucier de l’espace nécessaire.\nLes tableaux en PHP peuvent être soit indicés – les valeurs sont référencées par\nleur position en débutant à 0 – soit associatifs. Dans ce cas les valeurs sont référencées\npar des noms, ou clés, donnés explicitement par le programmeur.\nTableaux indicés\nVoici quelques exemples de tableaux indicés.\n$tab[0] = \"´ el´ ement 1 \";\n$tab[1] = \"´ el´ ement 2 \";\n$tab[2] = 120;\nComme le montre cet exemple, on peut mêler des chaînes de caractères et des\nnumériques dans un tableau. Notez bien que les indices commencent à 0, ce qui\nnécessite parfois un peu de réﬂexion quand on programme des itérations sur untableau.\nUne caractéristique importante et très utile de PHP est l’affectation automatique\nd’un indice à un nouvel élément du tableau. Cet indice est le numéro de la premièrecellule vide. Donc le code ci-dessous est équivalent au précédent.\n424\n Chapitre 11. Récapitulatif PHP\n$tab[] = \"´ el´ ement 1 \"; // $tab[0] !\n$tab[] = \"´ el´ ement 2 \"; // $tab[1] !$tab[] = 120; // $tab[2] !\nL’instruction array offre un moyen d’initialiser facilement un tableau. Encore\nune fois, PHP indice respectivement par 0, 1 et 2 les éléments du tableau.\n$tab = array ( \"´ el´ ement 1 \", \"´ el´ ement 2 \", 120);\nTableaux associatifs\nL’utilisation d’un indice numérique pour désigner les éléments d’un tableau peut être\ngénéralisée en utilisant des chaînes de caractères ou clés. La clé d’un élément doit\nêtre unique pour l’ensemble du tableau. Dans ce cas, la notion d’ordre disparaît et\non obtient une structure de tableau associatif qui, comme son nom l’indique, permet\nd’accéder à un élément par sa clé. Un tableau indicé est un cas particulier de tableauassociatif, où les clés sont des entiers en séquence.\nVoici l’initialisation d’un tableau $mes qui associe à un titre de ﬁlm, utilisé comme\nclé, le nom de son metteur en scène.\n$mes[\"Vertigo\"] = \"Hitchcock\";\n$mes[\"Sacrifice\"] = \"Tarkovski\";\n$mes[\"Alien\"] = \"Scott\";\nComme précédemment, on peut utiliser le mot-clé array pour initialiser ce\ntableau, avec une syntaxe un peu plus complexe qui permet de donner la clé de\nchaque élément.\n$mes = array (\n\"Vertigo\" => \"Hitchcock\",\n\"Sacrifice\" => \"Tarkovski\",\n\"Alien\" => \"Scott\");\nMaintenant il est possible d’accéder à un élément du tableau avec sa clé. Par\nexemple $mes[\"Vertigo\"] aura pour valeur \"Hitchcock\". Le parcours d’un\ntableau associatif devient un peu plus complexe que celui des tableaux indicéspuisqu’on ne peut pas se baser sur l’ordre des indices pour effectuer une bouclesimple. On peut utiliser un curseur sur le tableau. Les fonctions next() etprev()\npermettent de déplacer ce curseur (initialement positionné sur le premier élémentdu tableau), et les fonctions key() etcurrent() renvoient respectivement la clé\net la valeur de l’élément courant. Voici un exemple de code pour parcourir letableau $mes.\ndo\n{ echo \"Cl´ e = key($mes). Valeur = current($mes)\"}while (next($mes));\n11.2 Types\n 425\nEn général, on préfère recourir à l’instruction foreach, comme le montre\nl’exemple ci-dessous.\nforeach ($mes as $cle => $valeur)\n{\necho \"Cl´ e = $cle. Valeur = $valeur\";\n}\nLa fonction count() donne le nombre d’éléments dans un tableau, et il existe\ntout un ensemble de fonctions pour trier un tableau associatif selon différents\ncritères : sort(), asort(), arsort(), ksort(), etc. Nous vous renvoyons à l’an-\nnexe C pour les fonctions PHP manipulant des tableaux.\nTableaux multi-dimensionnels\nLes tableaux indicés et associatifs se généralisent aux tableaux multi-dimensionnels,pour lesquels l’indice, ou la clé, est constituée de plusieurs valeurs. Un tableau à deuxdimensions peut être vu comme une table avec lignes et colonnes. Voici par exempleun tableau avec deux lignes et deux colonnes.\n$tab[0][0] = \"En haut ` a gauche\";\n$tab[0][1] = \"En haut ` a droite\";\n$tab[1][0] = \"En bas ` a gauche\";$tab[1][1] = \"En bas ` a droite\";\nOn peut utiliser des indices ou des clés, et même mixer les deux. Quant\nau constructeur array, il peut être imbriqué pour initialiser des tableaux\nmulti-dimensionnels.\n$mes = array (\n\"Vertigo\" => array ( \"Alfred\", \"Hitchcock\"),\n\"Sacrifice\" => array ( \"Andrei\", \"Tarkovski\"),\n\"Alien\" => array ( \"Ridley\", \"Scott\"));\nDans l’exemple ci-dessus, les tableaux imbriqués sont indicés et contiennent\nchacun deux éléments. $mes[\"Vertigo\"][1] e s td o n cl ac h a î n e\"Hitchcock\".\n11.2.4 Conversion et typage\nLe type d’une variable est déterminé par le contexte dans lequel elle est utilisée.\nQuand on implique par exemple une chaîne de caractères dans une addition, PHPessaiera d’en extraire un numérique.\n$ r=1+\" 3petits cochons\";\nLe code précédent affecte la valeur 4 à $rpuisque la chaîne est convertie en 3. Si\nla conversion s’avère impossible, la valeur 0 est utilisée, mais dans ce cas votre scriptsouffre d’un sérieux défaut. Ce type de manœuvre est sans doute à proscrire dans tousles cas.\n426\n Chapitre 11. Récapitulatif PHP\nTypage\nIl est possible de tester le type d’une variable (ou, plus précisément, le type de la\nvaleur référencée par la variable) avec les fonctions is_long() (pour un entier),\nis_double() (pour un ﬂottant), is_string(), is_array() etis_object().C e s\nfonctions booléennes renvoient TRUE ouFALSE.\nAutre possibilité : la fonction getType(), appliquée, à une variable, renvoie\n\"integer\", \"double\", \"string\", \"array\" ou\"object\".\nConversion\nOn peut convertir le type d’une variable – ou, plus précisément, de la valeur d’unevariable ...– en préﬁxant le nom de la variable par (type) oùtype estinteger,\ndouble, string,e t c .\n$v = \"3 petits cochons\";\n$v = (integer) $v; // Maintenant $v vaut 3\n$v = (double) $v; // Maintenant $v vaut 3.0\n11.3 EXPRESSIONS\nOn désigne par expression toute construction du langage qui produit une valeur.\nLes variables, littéraux et constantes sont déjà des expressions : elles produisent leur\npropre valeur.\nLe code ci-dessous contient 3 expressions. La première instruction, 10, a pour\nvaleur 10 ! L’affectation qui suit se base sur le fait que la syntaxe \"10\" produit lavaleur 10, et donne donc à la variable $ielle-même la valeur 10. Enﬁn la dernière\ninstruction produit, elle aussi, 10, qui est la valeur de la variable.\n10;\n$i = 10;\n$i;\nÀ peu près toutes les constructions syntaxiques ont une valeur en PHP , et sont\ndonc des expressions. Revenons sur l’affectation de la valeur 10 à la variable $i: cette\naffectation a elle aussi une valeur, qui est 10 ! On peut donc logiquement écrire.\n$ j=$ i=1 0 ;\nLa variable $jprend la valeur de l’affectation $ i=1 0 , soit 10. Ce n’est pas\nforcément une bonne habitude de programmation que d’utiliser ce genre de construc-\ntion qui peut être difﬁcile à comprendre, mais cela illustre le principe de base du\nlangage (le même qu’en C) : on manipule des valeurs produites par des expressions.\n11.4 Opérateurs\n 427\n11.4 OPÉRATEURS\nAprès les variables et les littéraux, les opérateurs constituent le moyen le plus cou-\nrant de créer des expressions. Un opérateur produit une valeur par manipulation\n–addition, soustraction, etc.– de valeurs fournies par d’autres expressions. Dans leur\nforme la plus simple, les opérateurs agissent sur des variables ou des littéraux.\n$ a=3 ;\n$ a+4 ;\n$ b=$ a+2 ;\nLe code ci-dessus donne quelques exemples. La première ligne est une affectation\nqui, nous l’avons vu, produit la valeur de son opérande la plus à droite. La seconde\nligne est une addition qui produit la valeur 7, ce qui ne sert pas à grand chose puisquecette valeur n’est stockée nulle part.\nLa troisième ligne est un peu plus complexe car elle combine addition et affecta-\ntion. La partie droite effectue la somme de $a, dont la valeur est 3, avec le littéral 2\ndont la valeur est 2. Cette expression produit la valeur 5 qui est affectée à $b. Enﬁn,\nla composition des deux expressions (addition et affectation) produit elle-même unevaleur, 5.\nOn peut remarquer que toute expression peut être interprétée comme une expres-\nsion booléenne avec la valeur FALSE si la valeur produite est égale à 0 (ou à une chaîne\nvide), TRUE sinon. Toute expression peut donc être utilisée dans les structures de test,\nce que nous exploiterons plus loin.\nLes opérateurs peuvent être composés pour former des expressions complexes.\n$ a=3 ;\n$ b=8 ;\n$ c=$ a+2*$ b ;\nQue vaut la dernière expression ? Est-ce 5 fois 8, soit 40, ou 3 + 16, soit 19 ? Le\nrésultat est déﬁni par l’ordre de précédence des opérateurs. Ici la multiplication a un\nordre de précédence supérieur à l’addition, et sera donc évaluée d’abord, ce qui donne\nle second résultat, 19. Un langage de programmation se doit de déﬁnir précisémentl’ordre de précédence de ses opérateurs, ce qui ne signiﬁe pas (heureusement) que leprogrammeur doit les connaître. En utilisant des parenthèses, on ﬁxe sans ambiguïté\nl’ordre d’exécution et on obtient un code bien plus facile à lire. Les expressions ci-\ndessus gagneront à être écrites comme :\n$ a=3 ;\n$ b=8 ;\n$c = $a + (2 * $b);\nNous ne donnons pas l’ordre de précédence des opérateurs PHP , mais vous les\ntrouverez dans la documentation si vous y tenez vraiment. De toute manière il est for-\ntement recommandé d’utiliser les parenthèses pour rendre explicites les expressionsarithmétiques. La table 11.1 donne la liste des opérateurs arithmétiques de PHP .\n428\n Chapitre 11. Récapitulatif PHP\nTableau 11.1 — Opérateurs arithmétiques\nOpérateur\n Description\n$ a+$ b\n Addition de $aet$b\n$ a-$ b\n Soustraction de $bà$a\n$ a*$ b\n Multiplication de $aet$b\n$ a/$ b\n Division de $apar$b\n$ a%$ b\n $amodulo $b(reste de la division de $apar$b)\n11.4.1 Concaténation de chaînes\nUn opérateur très fréquemment utilisé est la concaténation de chaînes, simplement\nreprésentée par le point « . ».\n$c1 = \"Bonjour \"’;\n$c2 = \"Dominique\";\n// Affichage de la cha^ ıne \"Bonjour cher Dominique\"echo $c1 . \" cher \" . $c2;\nNous avons déjà discuté de l’opérateur d’affectation ’=’, qu’il ne faut surtout pas\nutiliser pour effectuer des tests d’égalité ! Il est couramment utilisé pour stocker dans\nune variable le résultat d’un calcul.\n$ i=4+3 ;\n$c = \"Bonjour cher\";$ i=$ i+2 ;$c = $c . \" Dominique\"\nLes deux dernières formes sont très courantes : elles utilisent une variable à la fois\ncomme opérande (dans la partie droite de l’affectation) et pour stocker le résultat\n(dans la partie gauche de l’affectation). Il existe une syntaxe permettant d’exprimerde manière plus économique ce type d’opération.\n$i += 2;\n$c .= \" Dominique\"\nCette notation évite d’avoir à répéter le nom de la variable. Elle peut être utilisée\navec tous les opérateurs arithmétiques et l’opérateur de concaténation.\n11.4.2 Incrémentations\nUne autre technique très couramment utilisée est l’incrémentation d’un compteur,\ndans une boucle par exemple. L’écriture normale est $ i=$ i+1 .P H Pr e p r e n dd u\nC une syntaxe plus compacte : l’expression $i++ est équivalente à la précédente et\nincrémente de 1 la valeur de $i.\nComme toute expression, $i++ a une valeur, en l’occurrence la valeur de $iavant\nson incrémentation. Pour obtenir la valeur $iaprès son incrémentation, on utilise\n11.4 Opérateurs\n 429\n++$i. Les mêmes expressions existent avec l’opérateur de soustraction. Ces subtilités\ndu langage sont liées à la volonté de faire de PHP un langage où tout (presque tout)est expression, c’est-à-dire a une valeur. On peut tout à fait s’épargner l’utilisation dece genre de technique si on trouve qu’elles ne favorisent pas la qualité du code. Voiciquelques exemples résumant ces opérateurs unaires.\n$ i=4;/ /$ ivaut 4\n$i++; / $i vaut 5\n$j = ++$i; // $j vaut 6, $i vaut 6\n$k = $i++; // $k vaut 6, $i vaut 7$k--; // $k vaut 5\n11.4.3 Opérateurs de bits\nLa table 11.2 donne la liste des opérateurs de bits. Il agissent sur des entiers et\npermettent de manipuler la représentation binaire. En déplaçant tous les bits d’uncran vers la gauche par exemple, on obtient le double de sa valeur.\nTableau 11.2 — Opérateurs de bits\nOpérateur\n Description\n$ a&$ b\n ETbinaire. Renvoie un entier dont les bits à 1 sont ceux à 1 dans\n$aET dans $b.\n$ a|$ b\n OUbinaire. Renvoie un entier dont les bits à 1 sont ceux à 1 dans\n$aOU dans $b.\n$ a^$ b\n OU EXCLUSIF binaire. Renvoie un entier dont les bits à 1 sont\nceux à 1 dans $aOU dans $b, mais pas dans les deux.\n˜$a\n Renvoie un entier dont les bits sont inversés par rapport à ceux de\nla variable $a.\n$a<< $b\n Décale les bits de $ade$bp o s i t i o n sv e r sl ag a u c h e .\n$a>> $b\n Décale les bits de $ade$bp o s i t i o n sv e r sl ad r o i t e .\n11.4.4 Opérateurs logiques\nLes opérateurs logiques sont donnés dans la table 11.3. Rappelons qu’une valeur est\ninterprétée comme vraie si elle est différente de 0 ou de la chaîne vide, et faussesinon.\nTableau 11.3 — Opérateurs logiques\nOpérateur\n Description\n$a && $b\n (ET) Renvoie vrai si $aET$bsont vrais.\n$a and $b\n Idem que &&.\n$a || $b\n (OU) Renvoie vrai si $aOU$best vrai.\n$a or $b\n Idem que ||.\n$a xor $b\n Ou exclusif : $aOU$best vrai, mais pas les deux.\n!$a\n (NOT). Renvoie la négation de $a.\n\n430\n Chapitre 11. Récapitulatif PHP\nEnﬁn la table 11.4 donne la liste des opérateurs de comparaison de PHP . Il est\ntrès important de noter, si vous n’êtes pas familier du langage C ou de ses dérivés\n(C++, Java) que le test d’égalité s’écrit avec deux ’=’. Une erreur très couranteest d’oublier un ’=’ dans un test d’égalité. L’interpréteur ne signale rien puisquel’opérateur d’affectation renvoie une valeur qui peut être interprétée comme unbooléen.\n$ i=1 ;\n$ j=2 ;\nif ($i == $j) ... // Renvoie FALSE: i est diff´ erent de j.\nif ($i = $j) ... // Renvoie TRUE !\nDans l’exemple ci-dessus, le deuxième test utilise (par erreur) l’affectation ’=’ et\nnon la comparaison ’==’. Dans ce cas la valeur $jest affectée à $i, et la valeur de\ncette affectation est elle-même la valeur de $j, soit 2, interprétée comme TRUE.N o n\nseulement le test ne donne pas le résultat attendu, mais la valeur de $ia été modiﬁée.\nCe genre d’erreur est difﬁcile à détecter, et fait partie des faiblesses de la syntaxe\ndu C qui a été reprise dans PHP .\nTableau 11.4 — Opérateurs de comparaison\nOpérateur\n Description\n$a == $b\n Vrai si $aest égal à $b.\n$a != $b\n Vrai si $aest différent de $b.\n$a<$b\n Vrai si $aest inférieur à $b.\n$a>$b\n Vrai si $aest supérieur à $b.\n$a<=$b\n Vrai si $aest inférieur ou égal à $b.\n$a>=$b\n Vrai si $aest supérieur ou égal à $b.\n11.5 STRUCTURES DE CONTRÔLE\nLes structures de contrôles sont les tests et les boucles . Elles permettent de spéciﬁer,\nen fonction de l’état d’un script à l’exécution (déterminé par la valeur de certaines\nvariables), quelles sont les parties du script à effectuer (structures de tests), oucombien de fois on doit les effectuer (structures de boucle).\nL’unité de base pour décrire les actions d’un script est l’instruction , qui est typi-\nquement l’affectation d’une valeur à une variable, ou toute autre expression pluscomplexe. Les instructions sont séparées par des points virgules. On place le contrôlesur des blocs. Un bloc est une suite d’instructions, exécutées en séquence et solidai-\nrement, et encadrées par ’{’ et ’}’. Là encore cette syntaxe est reprise du C.\n11.5 Structures de contrôle\n 431\n11.5.1 Tests\nLa structure la plus courante est le if ... else. Voici la syntaxe.\nif (expression )\n{\n// Bloc si expression est vraie.\n}\nelse\n{\n// Bloc si expression est fausse.\n}// Ici le script continue.\nLeelse, et son bloc associé, est optionnel. De même, si le bloc du ifcontient\nune seule instruction, on peut se passer des accolades. expression est en général un\ntest de comparaison, éventuellement plusieurs avec des opérateurs logiques. Comme\nnous l’avons vu, on peut utiliser n’importe quelle expression, y compris des appels de\nfonction, puisque toute valeur peut être interprétée comme vraioufaux.\nLes instructions ifpeuvent être imbriquées (un ifdans un autre if) et cumulées\n(plusieurs ifconsécutifs), comme le montre l’exemple ci-dessous. Il n’y a pas de\nlimite à la profondeur d’imbrication des if, si ce n’est le manque de lisibilité\nqui en découle. Une bonne règle est de ne pas s’autoriser plus de deux niveauxd’imbrications. Au-delà, le code est trop complexe et il vaut mieux recourir à desfonctions.\nif (expr1 )\n{\nif (expr2 )\n{\n//expr1 etexpr2 sont vraies.\n}\nelse\n{\n//expr1 vraie, expr2 fausse\n}\n}else if (expr3 )\n{\n//expr1 fausse, expr3 vraie.\n}else\n{\n//expr1 etexpr3 fausses.\n}\nLa structure else if illustrée ci-dessus peut s’écrire également elseif. Elle\npermet notamment de passer en revue les différentes valeurs possibles pour une\nexpression, et d’exécuter le bloc approprié. Une structure équivalente pour ce typede test est le switch.\n432\n Chapitre 11. Récapitulatif PHP\nswitch (expression )\n{\ncase valeur1 :\n//expression vaut valeur1.\n// Il faut sortir du switch !\nbreak;\ncase valeur2 :\n//expression vaut valeur2.\nbreak;\n...\ndefault:\n//expression ne vaut aucune des valeurs list´ ees\nbreak;\n}\nLeswitch est une structure de test initialisée avec l’instruction switch\n(expression )qui déﬁnit expression comme la valeur que l’on va ensuite\ncomparer avec une liste de possibilités. Chaque possibilité de cette liste est\nreprésentée par une instruction « case valeur :». Si expression est égale à\nvaleur, alors les instructions qui suivent sont exécutées, jusqu’à la ﬁn du switch,e t\nce indépendamment des case ! Pour indiquer que l’on veut sortir de la structure\nswitch dès que la valeur de expression a été rencontrée, et le bloc exécuté, il\nfaut ﬁnir ce bloc par une instruction break, comme indiqué ci-dessus.\nÀl aﬁ nd ub l o c switch, il est possible d’ajouter le mot-clé default qui indique\nl’ensemble des instructions à exécuter si tous les case précédents ont échoué.\nSignalons, pour conclure sur les tests, qu’il existe une syntaxe légèrement dif-\nférente pour les if-else. Le bloc après le ifou le else commence par ’:’, et la\nstructure se termine par endif;.\nif (expression ):\n// Bloc si expression est vraie.\nelse:\n// Bloc si expression est fausse.\nendif;\n11.5.2 Boucles\nComme d’habitude, on retrouve les même constructions qu’en C, ainsi qu’uneinstruction foreach pratique pour parcourir les tableaux associatifs.\nLewhile\nLewhile permet d’exécuter un bloc d’insructions tant qu’une condition est remplie.\nLa structure est :\nwhile (expression )\n{\n//expression est vraie.\n}\n11.5 Structures de contrôle\n 433\nOn ne rentre dans la boucle que si la condition est vraie au départ. Il va sans dire\nqu’il doit y avoir dans la boucle au moins une instruction qui fait varier la valeur\ndeexpression de manière à ce que celle-ci devienne fausse après un nombre ﬁni\nd’itérations. Une syntaxe légèrement différente du while marque le bloc à exécuter\nde manière différente.\nwhile (expression ):\n//expression est vraie.\nendwhile;\nLedo-while\nLedo-while est une variante du while qui effectue le bloc avant d’évaluer le test.\nEn conséquence, ce bloc est toujours exécuté au moins une fois.\ndo\n{\n//expression n’est pas forc´ ement vraie au premier passage\n}while (expression );\nLefor\nL’instruction forpermet d’exécuter une itération sur une variable incrémentée (ou\ndécrémentée) à chaque passage de la boucle. C’est la plus puissante des structures de\nboucle puisqu’on peut y spéciﬁer\n•l’initialisation des valeurs conditionnant l’itération ;\n•la ou les instructions faisant évoluer ces valeurs à chaque passage ;\n•la condition d’arrêt de la boucle.\nPar exemple, considérons la partie de code suivante :\n$ x=0 ;\nwhile ($x <10)\n{\n// Ici des instructions$x++; // permet d’incr´ ementer $x de 1. ´Equivalent ` a $x = $x+1\n}\nPar construction, on passera 10 fois dans la boucle. On peut écrire cela plus\nconcisément avec for:\nfor ($x=0; $x < 10; $x++)\n{\n// Ici des instructions\n}\nDans le for,l ap r e m i è r ep a r t i ei n i t i a l i s el av a r i a b l ed ec o n t r ô l e( i c i $x), la\ndeuxième indique le test de ﬁn, et la troisième effectue l’incrémentation. On peut\n434\n Chapitre 11. Récapitulatif PHP\nmettre des choses beaucoup plus compliquées :\n$a=1;\n$b=6;while ($a <$b)\n{\n$a++;echo \"$a=\".$a);\n}\npeut être remplacé par :\nfor ($a=1,$b=6; $a <$b; $a++, echo \"$a=\".$a);\nOn effectue donc une boucle forsur une instruction vide (’;’), les actions étant\nintégrées à l’instruction for elle-même. Ce mode de programmation très compact\nest apprécié de certains programmeurs, en particulier de ceux qui se font une gloire\nde produire un code court et illisible.\nLeforeach\nL’instruction foreach est conçue pour parcourir facilement un tableau. Il en existe\ndeux formes, selon que le tableau est indicé ou associatif.\nforeach ($tableau as $valeur) { /* bloc */ } // Tableau indic´ e\nforeach ($tableau as $cle => $valeur) { /* bloc */ } // Tableau associatif\nÀ chaque étape du parcours de $tableau, le curseur interne est incrémenté, et\nla valeur de l’élément courant (ainsi que la clé dans la seconde forme) est affectée à$valeur (ainsi qu’à $cle).\n11.5.3 Les instructions break etcontinue\nEn principe, quand on est dans le corps d’une boucle, toutes les instructions serontexécutées jusqu’à ce que le test qui détermine si on doit effectuer ou non unenouvelle itération soit évalué. Il existe deux instructions qui permettent d’obtenirun comportement plus souple.\n1.break déclenche la sortie forcée de la boucle ;\n2.continue dirige l’exécution à la prochaine évaluation du test de continua-\ntion, en sautant les éventuelles instructions complétant le corps de la boucle.\nVoici un exemple illustrant ces deux instructions. On effectue une boucle avec\n10 itérations, mais au lieu de s’appuyer sur le mécanisme normal du while, on utilise\nbreak pour sortir de la boucle quand la variable de contrôle vaut 10.\n$ x=0 ;\nwhile (1)\n{\nif ($x == 10) break; // $x vaut 10 ? On s’en va\n11.6 Fonctions\n 435\n$x++; // incr´ emente $x de 1. ´Equivalent ` a $x = $x+1\nif ($x != 5) continue; // $x diff´ erent de5?O nsaute la suite\n// Ici les instructions pour le cas o` u $x vaut 5\n}\nNoter le while (1) qui revient à effectuer une boucle à priori inﬁnie.\nLe seul moyen de l’interrompre est alors le break,o u exit qui interrompt le\nscript. L’instruction continue est déclenchée si la valeur de $xest différente\nde 5, ce qui revient à aller directement au while en ignorant la suite du corps\nde la boucle. Ces instructions sont valables également pour les variantes for\netdo.\n11.6 FONCTIONS\nLes fonctions en PHP doivent être déﬁnies avant leur appel. Le nom d’une fonction\nne commence pas par ’$’, et n’est pas sensible à la casse. Voici la syntaxe de déﬁnition\nd’une fonction.\nfunction NomFonction ([£arg1, £arg2, ... ])\n{\n// Ici le code de la fonction\n}\nUne fonction peut prendre un nombre arbitraire, mais ﬁxede variables. Les\nfonctions avec un nombre variable d’arguments n’existent pas en PHP , mais on onpeut contourner cette limitation en passant un tableau en paramètre\n1. Une fonction\npeut renvoyer une valeur avec l’instruction return, mais ce n’est pas indiqué dans\nsa signature. La valeur renvoyée peut être un tableau.\nfunction FilmVertigo ()\n{\nreturn array (\"Vertigo\", \"Alfred\", \"Hitchcock\");\n}\n// Appel de la fonction\nlist ($titre, $prenom, $nom) = FilmVertigo ();\n11.6.1 Passage des arguments\nLes arguments sont passés par valeur , ce qui signiﬁe qu’une copie des variables est\nfaite au moment de l’appel de la fonction, et que les éventuelles modiﬁcations faites\ndans le corps de la fonction sur les arguments n’ont qu’un effet local. Il existe uneexception depuis la version 5 : les objets sont passés par référence.\n1. Il existe cependant des techniques avancées pour gérer des listes de paramètres quel-\nconques : voir dans la documentation PHP les fonctions func_num_args(), func_get_args()\netfunc_get_arg() si cela vous intéresse.\n436\n Chapitre 11. Récapitulatif PHP\nfunction Addition ($i, $j)\n{\n// NB : $i et $j sont des variables locales$somme = $i + $j;\n$ i=2 ;$ j=3 ;\nreturn $somme;\n}\n$ i=1 ;$ j=1 ;\n// Appel de la fonction\n$k = Addition ($i, $j);\n// $i et $j valent toujours 1 !\nLe passage par valeur est préférable, parce qu’il signiﬁe que toutes les actions de la\nfonction n’ont pas d’impact sur le script qui l’appelle. En conséquence, le script n’a\npas à savoir comment la fonction est implantée et n’a pas à craindre des « effets debord » indésirables.\nIl est cependant possible de passer des variables par référence. C’est alors l’adresse\nde la variable qui est transmise à la fonction, et pas une copie de sa valeur. Il existe\ndeux manières d’indiquer un passage par référence :\n1. au moment de l’appel, même pour une fonction qui a été prévue pour travailler\nsur des arguments passés par valeur ;\n2. dans la déﬁnition de la fonction. C’est alors la règle par défaut pour tout appel\nde la fonction.\nLa première option est très dangereuse et va probablement disparaître dans une\nprochaine version de PHP . Il faut l’éviter. La seconde méthode, avec des arguments\nexplicitement prévus pour être passés par référence, rejoint une technique classique,et présente moins de dangers. Voici une version de la fonction Addition() qui prend\nen argument une troisième variable, passée par référence aﬁn de stocker le résultaten sortie.\nfunction Addition ($i, $j, &$somme)\n{\n$somme = $i + $j;$ i=2 ;$ j=3 ;\n}\n$ i=1 ;$ j=1 ;\n// Appel de la fonction : $k est pass´ ee par adresse\nAddition ($i, $j, $k);\n// $i et $j valent toujours 1, mais $k vaut 2 !\nUn défaut de la syntaxe de PHP est qu’on ne peut pas savoir, en lisant un script,\nsi les variables sont passées par valeur ou par adresse. Il est tout à fait possible de tout\nécrire sans recourir au passage par adresse, ce qui élimine toute ambiguïté. C’est lechoix de tous les scripts présentés dans ce livre. Le seul inconvénient potentiel est unéventuel problème de performance si on passe des variables volumineuses (commmeun gros tableau) par valeur : voir la discussion page 61 à ce sujet.\n11.6 Fonctions\n 437\n11.6.2 Valeurs par défaut\nIl est possible de déﬁnir des valeurs par défaut pour un ou plusieurs arguments d’une\nfonction. Cette idée, reprise du C++, s’avère très pratique quand on a beaucoup deparamètres dont la plupart prennent toujours la même valeur.\nVoici l’exemple d’une fonction de connexion, dont on suppose que dans la plupart\ndes cas elle sera utilisée pour accéder à la base Films sur le serveur MonServeur.O n\nprécise donc ces valeurs par défaut.\nfunction Connexion ($pNom, $pMotPasse, $pBase = \"Films\",\n$pServeur = \"MonServeur\")\n{\n// Ici le corps de la fonction\n}\nMaintenant on peut éventuellement omettre les deux derniers paramètres en\nappelant la fonction. On peut aussi les donner, et dans ce cas on se ramène à un\npassage classique de paramètres.\n// Connexion ` a la base Films, sur le serveur MonServeur\n$connexion1 = Connexion (\"rigaux\", \"mdprigaux\");\n...\n// Connexion ` a une autre base, sur un autre serveur.$connexion2 = Connexion (\"davy\", \"mdpdavy\", \"Films\", \"cartier\");\nOn ne peut utiliser les valeurs par défaut que de droite à gauche dans la liste des\narguments, et en commençant par le dernier. Il n’est pas possible par exemple, dans la\nfonction Connexion(), de donner une valeur par défaut au nom de la base et pas au\nserveur, à moins de modiﬁer l’ordre des arguments. L’interpréteur doit toujours êtrecapable de donner une valeur aux arguments non spéciﬁés au moment de l’appel.Le mot-clé unset peut être utilisé comme valeur par défaut. Dans ce cas l’argument\ncorrespondant n’est pas déﬁni dans la fonction si cet argument n’est pas spéciﬁé dansl’appel de la fonction.\n11.6.3 Fonctions et variables\nQuand on programme, on manipule des variables et des fonctions. Quels sont lesrapports entre les deux ? Où doit-on déclarer une variable ? Quel est son degré devisibilité par rapport aux fonctions et/ou aux scripts ? PHP propose trois types devariables (nous reprenons la terminologie du C).\nVariables automatiques. Ces variables sont créées dès que l’on entre dans leur\nespace de déﬁnition, qui est soit le script, soit une fonction¿; elles disparaissent\nquand on sort de cet espace.\nVariables statiques. Une variable automatique est détruite quand on quitte le corps\nd’une fonction, et sera recréée au prochain appel de la fonction. Sa valeur\n438\n Chapitre 11. Récapitulatif PHP\nn’est donc pas sauvegardée entre deux appels. Les variables statiques, elles, sont\npersistantes entre deux appels.\nVariables globales. En principe, le corps d’une fonction est une partie de code com-\nplètement isolée. En particulier, les variables déﬁnies à l’extérieur de la fonctionne sont pas visibles. Une variable globale est au contraire visible partout.\nPar défaut les variables sont automatiques. Les variables statiques peuvent être\nutiles, mais on fait beaucoup mieux avec la programmation objet. Quant aux\nvariables globales, on ne saurait trop déconseiller de les utiliser !\nVariables automatiques\nQuand une variable est déclarée à l’intérieur d’une fonction (c’est-à-dire entre les {}\nqui déﬁnissent le corps de la fonction), elle n’est pas visible – autrement dit, on nepeut pas lire ni modiﬁer sa valeur – de l’extérieur de la fonction. Par exemple, lavariable nom est uniquement accessible aux instructions de la fonction MaFonc()\ndans l’exemple ci-dessous :\nMaFonc (...)\n{\n$nom = \"Vertigo\";\n...}\nLe terme « automatique » vient de l’allocation automatique de l’espace nécessaire\nau stockage de la variable, chaque fois que la fonction est appelée. Conséquence\ntrès importante : le contenu de la variable automatique est perdu entre deux appels à une\nfonction . Ceci est tout à fait cohérent avec l’idée qu’une fonction effectue une tâche\nbien précise, utilisant pour cela des variables temporaires de travail.\nVariables statiques\nIl existe un second type de variable dite statique , qui présente les propriétés sui-\nvantes :\n1. elle n’est pas visible à l’extérieur de la fonction où elle est déclarée ;\n2. entre deux appels à une fonction, une variable statique conserve sa valeur (le\nterme « statique » vient du C, et signiﬁe que l’emplacement en mémoire de la\nvariable est constant).\nOn peut par exemple déﬁnir une variable qui compte le nombre d’appels à une\nfonction.\nMaFonc (...)\n{\n// On d´ efinit la variable statique, et on l’initialisestatic $compteur = 0;...\n11.6 Fonctions\n 439\n// On incr´ emente la variable\n$compteur++;echo \"Nombre d’appels ` a MaFonc : \" . $compteur;\n}\nLes variables statiques offrent moins de possibilités en PHP qu’en C. Elles sont\nsouvent avantageusement remplacées par la programmation objet.\nVariables globales\nPar opposition aux variables automatiques, une variable globale est déﬁnie à l’ex-\ntérieur de toute fonction, et rendue accessible à l’intérieur des fonctions grâce aumot-clé global.\nMaFonc ()\n{\n// On d´ efinit la variable globaleglobal $nom ;\n....\n$nom = \"N’importe quoi\";\n}\n... // Beaucoup de lignes de codes.\n$nom = \"Vertigo\";MaFonc();\n// La variable $nom contient \"N’importe quoi\" !!!\nLa variable $nom peut être manipulée, de manière totalement transparente, par\nla fonction MaFonc(). Rien n’indique que la fonction modiﬁe la variable (elle n’est\nmême pas passée en argument). En pratique, l’utilisation des variables globales est à\nproscrire. Les inconvénients sont innombrables.\n1.Manque de lisibilité : quand on voit un appel de fonction dans un programme,\non pense naturellement que la fonction ne manipule que les données passéesen paramètre. C’est faux si on utilise des variables globales. D’où une grandedifﬁculté à comprendre le code.\n2.Manque de sécurité : si vous déﬁnissez une variable globale, tout le monde peut\ny toucher ! Donc impossible de faire des contrôles sur le contenu de cette\nvariable. Impossible même de garantir qu’une fonction anodine n’est pas en\ntrain de la modiﬁer quand vous exécutez un programme qui a l’air sain. Lavariable globale, c’est l’effet de bord institutionalisé.\n3.Manque d’évolutivité : on ﬁge pour toujours le nom d’une information, ce qui\nest mauvais pour l’évolution d’un programme.\nArrêtons là : on peut écrire une application de taille quelconque sans jamais\nutiliser de variable globale. Celà revient à donner la priorité aux fonctions sur lesvariables, et c’est un excellent principe.\n440\n Chapitre 11. Récapitulatif PHP\n11.7 PROGRAMMATION ORIENTÉE-OBJET\nLa programmation orientée-objet a considérablement évolué en PHP 5. Le chapitre 3\nlui est entièrement consacré. Ce qui suit n’est donc qu’un rappel concis, complété des\nquelques fonctionnalités objets secondaires non évoquées dans le chapitre 3.\nUne classe est un ensemble d’attributs et de fonctions (le terme technique\nestméthodes ) manipulant ces attributs. Une méthode n’est rien d’autre qu’une\nfonction s’exécutant au sein d’un objet, dont l’environnement est constitué del’ensemble des attributs – ou propriétés,o ue n c o r evariables d’état – constituant\nl’objet. Ces attributs sont accessibles au sein d’une méthode viala variable $this,\nqui désigne l’objet courant. La méthode accède à cet environnement, à ses propres\nparamètres, et à rien d’autre.\n11.7.1 Classes et objets\nLes déﬁnitions des attributs et des méthodes sont rassemblées dans la structureclass. Voici l’esquisse d’une déﬁnition de classe pour gérer des objets géométriques,avec deux méthodes. L’une, afficher(), pour afﬁcher l’objet sur un écran, l’autre,\nsurface(), pour calculer la surface de l’objet.\nExemple 11.1 exemples/Geom.class.php :une classe d’objets géométriques\n<?php\nclass Geom{\n// ---- Partie priv´ ee : les propri´ et´ esprivate $abcisses, $ordonnees; // Les coordonn´ ees.private $nbPoints; // Nombre de points\nconst PI = 3.14116;\n// Puis les m´ ethodes\npublic function ajoutPoint ($x, $y)\n{\n$this->abscisses[$this->nbPoints] = $x;\n$this->ordonnees[$this->nbPoints] = $y;\n$this->nbPoints++;\n}\npublic function afficher ($ecran)\n{\nfor ($i = 0; $i $<$ $this->nbPoints; $i++)\n$ecran->affiche($this->abcisses[$i], $this->ordonnees[$i]);\n}\npublic function surface ()\n{\n// Ici un calcul de surface ...\nreturn $surface;\n}\n}\n\n11.7 Programmation orientée-objet\n 441\nLes propriétés et fonctions peuvent être qualiﬁées par public, private ou\nprotected. Tout ce qui est public est accessible librement par les instructions\nmanipulant un objet, alors que tout ce qui est private n’est accessible que par\nl e sm é t h o d e sd el ac l a s s e .L em o t - c l éprotected indique que seules les sous-classes\npeuvent accéder à la propriété ou à l’attribut (voir plus loin).\nOn peut également associer des constantes à une classe, comme ici la constante\nPIavec sa valeur (qui ne change jamais !). On peut faire référence à cette constante\ninterne avec la syntaxe Geom::PI (les constantes ne sont jamais privées en PHP).\nUne classe est une sorte de moule pour construire – on parle d’instanciation –d e s\nobjets se conformant à sa déﬁnition. On utilise le constructeur new.\n$icone = new Geom;\n// Ajout de quelques points\n$icone-> ajoutPoint(12, 43);\n$icone-> ajoutPoint(32, 30);\n$icone-> ajoutPoint(56, 6);\n// Calcul de la surfaceecho \"Surface = \" . $icone->surface();\nDès qu’un objet est instancié, il devient possible de lui appliquer les méthodes de\nsa classe.\n11.7.2 Constructeurs et destructeurs\nUne méthode particulière, le constructeur , peut être utilisée pour initialiser les attri-\nbuts d’un objet. Cette méthode doit porter soit le nom que la classe, soit le nom\nréservé __construct .V o i c il am é t h o d eGeom() que l’on pourrait déﬁnir pour initialiser\nl e so b j e t sd el ac l a s s e Geom.\nfunction Geom ($X, $Y, $pNbPoints)\n{\n$this->nbPoints = $pNbPoints;for ($i = 0; i <$pNbPoints; $i++)\n{\n$this->abcisses[$i] = $X[$i];$this->ordonnees[$i] = $Y[$i];\n}\n}\nLe constructeur prend en entrée un tableau d’abcisses, un tableau d’ordonnées, et\nle nombre de points. On peut alors appeler le constructeur avec new.\n$icone = new Geom (array (12, 32, 56), array (43, 30, 6), 3);\n// Calcul de la surface\necho \"Surface = \" . $icone->surface();\nOn peut également déﬁnir un destructeur nommé __destruct. Il est appelé quand\nla dernière variable stockant une référence à un objet est détruite avec unset() (ou\nquand le script est terminé).\n442\n Chapitre 11. Récapitulatif PHP\nQuand on crée une sous-classe, le constructeur et le destructeur de la classe\nparente ne sont pas appelés automatiquement. C’est au programmeur de le faire, s’il\nle souhaite, avec la syntaxe parent::__construct() etparent::__destruct().\n11.7.3 Sous-classes\nOn peut créer des sous-classes d’une classe. Les objets d’une sous-classe sont des\nobjets de la classe parente, mais avec un comportement (ensemble d’attributs etde méthodes) plus détaillé et plus précis. Une sous-classe se déﬁnit avec le mot-cléextends. On peut par exemple déﬁnir des sous-classes Rectangle, Polygone,e t c ,\npour la classe Geom.\nclass Rectangle extends Geom\n{\n// Les attributs sont h´ erit´ es.\nfunction Rectangle ($X, $Y)\n{\nif (count($X) != 4 or count($Y) != 4)\n{\necho \"Un rectangle a quatre sommets !\";\nexit;\n}\n$this->Geom ($X, $Y, 4);\n}\npublic function surface ()\n{\nreturn ($this->abcisses[1] - $this->abcisses[0]) *\n($this->ordonnees[1] - $this->ordonnees[0]);\n}\n}\nComme un rectangle est un objet de la classe Geom,i l hérite de tous les atri-\nbuts de cette classe (soit le tableau des abcisses et des ordonnées) et de toutes\nses méthodes. Cependant un rectangle a une déﬁnition plus précise qu’un objet\ngéométrique quelconque : il a quatre sommets, à angle droits. Le constructeur de la\nclasse Rectangle doit tester que ces contraintes sont vériﬁées (réalisé partiellement\ndans l’exemple ci-dessus) avant d’appeler le constructeur de Geom qui initialise les\ntableaux.\nDe même, la méthode de calcul d’une surface est beaucoup plus facile à implan-\nter pour un rectangle. On a donc remplacé la déﬁnition générale de la méthode\nsurface() par une implantation plus spéciﬁque que celle de la classe Geom.O n\nparle de surcharge dans le jargon orienté-objet.\n11.7.4 Manipulation des objets\nL’opérateur new renvoie une référence vers un objet instance de la classe. Toutes\nles manipulations d’un objet en PHP 5 s’effectuent ensuite par l’intermédiaire de\n11.7 Programmation orientée-objet\n 443\nréférences à cet objet. Il faut imaginer qu’un objet est constitué d’un espace réservé,\ndésigné par une ou plusieurs variables. En particulier :\n1. une affectation $o2 = $o1; fait de la variable $o2 une nouvelle référence\nvers l’objet déjà désigné par $o1;\n2. un appel de fonction fonc($o1) transmet à la fonction une référence vers\nl’objet $o1.\nToute opération appliquée à un objet par l’intermédiaire de l’une de ses références\naffecte l’unique zone réservée où les propriétés de l’objet sont stockées. Dans les casci-dessus, si on modiﬁe une propriété de l’objet désigné par $o1, cette modiﬁcation\nest visible par $o2puisque les deux variables désignent le même objet. Si la fonction\nmodiﬁe le contenu de l’objet qui lui est passé en paramètre, ce changement resteeffectif après la sortie de la fonction puisque la zone stockant l’objet est partagée parla fonction et le script principal.\nSPour effectuer une copie d’un objet aﬁn d’éviter ces effets parfois non souhaités,\nil faut utiliser le « clonage » avec le mot-clé clone :\n// Copie de o1 dans o2\n$o2 = clone $o1;\nLa copie duplique simplement la zone mémoire représentant $o1 vers la zone\nreprésentant $o2. Ce n’est pas toujours la bonne technique car si $o1contient lui-\nmême, parmi ses propriétés, des références à d’autres objets, c’est la référence qui va\nêtre copiée et pas les objets eux-mêmes. Il est possible de contrôler le comportementde la copie en déﬁnissant une méthode __clone().\nDeux objets sont égaux si les valeurs de leurs propriétés sont les mêmes. Ils sont\nidentiques s’ils ont la même identité (autrement dit si les deux variables référencent\nle même objet). L’opérateur d’égalité est « == » et l’opérateur d’identité est « === ».\n11.7.5 Compléments\nPlusieurs chapitres de ce livre donnent des exemples concrets de programmationobjet : voir les classes BD,Tableau etFormulaire du chapitre 3, les classes et sous-\nclasses de traitement d’un document XML page 339, et les classes du pattern MVCdans le chapitre 6.1. Ces classes illustrent non seulement les concepts orientés-objetet les constructions syntaxiques précédentes, mais elles montrent aussi comment lesmettre en œuvre en pratique. Décortiquer une classe existante est souvent le meilleurmoyen de comprendre l’approche objet et d’acquérir de bonnes pratiques.\n\nQUATRIÈME PARTIE\nAnnexes\n\nInstallation\nApache/PHP/MySQLA\nLes instructions qui suivent permettent de compléter l’installation de MySQL. Elles\nsont valables aussi bien pour une installation Windows que pour une installationLinux. Les exemples donnés ci-dessous s’appliquent à ce dernier système mais sont\naisément transposables à Windows.\nA.1 MOT DE PASSE ROOT\nAu moment de l’initialisation d’un serveur MySQL, il n’y a que deux utilisateurs :\nroot@localhost avec tous les droits sur toutes les bases, et l’utilisateur anonyme\n\"@localhost qui n’a aucun droit sur aucune base (sauf pour Windows). Vous pouvez\nconsulter le contenu de la table user (voir page 448 pour une description des droits\nd’accès) avec les commandes suivantes.\n% mysql -u root\nmysql> USE mysql;\nDatabase changed\nmysql> SELECT * FROM user;\nAu départ, il est possible de se connecter sans entrer de mot de passe pour root,\nce qui est très dangereux. La première chose à faire est d’attribuer un mot de passe à\nroot avec la commande :\nmysql> set password for root@localhost = Password(’motdepasse’);\nBien entendu vous devez choisir un mot de passe raisonnablement difﬁcile à\ndeviner. Vous pouvez alors vous connecter avec la commande suivante :\n% mysql -u root -p\n448\n Annexe A. Installation Apache/PHP/MySQL\nL’utilitaire mysql demande le mot de passe à chaque connexion. Il est possible\nd’éviter d’avoir à effectuer ce contrôle du mot de passe répétitivement en créant un\nﬁchier de conﬁguration, décrit dans la section suivante.\nL’utilisateur anonyme est une source de confusion, et un problème pour la sécurité\nsous Windows. Il est recommandé de le supprimer en détruisant cet utilisateur dansla table user. Voici les commandes.\n% mysql -u root -pEnter password:\nmysql> DELETE FROM user WHERE user=’’;\nA.2 CRÉATION DE BASES ET D’UTILISATEURS\nÉtant connecté sous root (attention : il s’agit bien du root de MySQL, différent du\ncompte UNIX), on peut créer des bases et des utilisateurs. Un utilisateur MySQL est\nidentiﬁé par deux composants : le nom etl’hôte . Cela complique assez nettement le\nsystème d’accès, puisque deux utilisateurs de même nom ne seront pas traités de lamême manière par MySQL selon l’hôte qu’ils utilisent. De plus, on peut utiliser lecaractère ’%’ pour désigner tous les hôtes et la chaîne vide ” pour désigner tous les\nutilisateurs. Par exemple :\n•fogg@cartier.cnam.fr est l’utilisateur de nom fogg accédant à MySQL\ndepuis @cartier.cnam.fr ;\n•fogg@%.cnam.fr est l’utilisateur de nom fogg accédant à MySQL depuis\nn’importe quel hôte dont le domaine est cnam.fr ;\n•\"@magellan.cnam.fr représente tout utilisateur se connectant à partir de\nmagellan.cnam.fr ;\nLes utilisateurs sont stockés dans la table userqui, en plus des attributs déﬁnissant\nles droits, contient les attributs Host, User etPassword. Voici les valeurs de ces\nattributs pour les utilisateurs de la liste précédente. La table contient également uneligne automatiquement créée par MySQL au moment de l’installation, correspon-dant à l’utilisateur « anonyme » ayant un droit de connexion à partir de l’ordinateur\nlocal.\n+------------------+------------+------------------+\n| host | user | password |\n+------------------+------------+------------------+| magellan.cnam.fr | | 7c783a0e25967167 |\n| %.cnam.fr | fogg | 7c78343c25967b95 || localhost | fogg | 7c786c222596437b || localhost | | |\n+------------------+------------+------------------+\nLe nom localhost est un synonyme pour l’ordinateur hôte du serveur mysqld ,\nsoit en l’occurrence cartier.cnam.fr.\nA.2 Création de bases et d’utilisateurs\n 449\nLa création d’un compte se fait soit en insérant directement dans une des tables\ndemysql avec la commande INSERT, soit avec une commande spécialisée GRANT.L a\nseconde méthode est préférable car elle est plus claire et, surtout, elle prend effet\nimmédiatement. En effet, quand on utilise un INSERT dans une table de mysql ,l a\nmise à jour est différée et il faut utiliser un ordre FLUSH PRIVILEGES pour que la\ncréation du compte prenne effet. Nous utilisons systématiquement les commandesGRANT etREVOKE.\nA.2.1 La commande GRANT\nVoici quelques commandes de création.\nmysql -u root -p mysql\nEnter password:\nmysql> GRANT ALL PRIVILEGES ON Films.* to fogg@localhost\n-> IDENTIFIED BY ’mdp1’;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> GRANT select ON Films.* to fogg@%.cnam.fr\n-> IDENTIFIED BY ’mdp2’;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> GRANT select ON Films.Film to ’’@magellan.cnam.fr\n-> IDENTIFIED BY ’mdp3’ ;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> GRANT USAGE ON *.* to visiteur@localhost ;\nQuery OK, 0 rows affected (0.00 sec)\nLa commande GRANT a deux effets complémentaires. D’une part elle crée un\nutilisateur s’il n’existe pas, d’autre part elle lui accorde des droits sur une ou plusieursbases, et change éventuellement son mot de passe.\n•L’utilisateur fogg@localhost se voit donc accorder tous les droits (hors\ndroits d’administration) sur la base Films. L’expression ALL PRIVILEGES\npermet d’éviter l’énumération select, insert, create, etc. De même,\nFilms.* désigne toutes les tables de la base Films, existantes ou à venir.\n•L’utilisateur de nom fogg, se connectant à MySQL à partir d’un ordinateur\nsitué dans le domaine cnam.fr, obtient seulement des droits de lecture sur\ntoutes les tables de la base Films.\n•Enﬁn tout utilisateur se connectant (avec un mot de passe mdp3)àM y S Q Là\npartir de magellan.cnam.fr obtient seulement des droits de sélection sur la table\nFilm.\n•La dernière commande GRANT crée un utilisateur visiteur@localhost qui\nn’a aucun droit sur aucune base, et peut se connecter sans mot de passe.\n450\n Annexe A. Installation Apache/PHP/MySQL\nLe mot-clé USAGE correspond à un droit de connexion. Cela n’empêche pas\nd’appeler des fonctions SQL (sans la clause FROM), comme le montre l’exemple\nci-dessous. En revanche, toute tentative d’accéder à une base avec la commande USE\nest refusée.\n% mysql -u visiteur\nmysql> SELECT USER();\n+--------------------+| USER() |\n+--------------------+| visiteur@localhost |+--------------------+mysql> USE Films;ERROR 1044: Access denied for user: ’visiteur@localhost’\nto database ’Films’\nIl est toujours possible, par la suite, d’accorder des droits supplémentaires ou\nd’affecter un mot de passe à visiteur@localhost.\nUtilisateurs du site Films\nDans le cas d’un site web PHP/MySQL, l’utilisateur est explicitement indiqué dansla fonction de connexion PHP mysql_connect(), et l’ordinateur à partir duquel\nla connexion s’effectue est celui qui héberge le serveur Apache. Dans notre cas,mysqld et Apache sont sur le même ordinateur. On peut donc se limiter à la création\nd’utilisateurs MySQL associés à l’hôte localhost.\nNous avons besoin de deux comptes utilisateurs pour la base Films.L ep r e m i e r\nest un compte administrateur de la base, identique à fogg@localhost.I lp e r m e td e\nfaire des mises à jour, des sélections sur toutes les tables, etc.\nLe deuxième utilisateur, visiteurFilms@localhost a le droit d’exécuter des\nrequêtes SELECT et d’en afﬁcher le résultat. On ne veut pas accorder de droits de mise\nàj o u rs u rl ab a s e Films à cet utilisateur. On veut même lui dissimuler une partie de la\nbase qui comporte des informations sensibles ou conﬁdentielles : la table SessionWeb ,\nla table Internaute ,e t c .\nLe système de droits d’accès de MySQL est assez ﬁn pour permettre d’indiquer très\nprécisément les droits d’accès de visiteurFilms@localhost. Voici les commandes\nGRANT contenues dans le ﬁchier\nDroits.sql , fourni avec notre site.\nExemple A.1 webscope/installation/Droits.sql :Script de création des utilisateurs de la base Films\n#\n# Création des utilisateurs pour la base Films de M y S Q L\n# C e script doit être exécuté sous u n compte administrateur\n#\nGRANT ALL P R I V I L E G E S ON F i l m s . ∗T O adminFilms@localhost\nIDENTIFIED BY ’ mdpAdmin ’ ;\nA.2 Création de bases et d’utilisateurs\n 451\nGRANT USAGE ON F i l m s . F i l m\nT O visiteurFilms@ ’ %’ IDENTIFIED B Y ’mdpVisiteur ’ ;\nG R A N T select O N Films .Film T O visiteurFilms@ ’ %’ ;\nG R A N T select O N Films . Artiste T O visiteurFilms@ ’ %’ ;\nG R A N T select O N Films .Role T O visiteurFilms@ ’ %’ ;\nG R A N T select O N Films . Pays T O visiteurFilms@ ’ %’ ;\nG R A N T select O N Films .Message T O visiteurFilms@ ’ %’ ;\nG R A N T select ( titre , note) O N Films . Notation T O visiteurFilms@ ’ %’ ;\nLa dernière commande GRANT donne des droits de sélection restreints à un\nsous-ensemble des attributs d’une table. On permet donc l’interrogation de titre\netnote dans Notation , mais pas de l’attribut email que l’on peut considérer comme\nconﬁdentiel. De même, la table Internaute , qui contient des informations person-\nnelles sur les internautes, est inaccessible pour une requête SQL effectuée à partir du\nsiteFilms.\nA.2.2 Modification des droits d’accès\nLa commande inverse de GRANT ... TO estREVOKE ... FROM.L ad é ﬁ n i t i o n\ndes droits est identique pour REVOKE. Voici par exemple comment on retire\nà l’utilisateur adminServeur@localhost le droit de créer ou détruire des\ntables\nmysql> REVOKE create, drop ON *.* FROM adminServeur@localhost;\nQuery OK, 0 rows affected (0.00 sec)\nPour affecter un mot de passe, il ne faut surtout pas utiliser la commande UPDATE.\nLes mots de passe sont cryptés avec la fonction PASSWORD(). On peut utiliser une\ninstruction spéciﬁque.\nmysql> SET PASSWORD FOR visiteur@localhost = PASSWORD(’monMot’);\nQuery OK, 0 rows affected (0.00 sec)\nMais le mieux est de s’en tenir à la commande GRANT, avec l’option USAGE si on\nne veut pas modiﬁer les droits existants pour l’utilisateur.\nmysql> GRANT USAGE ON *.* TO visiteur@localhost\nIDENTIFIED BY ’monMot2’;\nQuery OK, 0 rows affected (0.00 sec)\nEn règle générale, pour ajouter des droits à un utilisateur existant, il sufﬁt d’utiliser\nà nouveau la commande GRANT.\n452\n Annexe A. Installation Apache/PHP/MySQL\nA.3 FICHIERS DE CONFIGURATION\nTous les programmes d’accès à MySQL prennent en compte un ou plusieurs ﬁchiers\nde conﬁguration. Chaque ﬁchier indique des options pour le serveur ou les clientsMySQL.\nA.3.1 Format d’un fichier de configuration\nUn ﬁchier de conﬁguration est au format ASCII, et comprend un ensemble desections. Chaque section commence par une option [section ]o ù section peut\nêtreserver, client, ou le nom de l’un des programmes clients de MySQL. On\ntrouve ensuite les valeurs des paramètres pour le ou les clients de la section cou-rante.\nUn exemple de ﬁchier de conﬁguration, nommé\nmy-example.cnf , est fourni dans le\nrépertoire support-ﬁles . Voici une partie de ce ﬁchier, illustrant la structure des para-\nmètres de conﬁguration (N.B. : le caractère ’#’ indique une ligne de commentaires).\n# Pour tous les clients\n[client]port = 3306\nsocket = /tmp/mysql.sock\n# Pour le serveur[mysqld]port = 3306\nsocket = /tmp/mysql.sock\nskip-lockingset-variable = key_buffer=16Mset-variable = max_allowed_packet=1Mset-variable = thread_stack=128K# Start logging\nlog\n# Pour le client mysql\n[mysql]no-auto-rehash\nLa liste des paramètres acceptés par un programme est donnée par l’option help.\nA.3.2 Les différents fichiers\nIl y a trois ﬁchiers pris en compte. Sous Unix, MySQL accède à ces ﬁchiers dansl’ordre indiqué ci-dessous, et les paramètres trouvés en dernier sont considéréscomme prioritaires. Il est possible également de donner, au lancement de chaqueprogramme, une liste de paramètres sur la ligne de commande.\nA.3 Fichiers de configuration\n 453\n/etc/my.cnf Ce ﬁchier donne les options globales pour tous les serveurs MySQL\ntournant sur la machine. On peut y indiquer des choix sur la taille des buffers\nutilisés, ou le paramétrage par défaut de tel ou tel client MySQL, mais surtout pasdes mots de passe ! Ce ﬁchier est accessible en lecture par tous les clients MySQL.\nDATADIR/my.cnf Quand il y a plusieurs serveurs, ce ﬁchier, placé dans le répertoire\nracine des bases d’un serveur, permet d’indiquer les options pour ce serveur enparticulier.\n.my.cnf Placé dans le répertoire $HOME d’un utilisateur, ce ﬁchier donne les options et\npréférences de cet utilisateur. On peut y placer le compte de connexion à MySQL(login et mot de passe) en s’assurant que ce ﬁchier n’est lisible que par l’utilisateur.\nSous Windows, le ﬁchier de conﬁguration doit être placé dans C:\\. Malheureuse-\nment tout utilisateur ayant un compte sur la machine pourra lire son contenu. Évitez\ndonc d’y placer des mots de passe.\nA.3.3 Configuration du serveur\nLe ﬁchier /etc/my.cnf est particulièrement utile pour paramétrer le serveur. Entre autres\noptions importantes, on peut :\n1. choisir la langue pour les messages d’erreur ;\n2. choisir la taille de la mémoire centrale allouée au serveur ;\n3. ﬁxer l’une des très nombreuses options de lancement du serveur mysqld .\nLa commande suivante donne toutes les options possibles,\nmysqld --help\nVoici un extrait de l’afﬁchage obtenu avec cette commande.\n-b, --basedir=path Path to installation directory. All paths are\nusually resolved relative to this\n-h, --datadir=path Path to the database root\n-L, --language=... Client error messages in given language. May be\ngiven as a full path\n-l, --log[=file] Log connections and queries to file--log-update[=file] Log updates to file.# where # is a unique number\nif not given.\n--pid-file=path Pid file used by safe_mysqld-P, --port=... Port number to use for connection-O, --set-variable var=option\nGive a variable an value. --help lists variables\n--socket=... Socket file to use for connection\n-u, --user=user_name Run mysqld daemon as user\nLa version longue des paramètres ci-dessus peut être utilisée dans le ﬁchier\n/etc/my.cnf , à l’intérieur de la section commançant par mysqld. Voici l’exemple\n454\n Annexe A. Installation Apache/PHP/MySQL\nd’un paramétrage :\n[mysqld]\nport = 3306\nsocket = /tmp/mysql.sock\nuser = mysql\nset-variable = key_buffer=64Mlanguage = french\nlog\nlog-update\nOn a indiqué, entre autres :\n1. que les messages doivent être en français (option language);\n2. que toutes les connexions et requêtes à MySQL sont conservées dans un\nﬁchier log(dont le nom est, par défaut,\nmysqld.log et l’emplacement le répertoire\nracine des bases de données) ;\n3. que toutes les mises à jour sont également conservées dans un ﬁchier de log;\n4. que la mémoire cache pour les index est de 64 mégaoctets.\nA.3.4 Configuration d’un compte administrateur\nVoici comment conﬁgurer un compte administrateur qui veut se connecter, avec tout\nclient de MySQL, à la base mysql sous le compte root. Prenons comme exemple le\nclient mysql : voici un extrait des paramètres obtenus par mysql -help.\n-D, --database=.. Database to use\n-e, --execute=... Execute command and quit.-f, --force Continue even if we get an sql error.\n-H, --html Produce HTML output\n-O, --set-variable var=option\nGive a variable an value. --help lists variables\n-p, --password=... Password to use when connecting to server\nIf password is not given it’s asked from the tty.\n-u, --user=# User for login if not current user\n-E, --vertical Print the output of a query (rows) vertically\nDans un environnement Unix, voici comment indiquer avec un ﬁchier de conﬁ-\nguration, que l’utilisateur mysql est l’administrateur de la base de données. On\nindique que son compte de connexion à MySQL est root, on donne le mot de passe\n(mettez le vôtre !), et la base par défaut, mysql.\n1. Copiez my-example.cnf dans le répertoire $HOME demysql, et renommez-le en\n.my.cnf .\n2. Éditez .my.cnf . Le ﬁchier contient plusieurs sections dédiées respectivement\naux paramètres du serveur, du client, etc. Dans la section commençant par\n[client], ajoutez deux lignes comme indiqué ci-dessous :\n[client]\nuser = root\npassword = mdproot\nA.4 Sauvegardes\n 455\nDans la section [mysql], déﬁnissez la base par défaut :\n[mysql]\ndatabase = mysql\n3. Il ne reste plus qu’à protéger ce ﬁchier des regards indiscrets\n% chmod go-rwx .my.cnf\nUne fois ce ﬁchier créé, la commande mysql, exécutée sous le compte UNIX\nmysql, vous connecte directement à la base mysql sans avoir à entrer le compte\nutilisateur, le mot de passe, et sans avoir à utiliser la commande USE mysql.L e\nprincipe est généralisable à tous les utilisateurs, en leur permettant une connexionautomatique à leur base de référence. Vous pouvez par exemple indiquer des optionsde connexion pour le compte utilisateur d’Apache.\nLe compte et le mot de passe sont valables pour tous les programmes clients de\nMySQL, ce qui permet, sous le compte mysql, d’arrêter le serveur sans saisir de mot\nde passe avec la commande.\n% mysqladmin shutdown\nA.4 SAUVEGARDES\nIl existe de nombreuses manières de perdre des données. Bien entendu, on pensetoujours à un incident matériel comme la panne d’un disque, mais le problème vientbeaucoup plus fréquemment d’une erreur humaine. Par exemple il est très facile\nd’introduire un point-virgule mal placé dans une requête, avec un résultat qui peut\nêtre désastreux :\n% mysql\nmysql> DELETE FROM Artiste; WHERE id = 67;\nQuery OK, 0 rows affected (0.02 sec)\nERROR 1064: You have an error in your SQL syntax\nnear ’WHERE id = 0’ at line 1\nmysql> select * from Artiste;\nEmpty set (0.00 sec)\nOn a donc bel et bien exécuté la requête DELETE FROM Artiste,s a n sl e WHERE\nqui est placé après le point-virgule « ; ». Résultat : tout est détruit dans Artiste ,\nsans possibilité de récupération autre qu’une sauvegarde (sauf si on utilise l’option\ntransactionnelle de MySQL, InnoDB, non décrite ici).\nREMARQUE – Quand MySQL exécute DELETE FROM table , sans clause WHERE ,i ln e\nse donne même pas la peine de parcourir les lignes de la table : le fichier est détruit et recréé.\nD’où le message Query OK, 0 rows affected , bien que toutes les lignes aient effectivement\ndisparu.\n456\n Annexe A. Installation Apache/PHP/MySQL\nLes sauvegardes peuvent se faire se manière traditionnelle, en créant une archive\nzipoutar(n’oubliez pas d’arrêter le serveur mysqld auparavant) contenant les ﬁchiers\nde la base. L’inconvénient est qu’il n’est pas facile d’en extraire, si besoin est, une\npartie seulement des tables ou des lignes.\nL’utilitaire phpMyAdmin propose une fonction d’exportation de base de données\nsimple à utiliser, et comprenant toutes les options nécessaires. MySQL seul fournitdeux solutions complémentaires, un utilitaire, mysqldump, et la création de ﬁchiers log\nqui enregistrent au fur et à mesure les modiﬁcations sur la base. L’utilitaire mysqldump\nproduit un ﬁchier contenant les ordres SQL de création des tables et/ou des lignesdont la sauvegarde a été demandée. La syntaxe générale est :\n% mysqldump [options ] base [tables]\nPour sauvegarder la base FilmSQL dans un ﬁchier\nfilmSQL.sv , la commande est\ndonc :\n% mysqldump -u root -p FilmSQL > filmSQL.sv\nBien entendu on peut se connecter sous n’importe quel nom d’utilisateur ayant au\nmoins un droit select sur la base. Comme tous les utilitaires de MySQL, mysqldump\nutilise les informations de connexion du ﬁchier de conﬁguration si elles existent.\nPour sauvegarder une ou plusieurs tables, on donne leur nom. Par exemple on\npeut demander une sauvegarde de la table Film.\n% mysqldump -u root -p FilmSQL Film > filmSQL.sv\nLe ﬁchier filmSQL.sv contient alors à la fois les commandes de création de la table\net les commandes d’insertion des lignes.\n#\n# Table structure for table ’Film’\n#CREATE TABLE Film (\ntitre varchar(50) DEFAULT ’’ NOT NULL,annee int DEFAULT ’0’ NOT NULL,id_realisateur int,\ngenre varchar(20),\nPRIMARY KEY (titre)\n## Dumping data for table ’Film’\n#\nINSERT INTO Film VALUES (’Impitoyable’,1992,20,’Western’);\nINSERT INTO Film VALUES (’Van Gogh’,1990,29,’Drame’);\nINSERT INTO Film VALUES (’Kagemusha’,1980,68,’Drame’);INSERT INTO Film VALUES (’Les pleins pouvoirs’,1997,20,’Policier’);\nUn des grands avantages de cette méthode est que l’on peut utiliser le ﬁchier\ncomme un script SQL, soit pour recréer une base ou une table dans MySQL, soit\nA.5 phpMyAdmin\n 457\npour transférer une base vers un autre système relationnel. Comme le ﬁchier est au\nformat texte, on peut également facilement en extraire des parties pour récupérerpartiellement des données ou des tables.\nLes principales options de mysqldump sont données dans la table 1.1. Comme pour\ntous les autres utilitaires, on obtient la liste des options disponibles en lançant :\n% mysqldump -help\nTableau 1.1 — Options de mysqldump .\nOption\n Description\n-t\n Sauvegarde des lignes, mais pas des commandes de création de table.\n-Tr´ epertoire\n Écrit dans r´ epertoire deux fichiers pour chaque table. Le fichier\ntable.sql contient la commande de création, et le fichier table.txt\nles lignes.\n-c\n Produit des ordres INSERT complets, avec la liste des attributs.\n-l\n Verrouille les tables avant la sauvegarde pour éviter des mises à jour simulta-\nnées.\n-u,-p,-h\n Les options habituelles pour, respectivement, l’utilisateur, le mot de passe et lenom de l’hôte de mysqld .\nLes options par défaut peuvent changer avec les versions de MySQL. À titre\nd’illustration, voici la commande utilisée pour sauvegarder la base Films dans un\nﬁchier SvFilms :\nmysqldump -u adminFilms -pmdpAdmin -t Films Artiste Internaute\\\nFilm Notation Role SequenceArtiste \\\n--skip-opt -c --skip-lock-tables \\\n--default-character-set=latin1 > SvFilms\nLe ﬁchier obtenu est compatible avec PostgreSQL et SQLite. L’utilitaire propose\ndes exports aux formats acceptés par d’autres SGBD, dont ORACLE.\nA.5 phpMyAdmin\nIl existe de nombreux outils qui facilitent (au moins pour une prise de contact) la\nmaintenance d’une installation MySQL. Le plus populaire est phpMyAdmin, uneinterface d’administration écrite en PHP .\nphpMyAdmin est une très bonne illustration de l’utilisation de PHP en associa-\ntion avec MySQL, et peut s’utiliser aussi bien sous Linux que sous Windows. Il se pré-sente sous la forme d’un ensemble de ﬁchiers PHP . Le ﬁchier Documentation.html\npropose une documentation assez brève.\nphpMyAdmin est conﬁgurable avec le ﬁchier\nconfig.inc.php .L ap r e m i è r ec h o s eà\nfaire est d’affecter l’URL de phpMyAdmin àl ’ é l é m e n t PmaAbsoluteUri du tableau\n$cfg. Par exemple :\n$cfg[’PmaAbsoluteUri’] = ’http://localhost/phpMyAdmin/’;\n458\n Annexe A. Installation Apache/PHP/MySQL\nLe tableau $cfg permet de conﬁgurer phpMyAdmin, notamment pour la partie\n$cfg[’Servers’][’1’] qui donne les paramètres de connexion à MySQL. Voici\nles plus importants, avec leur valeur par défaut :\n// Serveur MySQL\n$cfg[’Servers’][$i][’host’] = ’localhost’;\n// Port MySQL\n$cfg[’Servers’][$i][’port’] = ’’;\n// Socket MySQL\n$cfg[’Servers’][$i][’socket’] = ’’;// Mode de connexion ` a MySQL\n$cfg[’Servers’][$i][’connect_type’] = ’tcp’;\n// Utilisateur contr^ olant les acc` es$cfg[’Servers’][$i][’controluser’] = ’’;\n// Mot de passe utilisateur contr^ oleur\n$cfg[’Servers’][$i][’controlpass’] = ’’;// Mode d’authentification\n$cfg[’Servers’][$i][’auth_type’] = ’config’;\n// Utilisateur MySQL$cfg[’Servers’][$i][’user’] = ’root’;\n// Mot de passe utilisateur\n$cfg[’Servers’][$i][’password’] = ’’;\n// Si indiqu´ e, donne la seule base accessible$cfg[’Servers’][$i][’only_db’] = ’’;\nLes options host, port etsocket permettent de préciser l’hôte du serveur\nMySQL, le port d’écoute et le nom de la socket d’accès à MySQL. En principe, les\nvaleurs par défaut conviennent. L’option auth_type détermine le type de protection\nutilisé pour l’accès à phpMyAdmin.\n•Casauth_type=’config’\nDans ce cas la connexion à MySQL se fait avec les valeurs des champs user\netpassword. Il faut renseigner ces champs avec un compte utilisateur. Par\ndéfaut, l’utilisateur root (utilisateur MySQL) sans mot de passe est indiqué,\nce qu’il faut impérativement changer pour un site en production.\n•Cas où auth_type vaut ’http’o u’ cookie’\nDans ce cas phpMyAdmin transmet au programme client, au moment de la\npremière demande d’accès d’un utilisateur, un document avec un en-tête\nHTML indiquant que l’utilisateur doit s’identiﬁer. Le navigateur produit alorsune fenêtre demandant un nom et un mot de passe, transmis à phpMyAdmin\nquand l’utilisateur les a saisis.phpMyAdmin vériﬁe que ce compte correspond à un compte MySQL valide.\nSi c’est le cas, une session est ouverte. Cette session est gérée soit avec lesvariables standard d’authentiﬁcation de HTTP (mode ’ http’), soit par des\ncookies .\nPour vériﬁer qu’un compte d’accès est correct, phpMyAdmin doit disposer d’un\nautre compte pouvant interroger la base dictionnaire mysql. Ce deuxième compte\ndoit être indiqué dans les champs controluser etcontrolpass. On peut donner\nA.5 phpMyAdmin\n 459\nle compte root qui a tous les droits sur la base mysql, mais il est gênant de mettre en\nclair le mot de passe de root dans un ﬁchier. Un moindre mal est de créer un compte\nMySQL spécial phpAdmin, qui a seulement le droit d’inspecter les tables de mysql.\nmysql> GRANT select ON mysql.* TO phpAdmin\n-> IDENTIFIED by’mdpPhpAdmin’;\nVoici maintenant le paramétrage pour l’authentiﬁcation d’un utilisateur au moment\nde la connexion.\n$cfg[’Servers’][$i][’controluser’] = ’phpAdmin’;\n$cfg[’Servers’][$i][’controlpass’] = ’mdpPhpAdmin’;$cfg[’Servers’][$i][’auth_type’] = ’coookie’;\nphpMyAdmin se connectera avec le compte phpAdmin/mdpPhpAdmin pour véri-\nﬁer le compte saisi interactivement par l’utilisateur.\nComme tout ﬁchier contenant des mots de passe,\nconfig.inc.php doit être protégé des\nregards indiscrets. Limitez les droits en lecture au compte utilisateur d’Apache, et lesdroits en écriture au compte du webmestre du site.\n\nRéférence MySQLB\nCette annexe est consacrée aux commandes, langages et utilitaires de MySQL. Nous\ncommençons par les types de données utilisables pour les attributs des tables, avantde passer en revue les principales commandes du langage SQL et des extensionsproposées par MySQL.\nCette annexe ne constitue pas une référence complète. MySQL, dans sa ver-\nsion 5, constitue un SGBD très riche dont la présentation détaillée mérite un ouvragecomplet. Nous avons renoncé à entrer dans des débats très pointus et assez éloignés denotre sujet. Ce qui suit constitue donc une sélection des commandes les plus usuelles,et couvre en tout cas toutes les fonctionnalités abordées précédemment dans ce livre,largement sufﬁsantes pour la plupart des sites web.\nB.1 TYPES DE DONNÉES MySQL\nMySQL est remarquablement conforme à la norme SQL ANSI, contrairement àd’autres SGBD, plus anciens, dont le système de types était déjà bien établi avantla parution de cette norme (en 1992). MySQL propose également quelques varianteset extensions, la principale étant la possibilité de stocker des attributs de type Binary\nLong Object (BLOB).\nLe tableau 2.1 résume la liste des types d’attributs, donne la taille de stockage\nutilisée par MySQL, et indique si le type fait partie ou non de la norme SQL ANSI.\n462\n Annexe B. Référence MySQL\nTableau 2.1 —T y p e sd eM y S Q L\nType\n Taille en octets\n SQL ANSI ?\nTINYINT\n 1\n Non\nSMALLINT\n 2\n Oui\nMEDIUMINT\n 3\n Non\nINTEGER\n 4\n Oui\nBIGINT\n 8\n Oui\nFLOAT\n 4\n Oui\nDOUBLE PRECISION\n 8\n Oui\nREAL\n 8\n Oui\nNUMERIC (M,D)\n M,(D+2 si M<D)\n Oui\nDECIMAL (M,D)\n M,(D+2 si M<D)\n Oui\nCHAR (M)\n M\n Oui\nVARCHAR (M)\n L+1 avecL/lessorequalslantM\n Oui\nTINYBLOB /TINYTEXT\n <255\n Non\nBLOB /TEXT\n <216\nNon\nMEDIUMBLOB /MEDIUMTEXT\n <224\nNon\nLONGTEXT /LONGBLOB\n <232\nNon\nDATE\n 3\n Oui\nTIME\n 3\n Oui\nDATETIME\n 8\n Oui\nTIMESTAMP\n 4\n Oui\nYEAR\n 1\n Oui\nENUM\n au plus 2\n Non\nSET\n au plus 8\n Non\nTypes numériques exacts\nLa norme SQL ANSI distingue deux catégories d’attributs numériques : les numé-\nriques exacts ,e tl e s numériques ﬂottants . Les types de la première catégorie (essentiel-\nlement INTEGER etDECIMAL) permettent de spéciﬁer la précision souhaitée pour\nun attribut numérique, et donc de représenter une valeur exacte. Les numériques\nﬂottants correspondent aux types couramment utilisés en programmation (FLOAT,DOUBLE) et ne représentent une valeur qu’avec une précision limitée.\nTous les types numériques acceptent l’option ZEROFILL qui indique que l’afﬁ-\nchage d’une valeur numérique se fait avec la largeur maximale, les chiffres étantcomplétés par des zéros. Par exemple la valeur 3 stockée dans un type INTEGER\nZEROFILL sera afﬁchée 0000000003.\nLe type INTEGER permet de stocker des entiers sur 4 octets. La taille de l’afﬁchage\nest fonction de la valeur maximale possible (en l’occurrence, 10 positions), mais\npeut être précisée optionnellement avec la valeur Mcomme indiqué dans la syntaxe\nci-dessous.\nINTEGER[(M )] [UNSIGNED] [ZEROFILL]\nB.1 Types de données MySQL\n 463\nLe type INTEGER peut être complété par le mot-clé UNSIGNED qui spéciﬁe si\nle stockage comprend un bit de signe ou non. Cette option (qui ne fait pas partie\nde la norme SQL) a un impact sur l’intervalle des valeurs possibles. Par exempleINTEGER UNSIGNED pourra stocker des valeurs dans l’intervalle [0, 2\n32−1],t a n d i s\nqueINTEGER correspond à l’intervalle [−231,231−1].\nIl existe de nombreuses variantes du type INTEGER :TINYINT, SMALLINT,\nMEDIUMINT, BIGINT, avec la même syntaxe et les mêmes options. Ces types\ndiffèrent par la taille utilisée pour le stockage : voir le tableau 2.1.\nLe type DECIMAL (M,D) correspond à un numérique de taille maximale M,a v e c\nun nombre de décimales ﬁxé à D. L’option ZEROFILL est acceptée, mais pas l’option\nUNSIGNED. La syntaxe est donc :\nDECIMAL (M, D) [ZEROFILL]\nLe type NUMERIC est un synonyme pour DECIMAL. Ces types sont surtout utiles\npour manipuler des valeurs dont la précision est connue, comme les valeurs moné-taires. Aﬁn de préserver cette précision, MySQL les stocke comme des chaînes decaractères.\nTypes numériques flottants\nCes types s’appuient sur la représentation des numériques ﬂottants propre à la\nmachine, en simple ou double précision. Leur utilisation est donc analogue à celle\nque l’on peut en faire dans un langage de programmation comme le C.\n1. Le type FLOAT correspond aux ﬂottants en simple précision.\n2. Le type DOUBLE PRECISION correspond aux ﬂottants en double précision. Le\nraccourci DOUBLE est accepté.\n3. Le type REAL est un synonyme pour DOUBLE.\nLa syntaxe complète de MySQL pour FLOAT (identique pour DOUBLE etREAL)\nest :\nFLOAT[(M, D)] [ZEROFILL]\noù les options MetDindiquent respectivement la taille d’afﬁchage et le nombre de\ndécimales.\nCaractères et chaînes de caractères\nLes deux types principaux de la norme ANSI, disponibles également dans MySQLet la plupart des SGBD relationnels, sont CHAR etVARCHAR. Dans MySQL, ils\npermettent de stocker des chaînes de caractères d’une taille maximale ﬁxée par le\nparamètre M,Mdevant être inférieur à 255. Les syntaxes sont identiques. Pour le\npremier :\nCHAR(M ) [BINARY]\n464\n Annexe B. Référence MySQL\net pour le second :\nVARCHAR(M ) [BINARY]\nLa différence essentielle entre les deux types est qu’une valeur CHAR a une taille\nﬁxée. MySQL la complète avec des blancs si sa taille est inférieure à M. En revanche\nune valeur VARCHAR a une taille variable et MySQL la tronque après le dernier\ncaractère non blanc.\nSi on n’utilise pas l’option BINARY, les comparaisons de chaînes de caractères ne\ndistinguent pas les minuscules des majuscules (donc ’AAA’ sera considéré comme\nidentique à ’aaa’).\nPour stocker des chaînes de caractères plus longues que 255, il faut utiliser une des\nvariantes des types BLOB ouTEXT. Les comparaisons sur une valeur de type TEXT ne\ndistinguent pas majuscules et minuscules. TEXT etBLOB peuvent donc être considérés\ncomme des VARCHAR de grande taille, avec l’option BINARY pour le second. Les\nvariantes TINY, MEDIUM, LONG des types BLOB etTEXT diffèrent par la taille des\nvaleurs acceptées : voir tableau 2.1.\nLa norme SQL ne propose ni BLOB,n i TEXT, mais un type BIT VARYING qui\ncorrespond également à de longues chaînes de caractères.\nDates\nUn attribut de type DATE stocke les informations « jour », « mois » et « année »\n(sur 4 chiffres). La représentation interne à MySQL occupe 3 octets, mais les dates\nsont afﬁchées par défaut au format AAAA-MM-JJ. Les nombreuses opérations de\nconversion de la fonction DATE_FORMAT() permettent d’obtenir un format d’afﬁ-\nchage quelconque (voir page 475).\nUn attribut de type TIME stocke les informations « heure », « minute » et\n« seconde ». L’afﬁchage se fait par défaut au format HH:MM:SS.L et y p e DATETIME\npermet de combiner une date et un horaire, l’afﬁchage se faisant au format\nAAAA-MM-JJ HH:MM:SS.\nLe type TIMESTAMP stocke une date et un horaire sous la forme du nombre de\nsecondes écoulées depuis le premier janvier 1970. La syntaxe est TIMESTAMP[(M )]\noùMindique optionnellement la longueur de l’afﬁchage (mais pas la taille de la\nreprésentation interne). Par défaut, elle est ﬁxée à 14, ce qui permet d’afﬁcher un\nTIMESTAMP au format AAAAMMJJHHMMSS.\nLe comportement d’un attribut de type TIMESTAMP est particulier : si de tels\nattributs ne sont pas spéciﬁés explicitement dans un ordre SQL d’insertion ( INSERT)\nou de mise à jour ( UPDATE), MySQL leur affecte automatiquement comme valeur\nle moment de la mise à jour. Il s’agit alors véritablement d’un « estampillage » dechaque ligne par le moment de la dernière modiﬁcation affectant cette ligne.\nEnﬁn, le type YEAR[2|4] permet de stocker des années sur 2 ou 4 positions.\nB.2 Commandes de MySQL\n 465\nLes types ENUM etSET\nCes deux types sont particuliers à MySQL. Le premier permet d’indiquer un type\nénuméré dont les instances ne peuvent prendre leur (unique) valeur que dans unensemble explicitement spéciﬁé. La syntaxe est :\nENUM (’valeur1’, ’valeur2’, ... ’valeurN’ )\nMySQL contrôle, au moment de l’affectation d’une valeur à un attribut de ce\ntype, qu’elle appartient bien à l’ensemble énuméré {’valeur1’, ’valeur2’, ...\n’valeurN’ }. MySQL stocke alors l’indice de la valeur, sur 1 ou 2 octets selon la\ntaille de l’ensemble énuméré (au maximum 65535 valeurs).\nLe type SET est déclaré comme le type ENUM, mais un attribut de type SET\n(’valeur1’, ’valeur2’, ... ’valeurN’ )peut prendre plusieurs valeurs dans\nl’ensemble {’valeur1’, ’valeur2’, ... ’valeurN’ }. Il peut y avoir au maximum\n64 valeurs dans l’ensemble, et MySQL stocke un masque de bits sur 8 octets au pluspour représenter la valeur d’un attribut.\nB.2 COMMANDES DE MySQL\nCette section présente l’ensemble des commandes de MySQL. Tous les termes enitaliques indiquent des constructions syntaxiques qui reviennent dans plusieurs\ncommandes et sont détaillées séparément.\nCommande ALTER TABLE\nALTER [IGNORE] TABLE nomTable commandeAlter\ncommandeAlter :\nADD [COLUMN] commandeCr´ eation [FIRST | AFTER nomAttribut ]\nou ADD INDEX [nomIndex ](nomAttribut,...)\nou ADD PRIMARY KEY ( nomAttribut,...)\nou ADD UNIQUE [nomIndex ](nomAttribut,...)\nou ALTER [COLUMN] nomAttribut {SET DEFAULT literal |DROP DEFAULT}\nou CHANGE [COLUMN] ancienNomColonne commandeCr´ eation\nou MODIFY [COLUMN] commandeCr´ eation\nou DROP [COLUMN] nomAttribut\nou DROP PRIMARY KEY\nou DROP INDEX nomIndex\nou RENAME [AS] nomTable\nouoptionTable\nMySQL commence par copier la table existante, effectue les modiﬁcations deman-\ndées sur la copie, et remplace l’ancienne table par la nouvelle si tout s’est bien passé.\n466\n Annexe B. Référence MySQL\nL’option IGNORE indique à MySQL de ne pas annuler la commande si celle-ci crée\ndes doublons de clés. Si IGNORE est employée, seule la première ligne de chaque\nensemble de doublons est prise en compte. Les commandes de modiﬁcation de\nschéma ont été illustrées page 204 et suivantes.\nCommande CREATE DATABASE\nCREATE DATABASE nomBase\nMySQL crée un répertoire vide de nom nomBase.\nCommande DROP DATABASE\nDROP DATABASE [IF EXISTS] nomBase\nCette commande détruit tousles ﬁchiers d’une base ! Le script s’interrompt si la base\nn’existe pas, sauf si l’option IF EXISTS est utilisée.\nCommande CREATE TABLE\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] nomTable (commandeCr´ eation,...)\n[optionsTable ][optionSelect ]\ncommandeCr´ eation :\nnomAttribut type [NOT NULL |NULL]\n[DEFAULT literal ] [AUTO_INCREMENT]\n[PRIMARY KEY] [r´ ef´ erence ]\nou PRIMARY KEY (nomAttribut,...)\nou KEY [nomIndex ](nomAttribut,...)\nou INDEX [nomIndex ](nomAttribut,...)\nou UNIQUE [INDEX] [nomIndex ](nomAttribut,...)\nou [CONSTRAINT contrainte ]\nFOREIGN KEY nomIndex (nomAttribut,...) [r´ ef´ erence ]\nou CHECK (expression )\noptionsTable :\nTYPE = {ISAM | MYISAM | HEAP | InnoDB}\nou AUTO_INCREMENT = #ou AVG_ROW_LENGTH = #\nou CHECKSUM = {0 | 1}\nou COMMENT = \"commentaires\"ou MAX_ROWS = #ou MIN_ROWS = #ou PACK_KEYS = {0 | 1}ou PASSWORD = \"motDePasse\"ou DELAY_KEY_WRITE = {0 | 1}\nB.2 Commandes de MySQL\n 467\noptionSelect :\n[IGNORE | REPLACE] SELECT ... (requ^ ete SQL)\nr´ ef´ erence :\nREFERENCES nomTable [(nomAttribut,...)]\n[MATCH FULL | MATCH PARTIAL]\n[ON DELETE optionR´ ef ]\n[ON UPDATE optionR´ ef ]\noptionR´ ef :\nRESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\nCette commande crée une table dans la base courante : voir page 197. L’option\nTEMPORARY indique que la table est créée pour la connexion courante uniquement.\nL’option optionTable permet de choisir le type de table. Le type InnoDB est le\nstockage le plus sophistiqué : il supporte les transactions et les clés étrangères.\nLe nom d’un index est optionnel. En son absence, MySQL engendre automa-\ntiquement un nom constitué du nom du premier attribut suivi éventuellement dessufﬁxes ’_1’, ’_2’, etc. La commande SHOW INDEX FROM nomTable donne la liste\nd e si n d e xs u ru n et a b l e .\nIl est possible de créer un index sur une partie seulement d’un attribut avec la\nsyntaxe nomAttribut(taille). C’est obligatoire pour les types BLOB etTEXT.\nLes options FOREIGN KEY, CHECK etCONSTRAINT existent pour des raisons de\ncompatibilité avec SQL ANSI, mais sont ignorées par MySQL (voir chapitre 4).\nL’option optionSelect permet d’ajouter à la table les attributs d’un ordre SQL.\nCommande OPTIMIZE TABLE\nOPTIMIZE TABLE nomTable\nCette commande réorganise une table en récupérant les espaces vides et en défrag-mentant la table. On peut aussi utiliser l’utilitaire myisamchk.\nCommande DELETE\nDELETE [LOW_PRIORITY] FROM nomTable\n[WHERE clauseWhere ] [LIMIT nbLignes ]\nCette commande détruit toutes les lignes vériﬁant les critères de la clause WHERE.\nL’option LOW_PRIORITY indique à MySQL que les destructions sont moins priori-\ntaires que toutes les requêtes courantes qui accèdent à la table.\n468\n Annexe B. Référence MySQL\nCommande SELECT\nSELECT [STRAIGHT_JOIN] [SQL_SMALL_RESULT]\n[SQL_BIG_RESULT] [HIGH_PRIORITY]\n[DISTINCT | DISTINCTROW | ALL]\nlisteAttributs[INTO {OUTFILE | DUMPFILE} ’nomFichier ’optionsExport ]\n[FROM clauseFROM\n[WHERE clauseWHERE ]\n[GROUP BY nomAttribut,...]\n[HAVING clauseWHERE ]\n[ORDER BY {entier |nomAttribut |formule } [ASC | DESC] ,...]\n[LIMIT [d´ ebut,] nbLignes ]\n[PROCEDURE nomProc´ edure ]]\nclauseFROM :\nnomTable, nomTable\nounomTable [CROSS] JOIN nomTable\nounomTable INNER JOIN nomTable\nounomTable STRAIGHT_JOIN nomTable\nounomTable LEFT [OUTER] JOIN nomTable ONexpression\nounomTable LEFT [OUTER] JOIN nomTable USING (listeAttributs )\nounomTable NATURAL LEFT [OUTER] JOIN nomTable\nounomTable LEFT OUTER JOIN nomTable ONexpression\nCette commande extrait d’une ou plusieurs tables les lignes qui satisfont la clauseWHERE. listeAttributs est une liste d’attributs provenant des tables du FROM,o u\nd’expressions impliquant des fonctions. On peut faire référence à un attribut par son\nnom, par le le nom de sa table et son nom, ou par le nom de sa base, le nom de sa\ntable et son nom : Films.Acteur.nom désigne l’attribut nomde la table Acteur de la\nbase Films.\nLes options suivantes sont des extensions de MySQL :\n•STRAIGHT_JOIN indique que la jointure doit accéder aux tables dans l’ordre\nindiqué.\n•SQL_SMALL_RESULT prévient MySQL que le résultat contiendra peu de\nlignes, ce qui permet d’optimiser l’exécution de la requête.\n•SQL_BIG_RESULT indique l’inverse.\n•HIGH_PRIORITY demande l’exécution de la requête en priorité par raport à\ncelles qui effectuent des modiﬁcations.\nCes options sont réservées aux utilisateurs avertis et doivent être utilisées en\nconnaissance de cause.\nB.2 Commandes de MySQL\n 469\nL’option INTO OUTFILE est complémentaire de LOAD DATA et accepte les mêmes\noptions. Avec l’option DUMPFILE, MySQL écrira une seule ligne dans le ﬁchier, sans\ncaractères de terminaison de lignes ou de colonnes.\nLa clause FROM consiste habituellement en une liste des tables que l’on veut\njoindre, séparées par des virgules. Un nom de table dans le FROM peut aussi être\npréﬁxé par le nom de la base (exemple : Films.Acteur). On peut remplacer la\nvirgule par le mot-clé JOIN et ses variantes : voir le chapitre 10.\nCommande INSERT\nINSERT [LOW_PRIORITY | DELAYED] [IGNORE]\n[INTO] nomTable [(nomAttribut,...)]\nVALUES (expression,...),(...),...\nou INSERT [LOW_PRIORITY | DELAYED] [IGNORE]\n[INTO] nomTable [(nomAttribut,...)]\nSELECT ...\nou INSERT [LOW_PRIORITY | DELAYED] [IGNORE]\n[INTO] nomTable\nSET nomAttribut =expression, ...\nINSERT insère une ou plusieurs lignes dans une table. MySQL propose trois formes\nde cette commande. La première et la troisième insèrent des valeurs données expli-\ncitement. La seconde ( INSERT-SELECT) insère dans la table le résultat d’un ordre\nSELECT. Cet ordre ne doit contenir ni clause ORDER BY, ni référence à la table dans\nlaquelle on insère.\nLes valeurs insérées doivent satisfaire les contraintes de la table, notamment les\nNOT NULL. Les attributs non spéciﬁés dans INSERT prennent leur valeur par défaut,\nouNULL si c’est possible.\nL’option LOW_PRIORITY indique à MySQL que les insertions sont moins priori-\ntaires que toutes les requêtes courantes qui accèdent à la table. Cela peut bloquer lescript pour un temps arbitrairement long. L’option DELAYED place les lignes à insérer\nen liste d’attente. Le script ou le programme peut alors continuer son exécution sansattendre que les lignes aient effectivement été insérées. Enﬁn, IGNORE indique que\nles lignes qui engendreraient des doublons dans la table sont ignorées.\nCommande REPLACE\nREPLACE [LOW_PRIORITY | DELAYED] [IGNORE]\n[INTO] nomTable [(nomAttribut,...)]\nVALUES (expression,...),(...),...\nou REPLACE [LOW_PRIORITY | DELAYED] [IGNORE]\n[INTO] nomTable [(nomAttribut,...)]\nSELECT ...\n470\n Annexe B. Référence MySQL\nou REPLACE [LOW_PRIORITY | DELAYED] [IGNORE]\n[INTO] nomTable\nSET nomAttribut =expression, ...\nREPLACE est identique à INSERT, à ceci près que les lignes existantes sont remplacées\npar les nouvelles, alors que l’existence d’une ligne engendre normalement une erreur\navec INSERT.\nCommande LOAD DATA\nLOAD DATA [LOW_PRIORITY] [LOCAL] INFILE ’ nomFichier ’ [REPLACE | IGNORE]\nINTO TABLE nomTable\n[FIELDS\n[TERMINATED BY caract` ere ]\n[OPTIONALLY] ENCLOSED BY caract` ere ]\n[ESCAPED BY caract` ere ]]\n[LINES TERMINATED BY caract` ere ]\n[IGNORE entier LINES]\n[(nomAttributs, ...)]\nCette commande permet d’importer un ﬁchier texte dans une table de MySQL et a\nété présentée page 29. Elle est complémentaire de SELECT ... INTO OUTFILE et\npeut aussi être utilisée par l’intermédiaire de l’utilitaire mysqlimport .\nLe ﬁchier doit être organisé en lignes, découpées en champs (ﬁelds en anglais).\n1. Une ligne est marquée par un caractère qui est, par défaut, le code standard\nde ﬁn de ligne. On peut spéciﬁer un caractère avec LINES TERMINATED BY.\n2. Les champs sont, par défaut, séparés par des tabulations. On peut indiquer le\nséparateur avec TERMINATED BY. Une autre manière de marquer les champs\nest de les encadrer avec un caractère, spéciﬁé par ENCLOSED BY. Par défaut il\nn’y a pas de caractère d’encadrement. Enﬁn, il faut prendre en compte le fait\nque les caractères de terminaison ou d’encadrement peuvent apparaître dansles champs eux-mêmes. Aﬁn d’indiquer qu’ils n’ont pas de signiﬁcation, on lespréﬁxe alors par un caractère d’échappement, qui est par défaut « \\», et peut\nêtre spéciﬁé avec ESCAPED BY.\nEn résumé, la commande LOAD DATA considère par défaut des ﬁchiers où chaque\nligne de la table correspond à une ligne du ﬁchier, les champs étant marqués par destabulations. Si une valeur contient un caractère de ﬁn de ligne ou une tabulation, cecaractère est précédé de « \\» aﬁn d’indiquer qu’il ne doit pas être interprété.\nSi l’on indique OPTIONALLY dans l’option ENCLOSED BY, MySQL accepte que\nseuls certains champs soient encadrés. Par exemple on peut vouloir encadrer les\nchaînes de caractères par « \" » pour éviter les ambiguïtés liées aux caractères blancs,\net ne pas encadrer les numériques, pour lesquels le problème ne se pose pas.\nLes valeurs à NULL sont indiquées par \\N quand il n’y a pas de caractère d’en-\ncadrement, par NULL sinon. Attention : \\N est différent de la chaîne de caractères\n’NULL’ !\nB.2 Commandes de MySQL\n 471\nLe ﬁchier peut être situé sur la machine du serveur MySQL (choix par défaut), ou\nsur la machine du client (option LOCAL). Dans le premier, cas MySQL recherche par\ndéfaut dans le répertoire des ﬁchiers de la base courante. Il est bien entendu possible\nd’indiquer un chemin d’accès absolu.\nL’option LOW_PRIORITY est identique à celle utilisée pour des INSERT. IGNORE et\nREPLACE ont les mêmes signiﬁcations que pour INSERT etREPLACE. Enﬁn, IGNORE\npermet de ne pas prendre en compte les premières lignes du ﬁchier, ce qui peut être\nutile si ce dernier contient un en-tête par exemple.\nSi le nombre ou l’ordre des champs dans les lignes du ﬁchier ne correspond pas au\nnombre ou à l’ordre des attributs de la table, il faut préciser la correspondance entre\nles champs du ﬁchier et les attributs en donnant la liste de ces derniers à la ﬁn de lacommande.\nCommande UPDATE\nUPDATE [LOW_PRIORITY] nomTable\nSET nomAttribut =expression, ...\n[WHERE clauseWHERE ] [LIMIT entier ]\nLa commande UPDATE effectue des mises à jour sur les attributs de toutes les lignes\nsatisfaisant les critères du WHERE. L’option LOW_PRIORITY indique à MySQL que les\nmises à jour sont moins prioritaires que toutes les requêtes courantes qui accèdent à\nla table.\nCommande USE\nUSE nomBase\nIndique la base courante. Toutes les tables utilisées dans un ordre SQL seront alors\nconsidérées comme appartenant à cette base. Pour accéder à une table en dehors dela base courante, on peut préﬁxer son nom par le nom de la base (voir la commandeSELECT).\nCommande FLUSH\nFLUSH optionFlush, ...\noptionFlush :\nHOSTS | LOGS | PRIVILEGES | TABLES | STATUS\nCette commande est réservée aux utilisateurs ayant le privilège reload. Elle permet\nde réinitialiser des parties de la mémoire cache de MySQL. On peut également\nutiliser l’utilitaire mysqladmin .\n472\n Annexe B. Référence MySQL\nCommande KILL\nKILL idThread\nChaque connexion à MySQL engendre un nouveau thread. La commande KILL\npermet de tuer l’un de ces thread. Cette commande est réservée aux utilisateurs ayant\nle privilège process.\nCommande SHOW\nSHOW DATABASES [LIKE expression ]\nou SHOW TABLES [FROM nomBase ] [LIKE expression ]\nou SHOW COLUMNS FROM nomTable [FROM nomBase ] [LIKE expression ]\nou SHOW INDEX FROM nomTable [FROM nomBase ]\nou SHOW STATUS\nou SHOW VARIABLES [LIKE expression ]\nou SHOW PROCESSLISTou SHOW TABLE STATUS [FROM nomBase ] [LIKE expression ]\nou SHOW GRANTS FOR utilisateur\nSHOW est la commande qui permet d’obtenir des informations sur le schéma d’une\nbase de données (description des tables, des index, des attributs) et sur les utilisateursMySQL. L’option LIKE expression fonctionne comme la clause LIKE de la com-\nmande SELECT, expression pouvant utiliser les caractères spéciaux « _ » et « % ».\nL’option STATUS afﬁche un ensemble de statistiques concernant l’état du serveur\net son historique, tandis que l’option VARIABLES montre les paramètres d’initialisa-\ntion du serveur.\nOutre l’utilitaire mysql , ces commandes sont pour la plupart accessibles avec\nmysqlshow.\nCommande EXPLAIN\nEXPLAIN nomTable\nou EXPLAIN SELECT ...\nEXPLAIN nomTable est un synonyme de SHOW COLUMNS ouDESCRIBE. EXPLAIN\nSELECT donne le plan d’exécution d’une requête SELECT.\nB.2 Commandes de MySQL\n 473\nCommande DESCRIBE\n{DESCRIBE | DESC} nomTable {nomAttribut }\nPermet d’obtenir la description d’une table ou d’un nom d’attribut dans une table.\nCe dernier peut contenir les caractères « % » et « _ » avec la même interprétation\nque dans la commande LIKE.\nCommande LOCK TABLES\nLOCK TABLES nomTable, [AS alias ]\n{READ | [LOW_PRIORITY] WRITE}[,nomTable READ | [LOW_PRIORITY] WRITE ...]\nLa commande LOCK permet d’effectuer manuellement les verrouillages, normale-\nment automatiques dans un système transactionnel. On peut placer des verrous enlecture ou en écriture et avec différents niveaux de priorité. Pour un non spécialistedes problèmes de concurrence d’accès, l’utilisation de cette commande est peurecommandée car elle a pour effet de bloquer d’autres utilisateurs\nCommande UNLOCK TABLES\nUNLOCK TABLES\nRelâche tous les verrous détenus pour la session courante.\nCommande SET\nSET [OPTION] sqlOption =valeur, ...\nPermet de donner une valeur à l’un des paramètres suivant pour la session cou-\nrante.\n•CHARACTER SET nomCS | DEFAULT. Déﬁnit le jeu de caractères utilisé pour\ninterpréter les chaînes de caractères.\n•PASSWORD [FOR utilisateur ] = PASSWORD()(’motDePasse’).\nPermet de changer un mot de passe pour un utilisateur. On peut égalementutiliser la commande GRANT : voir page 448.\n•SQL_AUTO_IS_NULL = 0 | 1. Si le paramètre est à 1, on peut obtenir ladernière ligne insérée dans une table avec un attribut AUTO_INCREMENT avec\nla clause\nWHERE auto_increment_column IS NULL\n474\n Annexe B. Référence MySQL\n•SQL_BIG_TABLES = 0 | 1. Un paramètre booléen qui, s’il est à 1, indique\nque les tables temporaires doivent être stockées sur disque.\n•SQL_BIG_SELECTS = 0 | 1. Si le paramètre est à 0, MySQL interromprales jointures qui manipulent plus de max_join_size lignes, ce dernier étant\nun paramètre du serveur.\n•SQL_LOW_PRIORITY_UPDATES = 0 | 1 . Si le paramètre vaut 1, les mises\nà jour sur une table attendent qu’il n’y ait plus d’utilisateurs effectuant deslectures.\n•SQL_SELECT_LIMIT = value | DEFAULT. Permet de ﬁxer une limite au\nnombre de lignes ramenées par un SELECT.\n•SQL_LOG_OFF = 0 | 1. Si le paramètre vaut 1, un utilisateur avec le droitprocess n’engendre pas de mise à jour du ﬁchier logstandard.\n•SQL_LOG_UPDATE = 0 | 1. Si le paramètre vaut 1, un utilisateur avec ledroit process n’engendre pas de mise à jour du ﬁchier logdes mises à jour.\n•TIMESTAMP = valeur | DEFAULT. Modiﬁe la valeur du timestamp.\n•LAST_INSERT_ID = valeur . Déﬁnit la valeur retournée par le prochain\nappel à LAST_INSERT_ID().\n•INSERT_ID = valeur . Déﬁnit la valeur à utiliser lors de la prochaine inser-\ntion d’un attribut AUTO_INCREMENT.\nCommande GRANT\nGRANT privil` ege [(listeAttributs )]\n[,privil` ege [(listeAttributs )] ]\nON {nomTable |*|* . *| nomBase.*}\nTOnomUtilisateur [IDENTIFIED BY ’motDePasse’]\n[,nomUtilisateur [IDENTIFIED BY ’motDePasse’] ...]\n[WITH GRANT OPTION]\nDéﬁnit et modiﬁe les droits d’accès des utilisateurs. Voir page 448.\nCommande REVOKE\nREVOKE privil` ege [(listeAttributs )]\n[,privil` ege [(listeAttributs )] ]\nON {nomTable |*|* . *| nomBase.*}\nFROM nomUtilisateur [,nomUtilisateur ...]\nRetire des droits à un ou plusieurs utilisateur(s). Voir page 448.\nB.3 Fonctions MySQL\n 475\nCommande CREATE INDEX\nCREATE [UNIQUE] INDEX nomIndex\nONnomTable (nomAttribut [(taille )],... )\nCréation d’un index. Voir page 204.\nCommande DROP INDEX\nDROP INDEX nomIndex ONnomTable\nSuppression d’un index.\nB.3 FONCTIONS MySQL\nLes fonctions suivantes peuvent être utilisées dans des requêtes SQL. Pour la plupart,\nelles constituent un ajout de MySQL à la norme SQL ANSI.\nABS (nombre )\nRenvoie la valeur absolue de nombre\nACOS (nombre )\nRenvoie le cosinus inverse de nombre, exprimé en radians\nASCII (car)\nRenvoie le code ASCII du caractère car\nASIN (nombre )\nRenvoie le sinus inverse de nombre, exprimé en radians\nATAN (number )\nRenvoie la tangente inverse de nombre, exprimée en radians.\nATAN2 (x, y )\nRenvoie la tangente inverse du point x,y.\nCHAR (code1, [code2, ...] )\nRenvoie une chaîne obtenue par conversion de chaque code ASCII vers le caractère\ncorrespondant.\n476\n Annexe B. Référence MySQL\nCONCAT (cha^ ıne1, [cha^ ıne2, ...] )\nRenvoie la concaténation de tous les arguments.\nCONV (nombre, base1, base2 )\nRenvoie la conversion de nombre debase1 enbase2. La base est un chiffre entre\n2 et 36.BIN (d´ ecimal )\nRenvoie la valeur binaire d’un nombre décimal.BIT_COUNT (nombre )\nRenvoie le nombre de bits à 1 dans la représentation binaire de nombre.\nCEILING (nombre )\nRenvoie le plus petit entier supérieur ou égal à nombre.\nCOS (radians )\nRenvoie le cosinus de radians.\nCOT (radians )\nRenvoie la cotangente de radians.\nCURDATE ()\nRenvoie la date courante au format AAAAMMJJ ouAAAA-MM-JJ selon que le contexte\nest numérique ou alphanumérique. Forme équivalente : CURRENT_DATE().\nCURTIME ()\nRenvoie l’heure courante au format HHMMSS ouHH:MM:SS selon que le contexte est\nnumérique ou alphanumérique. Forme équivalente : CURRENT_TIME().\nDATABASE ()\nRenvoie le nom de la base de données courante.DATE_ADD (date, INTERVAL dur´ ee p´ eriode )\nAjoute un nombre dur´ ee dep´ eriode àdate. Par exemple DATE_ADD\n(\"2000-12-01\", INTERVAL 3 MONTH) renvoie \"2001-03-01\". Les valeurs\nautorisées pour p´ eriode sont SECOND, MINUTE, HOUR, DAY, MONTH etYEAR. Forme\néquivalente : ADDDATE().\nB.3 Fonctions MySQL\n 477\nDATE_FORMAT (date, format )\nFormate une date d’après un format spéciﬁé avec les options suivantes :\n•%aNom court du jour (en anglais : « Mon », « Tue », etc.).\n•%bNom court du mois (en anglais : « Jan », « Feb », etc.).\n•%DJour du mois avec sufﬁxe (en anglais : « 1st », « 2nd », etc.).\n•%dJour du mois.\n•%HHeure, sur 24 heures, et avec deux chiffres.\n•%hHeure, sur 12 heures.\n•%iMinutes.\n•%jJour de l’année.\n•%kHeure, sur 24 heures, et avec un ou deux chiffres.\n•%lHeure, sur 12 heures, et avec un ou deux chiffres.\n•%M Nom du mois (en anglais).\n•%mNuméro du mois.\n•%pAM ou PM.\n•%rHeure complète (HH::MM::SS), sur 12 heures, avec AM ou PM.\n•%SSecondes, sur deux chiffres.\n•%sSecondes, sur un ou deux chiffres.\n•%THeure complète (HH::MM::SS), sur 24 heures.\n•%UNuméro de la semaine (N.B. : la semaine commence le dimanche).\n•%W Nom du jour (en anglais).\n•%wNuméro du jour de la semaine (NB : la semaine commence le dimanche,\njour 0).\n•%YAnnée sur quatre chiffres.\n•%yAnnée sur deux chiffres.\n•%% Pour écrire « % ».\nLes quelques fonctions qui suivent fournissent des raccourcis pour des formatages\nde date courants.\nDATE_SUB (date,INTERVAL dur´ ee p´ eriode )\nSoustrait une duréee à une date. Voir DATE_ADD() pour les valeurs des paramètres.\nDAYNAME (date )\nNom du jour (en anglais).DAYOFMONTH (date )\nNuméro du jour dans le mois.\n478\n Annexe B. Référence MySQL\nDAYOFWEEK (date )\nNuméro du jour dans la semaine.\nDAYOFYEAR (date )\nNuméro du jour dans l’année.\nDEGREES (radians )\nConversion de radians en degrés.\nELT (nombre, cha^ ıne1, cha^ ıne2, ... )\nRetourne la chaîne dont la position est nombre,o u NULL si la position n’est pas\nvalide.ENCRYPT (cha^ ıne [, cl´ e] )\nCrypte cha^ ıne, en utilisant cl´esi ce paramètre est fourni.\nFIELD (cha^ ıne, cha^ ıne1, cha^ ıne2, ... )\nRenvoie la position de la première chaîne identique à cha^ ıne parmi {cha^ ıne1,\ncha^ ıne2, ... }, 0 si rien n’est trouvé.\nFIND_IN_SET (cha^ ıne, ensemble )\nRenvoie la position de cha^ ıne dans ensemble, donné sous la forme ’elem1,\nelem2, ...’.FLOOR (nombre )\nPlus petit entier inférieur ou égal à nombre.\nFORMAT (nombre, d´ ecimales )\nFormate un numérique avec un nombre de décimales (NB : l’arrondi à d´ ecimales\nest effectué).FROM_DAYS (jours )\nRenvoie la date correspondant à jours, le jour 1 étant le premier janvier de l’an 1.\nFROM_UNIXTIME (secondes [, format] )\nRenvoie la date GMT correspondant au nombre de secondes écoulées depuis le\n1/01/1970 GMT. On peut utiliser un format identique à celui de DATE_FORMAT().\nB.3 Fonctions MySQL\n 479\nGET_LOCK (nom, dur´ ee )\nCrée un verrou nommé nom, actif pendant dur´ ee secondes. La fonction renvoie 1 si\nle verrou peut être obtenu, 0 sinon.\nGREATEST (nombre1, nombre2 [, nombre3, ...] )\nRenvoie le nombre le plus grand.HEX (d´ ecimal )\nRenvoie la valeur hexadécimale de d´ ecimal.\nHOUR (temps )\nRenvoie l’heure de temps.D o n c HOUR(’12:10:01’) renvoie 12.\nIF(test, val1, val2 )\nSitest est vrai, renvoie val1,s i n o n val2.\nIFNULL (valeur, valeur2 )\nRenvoie valeur sivaleur n’est pas à NULL, valeur2 sinon.\nINSERT (cha^ ıne, position, longueur, cha^ ıne2 )\nRenvoie une chaîne obtenue en remplaçant la sous-chaîne de cha^ ıne de longueur\nlongueur et commençant à position parcha^ ıne2.\nINSTR (cha^ ıne, souscha^ ıne )\nRenvoie la position de souscha^ ıne dans cha^ ıne.\nISNULL (expression )\nRenvoie vrai (1) si expression est à NULL, 0 sinon.\nINTERVAL (valeur, v1, v2, ... )\nRenvoie 0 si valeur est la plus petite valeur, 1 valeur est comprise entre v1etv2,\netc.LAST_INSERT_ID ()\nRenvoie la dernière valeur générée pour un champ AUTO_INCREMENT.\n480\n Annexe B. Référence MySQL\nLCASE (cha^ ıne )\nRenvoie cha^ ıne en minuscules. Synonyme : LOWER_CASE.\nLEAST (nombre1, nombre2 [, nombre3, ...] )\nR e n v o i el ep l u sp e t i tn o m b r e .\nLEFT (cha^ ıne, longueur )\nRenvoie les longueur premiers caractères de cha^ ıne.\nLENGTH (cha^ ıne )\nRenvoie la longueur de cha^ ıne. Synonymes : CHAR_LENGTH(),\nCHARACTER_LENGTH().\nLOCATE (souscha^ ıne, cha^ ıne [, nombre] )\nIdem que INSTR(), mais avec des arguments inversés. nombre indique la position à\npartir de laquelle on recherche la sous-chaîne.\nLOG (nombre )\nLogarithme népérien de nombre.\nLOG10 (nombre )\nLogarithme base 10 de nombre.\nLPAD (cha^ ıne, longueur, motif )\nRenvoie cha^ ıne complétée à gauche avec motif autant de fois que nécessaire pour\nque la longueur soit longueur.\nLTRIM (cha^ ıne )\nRetire tous les caractères blancs au début de cha^ ıne.\nMID (cha^ ıne, position, longueur )\nRenvoie la sous-chaîne de longueur longueur decha^ ıne, débutant à la position\nposition. Synonyme : SUBSTRING().\nMINUTE (temps )\nRenvoie les minutes de temps.D o n c MINUTE(’12:10:01’) renvoie 10.\nB.3 Fonctions MySQL\n 481\nMOD (nombre1, nombre2 )\nRenvoie nombre1 modulo nombre2.\nMONTH (date )\nRenvoie le mois de date (un nombre).\nMONTHNAME (date )\nRenvoie le nom du mois de date (en anglais).\nNOW ()\nRenvoie la date et l’heure courantes. Synonymes : SYSDATE() et\nCURRENT_TIMESTAMP().\nOCT (d´ ecimal )\nRenvoie la valeur octale de d´ ecimal.\nPASSWORD (cha^ ıne )\nCryptage de cha^ ıne avec la fonction utilisée pour les mots de passe MySQL.\nPERIOD_ADD (date, nbMois )\nAjoute nbMois mois à date qui doit être au format AAMM ouAAAAMM.\nPERIOD_DIFF (date2, date2 )\nRenvoie le nombre de mois entre les deux dates, qui doivent être au format AAMM ou\nAAAAMM.PI()\nRenvoie le nombre π.\nPOW (n1, n2 )\nRenvoie n1n2. Synonyme : POWER().\nQUARTER (date )\nRenvoie le numéro du trimestre de date.\n482\n Annexe B. Référence MySQL\nRADIANS (degr´ e)\nRenvoie l’angle degr´ econverti en radians.\nRAND ([gener] )\nRenvoie une valeur aléatoire entre 0 et 1. Le générateur gener peut être spéciﬁé\noptionellement.\nRELEASE_LOCK (nom)\nRelâche le verrou nom créé avec la fonction GET_LOCK(). Renvoie 1 si l’opération\nréussit, 0 si elle échoue, et NULL si le verrou n’existe pas.\nREPEAT (cha^ ıne, n )\nRenvoie une chaîne constituée de cha^ ıne répétée nfois.\nREPLACE (cha^ ıne, nouveau, ancien )\nRenvoie une chaîne où toutes les occurrences de ancien sont remplacées par\nnouveau.\nREVERSE (cha^ ıne )\nRenvoie la chaîne miroir de cha^ ıne.\nRIGHT (cha^ ıne, longueur )\nR e n v o i el as o u s - c h a î n ed el o n g u e u r longueur àp a r t i rd el aﬁ nd e cha^ ıne.\nROUND (nombre [, nbDec] )\nArrondit nombre au nombre de décimales donné par nbDec. Si ce dernier n’est pas\nspéciﬁé, la fonction arrondit à l’entier le plus proche.RPAD (cha^ ıne, longueur, motif )\nRenvoie cha^ ıne complétée à droite avec motif autant de fois que nécessaire pour\nque la longueur soit longueur.\nRTRIM (cha^ ıne, longueur, motif )\nRenvoie cha^ ıne sans les éventuels caractères blancs à sa ﬁn.\nB.3 Fonctions MySQL\n 483\nSECOND (temps )\nRenvoie les secondes de temps.D o n c SECOND(’12:10:01’) renvoie 1.\nSEC_TO_TIME (secondes )\nRenvoie le nombre d’heures, de minutes et de secondes, au format HH:MM:SS ou\nHHMMSS selon le contexte, dans secondes.\nSIGN (nombre )\nRenvoie le signe de nombre.\nSIN(radians )\nRenvoie le sinus de radians.\nSOUNDEX (cha^ ıne )\nRenvoie le code Soundex de cha^ ıne (utilisé pour les comparaisons de chaînes).\nSPACE (nombre )\nRenvoie une chaîne avec nombre caractères blancs.\nSQRT (nombre )\nRenvoie√\nnombre .\nSTRCMP (cha^ ıne1, cha^ ıne2 )\nRenvoie 0 si les chaînes sont identiques, -1 si cha^ ıne1 est avant cha^ ıne2 dans\nl’ordre lexicographique, 1 sinon.\nSUBSTRING_INDEX (cha^ ıne, car, n )\nRenvoie une sous-chaîne obtenue en comptant nfois le caractère car dans cha^ ıne,\nen prenant tout ce qui est à gauche si nest négatif, tout ce qui est à droite sinon.\nSUBSTRING (cha^ ıne, position, longueur )\nVoir MID().\nTAN (radians )\nRenvoie la tangente de radians.\n484\n Annexe B. Référence MySQL\nTIME_FORMAT (temps, format )\nFormate temps selon format. Voir la fonction DATE_FORMAT().\nTIME_TO_SECOND (temps )\nRenvoie le nombre de secondes dans temps.\nTO_DAYS (date )\nRenvoie le nombre de jours entre le 01/01/01 et date.\nTRIM ([BOTH|LEADING|TRAILING] [car] [FROM] cha^ ıne )\nPermet de retirer le caractère car en début ou en ﬁn de cha^ ıne, ou les deux. Par\ndéfaut, car est le caractère blanc.\nTRUNCATE (nombre, nbDec )\nTronque nombre (sans arrondi !) au nombre de décimales donné par nbDec.\nUCASE (cha^ ıne )\nRenvoie cha^ ıne en majuscules. Synonyme : UPPER.\nUNIX_TIMESTAMP ([date] )\nRenvoie le nombre de secondes écoulées entre le 01/01/1970 GMT et date.P a r\ndéfaut, date est la date courante.\nUSER ()\nRenvoie le nom de l’utilisateur courant. Synonymes : SYSTEM_USER(),\nSESSION_USER().\nVERSION ()\nRenvoie la version de MySQL.WEEK (date )\nRenvoie le numéro de la semaine de date.\nYEAR (date )\nRenvoie l’année de date.\nFonctions PHPC\nPHP propose un nombre impressionnant de fonctions pour tous les usages : accès\naux ﬁchiers, accès aux bases de données, programmation réseau, production deﬁchiers PDF , programmation LDAP , etc. Il est évidemment hors de question de lesénumérer ici d’autant que vous trouverez facilement, dans la documentation en ligne\nsurwww.php.net , une description régulièrement actualisée de toutes les fonctions\nPHP , accompagnée de commentaires et d’exemples. La documentation PHP peut\négalement être téléchargée librement sur le Web, ce qui permet de disposer au formatPDF ou HTML d’une liste des fonctions. Cette liste évolue d’ailleurs rapidement etla documentation en ligne est le meilleur moyen de se tenir à jour.\nComme il est cependant agréable de disposer d’un document récapitulant les\nfonctions les plus couramment utilisées, cette annexe présente une sélection com-prenant les catégories suivantes :\n•Page 486 : fonctions « générales », les plus utiles.\n•Page 493 : les principales fonctions de manipulation de chaînes de caractères.\n•Page 496 : fonctions de manipulation de dates.\n•Page 497 : fonctions d’accès aux tableaux.\n•Page 504 : fonctions d’accès aux ﬁchiers.\n•Page 500 : fonctions XML présentées dans le chapitre 8.\n•Page 507 : enﬁn, bien entendu, la liste complète des fonctions de l’interfacePHP/MySQL.\nAu sein de chaque groupe, les fonctions sont classées par ordre alphabétique.\nSi vous ne trouvez pas, dans la liste qui suit, la fonction d’intérêt général dont\nvous auriez besoin, ne vous lancez surtout pas dans l’écriture par vous-même de cette\nfonction avant d’avoir lancé une recherche dans la documentation en ligne trèsefﬁcace et directe que vous trouverez à l’adresse www.php.net .\n486\n Annexe C. Fonctions PHP\nC.1 FONCTIONS GÉNÉRALES\nabs\nnumber abs (number nombre )\nRenvoie la valeur absolue de nombre, qui peut être un entier ou un ﬂottant.\nbasename\nstring basename (string chemin )\nÉtant donné un chemin d’accès à un ﬁchier, la fonction renvoie le nom du ﬁchier.\nLa fonction complémentaire est dirname() qui renvoie le chemin sans le nom du\nﬁchier.\ncall_user_func\nmixte call_user_func (float nomFonction [, mixte param1\n[, mixte param2 ]])\nAppelle la fonction nomFonction avec les paramètres param1, param2.\ncall_user_method\nmixte call_user_method (float nomM´ ethode, objet,\n[, mixte param1 [, mixte param2 ]])\nAppelle la méthode nomM´ ethode sur l’objet objet. Voir page 339 pour un exemple\nd’utilisation de cette fonction.ceil\nint ceil (float nombre )\nRenvoie le plus petit entier supérieur ou égal à nombre.\ndirname\nstring dirname (string chemin )\nÉtant donné un chemin d’accès à un ﬁchier, la fonction renvoie le chemin, sans le\nnom du ﬁchier.\nempty\nbool empty (variable )\nRenvoie faux si la variable est déﬁnie et a une valeur non nulle, vrai sinon.\nC.1 Fonctions générales\n 487\neval\nmixed eval (string commandes )\nCette fonction exécute les commandes PHP contenues dans la chaîne de caractères\ncommandes. Cela peut être utile pour des applications où des commandes sont créées« à la volée », ou pour exécuter des scripts stockés dans une base de données. Siune des commandes exécutées est return val, la valeur val est aussi celle qui est\nrenvoyée par eval().\nexec\nstring exec (string commande, [, string tableau [, int retour ]])\nCette fonction exécute une commande système et renvoie la dernière ligne produitepar l’exécution de cette commande. Rien n’est donc envoyé au navigateur. Si onpasse un paramètre tableau, ce dernier contiendra à la ﬁn de l’exécution toutes\nles lignes produites par commande. Si de plus on passe un paramètre retour,i l\ncontiendra à la ﬁn de l’exécution le code retour de commande.\nIl est déconseillé d’exécuter des commandes provenant de formulaires. Si c’est\nnécessaire, la fonction EscapeShellCmd() offre un mode plus sécurisé que exec().\nfloor\nint floor (float nombre )\nRenvoie le plus grand entier inférieur ou égal à nombre.\ndefine\nbool define (string nomConstante, mixed valeur\n[, bool insensibleCasse ])\nDéﬁnit une constante de nom nomConstante avec la valeur valeur. Par défaut, le\nnom d’une constante est sensible à la casse (autrement dit CONSTANTE est différent\ndeConstante). Ce n’est plus vrai si le dernier argument (optionnel) est à vrai.\ndefined\nbool defined (string nomConstante )\nRenvoie vrai si la constante nomConstante est déﬁnie.\nereg\nint ereg (string motif, string cha^ ıne [, array tabOcc ])\nÉvalue une expression régulière et place les occurrences trouvées dans tabOcc.V o i r\npage 86 pour un développement sur les expressions régulières.\n488\n Annexe C. Fonctions PHP\neregi\nint eregi (string motif, string cha^ ıne [, array tabOcc ])\nIdem que la précédente, mais l’évaluation n’est pas sensible à la casse (majuscules/-\nminuscules).\nereg_replace\nstring ereg_replace (string motif, string remplacement,\nstring cha^ ıne )\nÉvalue une expression régulière, remplace les occurrences trouvées par remplace-\nment, et renvoie la nouvelle chaîne.eregi_replace\nint eregi_replace (string motif, string remplacement,\nstring cha^ ıne )\nIdem que la précédente, mais l’évaluation n’est pas sensible à la casse (majuscules/-\nminuscules).\nextension_loaded\nbool extension_loaded (string nomExtension )\nRenvoie true si l’extension est chargée, false sinon. Les noms des extensions sont\nafﬁchés avec phpinfo().\ngetenv\nstring getenv (string variable )\nRenvoie la valeur de la variable d’environnement variable, ou 0 si elle n’existe pas.\ngetType\nstring getType (variable )\nR e n v o i el et y p ed ’ u n ev a r i a b l e .\nHeader\nHeader (cha^ ıne )\nCette fonction produit un en-tête HTTP comme Content-type, Location,\nExpires, etc. Elle doit être utilisée avant toute production de texte HTML.\nC.1 Fonctions générales\n 489\nhtmlEntities\nstring htmlEntities (string cha^ ıne )\nCette fonction remplace tous les caractères réservés de HTML (comme par exemple\n« & »), par une entité (par exemple &amp;).\nis_array\nbool is_array (variable )\nRenvoie vrai si variable est un tableau.\nis_double\nbool is_double (variable )\nRenvoie vrai si variable est de type double.\nis_float\nbool is_float (variable )\nRenvoie vrai si variable est de type float.\nis_int\nbool is_int (variable )\nRenvoie vrai si variable est un entier.\nis_long\nbool is_long (variable )\nRenvoie vrai si variable est de type long.\nis_object\nbool is_object (variable )\nRenvoie vrai si variable est un objet.\nis_string\nbool is_string (variable )\nRenvoie vrai si variable est une chaîne.\n490\n Annexe C. Fonctions PHP\nisSet\nbool isSet (variable )\nRenvoie vrai si la variable est déﬁnie et a une valeur, faux sinon.\nmail\nbool mail (string destinataire,\nstring sujet,\nstring texte,\nstring ajoutEnt^ ete )\nCette fonction envoie un email. Le dernier paramètre, optionnel, permet d’ajouter\ndes informations dans l’en-tête de l’email.\nmax\nmixed max (mixed var1, mixed var2, ... mixed varN )\nRenvoie la plus grande des variables passées en argument. On peut aussi lui passer un\ntableau, au lieu d’une liste de variables.\nmd5\nstring md5 (string cha^ ıne )\nMD5 est une fonction de hachage qui renvoie une chaîne de 32 octets associée à la\nchaîne cha^ ıne. Il est à peu près impossible d’obtenir deux valeurs identiques pour\ndes chaînes différentes (collision) ce qui permet de considérer cette fonction comme\nun cryptage de chaîne.\nmin\nmixed min (mixed var1, mixed var2, ... mixed varN )\nRenvoie la plus petite des variables passées en argument. On peut aussi passer un\ntableau, au lieu d’une liste de variables.\nnl2br\nstring nl2br (string cha^ ıne )\nRemplace les retours à la ligne dans cha^ ıne par<br/> pour que ces retours soient\nreportés correctement dans un afﬁchage HTML.\nC.1 Fonctions générales\n 491\npassthru\nstring passthru (string commande [, int retour ]])\nCette fonction est identique à exec(), mais le résultat produit par commande est\nenvoyé directement au navigateur. En d’autres termes, on fait appel à un pro-\ngramme ou à une commande système auxiliaire pour produire le document, oul’extrait de document, transmis au navigateur. La fonction system() est analogue à\npassthru().\nphpInfo\nphpInfo ()\nAfﬁche des informations sur l’interpréteur PHP .print\nprint (string cha^ ıne )\nImprime une chaîne sur la sortie standard. Identique à echo() – à ceci près qu’il faut\nencadrer cha^ ıne par des parenthèses.\nprint_r\nprint_r (array tab)\nAfﬁche tous les éléments d’un tableau (fonctionne aussi pour n’importe quel type de\nvariable).\nprintf\nprintf (string format, variable1, variable2, ..)\nImprime une liste de variables selon un format décrit comme pour la fonction C de\nmême nom.\nputenv\nputenv (string expression )\nDéﬁnit une variable d’environnement comme indiqué dans expression qui peut\nêtre, par exemple, \"PATH=$path\".\nrand\nint rand ()\nEngendre une valeur aléatoire.\n492\n Annexe C. Fonctions PHP\nround\nint round (float nombre )\nR e n v o i el ’ e n t i e rl ep l u sp r o c h ed enombre.\nSetCookie\nbool setCookie (string nom,\nstring valeur,\nint expiration,\nstring chemin,\nstring domaine,\nstring s´ ecurit´ e)\nCette fonction permet de demander au navigateur d’enregistrer un cookie avec l’en-\ntêteSet-Cookie : voir page 17. Tous les paramètres sauf le premier sont optionnels :\nsi seul le nom est indiqué, le cookie sera supprimé. Les cookies doivent faire partie de\nl’en-tête d’un document, ce qui implique que la fonction doit être appelée avant de\nproduire la première balise HTML.\nLa durée de vie du cookie est indiquée par expiration exprimée en temps\nUnix. On peut donc appeler la fonction time() et ajouter au résultat le nombre de\nsecondes donnant la durée de vie. Par défaut un cookie disparaît quand le programme\nclient (navigateur) s’arrête. Les paramètres chemin etdomaine déﬁnissent la visi-\nbilité du cookie pour les serveurs qui dialoguent par la suite avec le navigateur (voir\npage 17). Par défaut, seul le serveur qui a créé le cookie peut le lire. Enﬁn, s´ ecurit´ e\nindique que le cookie sera transféré en mode sécurisé avec SSL ( Secure Socket Layer ).\nunset\nunset (variable )\nDétruit variable, qui n’est alors plus déﬁnie.\nurlDecode\nstring urlDecode (string cha^ ıne )\nCette fonction décode le paramètre cha^ ıne provenant d’une URL, pour y remplacer\npar exemple les « + » par des espaces.\nurlEncode\nstring urlEncode (string cha^ ıne )\nCette fonction code le paramètre cha^ ıne de manière à ce qu’elle puisse être trans-\nmise dans une URL. Les blancs dans cha^ ıne sont par exemple transformés en « + »\ndans la chaîne produite.\nC.2 Chaînes de caractères\n 493\nC.2 CHAÎNES DE CARACTÈRES\naddSlashes\nstring addSlashes (string cha^ ıne )\nRenvoie une chaîne identique à cha^ ıne,a v e cd e s« \\» devant chaque apostrophe\nsimple (’), apostrophe double (\") et barre oblique inversée (\\). La chaîne ainsi\nobtenue peut être utilisée sans risque dans une requête SQL.\nchop\nstring chop (string cha^ ıne )\nRenvoie une chaîne identique à cha^ ıne, après suppression de tous les caractères\nblancs en ﬁn de chaîne.explode\narray explode (string s´ eparateur, string cha^ ıne )\nDivise cha^ ıne en valeurs séparées par s´ eparateur, et renvoie le tableau de ces\nvaleurs.implode\nstring implode (array tableau, string s´ eparateur )\nFonction inverse de explode() : renvoie une chaîne avec les valeurs de tableau\nséparées par s´ eparateur.\nltrim\nstring ltrim (string cha^ ıne )\nRenvoie une chaîne identique à cha^ ıne, après suppression de tous les caractères\nblancs en début de chaîne.strchr\nstring strchr (string cha^ ıne1, string cha^ ıne2 )\nRenvoie le contenu de cha^ ıne1 à partir de la première occurrence de cha^ ıne2.\nRenvoie faux si cha^ ıne2 n’apparaît pas dans cha^ ıne1.\n494\n Annexe C. Fonctions PHP\nstrcmp\nint strcmp (string cha^ ıne1, string cha^ ıne2 )\nRenvoie une valeur négative si cha^ ıne1 précède cha^ ıne2 dans l’ordre lexicogra-\nphique, une valeur positive si cha^ ıne1 est supérieure à cha^ ıne2, 0 si les chaînes\nsont égales.\nstrcspn\nint strcspn (string cha^ ıne1, string cha^ ıne2 )\nRenvoie la position du premier caractère de cha^ ıne1 qui fait aussi partie de\ncha^ ıne2.stripSlashes\nstring stripSlashes (string cha^ ıne )\nRenvoie une chaîne identique à cha^ ıne, avec suppression des « \\» devant chaque\napostrophe simple (’), apostrophe double (\") et barre oblique inversée ( \\). C’est la\nfonction inverse de addSlashes().\nstrlen\nint strlen (string cha^ ıne )\nRenvoie la longueur de cha^ ıne.\nstrpos\nint strpos (string cha^ ıne1, string cha^ ıne2 )\nR e n v o i el ap o s i t i o nd el ap r e m i è r eo c c u r r e n c ed e cha^ ıne2 dans cha^ ıne1. Renvoie\nfaux si rien n’est trouvé.strrpos\nint strrpos (string cha^ ıne, char caract` ere )\nR e n v o i el ap o s i t i o nd el ad e r n i è r eo c c u r r e n c ed e caract` ere dans cha^ ıne. Renvoie\nfaux si rien n’est trouvé.substr_count\nint substr_count (string cha^ ıne1, string cha^ ıne2 )\nRenvoie le nombre d’occurrences de cha^ ıne2 dans cha^ ıne1\nC.2 Chaînes de caractères\n 495\nstrrchr\nstring strrchr (string cha^ ıne1, string cha^ ıne2 )\nRenvoie le contenu de cha^ ıne1 à partir de la dernière occurrence de cha^ ıne2.\nRenvoie faux si cha^ ıne2 n’apparaît pas dans cha^ ıne1.\nstrrev\nstring strrev (string cha^ ıne )\nRenvoie la chaîne miroir de cha^ ıne.\nstrspn\nint strspn (string cha^ ıne1, string cha^ ıne2 )\nRenvoie la position du premier caractère de cha^ ıne1 qui ne fait pas partie de\ncha^ ıne2.\nstrToLower\nstring strToLower (string cha^ ıne )\nRenvoie la chaîne mise en minuscules.\nstrToUpper\nstring strToUpper (string cha^ ıne )\nR e n v o i el ac h a î n em i s ee nm a j u s c u l e s .substr\nstring substr (string cha^ ıne, int d´ ebut, int longueur )\nRenvoie la sous-chaîne de cha^ ıne de longueur longueur à partir de d´ ebut.\ntrim\nstring trim (string cha^ ıne )\nRenvoie une chaîne identique à cha^ ıne après suppression des blancs au début et à\nla ﬁn.\n496\n Annexe C. Fonctions PHP\nC.3 DATES\ncheckdate\nbool checkdate (int mois, int jour, int an)\nContrôle la validité d’une date : le 32/89/1879879 n’est pas une date valide !\ndate\nstring date (string format [, int timestamp ])\nRenvoie la date correspondant à timestamp, ou la date courante si le paramètre est\nomis, formaté avec format. Les options pour le formatage sont les suivantes.\n•a«a m»o u«p m» .\n•A«A M»o u«P M» .\n•dJour du mois, sur deux chiffres avec un zéro initial si besoin est.\n•DTrois premières lettres du nom du jour (en anglais).\n•FNom du mois (en anglais).\n•hHeure, sur 12 heures, avec deux chiffres.\n•HHeure, sur 24 heures, et avec deux chiffres.\n•gHeure, sur 12 heures, avec un ou deux chiffres.\n•GHeure, sur 24 heures, et avec un ou deux chiffres.\n•iMinutes, de 00 à 59.\n•jJour du mois, sur un ou deux chiffres.\n•lNom du jour (en anglais).\n•L, 0 ou 1 selon qu’il s’agit d’une année bissextile ou pas.\n•mNuméro du mois, de 01 à 12.\n•nNuméro du mois, de 1 à 12.\n•MTrois premières lettres du nom du mois (en anglais).\n•sSecondes, de 00 à 59.\n•tNombre de jours dans le mois courant (28 à 31).\n•UNombre de secondes depuis le 01/01/1970.\n•w, chiffre du jour de la semaine, de 0 (dimanche) à 6 (samedi).\n•YAnnée sur quatre chiffres.\n•yAnnée sur deux chiffres.\n•zNuméro du jour de l’année, commençant à 0.\ngetdate\narray getdate (int timestamp )\nC.4 Tableaux\n 497\nRenvoie les informations propres à timestamp sous la forme d’un tableau associatif\ncontenant des éléments indexés par les clés suivantes :\n•seconds : les secondes.\n•minutes : les minutes.\n•hours : les heures.\n•mday : jour du mois.\n•wday : numéro du jour de la semaine.\n•mon:n u m é r od um o i s .\n•year: l’année.\n•yday : numéro du jour dans l’année.\n•weekday : nom (en anglais) du jour.\n•month : nom (en anglais) du mois.\nmkTime\nint mkTime (int heure, int minutes, int secondes,\nint mois, int jour, int annee )\nRenvoie un timestamp UNIX (secondes depuis le 01/01/1970).\ntime\nint time ()\nRenvoie le timestamp UNIX (secondes depuis le 01/01/1970) de la date courante.\nC.4 TABLEAUX\nRappelons qu’un tableau est une suite de valeurs, indexées par un chiffre ou par une\nclé(tableaux associatifs). Le terme « élément » désigne la paire clé/valeur ou indice/-\nvaleur. La liste qui suit est une sélection qui ne donne pas de manière exhaustive les\nfonctions d’interaction avec les tableaux PHP .\narray\narray array (listeValeurs )\nCrée un tableau avec initialisation à partir de la liste des valeurs fournies. Voir le\nchapitre 11 pour l’utilisation de cette fonction.\narray_key_exists\nbool array_key_exists (cl´e,tableau )\nRenvoie true si la clé existe dans le tableau.\n498\n Annexe C. Fonctions PHP\narsort\narsort (array tableau )\nTrie le tableau associatif tableau sur les valeurs, en ordre descendant, et en gardant\nl’association clé/valeur.\nasort\nasort (array tableau )\nTrie le tableau associatif tableau sur les valeurs, en ordre ascendant, et en gardant\nl’association clé/valeur.count\nint count (array tableau )\nRenvoie le nombre d’éléments du tableau.current\nstring current (array tableau )\nChaque tableau dispose d’un pointeur interne qui adresse, initialement, le premier\nélément. Cette fonction renvoie la valeur de l’élément courant du tableau, sansmodiﬁer le pointeur interne.\neach\narray each (array tableau )\nCette fonction renvoie la clé et la valeur de l’élément courant, et avance le curseur.\nLe résultat est un tableau à quatre éléments, avec les clés 0, 1, keyetvalue.O np e u t\ntypiquement exploiter ce résultat avec la construction list().\nwhile ( list ($cle, $element) = each ($tableau))\n...\nend\nend (array tableau )\nPositionne le pointeur interne sur le dernier élément du tableau.\nC.4 Tableaux\n 499\nin_array\nbool in_array (valeur, tableau )\nRenvoie true si la valeur existe dans le tableau.\nkey\nmixed key (array tableau )\nRenvoie la clé de l’élément courant du tableau, sans modiﬁer le pointeur interne.\nksort\nksort (array tableau )\nTrie le tableau associatif sur la clé.list\nlist (variable1, variable2, ... variableN =tableau )\nIl s’agit d’une construction syntaxique plus que d’une fonction. Elle permet d’af-\nfecter en une seule instruction la valeur des variables variable1, variable2, ...\nvariableN avec les Npremiers éléments d’un tableau. Voir l’exemple donné pour\nla fonction each().\nmax\nmax (array tableau )\nRenvoie la plus grande valeur du tableau.\nmin\nmin (array tableau )\nRenvoie la plus petite valeur du tableau.next\nmixed next (array tableau )\nRenvoie la valeur du prochain élément du tableau et avance le pointeur interne. La\nfonction renvoie faux quand le dernier élément est dépassé.\n500\n Annexe C. Fonctions PHP\nprev\nmixed prev (array tableau )\nRenvoie la valeur de l’élément précédent du tableau et recule le pointeur interne. La\nfonction renvoie faux quand le premier élément est dépassé.\nreset\nreset (array tableau )\nPositionne le pointeur interne sur le premier élément du tableau.rsort\nrsort (array tableau )\nTrie le tableau sur les valeurs, en ordre descendant.sort\nsort (array tableau )\nTrie le tableau sur les valeurs, en ordre ascendant.\nC.5 FONCTIONS XML\nLes fonctions XML données ci-dessous sont celles de l’interface SimpleXML, puis de\nl’API SAX. L’utilisation de ces fonctions est décrite dans le chapitre 8 où se trouvent\négalement les quelques fonctions du processeur XSLT. On trouve dans les versions\nrécentes de PHP (postérieures à la 4.2.0) des fonctions correspondant à l’interfaceDOM de traitement des documents XML, non décrites ici.\nSimpleXML\nLes trois fonctions suivantes permettent de créer un objet SimpleXML. L’objetobtenu représente l’élément racine du document.\nSimpleXML_load_file\nobject SimpleXML_load_file (string nomFichier )\nCharge le document XML du ﬁchier nomFichier dans un objet SimpleXML.\nSimpleXML_load_string\nobject SimpleXML_load_string (string cha^ ıne )\nCharge le document XML contenu dans cha^ ıne dans un objet SimpleXML.\nC.5 Fonctions XML\n 501\nSimpleXML_import_DOM\nobject SimpleXML_import_DOM (object nœud )\nCharge le document XML à partir du nœud d’un document DOM.\nLes fonctions qui suivent sont des méthodes applicables à un objet SimpleXML,\ndésigné par « objet-cible ». Voir page 333.\nasXML\nstring asXML ()\nRenvoie une chaîne contenant la représentation sérialisée du document XML stocké\ndans l’objet-cible.\nattributes\ntableau attributes ()\nRenvoie un tableau associatif contenant les attributs (nom et valeur) de l’objet-cible.\nchildren\ntableau children ()\nRenvoie un tableau d’objets contenant les éléments-ﬁls de l’objet-cible.\nXPath\ntableau XPath (cha^ ıne expressionXPath )\nRenvoie un tableau d’objets contenant le résultat de l’évaluation de l’expression\nXPath en prenant l’objet-cible comme nœud contexte.\nSAX\nxml_error_string\nstring xml_error_string (int code )\nRenvoie le message d’erreur correspondant à la valeur de code, ce dernier étant\nfourni par la fonction xml_get_error_code().\nxml_get_current_byte_index\nint xml_get_current_byte_index (parseur )\nRenvoie la position courante du parseur au cours de son analyse.\n502\n Annexe C. Fonctions PHP\nxml_get_current_column_number\nint xml_get_current_column_number (parseur )\nRenvoie la position du parseur dans la ligne courante. Utile pour retrouver l’empla-\ncement d’une erreur.\nxml_get_current_line_number\nint xml_get_current_line_number (parseur )\nRenvoie la ligne courante où se trouve le parseur.xml_get_error_code\nint xml_get_error_code (parseur )\nR e n v o i el ec o d ed el ad e r n i è r ee r r e u rr e n c o n t r é e .xml_parse\nxml_parse (parseur, donn´ ees,[ final ])\nAnalyse le fragment de document XML contenu dans le paramètre donn´ ees.C e\nfragment peut être incomplet tant que final vaut false, le parseur attendant alors\nle fragment suivant pour poursuivre son analyse. La valeur true pour final indique\nquedonn´ ees contient le dernier fragment (ou tout le document). Ce découpage\npermet d’analyser un document par « paquets » d’une taille raisonnable.xml_parser_create\nmixte xml_parser_create ([codage ])\nCrée un parseur. Le paramètre (optionel) codage indique le codage des caractères à\nemployer : ISO-8859-1 (le défaut), US-ASCII ouUTF-8.\nxml_parser_free\nxml_parser_free (parseur )\nDétruit un parseur.xml_parser_get_option\nstring xml_parser_get_option (parseur, string option )\nC.5 Fonctions XML\n 503\nRenvoie la valeur de l’option option. Seules deux options sont proposées :\n•XML_OPTION_CASE_FOLDING : booléen indiquant que les noms d’éléments\nsont mis en majuscules.\n•XML_OPTION_TARGET_ENCODING : le jeu de caractères pour le codage du\nrésultat.\nxml_parser_set_option\nxml_parser_set_option (parseur, string option, string valeur )\nAffecte une valeur à une option (voir ci-dessus).\nxml_parse_into_struct\nxml_parse_into_struct (parseur, string donnees,\nstring tabValeur, string tabIndex )\nAnalyse complètement un document XML et le représente dans deux tableaux PHP .\nAssez complexe : voir la documentation PHP pour un exemple complet.\nxml_set_character_data_handler\nxml_set_character_data_handler (parseur, fChar )\nAffecte la fonction fChar() au traitement des données caractères. Cette fonction\ndoit accepter deux arguments : le parseur, et la chaîne contenant les données carac-\ntères.\nxml_set_default_handler\nxml_set_default_handler (parseur, fDef )\nAffecte la fonction fDef() (mêmes arguments que la précédente) au traitement des\ncomposants du document XML pour lesquels il n’existe pas d’autre « déclencheur ».\nxml_set_element_handler\nxml_set_element_handler (parseur, fElemDebut, fElemFin )\nAffecte la fonction fElemDebut() au traitement des balises ouvrantes, et\nfElemFin() au traitement des balises fermantes. Voir les exemples du chapitre 8.\nxml_set_external_entity_ref_handler\nxml_set_external_entity_ref_handler (parseur, fEntExt )\nAffecte la fonction fEntExt() au traitement des entités externes.\n504\n Annexe C. Fonctions PHP\nxml_set_notation_decl_handler\nxml_set_notation_decl_handler (parseur, fNotation )\nAffecte la fonction fNotation() au traitement des notations XML. Les « nota-\ntions » (très rarement utilisées) fournissent un moyen de décrire dans un document\nXML des données non alphanumériques.\nxml_set_object\nxml_set_object (parseur, objet )\nIndique au parseur que les déclencheurs sont les méthodes de objet.\nxml_set_processing_instruction_handler\nxml_set_processing_instruction_handler (parseur, fPI)\nAffecte la fonction fPI() au traitement des instructions de traitement. Cette\nfonction doit accepter trois paramètres : le parseur, un paramètre nom contenant le\nnom de l’instruction, et un paramètre donn´ ees contenant la chaîne constituant\nl’instruction.\nC.6 ACCÈS AUX FICHIERS\nchdir\nchdir (string r´ epertoire )\nPermet de se positionner dans r´ epertoire.\nclosedir\nclosedir (int r´ epertoire )\nReferme le pointeur de répertoire (qui doit avoir été ouvert par opendir() aupara-\nvant).copy\ncopy (string source, string destination )\nCopie un ﬁchier de source versdestination.\nfclose\nfclose (int descFichier )\nF e r m el eﬁ c h i e ri d e n t i ﬁ ép a rdescFichier.\nC.6 Accès aux fichiers\n 505\nfeof\nbool feof (int descFichier )\nRenvoie vrai si la ﬁn du ﬁchier identiﬁé par descFichier est atteinte.\nfgetc\nchar fgetc (int descFichier )\nRenvoie le caractère placé à la position courante du ﬁchier identiﬁé par descFi-\nchier, et avance d’une position.\nfgets\nstring fgets (int descFichier, int longueur )\nRenvoie une ligne du ﬁchier, de taille maximale longueur.\nfile\narray file (string nomFichier )\nCharge tout le contenu de nomFichier dans un tableau, avec un élément par ligne.\nfile_exists\nbool file_exists (string nomFichier )\nTeste l’existence de nomFichier.\nfilesize\nint filesize (string nomFichier )\nRenvoie la taille de nomFichier.\nfopen\nint fopen (string nomFichier, string mode )\nOuvre le ﬁchier nomFichier et renvoie un descripteur qui peut être utilisé ensuite\npour lire le contenu. Les modes d’ouverture sont les suivants :\n1.r: lecture seule.\n2.w: écriture seule. Le contenu du ﬁchier est effacé s’il existe déjà.\n3.a: ajout. Le ﬁchier est créé s’il n’existe pas.\nOn peut combiner des options, comme par exemple rwqui indique à la fois lecture et\nécriture. On peut aussi, dans tous les cas, ajouter un bà la ﬁn du mode pour indiquer\nque le ﬁchier est au format binaire.\n506\n Annexe C. Fonctions PHP\nLe paramètre nomFichier peut être une URL complète, commençant par http://\nouftp://, suivie du serveur, du chemin d’accès et du nom du ﬁchier proprement dit.\nfpassthru\nint fpasstrhu (int descFichier )\nCette fonction permet de transférer directement le contenu d’un ﬁchier – en partant\nde la position courante dans le ﬁchier– vers le programme client. Elle renvoie lenombre d’octets lus. Le ﬁchier doit avoir été ouvert par fopen() auparavant. La\nfonction readfile() est encore plus simple à utiliser puisqu’on se contente de\ndonner le nom du ﬁchier.\nfputs\nbool fputs (int descFichier, string cha^ ıne )\nLa fonction écrit cha^ ıne dans le ﬁchier décrit par descFichier. Elle renvoie vrai\nsi l’opération réussit.\ninclude\ninclude (string nomFichier )\nLa fonction ouvre le ﬁchier et exécute les instructions qui y sont contenues. Pour des\nraisons expliquées page 60, ce mode d’appel à des instructions extérieures au scriptest à utiliser avec précaution. On peut avantageusement le remplacer par un appelde fonction.\nmkdir\nbool mkdir (string nomR´ epertoire, string permissions )\nCrée un répertoire de nom nomR´ epertoire. Les permissions sont codées comme\nsous UNIX.\nopendir\nopendir (string nomR´ epertoire )\nCrée un pointeur de répertoire qui permet de parcourir la liste des ﬁchiers du\nrépertoire avec readdir().\nreaddir\nreaddir (int r´ epertoire )\nRetourne le nom du ﬁchier suivant dans le répertoire identiﬁé par r´ epertoire\n(ouvert avec opendir()).\nC.7 Interface PHP/MySQL\n 507\nreadfile\nint readfile (string nomFichier [, bool chercherPartout ])\nCette fonction transfère directement le contenu de nomFichier vers le programme\nclient et renvoie le nombre d’octets lus. Si le second paramètre est true,l eﬁ c h i e re s t\nrecherché dans tous les répertoires de l’option include_path dans le ﬁchier php.ini .\nrename\nbool rename (string source, string destination )\nRenomme le ﬁchier source endestination.\nrequire\nrequire (string nomFichier )\nLa fonction insère le contenu du ﬁchier nomFichier dans le script courant. Pour\ndes raisons expliquées page 60, le ﬁchier inclus doit contenir des déclarations de\nconstantes ou de fonctions, mais il vaut mieux éviter d’y placer des instructions ou\ndes déﬁnitions de variables.\nrmdir\nbool rmdir (string nomR´ epertoire )\nDétruit le répertoire de nom nomR´ epertoire.\nC.7 INTERFACE PHP/MySQL\nmysql_affected_rows\nint mysql_affected_rows (int [connexion ])\nmysql_affected_rows renvoie le nombre de lignes modiﬁées, détruites ou insérées dans\nune table après une requête UPDATE, DELETE ouINSERT.L ’ a r g u m e n t connexion est\noptionnel : par défaut, la dernière connexion établie avec MySQL est utilisée.mysql_change_user\nint mysql_change_user (string nom,\nstring motPasse,\nstring [base ],\nint [connexion ])\n508\n Annexe C. Fonctions PHP\nmysql_change_user permet de modiﬁer le compte de connexion à MySQL. Les\narguments sont les suivants :\n1.nom est le nom de l’utilisateur MySQL.\n2.motPasse est le mot de passe.\n3.base est le nom de la base sous laquelle on souhaite travailler après change-\nment d’identité.\n4.connexion est la connexion pour laquelle on souhaite changer l’utilisateur.\nPar défaut la dernière connexion ouverte est utilisée.\nLa fonction renvoie, en cas de succès, un entier positif. Si la connexion échoue, les\nanciens paramètres de connexion restent valides. Cette fonction est relativementrécente (MySQL 3.23.3).\nmysql_client_encoding\nstring mysql_client_encoding (int [connexion ])\nrenvoie le jeu de caractères de la connexion courante.\nmysql_close\nint mysql_close (int [connexion ])\nmysql_close() ferme une connexion avec MySQL. L’argument connexion est\noptionnel : par défaut la dernière connexion ouverte est utilisée. Cette fonction est\nen général inutile puisqu’une connexion (non persistante) avec MySQL est fermée àla ﬁn du script.\nmysql_connect\nint mysql_connect (string [chaine_connexion ],\nstring [nom ],\nstring [motPasse ])\nmysql_connect() établit une connexion avec MySQL.\n1.chaine_connexion est au format [h^ ote[:port][:fichierSocket]].L a\nchaîne h^ ote vaut par défaut localhost, le port étant le port par défaut\ndu serveur MySQL. Le chemin d’accès au ﬁchier socket peut également être\nindiqué (à la place du port) pour une connexion à partir de la même machine\nque celle où tourne le serveur.\n2.nom est le nom de l’utilisateur MySQL. Par défaut il prend la valeur de\nl’utilisateur sous lequel le serveur Apache a été lancé (typiquement nobody).\n3.motPasse est le mot de passe. Par défaut, un mot de passe vide est utilisé.\nC.7 Interface PHP/MySQL\n 509\nLa fonction renvoie, en cas de succès, un entier positif qui est utilisé pour identiﬁer\nla connexion lors des accès ultérieurs. Notez que la connexion est automatiquementfermée à la ﬁn du script.\nmysql_create_db\nint mysql_create_db (string nomBase,\nint [connexion ])\nmysql_create_db() crée une nouvelle base de nom nomBase, en utilisant la\nconnexion connexion (ou, par défaut, la dernière connexion ouverte). Bien\nentendu le compte utilisateur associé à la connexion doit avoir les droits MySQL\nsufﬁsants.\nmysql_data_seek\nint mysql_data_seek (int r´ esultat,\nint noLigne )\nmysql_data_seek() positionne le curseur sur la ligne noLigne. La ligne peut alors\nêtre récupérée avec une des fonctions mysql_fetch_***(). La fonction renvoie\ntrue si l’opération réussit, et false sinon. Les numéros de ligne commencent à 0.\nmysql_db_name\nint mysql_db_name (int r´ esultat,\nint [noLigne ])\nCette fonction renvoie le nom d’une base de données en prenant en argument\nun identiﬁant de résultat fourni par mysql_list_dbs(),e tl en u m é r od el al i g n e\nsouhaitée ( mysql_num_rows() permet de connaître le nombre de lignes). Elle\nrenvoie false en cas d’erreur.\nmysql_db_query\nint mysql_db_query (string nomBase,\nstring requ^ ete,\nint [connexion ])\nCette fonction se positionne sur la base nomBase, puis exécute la requête requ^ ete\nen utilisant la connexion connexion (ou, par défaut, la dernière connexion\nouverte). Elle renvoie un identiﬁant de résultat.\nmysql_drop_db\nint mysql_drop_db (string nomBase,\nint [connexion ])\n510\n Annexe C. Fonctions PHP\nCette fonction tente de détruire la base nomBase, en utilisant la connexion\nconnexion (ou, par défaut, la dernière connexion ouverte). Bien entendu, le\ncompte utilisateur associé à la connexion doit avoir les droits MySQL sufﬁsants.\nmysql_errno\nint mysql_errno (int [connexion ])\nRenvoie le numéro de l’erreur survenue lors de la précédente opération MySQL – 0\ns’il n’y a pas eu d’erreur.\nmysql_error\nstring mysql_error (int [connexion ])\nRenvoie le texte de l’erreur survenue lors de la précédente opération MySQL.mysql_fetch_array\narray mysql_fetch_array (int r´ esultat,\nint [typeResultat ])\nRenvoie un tableau associatif contenant les attributs de la ligne courante, et posi-\ntionne le curseur sur la ligne suivante. Chaque champ du tableau est indexé parle nom de l’attribut correspondant dans la clause SELECT de la requête SQL. La\nfonction renvoie false quand il n’y a plus de ligne.\nr´ esultat est un identiﬁant de résultat, renvoyé par une fonction comme\nmysql_query ,e t typeResultat est une constante qui peut prendre les valeurs\nsuivantes :\n1.MYSQL_ASSOC\n2.MYSQL_NUM\n3.MYSQL_BOTH (par défaut)\nmysql_fetch_assoc\narray mysql_fetch_assoc (int r´ esultat )\nDonne le même résultat que l’appel à mysql_fetch_array() avec le type\nMYSQL_ASSOC.\nmysql_fetch_field\nobject mysql_fetch_field (int r´ esultat,\nint [noAttribut ])\nC.7 Interface PHP/MySQL\n 511\nRenvoie un objet donnant des informations sur l’attribut noAttribut du résultat\nidentiﬁé par r´ esultat.S i noAttribut n’est pas spéciﬁé, la fonction accède au\nprochain attribut parmi ceux qui n’ont pas encore été consultés. Notez que les\nattributs sont numérotés à partir de 0.\nL’objet renvoyé par la fonction contient les informations suivantes :\n1.name, nom de l’attribut.\n2.table, nom de la table à laquelle appartient l’attribut.\n3.max_length, longueur maximale.\n4.not_null, 1 si l’attribut ne peut être à NULL.\n5.primary_key, 1 si l’attribut est une clé primaire.\n6.unique_key, 1 si l’attribut est une clé unique.\n7.multiple_key, 1 si l’attribut est une clé non unique.\n8.numeric, 1 si l’attribut est un numérique.\n9.blob, 1 si l’attribut est un BLOB.\n10.type, le type de l’attribut.\n11.unsigned, 1 si l’attribut est un non signé.\n12.zerofill, 1 si l’attribut est déclaré avec l’option ZEROFILL.\nmysql_fetch_lengths\narray mysql_fetch_lengths (int r´ esultat )\nRenvoie un tableau indicé (à partir de 0) donnant la longueur de chaque attribut\ndans la ligne ramenée par le précédent appel à une fonction mysql_fetch_***().\nmysql_fetch_object\nobject mysql_fetch_object() (int r´ esultat,\nint [typeResultat ])\nRenvoie un objet dont chaque propriété correspond à l’un des attributs de la lignecourante et positionne le curseur sur la ligne suivante. Le nom de chaque propriétéde l’objet est le nom de l’attribut correspondant dans la clause SELECT de la requête\nSQL. La fonction renvoie false quand il n’y a plus de ligne. Les arguments sont\nidentiques à ceux de la fonction mysql_fetch_array.\nmysql_fetch_row\narray mysql_fetch_row (int r´ esultat )\nRenvoie un tableau indicé contenant les attributs de la ligne courante, et positionnele curseur sur la ligne suivante. Les champs sont numérotés à partir de 0. Le paramètre\nr´ esultat est un identiﬁant de résultat.\n512\n Annexe C. Fonctions PHP\nmysql_field_flags\nstring mysql_field_flags (int r´ esultat,\nint noAttribut )\nRenvoie une chaîne contenant les options de l’attribut noAttribut dans le résultat\nidentiﬁé par r´ esultat. Ces options sont celles données au moment de la création de\nla table : not_null, primary_key, unique_key, multiple_key, blob, unsigned,\nzerofill, binary, enum, auto_increment, timestamp. Elles apparaissent dans la\nchaîne séparées par des blancs. La fonction PHP explode permet de placer ces valeurs\ndans un tableau associatif.\nmysql_field_len\nint mysql_field_len (int r´ esultat,\nint noAttribut )\nRenvoie la longueur de l’attribut noAttribut dans le résultat identiﬁé par r´ esul-\ntat.mysql_field_name\nstring mysql_field_name (int r´ esultat,\nint noAttribut )\nRenvoie le nom de l’attribut indexé par noAttribut dans le résultat identiﬁé\npar r´ esultat. Les attributs sont numérotés à partir de 0. Donc l’appel\nmysql_field_name ($result, 2) renvoie le nom du troisième attribut.\nmysql_field_seek\nint mysql_field_seek (int r´ esultat,\nint noAttribut )\nPermet de positionner le curseur sur l’attribut noAttribut de la ligne courante.\nLe prochain appel à la fonction mysql_fetch_field(), sans utiliser le deuxième\nargument , ramènera les informations sur cet attribut.\nmysql_field_table\nstring mysql_field_table (int r´ esultat,\nint noAttribut )\nRenvoie le nom de la table à laquelle appartient l’attribut noAttribut dans le\nrésultat identiﬁé par r´ esultat.\nC.7 Interface PHP/MySQL\n 513\nmysql_field_type\nstring mysql_field_type (int r´ esultat,\nint noAttribut )\nRenvoie le type de l’attribut noAttribut dans le résultat identiﬁé par r´ esultat.\nmysql_free_result\nint mysql_free_result (int r´ esultat )\nLibère la mémoire affectée au résultat identiﬁé par r´ esultat. Cette mémoire est de\ntoute manière libérée à la ﬁn du script, mais la fonction peut être utile si on souhaite\nrécupérer de la mémoire au cours de l’exécution d’un script volumineux.\nmysql_get_client_info\nstring mysql_get_client_info (int [connexion ])\nRenvoie la version du client MySQL.mysql_get_host_info\nstring mysql_get_host_info (int [connexion ])\nRenvoie des informations sur la machine sur laquelle tourne le serveur MySQL.mysql_get_proto_info\nstring mysql_get_proto_info (int [connexion ])\nRenvoie le protocole de connexion client/serveurmysql_get_server_info\nstring mysql_get_server_info (int [connexion ])\nRenvoie la version du serveur MySQLmysql_info\nstring mysql_info (int [connexion ])\nRenvoie une chaîne contenant des informations sur la dernière requête exécutée.\n514\n Annexe C. Fonctions PHP\nmysql_insert_id\nint mysql_insert_id ()\nRenvoie l’identiﬁant engendré pendant le dernier ordre INSERT pour l’attribut\nbénéﬁciant de l’option AUTO_INCREMENT. Cet identiﬁant permet de réaccéder (avec\nun ordre SELECT) à une ligne que l’on vient de créer dans une table disposant d’un\nidentiﬁant automatiquement incrémenté.\nmysql_list_dbs\nint mysql_list_dbs (int [connexion ])\nLa fonction renvoie un identiﬁant qui peut être utilisé par la fonction\nmysql_tablename() ou la fonction mysql_db_name() pour obtenir la liste des\nbases sur le serveur MySQL.\nmysql_list_fields\nint mysql_list_fields (string nomBase,\nstring nomTable,\nint [connexion ])\nCette fonction permet d’inspecter la déﬁnition de la table nomTable dans la\nbase nomBase, le paramètre connexion ayant la signiﬁcation habituelle. Elle\nrenvoie un identiﬁant qui peut être utilisé par les fonctions mysql_ﬁeld_ﬂags,\nmysql_field_len(), mysql_field_name(),e t mysql_field_type(). En cas\nd’erreur, la fonction renvoie -1.\nUne autre possibilité est d’effectuer un appel mysql_query(\"SHOW COLUMNS\nFROM nomTable\"); qui renvoie un tableau décrivant les champs.\nmysql_list_tables\nint mysql_list_tables (string nomBase,\nint [connexion ])\nLa fonction renvoie un identiﬁant qui peut être utilisé par la fonction\nmysql_tablename() pour obtenir la liste des tables de la base nomBase.\nmysql_num_fields\nint mysql_num_fields (int r´ esultat )\nLa fonction renvoie le nombre d’attributs dans les lignes du résultat identiﬁé parr´ esultat.\nC.7 Interface PHP/MySQL\n 515\nmysql_num_rows\nint mysql_num_rows (int r´ esultat )\nLa fonction renvoie le nombre de lignes dans le résultat identiﬁé par r´ esultat.\nmysql_pconnect\nint mysql_pconnect (string [chaine_connexion ],\nstring [nom ],\nstring [motPasse ])\nCette fonction est identique à mysql_connect(), mais elle ouvre une connexion\npersistante non refermée à la ﬁn du script. En fait, pour un hôte et un nom d’utilisateur\ndonnés, la fonction ne crée une connexion que lors du premier appel. Les appels\nsuivants (avec les mêmes arguments) réutilisent la connexion qui existe toujours.L’intérêt est d’améliorer les performances en évitant de créer répétitivement desconnexions.\nmysql_ping\nbool mysql_ping (int [connexion ])\nTeste la connexion avec MySQL, et se reconnecte si elle a été perdue.mysql_query\nint mysql_query (string requete,\nint [connexion ])\nExécute la requête (au sens large : toute commande MySQL) requ^ ete, en utilisant\nla connexion connexion. Si la requête échoue, par exemple à cause d’une erreur de\nsyntaxe, la fonction renvoie false, sinon elle renvoie une valeur positive. Dans le\ncas de requêtes SELECT, la valeur renvoyée est l’identiﬁant du résultat qui peut être\nutilisé dans les fonctions mysql_fecth_***.\nmysql_real_escape_string\nstring mysql_real_escape_string() (string cha^ ıne )\nEffectue un échappement permettant d’obtenir une chaîne prête à l’insertion. Plus\ncomplète que addSlashes() car traite, outre les apostrophes, des données comme\nNULL, \\x00,\\n,\\r,\\,e t\\ x1a. À utiliser donc pour insérer des données binaires\ndans une base.\n516\n Annexe C. Fonctions PHP\nmysql_result\nint mysql_result (int r´ esultat,\nint noLigne,\nint noAttribut )\nCette fonction permet d’accéder directement à l’attribut noAttribut de la ligne\nnoLigne dans le résultat identiﬁé par r´ esultat. Elle est connue comme étant\nparticulièrement lente à cause de la complexité de l’opération demandée. Il est\nrecommandé d’utiliser plutôt la famille de fonctions mysql_fetch_***.\nmysql_select_db\nint mysql_select_db (string nomBase,\nint [connexion ])\nFait de nomBase la base courante. Les requêtes exécutées par la suite s’effectueront\nsurnomBase.\nmysql_tablename\nint mysql_tablename (int r´ esultat,\nint indice )\nCette fonction utilise un identiﬁant de résultat fourni par mysql_list_tables()\nou par mysql_list_dbs(), et permet d’accéder, selon le cas, à la liste des tables ou\nà la liste des bases de données. Le paramètre indice doit être compris entre 0 et la\nvaleur ramenée par mysql_num_rows() qui donne le nombre de tables (ou de bases)\nà récupérer.\nmysql_unbuffered_query\nint mysql_unbuffered_query (string requ^ ete,\nint [connexion ])\nÉquivalent à mysql_query(), sauf en ce qui concerne la manière dont la requête\nest exécutée. La fonction mysql_query() charge tout le résultat en mémoire, tandis\nquemysql_unbuffered_query() se positionne sur la première ligne et attend les\nappels aux fonctions mysql_fetch_***() pour accéder successivement aux lignes\nsuivantes. Elle demande donc beaucoup moins de mémoire, puisqu’une seule ligne à\nla fois est chargée. L’inconvénient est que mysql_num_rows() ne peut être utilisée\nsur le résultat.\nIndex général\nA\nabstraction 116–138, 185\naccès disque voirmémoire externe\naffectation 33, 41, 49, 139, 172, 423,\n426–428, 430, 443\nd’un objet 172, 443dans un tableau 49\nafﬁchage multi-pages 109–114\nagrégation 307–309, 311, 312, 413–415\nAjax 14ajout d’un attribut voirALTER TABLE,\ncommande SQL\naléatoire 393, 482, 491ancre HTML xvii, 4, 6, 7, 295, 303, 311,\n391\nanonyme (utilisateur MySQL) 447, 448\nApache 4, 21, 23, 24, 450, 508\napostrophes (gestion des) voir aussi\néchappement v, 29, 45, 68, 69,\n73, 77, 130, 173, 224, 225,235, 320, 321, 493, 494, 515\nassociation 181, 185–196, 401\nbinaire 188–190\nternaire 190–192\nauthentiﬁcation voir aussi session v, xxi,\n101, 109, 279–286, 458, 459\nauto incrémentation voir aussi\nséquences v, 72, 73, 94, 200,\n234–236, 514B\nbalises HTML\n<a>6\n<br/> 22, 41, 75, 490\n<form> 9, 91, 158, 161\n<img> 97\n<input> 10, 91, 164\n<option> 12\n<select> 12\n<table> 14, 143, 144\n<td> 140\n<textarea> 13\n<tr> 14, 111, 140\n<ul> 304\nC\nC++ 116, 121, 420, 430, 437\ncardinalités 186, 190, 191, 194, 195\ncasse (sensibilité à) 31, 234, 235, 420,\n487, 488\nchaînes de caractères voir aussi\néchappement, expressions\nrégulières v\nde longueur ﬁxe voirCHAR,\ncommande SQL\nde longueur variable\nvoirVARCHAR, commande\nSQL\nPHP 422\nSQL 395\n518\n Index général\nclasse\nabstraite 129, 131, 132, 139, 169,\n239, 379\nconstante de 139, 158, 171\nconstructeur 122, 123, 125, 132,\n134, 135, 144, 148, 158, 171,\n172, 178, 342, 343, 346, 441,442\nCSS 111\ndestructeur 122, 123, 342, 441, 442extension d’une 127–128\nhéritage 127\nparente 126, 128, 134, 135, 228,\n442\npartie privée 121, 132, 441\npartie protégée 121, 132, 441\npartie publique 121, 441spécialisation 126–127\nsurcharge 127–129, 132, 176, 340,\n442\nclonage d’un objet 172\nclé d’une table 107, 183–185, 187, 188,\n193–197, 200, 280–283, 301,\n303, 304, 312\ncodage des paramètres dans une URL\n67, 77, 82, 83, 113, 492, 525\ncommentaires 28, 420, 452\nconcaténation 22, 40, 45, 105, 147, 390\nconception d’une base de données\n181–193, 195, 197\nconstructeur voirclasse\ncontrôle voir aussi expressions\nrégulières v\nde l’existence d’une variable 87\nde type 14, 70, 86des données HTTP 67–72\nconvention de nommage xxi, 234, 235cookie 17, 56, 99–101, 105, 107, 109,\n280–282\ncopie d’un objet voirclonage\ncréation\nd’un index voirCREATE INDEX,\ncommande SQLd’un utilisateur voirGRANT,\ncommande SQL\nd’une base de données\nvoirCREATE DATABASE,\ncommande SQL\nd’une table voirCREATE TABLE,\ncommande SQL\nCSS voirfeuilles de style\nD\ndates\nafﬁchages des 304\net MySQL 234, 281, 304, 396, 464et PHP 21, 304, 496\ndestructeur voirclasse\ndisque dur voirmémoire externe\ndroits d’accès 15, 34, 279, 399, 447–451,\n459, 474, 509, 510\ncréation 451\nE\nemail\nenvoi d’un 64\nE/A voirschémas entité/association\néchappement voir aussi\nmagic_quotes_gpc(),f o n c t i o n\nPHP v, 45, 68–70, 74, 77, 113,130, 235, 248, 422, 423, 470,515\nemail\nenvoi d’un 77\nentités 181, 185–197, 401\nXML 343\nentrées/sorties voirmémoire externe\nerreurs voir aussi exceptions v\ndissimulation avec l’opérateur 40,\n123\nniveau de tolérance 223, 225, 421\npendant un transfert de ﬁchier 92,\n226\nerreurs (traitement des) 57, 58, 120,\n123, 124, 221–223, 225–227,\n230–232, 421\nIndex général\n 519\nerror log (ﬁchier d’erreurs) 225\nexceptions 120, 124–126\ngestionnaire d’ 232\nsous-classes 227\nexpressions régulières 86–90\nF\nﬁchier\ncopie 94, 226\nextension 39\nouverture 95transfert voirtransfert de ﬁchier\nﬁchiers de conﬁguration 26, 203, 448,\n452–456\nFirefox 7, 9, 15, 23\nﬂush voir rechargement de MySQL\nfonctions\navec nombre variable de paramètres\n160, 435\nparamètres voirpassage des\nparamètres\nretour de plusieurs valeurs 62, 498récursives 70, 303\nformulaires HTML 7–15, 17, 29, 35–37,\n42, 43, 46–49, 52, 53,\n152–167, 205, 274, 280, 284,289, 295, 298, 301, 309\navec choix multiples 47\nd’insertion et de mise à jour 78–86\nforum de discussion 299–304\nG\ngestionnaire d’erreurs voirerreurs\ngestionnaire d’exceptions\nvoirexceptions\nguillemets voirapostrophes\nH\nHTML 5–16, 20–24, 29, 35–37, 40–42,\n46, 51–53, 55, 117, 152, 153,\n159, 164, 167, 205, 299, 304,391, 419HTTP 3, 4, 6, 16, 17, 98, 280\nhéritage orienté-objet voirclasse\nI\nidentiﬁant\nd’une session 281, 282\nd’une table voirclé\nidentité d’objet 139, 443\ninclude_path, directive PHP 507\ninclusion d’un ﬁchier 38, 60–61, 83index\ncréation 206mise à jour 206recherche voirrecherche par index\nInnoDB 455, 467\nInsérer un tableau dans une chaîne de\ncaractères 105\nJ\nJava 121\nJavascript 14, 23jointure 32, 206, 291–295, 399–406,\n408, 468, 474\nauto-jointure 402\nexterne 404–405\nnaturelle 404\nL\nliens HTML voirancres HTML\nLinux 447, 457\nM\nmagic_quotes_gpc 247\nmajuscules et minuscules voir aussi\ncasse v, 25, 31, 137, 138, 234,\n235, 321, 344, 389, 395, 420,435, 464\nmax_file_size 12\n520\n Index général\nméthodes magiques\n__call() 384\n__call() 272\n__get() 272\n__set() 272\nmodiﬁcation d’une table voirALTER\nTABLE, commande SQL\nModèle-Vue-Contrôleur ( pattern ) 208,\n241–243, 245, 251, 260, 265,\n267, 268, 273, 277, 278, 289,296, 357–359, 361, 362, 364,369, 374, 376, 380, 443\nMVC voir aussi Modèle-Vue-Contrôleur\n(pattern )v\nmyisamchk, programme 467\nmysql , programme 18, 25–31, 33, 34, 36,\n37, 203, 205, 399, 454, 472\nmysqladmin , programme 471\nmysqld , programme 18, 19, 24, 26, 39,\n399, 448, 450, 453, 456, 457\nmysqldump, programme 18, 456, 457mysqlimport , programme 18, 470\nmysqlshow, programme 472mémoire\ncentrale 23, 41, 420, 453, 513\nexterne 455\nméthode statique 293\nméthodes magiques 149, 271\nN\nnavigateur 3–7, 10–12, 15–17, 21–24,\n34, 36, 41, 42, 458, 487, 491,\n492\nO\nopérateurs PHP 40, 41, 45, 111, 393,\n395, 405, 427–430\narithmétiques 427\nchaînes de caractères 428\nde bits 429de comparaison 430logiques 429opérateurs SQL 45, 394, 395, 405\nORACLE 19, 135, 233–236, 395, 457\norienté-objet voir aussi classe v, xvii, xxi,\n37, 41, 55, 56, 61, 86,\n115–117, 140, 255, 333, 334,337, 339, 340, 343, 346–348,419, 435, 440, 442\nméthodes 118\nobjets 117–123\nprogrammation 115–178, 440–443\nP\nparcours séquentiel voirrecherche\nséquentielle\npassage des paramètres\nd’un objet 61\npar adresse voir aussi références v,\n61–64\npar valeur 61–64\nPDO 121, 129php.ini, ﬁchier de conﬁguration 45, 90,\n92, 94, 95, 109, 225, 282, 507\nphpMyAdmin 34\nphpMyAdmin 25, 34, 36, 169, 205,\n457–459\nPHP_SELF 22\nportabilité multi SGBD 233–239PostgreSQL 19, 60, 129, 135, 137, 138,\n233–237, 457\nprog.xslt, programme 322\nprogrammation\navec fonctions 56orientée-objet 116–167\nR\nrecherche\npar clé 206, 282, 291, 312\npar index 206\npar intervalle 289, 394\nredirection vers une autre URL 98renommage voirAS, commande SQL\nIndex général\n 521\nrépertoire\nlecture d’un 95\nrequêtes avec négation 411–412\nrequêtes corrélées 409–411\nrequêtes imbriquées 406–412\nroot\nMySQL 34, 35, 447, 448, 454, 459\nRSS 317réentrant (script) 67références PHP 61, 62, 64, 70, 135, 139,\n172, 173, 314, 435, 436, 443\nS\nSafari 15\nSAX voirXML\nschémas entité/association 181–193\nscript courant voirPHP_SELF\nscripts SQL 27–28séquence SQL 235, 236session (gestion de) 16, 17, 22, 56,\n98–109, 280–286, 458\nSet-Cookie 17\nSimpleXML 333–335spécialisation voir aussi classe v,\n126–138, 339–348\nSQL ANSI 198, 200, 201, 387,\n395–397, 404, 405, 414,\n461–463, 467, 475\nSQLite 135, 233, 235, 236, 239, 457\nsuperglobales (variables) 22\nsuppression d’un attribut voirALTER\nTABLE, commande SQL\nsurcharge orientée-objet voirclasse\nT\ntableaux HTML 14, 152, 153, 290, 295\nclasse de production de tableaux\n140–152\ntableaux PHP 37, 41, 49, 52, 111, 160,\n164, 298, 311–314, 423–425,\n441, 442, 489, 490, 493,497–500afﬁchage avec print_r 152\nassociatifs 58, 81, 86, 105, 111, 160,\n164, 311, 313, 423–425, 497\nindicés 49, 111, 423–425\ntemplates voir aussi XSLT v, 251–267, 317\ntraitement des erreurs 222\ntransfert de ﬁchier 8–10, 12, 15, 90–98,\n159\nU\nURL xxi, 6, 7, 15, 46, 295\nW\nWindows 447, 448, 453, 457\nX\nXML\nattributs 321déclaration 320et bases de données 323–332et XHTML 320forme sérialisée, forme hiérarchique\n320\ninstructions de traitement 322programmation DOM 332programmation SAX 332–348sections littérales 322syntaxe de 318–322utilisation de 319éléments 321\nXSLT 317, 322, 333, 348–354\nZ\nZend, framework xvii, xxi, 208, 239,\n260, 267, 278, 357, 358, 360,\n362, 364–369, 371, 373,375–379, 384\n\nIndex des fonctions PHP\n__call(), 384\nabs(), 315, 486\naddSlashes(), 45, 74, 235, 493, 515\narray(), 497\narray_key_exists(), 497\narsort(), 311, 425, 498\nasort(), 311, 425, 498\nasXML(), 501\nattributes(), 501\nbasename(), 486\ncall_user_func(), 343, 486\ncall_user_method(), 486\nceil(), 486\nchdir(), 504\ncheckdate(), 496\nchildren(), 501\nchop(), 493\nclosedir(), 95, 504\ncopy(), 94, 504\ncount(), 52, 425, 498\ncurrent(), 424, 498\ndate(), 21, 283, 496\ndeﬁne(), 78, 487\ndeﬁned(), 487\ndirname(), 486, 486\neach(), 498\necho(), 21empty(), 71, 486\nend(), 498\nereg(), 89, 97, 487\nereg_replace(), 89, 90, 488eregi(), 488\neregi_replace(), 488\nerror_log(), 226error_reporting(), 223–225EscapeShellCmd(), 487eval(), 249, 487\nexec(), 487, 487, 491\nexplode(), 493\nextension_loaded(), 488\nfclose(), 504\nfeof(), 343, 505\nfgetc(), 505\nfgets(), 505\nﬁle(), 505\nﬁle_exists(), 505\nﬁlesize(), 97, 505\nﬂoor(), 487\nfopen(), 506, 506\nfpassthru(), 506\nfputs(), 506\nfunc_get_arg(), 435func_get_args(), 435func_num_args(), 435get_browser(), 90get_class(), 344\nget_magic_quotes_gpc(), 69\ngetCode(), 227getDate(), 234, 304getdate(), 497\ngetenv(), 22, 488\ngetFile(), 227\n524\n Index des fonctions PHP\ngetLine(), 227\ngetMessage(), 227getType(), 426, 488\nHeader(), 97, 488\nhtmlEntities(), 76, 90, 265, 489\nhtmlSpecialChars(), 71, 74, 77, 159,\n174, 329\nhtmlspecialChars(), 74\nimplode(), 493\nin_array(), 499\ninclude(), 61, 506\ninit_set(), 248\nis_array(), 426, 489\nis_double(), 426, 489\nis_ﬂoat(), 87, 489\nis_int(), 489\nis_long(), 426, 489\nis_numeric(), 87is_object(), 426, 489\nis_string(), 87, 426, 489\nisSet(), 51, 71, 87, 421, 490\nkey(), 424, 499\nkrsort(), 311ksort(), 311, 425, 499\nlist(), 499\nltrim(), 493\nmail(), 76, 490\nmax(), 490, 499\nmd5(), 282, 490\nmethod_exists(), 343min(), 490, 499\nmkdir(), 506\nmkTime(), 497\nmysql_affected_rows(), 507\nmysql_change_user(), 508\nmysql_client_encoding(), 508\nmysql_close(), 508\nmysql_connect(), 37, 450, 509\nmysql_create_db(), 509\nmysql_data_seek(), 509\nmysql_db_name(), 509\nmysql_db_query(), 509\nmysql_drop_db(), 510mysql_errno(), 510\nmysql_error(), 37, 40, 510\nmysql_escape_string(), 45\nmysql_fetch_array(), 510, 510\nmysql_fetch_assoc(), 80, 510\nmysql_fetch_ﬁeld(), 511\nmysql_fetch_lengths(), 511\nmysql_fetch_object(), 37, 41, 234, 333,\n511,511\nmysql_fetch_row(), 37, 111, 511\nmysql_ﬁeld_ﬂags(), 512\nmysql_ﬁeld_len(), 512\nmysql_ﬁeld_name(), 111, 512\nmysql_ﬁeld_seek(), 512\nmysql_ﬁeld_table(), 512\nmysql_ﬁeld_type(), 513\nmysql_free_result(), 513\nmysql_get_client_info(), 513\nmysql_get_host_info(), 513\nmysql_get_proto_info(), 513\nmysql_get_server_info(), 513\nmysql_info(), 513\nmysql_insert_id(), 94, 514\nmysql_list_dbs(), 509, 514\nmysql_list_ﬁelds(), 514\nmysql_list_tables(), 514\nmysql_num_ﬁelds(), 111, 514\nmysql_num_rows(), 113, 509, 515, 516\nmysql_pconnect(), 37, 39, 57, 58, 515\nmysql_ping(), 515\nmysql_query(), 37, 40, 110, 515, 516\nmysql_real_escape_string(), 74, 515,\n515\nmysql_result(), 516\nmysql_select_db(), 37, 40, 516\nmysql_tablename(), 516\nmysql_unbuffered_query(), 516\nnext(), 424, 499\nnl2br(), 75, 490\noci_fetch_object(), 234opendir(), 95, 504, 506, 506\nparse(), 343passthru(), 491\nIndex des fonctions PHP\n 525\nPASSWORD(), 473\npg_fetch_object(), 234phpInfo(), 491\nphpinfo(), 488pow(), 315prev(), 424, 500\nprint(), 491\nprint_r(), 152, 491\nprintf(), 21, 491\nputenv(), 491\nrand(), 491\nreaddir(), 506, 506\nreadﬁle(), 98, 506, 507\nreadir(), 95rename(), 507\nrequire(), 59, 507\nrequire_once(), 59, 247, 364reset(), 500\nrestore_error_handler(), 232rmdir(), 507\nround(), 492\nrsort(), 500\nsession_destroy(), 107, 287session_id(), 107, 109session_start(), 107, 109set_error_handler(), 230set_exception_handler(), 230set_include_path(), 247SetCookie(), 99, 100, 280, 492\nSimpleXML_import_DOM(), 501\nSimpleXML_load_ﬁle(), 500\nSimpleXML_load_string(), 500\nsort(), 425, 500\nsqrt(), 315strchr(), 493\nstrcmp(), 494\nstrcspn(), 494\nstrip_tags(), 71, 76, 77stripSlashes(), 45, 69, 70, 494\nstrlen(), 494strpos(), 494\nstrrchr(), 495\nstrrev(), 495\nstrrpos(), 494\nstrspn(), 495\nstrToLower(), 137, 495\nstrToUpper(), 495\nsubstr(), 495\nsubstr_count(), 494\nSYSDATE(), 481\nsystem(), 491\ntime(), 492, 497\ntrigger_error(), 226, 230trim(), 338, 495\nunset(), 107, 441, 492\nurlDecode(), 492\nurlEncode(), 492\nurlEncode(), 67, 83, 113\nxml_error_string(), 501\nxml_get_current_byte_index(), 501\nxml_get_current_column_number(),\n502\nxml_get_current_line_number(), 502\nxml_get_error_code(), 501, 502\nxml_parse(), 335, 337, 343, 502\nxml_parse_into_struct(), 503\nxml_parser_create(), 335, 502\nxml_parser_free(), 502\nxml_parser_get_option(), 503\nxml_parser_set_option(), 503\nxml_set_character_data_handler(), 337,\n503\nxml_set_default_handler(), 503\nxml_set_element_handler(), 337, 503\nxml_set_external_entity_ref_handler(),\n503\nxml_set_notation_decl_handler(), 504\nxml_set_object(), 339, 343, 504\nxml_set_processing_instruction_handler(),\n504\nXPath(), 501\n\nIndex des commandes SQL\nABS(), 475\nACOS(), 475\nADD, 204\nADDDATE(), 476ALL, 412ALTER TABLE, 204, 465\nADD, 204\nDROP , 205\nMODIFY, 204\nAS, 292, 309, 391, 393ASCII(), 475\nASIN(), 475\nATAN(), 475\nATAN2(), 475\nAUTO_INCREMENT, 72, 73, 200, 474BETWEEN, 45, 394BIGINT, 462, 463BIN(), 476\nBINARY, 464BINARY VARCHAR, 395BIT_COUNT(), 476\nBLOB, 395, 461, 462, 464, 467CEILING(), 476\nCHAR, 198, 462–464CHAR(), 475\nCHAR_LENGTH(), 480CHARACTER_LENGTH(), 480CHECK, 201, 202, 467\nCONCAT(), 476\nCONSTRAINT, 467\nCONV(), 476COS(), 476\nCOT(), 476\nCOUNT(), 307, 414CREATE DATABASE, 26, 203, 466CREATE INDEX, 475CREATE TABLE, 25, 27, 35, 198, 466CURDATE(), 476\nCURRENT_DATE(), 476CURRENT_TIME(), 476CURRENT_TIMESTAMP(), 481CURTIME(), 476\nDATABASE(), 476\nDATE, 198, 396, 462, 464DATE_ADD(), 390, 476, 477\nDATE_FORMAT(), 464, 477, 478, 484\nDATE_SUB(), 477\nDATETIME, 396, 462, 464DAYNAME(), 477\nDAYOFMONTH(), 477\nDAYOFWEEK(), 478\nDAYOFYEAR(), 478\nDECIMAL, 198, 462, 463DEFAULT, 198DEGREES(), 478\nDELETE, 32, 33, 52, 417, 467, 507DESC, 393DESCRIBE, 27, 203, 472, 473DISTINCT, 392, 408\nDOUBLE, 462, 463\nDOUBLE PRECISION, 462, 463DROP , 204\n528\n Index des commandes SQL\nDROP DATABASE, 466\nDROP INDEX, 475\nDROP TABLE, 27, 204\nELT(), 478\nENCRYPT(), 478\nENUM, 47, 462, 465EXCEPT, 405, 406EXPLAIN, 472FIELD(), 478\nFIND_IN_SET(), 478\nFLOAT, 462, 463FLOOR(), 478\nFLUSH, 471FLUSH PRIVILEGES, 449FOREIGN KEY, 200–202, 467FORMAT(), 478\nFROM, 31, 291, 292, 388–391, 393,\n399–401, 412, 450, 468, 469\nFROM_DAYS(), 478\nFROM_UNIXTIME(), 478\nGET_LOCK(), 479, 482\nGRANT, 26, 449–451, 473, 474GREATEST(), 479\nGROUP BY, 308, 309, 413, 414HA VING, 415HEX(), 479\nHOUR(), 479\nIF(), 479\nIF EXISTS, 466IFNULL(), 479\nIGNORE, 466IN, 394, 406INSERT, 28, 29, 31, 35, 36, 52, 94, 235,\n298, 416, 449, 457, 464,\n469–471, 507, 514\nINSERT(), 479\nINSTR(), 479, 480\nINTEGER, 25, 198, 204, 462, 463\nINTERSECT, 405, 406INTERVAL(), 479\nINTO OUTFILE, 399, 469IS NOT NULL, 397IS NULL, 397ISNULL(), 479\nJOIN, 469\nKILL, 472LAST_INSERT_ID(), 73, 474, 479\nLCASE(), 480\nLEAST(), 480\nLEFT(), 480\nLEFT OUTER JOIN, 404LENGTH(), 480\nLIKE, 45, 290, 395, 472, 473\nLIMIT, 398\nLOAD DATA, 29, 30, 399, 469, 470LOCAL, 30LOCATE(), 480\nLOCK, 473LOCK TABLES, 473LOG(), 480\nLOG10(), 480\nLONG, 464LONGBLOB, 462\nLONGTEXT, 462\nLPAD(), 480\nLTRIM(), 480\nMAX(), 414MEDIUM, 464MEDIUMBLOB, 462MEDIUMINT, 462, 463\nMEDIUMTEXT, 462\nMID(), 480, 483\nMIN(), 412\nMINUTE(), 480\nMOD(), 481\nMODIFY, 204MONTH(), 481\nMONTHNAME(), 481\nNOT, 394\nNOT NULL, 308, 398, 413, 469\nNOT NULL, 198–200, 204\nNOW(), 481\nNULL, 308, 391, 396–398, 404, 413,\n416, 469, 470, 482\nNUMERIC, 462, 463OCT(), 481\nIndex des commandes SQL\n 529\nOPTIMIZE TABLE, 467\nOR, 394, 397\nORDER BY, 393, 469PASSWORD(), 451, 481\nPERIOD_ADD(), 481\nPERIOD_DIFF(), 481\nPI(), 481\nPOW(), 481\nPOWER(), 481PRIMARY KEY, 199, 200\nQUARTER(), 481\nRADIANS(), 482\nRAND(), 393, 482\nREAL, 462, 463\nRELEASE_LOCK(), 482\nRENAME, 204\nREPEAT(), 482\nREPLACE, 469–471\nREPLACE(), 482\nREVERSE(), 482\nREVOKE, 449, 451, 474RIGHT(), 482\nROUND(), 482\nRPAD(), 482\nRTRIM(), 482\nSEC_TO_TIME(), 483\nSECOND(), 483\nSELECT, 31–33, 35, 235, 291, 292, 309,\n388, 391–393, 399, 401, 468,\n469, 471, 472, 474, 510, 511,514, 515\nSESSION_USER(), 484\nSET, 33, 47, 462, 465, 473\nSHOW, 472\nSIGN(), 483\nSIN(), 483\nSMALLINT, 462, 463SOUNDEX(), 483\nSPACE(), 483\nSQRT(), 483\nSTRCMP(), 483SUBSTRING(), 480, 483\nSUBSTRING_INDEX(), 483\nSYSDATE(), 390\nSYSTEM_USER(), 484\nTAN(), 483\nTEMPORARY, 467TEXT, 47, 198, 395, 462, 464, 467TIME, 198, 462, 464\nTIME_FORMAT(), 484\nTIME_TO_SECOND(), 484\nTIMESTAMP , 462, 464\nTINY, 464\nTINYBLOB, 462\nTINYINT, 462, 463TINYTEXT, 462\nTO_DAYS(), 484\nTRIM(), 484\nTRUNCATE(), 484\nUCASE(), 484\nUNION, 405UNIQUE, 200, 206\nUNIX_TIMESTAMP(), 484\nUNKNOWN, 396, 397UNLOCK TABLES, 473\nUNSIGNED, 463\nUPDATE, 32, 33, 52, 298, 417, 451,\n464, 471, 507\nUSAGE, 450, 451\nUSE, 27, 37, 450, 455, 471\nUSER(), 484\nVALUES, 29, 416VARCHAR, 25, 198, 204, 395, 462–464\nVERSION(), 484\nWEEK(), 484\nWHERE, 31–33, 201, 291, 292, 307,\n309, 388, 389, 393, 397, 399,\n401, 403, 406, 415, 417, 455,\n467, 468, 471\nYEAR, 462, 464\nYEAR(), 390, 484\nZEROFILL, 462, 463\n\nTable des figures\n1 B a r r e d ’ o u t i l s W e b D e v e l o p e r .................... x i x\n1 . 1 A r c h i t e c t u r e w e b.......................... 4\n1.2 Architecture basique d’une application web . . . . . . . . . . . . 8\n1 . 3 P r é s e n t a t i o n d ’ u n f o r m u l a i r e a v e c F i r e f o x ............. 91 . 4 S e r v e u r e t c l i e n t s d e M y S Q L . ................... 1 8\n1 . 5 A r c h i t e c t u r e d ’ u n s i t e w e b a v e c M y S Q L / P H P........... 2 4\n1.6 Page d’accueil de phpMyAdmin . . . . . . . . . . . . . . . . . . 34\n1 . 7 A c t i o n s s u r u n e b a s e a v e c p h p M y A d m i n ............. 3 5\n2.1 Le schéma de l’application d’envoi d’un e-mail . . . . . . . . . . 65\n2 . 2 F o r m u l a i r e d ’ e n v o i d ’ u n e - m a i l................... 6 6\n2.3 Afﬁchage du texte d’un e-mail comprenant des balises . . . . . . 75\n2.4 Formulaire en modiﬁcation du ﬁlm Vertigo ............. 8 1\n2 . 5 P a g e d e m i s e à j o u r d e s ﬁ l m s .................... 8 32 . 6 L e f o r m u l a i r e , a u d é b u t d e l a s e s s i o n................ 1 0 3\n2 . 7 A p r è s c h o i x d u p l a t e t d e l ’ e n t r é e ................. 1 0 6\n2 . 8 L e m e n u e s t c h o i s i ......................... 1 0 62.9 Le formulaire d’interrogation, avec afﬁchage multi-pages . . . . . 114\n3 . 1 A p p l i c a t i o n a v e c o b j e t s . ...................... 1 1 8\n3 . 2 G e s t i o n d e s e x c e p t i o n s . ....................... 1 2 4\n3 . 3 A f ﬁ c h a g e d e s d e u x t a b l e a u x . .................... 1 4 6\n3.4 Conception de la classe Formulaire ............... 1 5 3\n3.5 Afﬁchage du formulaire de démonstration. . . . . . . . . . . . . . 156\n3.6 Organisation de la classe Formulaire ............... 1 5 7\n532\n Table des figures\n3.7 Afﬁchage de l’interface sur la table Carte. ............. 1 7 0\n4.1 Schéma de la base de données Films ................ 1 8 5\n4 . 2 R e p r é s e n t a t i o n d e s e n t i t é s ..................... 1 8 8\n4 . 3 A s s o c i a t i o n e n t r e d e u x e n s e m b l e s .................. 1 8 94 . 4 R e p r é s e n t a t i o n d e l ’ a s s o c i a t i o n . .................. 1 8 94.5 Association (Acteur,Film) .................... 1 9 0\n4.6 Associations entre Artiste etFilm. ................. 1 9 0\n4 . 7 A s s o c i a t i o n t e r n a i r e . ........................ 1 9 14 . 8 G r a p h e d ’ u n e a s s o c i a t i o n t e r n a i r e .................. 1 9 14.9 Transformation d’une association ternaire en entité. . . . . . . . . 192\n5.1 Environnement de développement Eclipse pour PHP . . . . . . . 209\n5.2 Conﬁguration de la connexion au serveur CVS . . . . . . . . . . 211\n5 . 3 E x p l o r a t i o n d u r é p e r t o i r e d i s t a n t C V S............... 2 1 1\n5.4 Validation de modiﬁcations, et transfert sur le serveur CVS . . . . 2125.5 Exemple de page produite par PhpDoc . . . . . . . . . . . . . . . 213\n6.1 Aperçu général d’une application MVC . . . . . . . . . . . . . . 242\n6 . 2 O r g a n i s a t i o n d u c o d e........................ 2 4 4\n6.3 Tout le code HTML est produit avec PHP . . . . . . . . . . . . . . 252\n6.4 Afﬁchage du document résultat . . . . . . . . . . . . . . . . . . . 2556 . 5 T e m p l a t e c o n t e n a n t u n e l i s t e .................... 2 5 66 . 6 P a g e d e r e c h e r c h e d e s ﬁ l m s..................... 2 6 26 . 7 L e r é s u l t a t d ’ u n e r e c h e r c h e..................... 2 6 2\n6.8 Formulaire d’inscription sur le site . . . . . . . . . . . . . . . . . 273\n7.1 Page d’accueil après identiﬁcation d’un internaute . . . . . . . . . 288\n7 . 2 F o r m u l a i r e d e r e c h e r c h e d e s ﬁ l m s ................. 2 8 97.3 Formulaire de notation des ﬁlms . . . . . . . . . . . . . . . . . . 2957 . 4 P r é s e n t a t i o n d ’ u n ﬁ l m ........................ 3 0 17.5 Formulaire d’accès aux prédictions . . . . . . . . . . . . . . . . . 310\n7.6 Liste des ﬁlms les plus appréciés . . . . . . . . . . . . . . . . . . 312\n8.1 Import et export de données XML dans le W\nEBSCOPE ...... 3 1 8\n8 . 2 R é s u l t a t d e l a t r a n s f o r m a t i o n X S L T ................ 3 5 4\nTable des figures\n 533\n9.1 Page d’accueil du ZS COPE ..................... 3 6 1\n9.2 Organisation (minimale) du code pour une application Zend . . . 361\n10.1 Un échantillon de la base Films ................... 3 8 8\n10.2 Table FilmXArtiste , déﬁnie par la clause FROM Film, Artiste. . 400\nIn f oPr o\nwww.dunod.comPhIlIPPe RIGAUX \nest professeur des \nuniversités à Paris-Dauphine. Il enseigne les bases de données ainsi que les techniques de programmation et les langages web. Il intervient également comme consultant en entreprises et est l’auteur de cinq livres en français et en anglais et de plus de cinquante publications internationales.Ce livre s’adresse à tous les développeurs web, aux étudiants en \ninformatique et à tous ceux qui veulent s’initier à la pratique de ces deux piliers du monde Open Source que sont MySQl et PhP.\nle principal objectif de ce livre est d’exposer de manière claire \net précise les techniques utilisées pour la création de sites web \ninteractifs avec MySQl et PhP.\nPlutôt que de donner des recettes sans justification il cherche \nà expliquer au lecteur pourquoi et comment recourir à telle \ntechnique plutôt qu’à telle autre. Il lui permet ainsi de mieux assimiler ses connaissances et d’être capable de les réutiliser dans d’autres contextes.\nUn site web complète ce livre avec des exemples, des liens, des \ncompléments utiles et tout le code de l’application consacrée au cinéma qui sert d’exemple tout au long du livre.\nLes trois premières éditions de cet ouvrage, qui est rapidement \ndevenu le titre de référence en français sur MySQL et PHP, avaient été publiées par O’Reilly France.\nCette quatrième édition s’enrichit d’un nouveau chapitre sur \nles environnements de programmation PhP/MySQl et introduit notamment le Zend Framework.PRatiQ ue de MySQL et PHP\nConception et réalisation  \nde sites web dynamiquesPhilippe Rigaux\n4e édition\nMySQL  PHP\ntype d’ouvrage\nl’essentiel se formerretours\nd’expérience\n& développementmanagement des systèmes \nd’information\napplications \nmétiers\nétudes, développement, \nintégration\nexploitation  \net administration\nréseaux \n& télécoms\nISBN 978-2-10-053752-5",
  "file_type": "document",
  "original_path": "data/uploads\\support_Pratique de MySQL et PHP.pdf"
}